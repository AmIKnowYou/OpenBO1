#pragma once

// Windows library
#include <Windows.h>               // Declarations for all of the functions in the Windows API

// Third party libraries
#include <d3d9.h>
#include <detours.h>
#include <zynamic/zynamic>
#include <git.h>

// Concepts library
// #include <concepts>             // Fundamental library concepts (C++20)

// Coroutines library
// #include <coroutine>            // Coroutine support library (C++20)

// Utilities library
// #include <any>                  // std::any class (C++17)
// #include <bitset>               // std::bitset class template
// #include <chrono>               // C++ time utilites (C++11)
// #include <compare>              // Three-way comparison operator support (C++20)
// #include <csetjmp>              // Macro (and function) that saves (and jumps) to an execution context
// #include <csignal>              // Functions and macro constants for signal management
// #include <cstdarg>              // Handling of variable length argument lists
// #include <cstddef>              // Standard macros and typedefs
// #include <cstdlib>              // General purpose utilities: program control, dynamic memory allocation, random numbers, sort and search
// #include <ctime>                // C-style time/date utilites

// #include <expected>             // std::expected class template (C++23)
#include <functional>              // Function objects, Function invocations, Bind operations and Reference wrappers
// #include <initializer_list>     // std::initializer_list class template (C++11)
// #include <optional>             // std::optional class template (C++17)
// #include <source_location>      // Supplies means to obtain source code location (C++20)
// #include <tuple>                // std::tuple class template (C++11)
// #include <type_traits>          // Compile-time type information (C++11)
// #include <typeindex>            // std::type_index (C++11)
// #include <typeinfo>             // Runtime type information utilities
// #include <utility>              // Various utility components
// #include <variant>              // std::variant class template (C++17)
// #include <version>              // Supplies implementation-dependent library information (C++20)

// Dynamic memory management
// #include <memory>               // High-level memory management utilities
// #include <memory_resource>      // Polymorphic allocators and memory resources (C++17)
// #include <new>                  // Low-level memory management utilities
// #include <scoped_allocator>     // Nested allocator class (C++11)

// Numeric limits
// #include <cfloat>               // Limits of floating-point types
// #include <cinttypes>            // Formatting macros, intmax_t and uintmax_t math and conversions (C++11)
// #include <climits>              // Limits of integral types
// #include <cstdint>              // Fixed-width integer types and limits of other types (C++11)
// #include <limits>               // Uniform way to query properties of arithmetic types

// Error handling
// #include <cassert>              // Conditionally compiled macro that compares its argument to zero
// #include <cerrno>               // Macro containing the last error number
// #include <exception>            // Exception handling utilities
// #include <stdexcept>            // Standard exception objects
// #include <system_error>         // Defines std::error_code, a platform-dependent error code (C++11)
// #include <stacktrace>           // Stacktrace library (C++23)

// Strings library
// #include <cctype>               // Functions to determine the category of narrow characters
// #include <charconv>             // std::to_chars and std::from_chars (C++17)
// #include <cstring>              // Various narrow character string handling functions
// #include <cuchar>               // C-style Unicode character conversion functions (C++11)
// #include <cwchar>               // Various wide and multibyte string handling functions
// #include <cwctype>              // Functions to determine the catagory of wide characters
#include <format>                  // Formatting library including std::format (C++20)
// #include <string>               // std::basic_string class template
// #include <string_view>          // std::basic_string_view class template (C++17)
// using namespace std::literals;  // operator""s defined in header <string>

// Containers library
// #include <array>                // std::array container (C++11)
// #include <deque>                // std::deque container
// #include <forward_list>         // std::forward_list container (C++11)
// #include <list>                 // std::list container
// #include <map>                  // std::map and std::multimap associative containers
// #include <queue>                // std::queue and std::priority_queue container adaptors
#include <set>                     // std::set and std::multiset associative containers
// #include <span>                 // std::span view (C++20)
// #include <stack>                // std::stack container adaptor
// #include <unordered_map>        // std::unordered_map and std::unordered_multimap unordered associative containers (C++11)
// #include <unordered_set>        // std::unordered_set and std::unordered_multiset unordered associative containers (C++11)
// #include <vector>               // std::vector container

//  Iterators library
// #include <iterator>             // Range iterators

// Ranges library
// #include <ranges>               // Range access, primitives, requirements, utilities and adaptors (C++20)

// Algorithms library
// #include <algorithm>            // Algorithms that operate on ranges
// #include <execution>            // Predefined execution policies for parallel versions of the algorithms (C++17)

// Numerics library
// #include <bit>                  // Bit manipulation functions (C++20)
// #include <cfenv>                // Floating-point environment access functions (C++11)
// #include <cmath>                // Common mathematics functions
// #include <complex>              // Complex number type
// #include <numbers>              // Math constants (C++20)
// #include <numeric>              // Numeric operations on values in ranges
// #include <random>               // Random number generators and distributions (C++11)
// #include <ratio>                // Compile-time rational arithmetic (C++11)
// #include <valarray>             // Class for representing and manipulating arrays of values

// Localization library
// #include <clocale>              // C localization utilities
// #include <codecvt>              // Unicode conversion facilities (C++11) (deprecated in C++17)
// #include <locale>               // Localization utilities

// Input/output library
// #include <cstdio>               // C-style input-output functions
#include <fstream>                 // std::basic_fstream, std::basic_ifstream, std::basic_ofstream class templates and several typedefs
// #include <iomanip>              // Helper functions to control the format of input and output
// #include <ios>                  // std::ios_base class, std::basic_ios class template and several typedefs
// #include <iosfwd>               // Forward declarations of all classes in the input/output library
// #include <iostream>             // Several standard stream objects
// #include <istream>              // std::basic_istream class template and several typedefs
// #include <ostream>              // std::basic_ostream, std::basic_iostream class templates and several typedefs
// #include <spanstream>           // std::basic_spanstream, std::basic_ispanstream, std::basic_ospanstream class templates and typedefs (C++23)
// #include <sstream>              // std::basic_stringstream, std::basic_istringstream, std::basic_ostringstream class templates and several typedefs
// #include <streambuf>            // std::basic_streambuf class template
// #include <strstream>            // std::strstream, std::istrstream, std::ostrstream (deprecated in C++98)
// #include <syncstream>           // std::basic_osyncstream, std::basic_syncbuf, and typedefs (C++20)

// Filesystem library
#include <filesystem>              // std::path class and supporting functions (C++17)

// Regular Expressions library
// #include <regex>                // Classes, algorithms and iterators to support regular expression processing (C++11)

// Atomic Operations library
// #include <atomic>               // Atomic operations library (C++11)

// Thread support library
// #include <barrier>              // Barriers (C++20)
// #include <condition_variable>   // Thread waiting conditions (C++11)
// #include <future>               // Primitives for asynchronous computations (C++11)
// #include <latch>                // Latches (C++20)
// #include <mutex>                // Mutual exclusion primitives (C++11)
// #include <semaphore>            // Semaphores (C++20)
// #include <shared_mutex>         // Shared mutual exclusion primitives (C++14)
// #include <stop_token>           // Stop tokens for std::jthread (C++20)
// #include <thread>               // std::thread class and supporting functions (C++11)

template<size_t S> struct get {};
template<size_t BIT_COUNT> struct bitarray
{
  enum
  {
    BITS_PER_WORD = sizeof(unsigned int) * 8,
    WORD_COUNT = (BIT_COUNT + BITS_PER_WORD - 1) / BITS_PER_WORD,
  };

  // N bits -> array of size int(N/32) rounded up
  unsigned int array[WORD_COUNT];

  // /qcommon/bitarray.h:108
  bool testBit(unsigned int pos)
  {
    return (array[pos / BITS_PER_WORD] & (0x80000000 >> (pos & 0x1F))) != 0;
  }

  // /qcommon/bitarray.h:114
  void setBit(unsigned int pos)
  {
    array[pos / BITS_PER_WORD] |= (0x80000000 >> (pos & 0x1F));
  }
};

struct GraphFloat;
struct playerEntity_t;
struct refdef_s;
struct item_ent_t;
struct trigger_ent_t;
struct mover_ent_t;
struct corpse_ent_t;
struct missile_ent_t;
struct spawner_ent_t;
struct tagInfo_s;
struct scr_vehicle_s;
struct vehicle_cache_t;
struct item_ent_t;
// struct IUnknown_vtbl;
union FxElemVisuals;
struct FxTrailVertex;
struct FxTrailDef;
struct FxElemDef;
struct gentity_s;
struct pathlink_s;
struct pathnode_t;
struct sentient_s;
// struct scr_animscript_t;
// struct visitor_base_t_vtbl;
struct cbrush_t;
struct CollisionAabbTree;
struct cmodel_t;
// struct TraceThreadInfo;
// struct cached_simplex_info;
// struct phys_memory_heap;
// struct contact_manifold_mesh_point;
// struct phys_contact_manifold;
// struct phys_gjk_geom_vtbl;
// struct gjk_base_t;
// struct gjkcc_input_t;
struct actor_s;
struct TurretInfo;
// struct vehicle_custom_path_t;
// struct NitrousVehicle;
struct scr_vehicle_s;
// struct tagInfo_s;
// union $69C5C147512A8F06DC355830F4729073;
// struct GraphFloat;
// struct vehicle_info_t;
// struct pulse_sum_node;
// struct rigid_body;
// struct rigid_body_constraint_point;
// struct rigid_body_constraint_hinge;
// struct rigid_body_constraint_distance;
// struct rigid_body_constraint_ragdoll;
// struct pulse_sum_normal;
// struct rigid_body_constraint_wheel;
// struct rigid_body_constraint_angular_actuator;
// struct rigid_body_constraint_upright;
// struct rigid_body_constraint_custom_orientation;
// struct user_rigid_body;
// struct rigid_body_constraint_custom_path;
// struct contact_point_info::pulse_sum_cache_info;
// struct contact_point_info;
// struct phys_collision_pair;
// struct broad_phase_base;
// struct broad_phase_info;
// struct phys_gjk_cache_info;
// struct rigid_body_constraint_contact;
// struct PhysObjUserData;
// struct TaskDefinition;
// struct bdReferencable_vtbl;
// struct bdByteBuffer;
// struct bdTaskResult;
// struct bdTaskResult_vtbl;
// struct bdTaskResultProcessor;
// struct bdTaskResultProcessor_vtbl;
// struct bdRemoteTask;
// struct tagTYPEDESC;
// struct tagARRAYDESC;
// struct tagVARIANT;
// struct tagSAFEARRAY;
// struct IRecordInfo;
// struct _RTL_CRITICAL_SECTION;
// struct bdNATTravListener_vtbl;
// struct bdQoSProbeInfo;
// struct bdQoSProbeListener_vtbl;
// struct bdAntiCheatChallengeParam_vtbl;
struct menuDef_t;
struct UIAnimInfo;
// struct bdNetImpl_vtbl;
// struct bdSocket;
// struct bdSocket_vtbl;
// struct bdString;
// struct bdSecurityKeyMapListener_vtbl;
// struct bdSocketRouter;
// struct bdPacketInterceptor;
// struct bdPacketInterceptor_vtbl;
// struct bdAddressMap;
// struct bdServiceBandwidthArbitrator;
// struct bdNATTravClient;
// struct bdIPDiscoveryClient;
// struct bdNATTypeDiscoveryClient;
// struct bdRunnable_vtbl;
// struct bdThread;
// struct bdGetHostByName;
// struct _s__RTTIBaseClassArray;
// struct _s__RTTIClassHierarchyDescriptor;
// struct bdTaskByteBuffer;
// struct bdLobbyConnection;
// struct bdCypher_vtbl;
// struct bdLobbyConnectionListener_vtbl;
// struct bdDTLSHeader_vtbl;
// struct bdAntiCheatChallenge_vtbl;
// struct bdRemoteTaskManager_vtbl;
// struct bdSingletonRegistryImpl_vtbl;
// struct std::exception_vtbl;
// struct bdDownloadInterceptor_vtbl;
// struct bdDTLSAssociation_vtbl;
// struct bdAntiCheatResponses_vtbl;
// struct bdHash_vtbl;
// struct tagPROPVARIANT;
// struct bdSessionParams_vtbl;
// struct bdContentStreamingBase_vtbl;
// struct bdUploadInterceptor;
// struct bdUploadInterceptor_vtbl;
// struct bdFileID;
// struct bdLobbyEventHandler_vtbl;
// struct tlThread_vtbl;
// struct jqBatch;
// struct jqAtomicQueue<jqBatch,32>::NodeType;
// struct jqAtomicQueue<jqBatch,32>::NodeBlockEntry;
// struct jqAtomicQueue<jqBatch,32>;
// struct pulse_sum_point;
// struct pulse_sum_angular;
// struct pulse_sum_wheel;
// struct pulse_sum_contact;
// struct pulse_sum_contact_point;
// struct GfxViewInfo;
// struct GfxQuadMeshData;
// struct DynSModelClientView;
// struct DynSModelGfxState;
// struct GfxDebugPoly;
// struct GfxDebugPlume;
// struct GfxBackEndData;
struct GfxPortal;
struct GfxCell;
// struct std::_Aux_cont;
// struct GlassShard;
// struct GlassShard::Outline::Vertex;
// struct GlassPhysics;
// struct ShardGroup;
// struct gjk_collision_visitor_vtbl;
// struct type_info;
// struct type_info_vtbl;
// struct std::tr1::_Ref_count_base_vtbl;
// struct phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal;
// struct phys_inplace_avl_tree_node<broad_phase_environment_info>;
// struct phys_auto_activate_callback_vtbl;
// struct broad_phase_terrain_query_callback_vtbl;
struct pathnode_tree_t;
// struct bdLinkable_vtbl;
// struct gz_header_s;
// struct static_tree_desc_s;
// struct internal_state;
// struct CCallbackBase_vtbl;
// struct LiveSteamP2P;
// struct P2PSessionRequest_t;
// struct P2PSessionState_t;
// struct ISteamNetworking_vtbl;
// struct LiveSteamServer;
// struct SteamServersConnected_t;
// struct SteamServersDisconnected_t;
// struct GSPolicyResponse_t;
// struct GSClientApprove_t;
// struct GSClientDeny_t;
// struct GSClientKick_t;
// struct ISteamGameServer_vtbl;
// struct ISteamFriends_vtbl;
// struct ISteamMasterServerUpdater_vtbl;
// struct ISteamUser_vtbl;
// struct LiveSteamClient;
// struct CSteamAchievements;
// struct UserStatsReceived_t;
// struct UserStatsStored_t;
// struct UserAchievementStored_t;
// struct ISteamUtils_vtbl;
// struct ISteamUserStats_vtbl;
// struct ISteamRemoteStorage_vtbl;
// struct ISteamMatchmaking;
// struct ISteamMatchmaking_vtbl;
// struct ISteamMatchmakingServerListResponse;
// struct ISteamMatchmakingServerListResponse_vtbl;
// struct ISteamMatchmakingServers;
// struct ISteamMatchmakingPingResponse;
// struct ISteamMatchmakingPingResponse_vtbl;
// struct ISteamMatchmakingPlayersResponse;
// struct ISteamMatchmakingPlayersResponse_vtbl;
// struct ISteamMatchmakingRulesResponse;
// struct ISteamMatchmakingRulesResponse_vtbl;
// struct ISteamMatchmakingServers_vtbl;
// struct ISteamApps;
// struct ISteamApps_vtbl;
// struct ISteamClient_vtbl;
// struct XAUDIO2_SEND_DESCRIPTOR;
// struct XAUDIO2_VOICE_SENDS;
// struct XAUDIO2_EFFECT_DESCRIPTOR;
// struct XAUDIO2_EFFECT_CHAIN;
// struct XAUDIO2_FILTER_PARAMETERS;
// struct IXAudio2Voice_vtbl;
// struct IXAudio2EngineCallback_vtbl;
// struct IXAudio2VoiceCallback_vtbl;
// struct generic_avl_map_node_t;
// struct gjk_slide_move_input_t_vtbl;
// struct scr_block_s;
// struct Scr_WatchElement_s;
// struct flameGeneric_s;
// struct flameStream_s;
// struct flameRender_s;
// struct flameRenderList_s;
// struct flameChunk_s;
// struct BINKFRAMEBUFFERS;
// struct BINKSND;
// struct BINK;
// struct ID3DXInclude_vtbl;
// struct pulse_sum_constraint_solver::temp_user_rigid_body;
// struct pulse_sum_constraint_solver::user_rigid_body_restore_info;
// struct phys_inplace_avl_tree_node<auto_rigid_body>;
// struct CPingThread_vtbl;
// struct fileInIwd_s;
// struct iwd_t;
// struct directory_t;
// struct std::locale::facet_vtbl;
// struct std::locale::_Locimp;
// struct std::locale;
// struct std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >_vtbl;
// struct std::ios_base_vtbl;
// struct std::ios_base::_Iosarray;
// struct std::ios_base::_Fnarray;
// struct std::basic_streambuf<char,std::char_traits<char> >_vtbl;
// struct std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >;
// struct MapProfileElement;
// struct SpeexBits;
// struct FxTriGroup;
// struct bdGameInfo;
// struct bdCreatorBase<bdGameInfo>_vtbl;
// struct bdLANDiscoveryListener_vtbl;
// struct bdLANDiscoveryClient_vtbl;
// struct axis_aligned_sweep_and_prune::sap_node;
// struct jpeg_common_struct;
// struct jvirt_sarray_control;
// struct backing_store_struct;
// struct jvirt_barray_control;
// struct jpeg_memory_mgr;
// struct jpeg_progress_mgr;
// struct JQUANT_TBL;
// struct JHUFF_TBL;
// struct jpeg_component_info;
// struct jpeg_marker_struct;
// struct jpeg_decompress_struct;
// struct jpeg_decomp_master;
// struct jpeg_d_main_controller;
// struct jpeg_d_coef_controller;
// struct jpeg_d_post_controller;
// struct jpeg_input_controller;
// struct jpeg_marker_reader;
// struct jpeg_entropy_decoder;
// struct jpeg_inverse_dct;
// struct jpeg_upsampler;
// struct jpeg_color_deconverter;
// struct jpeg_color_quantizer;
// struct jpeg_destination_mgr;
// struct jpeg_scan_info;
// struct jpeg_comp_master;
// struct jpeg_c_main_controller;
// struct jpeg_c_prep_controller;
// struct jpeg_c_coef_controller;
// struct jpeg_marker_writer;
// struct jpeg_color_converter;
// struct jpeg_downsampler;
// struct jpeg_forward_dct;
// struct jpeg_entropy_encoder;
// union small_pool_struct;
// union large_pool_struct;
// struct std::basic_streambuf<unsigned short,std::char_traits<unsigned short> >_vtbl;
// struct DNameNode_vtbl;

// /* 1 */
// enum bdLobbyErrorCode : __int32
// {
//   BD_NO_ERROR = 0x0,
//   BD_TOO_MANY_TASKS = 0x1,
//   BD_NOT_CONNECTED = 0x2,
//   BD_SEND_FAILED = 0x3,
//   BD_HANDLE_TASK_FAILED = 0x4,
//   BD_START_TASK_FAILED = 0x5,
//   BD_RESULT_EXCEEDS_BUFFER_SIZE = 0x64,
//   BD_ACCESS_DENIED = 0x65,
//   BD_EXCEPTION_IN_DB = 0x66,
//   BD_MALFORMED_TASK_HEADER = 0x67,
//   BD_INVALID_ROW = 0x68,
//   BD_EMPTY_ARG_LIST = 0x69,
//   BD_PARAM_PARSE_ERROR = 0x6A,
//   BD_PARAM_MISMATCHED_TYPE = 0x6B,
//   BD_SERVICE_NOT_AVAILABLE = 0x6C,
//   BD_CONNECTION_RESET = 0x6D,
//   BD_INVALID_USER_ID = 0x6E,
//   BD_LOBBY_PROTOCOL_VERSION_FAILURE = 0x6F,
//   BD_LOBBY_INTERNAL_FAILURE = 0x70,
//   BD_LOBBY_PROTOCOL_ERROR = 0x71,
//   BD_ASYNCHRONOUS_ERROR = 0xC8,
//   BD_MEMBER_NO_PROPOSAL = 0x12C,
//   BD_TEAMNAME_ALREADY_EXISTS = 0x12D,
//   BD_MAX_TEAM_MEMBERSHIPS_LIMITED = 0x12E,
//   BD_MAX_TEAM_OWNERSHIPS_LIMITED = 0x12F,
//   BD_NOT_A_TEAM_MEMBER = 0x130,
//   BD_INVALID_TEAM_ID = 0x131,
//   BD_INVALID_TEAM_NAME = 0x132,
//   BD_NOT_A_TEAM_OWNER = 0x133,
//   BD_NOT_AN_ADMIN_OR_OWNER = 0x134,
//   BD_MEMBER_PROPOSAL_EXISTS = 0x135,
//   BD_MEMBER_EXISTS = 0x136,
//   BD_TEAM_FULL = 0x137,
//   BD_VULGAR_TEAM_NAME = 0x138,
//   BD_TEAM_USERID_BANNED = 0x139,
//   BD_TEAM_EMPTY = 0x13A,
//   BD_INVALID_TEAM_PROFILE_QUERY_ID = 0x13B,
//   BD_INVALID_LEADERBOARD_ID = 0x190,
//   BD_INVALID_STATS_SET = 0x191,
//   BD_EMPTY_STATS_SET_IGNORED = 0x193,
//   BD_NO_DIRECT_ACCESS_TO_ARBITRATED_LBS = 0x194,
//   BD_STATS_WRITE_PERMISSION_DENIED = 0x195,
//   BD_STATS_WRITE_TYPE_DATA_TYPE_MISMATCH = 0x196,
//   BD_NO_STATS_FOR_USER = 0x197,
//   BD_INVALID_ACCESS_TO_UNRANKED_LB = 0x198,
//   BD_INVALID_TITLE_ID = 0x1F4,
//   BD_MESSAGING_INVALID_MAIL_ID = 0x258,
//   BD_SELF_BLOCK_NOT_ALLOWED = 0x259,
//   BD_GLOBAL_MESSAGE_ACCESS_DENIED = 0x25A,
//   BD_AUTH_NO_ERROR = 0x2BC,
//   BD_AUTH_BAD_REQUEST = 0x2BD,
//   BD_AUTH_SERVER_CONFIG_ERROR = 0x2BE,
//   BD_AUTH_BAD_TITLE_ID = 0x2BF,
//   BD_AUTH_BAD_ACCOUNT = 0x2C0,
//   BD_AUTH_ILLEGAL_OPERATION = 0x2C1,
//   BD_AUTH_INCORRECT_LICENSE_CODE = 0x2C2,
//   BD_AUTH_CREATE_USERNAME_EXISTS = 0x2C3,
//   BD_AUTH_CREATE_USERNAME_ILLEGAL = 0x2C4,
//   BD_AUTH_CREATE_USERNAME_VULGAR = 0x2C5,
//   BD_AUTH_CREATE_MAX_ACC_EXCEEDED = 0x2C6,
//   BD_AUTH_MIGRATE_NOT_SUPPORTED = 0x2C7,
//   BD_AUTH_TITLE_DISABLED = 0x2C8,
//   BD_AUTH_ACCOUNT_EXPIRED = 0x2C9,
//   BD_AUTH_ACCOUNT_LOCKED = 0x2CA,
//   BD_AUTH_UNKNOWN_ERROR = 0x2CB,
//   BD_AUTH_INCORRECT_PASSWORD = 0x2CC,
//   BD_AUTH_IP_NOT_IN_ALLOWED_RANGE = 0x2CD,
//   BD_AUTH_WII_TOKEN_VERIFICATION_FAILED = 0x2CE,
//   BD_AUTH_WII_AUTHENTICATION_FAILED = 0x2CF,
//   BD_AUTH_IP_KEY_LIMIT_REACHED = 0x2D0,
//   BD_NO_PROFILE_INFO_EXISTS = 0x320,
//   BD_FRIENDSHIP_NOT_REQUSTED = 0x384,
//   BD_NOT_A_FRIEND = 0x385,
//   BD_SELF_FRIENDSHIP_NOT_ALLOWED = 0x387,
//   BD_FRIENDSHIP_EXISTS = 0x388,
//   BD_PENDING_FRIENDSHIP_EXISTS = 0x389,
//   BD_USERID_BANNED = 0x38A,
//   BD_FRIENDS_FULL = 0x38C,
//   BD_FRIENDS_NO_RICH_PRESENCE = 0x38D,
//   BD_RICH_PRESENCE_TOO_LARGE = 0x38E,
//   BD_NO_FILE = 0x3E8,
//   BD_PERMISSION_DENIED = 0x3E9,
//   BD_FILESIZE_LIMIT_EXCEEDED = 0x3EA,
//   BD_FILENAME_MAX_LENGTH_EXCEEDED = 0x3EB,
//   BD_CHANNEL_DOES_NOT_EXIST = 0x44D,
//   BD_CHANNEL_ALREADY_SUBSCRIBED = 0x44E,
//   BD_CHANNEL_NOT_SUBSCRIBED = 0x44F,
//   BD_CHANNEL_FULL = 0x450,
//   BD_CHANNEL_SUBSCRIPTIONS_FULL = 0x451,
//   BD_CHANNEL_NO_SELF_WHISPERING = 0x452,
//   BD_EVENT_DESC_TRUNCATED = 0x4B0,
//   BD_CONTENT_UNLOCK_UNKNOWN_ERROR = 0x514,
//   BD_UNLOCK_KEY_INVALID = 0x515,
//   BD_UNLOCK_KEY_ALREADY_USED_UP = 0x516,
//   BD_KEY_ARCHIVE_INVALID_WRITE_TYPE = 0x5DC,
//   BD_BANDWIDTH_TEST_TRY_AGAIN = 0x712,
//   BD_BANDWIDTH_TEST_STILL_IN_PROGRESS = 0x713,
//   BD_BANDWIDTH_TEST_NOT_PROGRESS = 0x714,
//   BD_BANDWIDTH_TEST_SOCKET_ERROR = 0x715,
//   BD_INVALID_SESSION_NONCE = 0x76D,
//   BD_ARBITRATION_FAILURE = 0x76F,
//   BD_ARBITRATION_USER_NOT_REGISTERED = 0x771,
//   BD_ARBITRATION_NOT_CONFIGURED = 0x772,
//   BD_CONTENTSTREAMING_FILE_NOT_AVAILABLE = 0x7D0,
//   BD_CONTENTSTREAMING_STORAGE_SPACE_EXCEEDED = 0x7D1,
//   BD_CONTENTSTREAMING_NUM_FILES_EXCEEDED = 0x7D2,
//   BD_CONTENTSTREAMING_UPLOAD_BANDWIDTH_EXCEEDED = 0x7D3,
//   BD_CONTENTSTREAMING_FILENAME_MAX_LENGTH_EXCEEDED = 0x7D4,
//   BD_CONTENTSTREAMING_MAX_THUMB_DATA_SIZE_EXCEEDED = 0x7D5,
//   BD_CONTENTSTREAMING_DOWNLOAD_BANDWIDTH_EXCEEDED = 0x7D6,
//   BD_CONTENTSTREAMING_NOT_ENOUGH_DOWNLOAD_BUFFER_SPACE = 0x7D7,
//   BD_CONTENTSTREAMING_SERVER_NOT_CONFIGURED = 0x7D8,
//   BD_CONTENTSTREAMING_INVALID_APPLE_RECEIPT = 0x7DA,
//   BD_CONTENTSTREAMING_APPLE_STORE_NOT_AVAILABLE = 0x7DB,
//   BD_CONTENTSTREAMING_APPLE_RECEIPT_FILENAME_MISMATCH = 0x7DC,
//   BD_CONTENTSTREAMING_HTTP_ERROR = 0x7E4,
//   BD_CONTENTSTREAMING_FAILED_TO_START_HTTP = 0x7E5,
//   BD_VOTERANK_ERROR_EMPTY_RATING_SUBMISSION = 0x7EE,
//   BD_VOTERANK_ERROR_MAX_VOTES_EXCEEDED = 0x7EF,
//   BD_VOTERANK_ERROR_INVALID_RATING = 0x7F0,
//   BD_MAX_NUM_TAGS_EXCEEDED = 0x82A,
//   BD_TAGGED_COLLECTION_DOES_NOT_EXIST = 0x82B,
//   BD_INVALID_QUERY_ID = 0x834,
//   BD_NO_ENTRY_TO_UPDATE = 0x835,
//   BD_SESSION_INVITE_EXISTS = 0x836,
//   BD_INVALID_SESSION_ID = 0x837,
//   BD_ATTACHMENT_TOO_LARGE = 0x838,
//   BD_INVALID_GROUP_ID = 0xAF0,
//   BD_TWITTER_AUTH_ATTEMPT_FAILED = 0xDAD,
//   BD_TWITTER_AUTH_TOKEN_INVALID = 0xDAE,
//   BD_TWITTER_UPDATE_LIMIT_REACHED = 0xDAF,
//   BD_TWITTER_UNAVAILABLE = 0xDB0,
//   BD_TWITTER_ERROR = 0xDB1,
//   BD_TWITTER_TIMED_OUT = 0xDB2,
//   BD_TWITTER_DISABLED_FOR_USER = 0xDB3,
//   BD_TWITTER_ACCOUNT_AMBIGUOUS = 0xDB4,
//   BD_TWITTER_MAXIMUM_ACCOUNTS_REACHED = 0xDB5,
//   BD_FACEBOOK_AUTH_ATTEMPT_FAILED = 0xE11,
//   BD_FACEBOOK_AUTH_TOKEN_INVALID = 0xE12,
//   BD_FACEBOOK_PHOTO_DOES_NOT_EXIST = 0xE13,
//   BD_FACEBOOK_PHOTO_INVALID = 0xE14,
//   BD_FACEBOOK_PHOTO_ALBUM_FULL = 0xE15,
//   BD_FACEBOOK_UNAVAILABLE = 0xE16,
//   BD_FACEBOOK_ERROR = 0xE17,
//   BD_FACEBOOK_TIMED_OUT = 0xE18,
//   BD_FACEBOOK_DISABLED_FOR_USER = 0xE19,
//   BD_FACEBOOK_ACCOUNT_AMBIGUOUS = 0xE1A,
//   BD_FACEBOOK_MAXIMUM_ACCOUNTS_REACHED = 0xE1B,
//   BD_APNS_USER_NOT_REGISTERED = 0xE74,
//   BD_APNS_INVALID_PAYLOAD = 0xE75,
//   BD_CRUX_ERROR = 0xF3D,
//   BD_CRUX_EMAIL_PASSWORD_INVALID = 0xF3E,
//   BD_CRUX_EMAIL_INVALID = 0xF3F,
//   BD_CRUX_BIRTH_DATE_INVALID = 0xF40,
//   BD_CRUX_BIRTH_DATE_NOT_ALLOWED = 0xF41,
//   BD_CRUX_PASSWORD_INVALID = 0xF42,
//   BD_CRUX_PLATFORM_ID_INVALID = 0xF43,
//   BD_CRUX_PLATFORM_UID_EXISTS = 0xF44,
//   BD_CRUX_COMMUNITY_ID_INVALID = 0xF45,
//   BD_CRUX_COMMUNITY_USERNAME_INVALID = 0xF46,
//   BD_CRUX_COMMUNITY_USERNAME_EXISTS = 0xF47,
//   BD_CRUX_TITLE_ID_INVALID = 0xF48,
//   BD_CRUX_TITLE_UID_EXISTS = 0xF49,
//   BD_MAX_ERROR_CODE = 0xF4A,
// };

// /* 2 */
// enum GamePadStick : __int32
// {
//   GPAD_INVALID = 0x0,
//   GPAD_LX = 0x40000000,
//   GPAD_LY = 0x40000001,
//   GPAD_RX = 0x40000002,
//   GPAD_RY = 0x40000003,
// };

// /* 3 */
// enum $DB857BC06DF6FFF7FB95B801DDEA9D30 : __int32
// {
//   CONTROL_ANGLES_BACK_LOW = 0x0,
//   CONTROL_ANGLES_BACK_MID = 0x1,
//   CONTROL_ANGLES_BACK_UP = 0x2,
//   CONTROL_ANGLES_NECK = 0x3,
//   CONTROL_ANGLES_HEAD = 0x4,
//   CONTROL_ANGLES_PELVIS = 0x5,
//   CONTROL_ANGLES_COUNT = 0x6,
// };

 /* 4 */
enum msgLocErrType_t : __int32
{
  LOCMSG_SAFE = 0x0,
  LOCMSG_NOERR = 0x1,
};

// /* 5 */
// enum statsLocation : __int32
// {
//   STATS_LOCATION_NORMAL = 0x0,
//   STATS_LOCATION_FORCE_NORMAL = 0x1,
//   STATS_LOCATION_BACKUP = 0x2,
//   STATS_LOCATION_STABLE = 0x3,
//   STATS_LOCATION_OTHERPLAYER = 0x4,
//   STATS_LOCATION_BASICTRAINING = 0x5,
//   STATS_LOCATION_GLOBAL = 0x6,
//   STATS_LOCATION_GLOBALSTABLE = 0x7,
//   STATS_LOCATION_COUNT = 0x8,
// };

// /* 6 */
// enum VARENUM : __int32
// {
//   VT_EMPTY = 0x0,
//   VT_NULL = 0x1,
//   VT_I2 = 0x2,
//   VT_I4 = 0x3,
//   VT_R4 = 0x4,
//   VT_R8 = 0x5,
//   VT_CY = 0x6,
//   VT_DATE = 0x7,
//   VT_BSTR = 0x8,
//   VT_DISPATCH = 0x9,
//   VT_ERROR = 0xA,
//   VT_BOOL = 0xB,
//   VT_VARIANT = 0xC,
//   VT_UNKNOWN = 0xD,
//   VT_DECIMAL = 0xE,
//   VT_I1 = 0x10,
//   VT_UI1 = 0x11,
//   VT_UI2 = 0x12,
//   VT_UI4 = 0x13,
//   VT_I8 = 0x14,
//   VT_UI8 = 0x15,
//   VT_INT = 0x16,
//   VT_UINT = 0x17,
//   VT_VOID = 0x18,
//   VT_HRESULT = 0x19,
//   VT_PTR = 0x1A,
//   VT_SAFEARRAY = 0x1B,
//   VT_CARRAY = 0x1C,
//   VT_USERDEFINED = 0x1D,
//   VT_LPSTR = 0x1E,
//   VT_LPWSTR = 0x1F,
//   VT_RECORD = 0x24,
//   VT_INT_PTR = 0x25,
//   VT_UINT_PTR = 0x26,
//   VT_FILETIME = 0x40,
//   VT_BLOB = 0x41,
//   VT_STREAM = 0x42,
//   VT_STORAGE = 0x43,
//   VT_STREAMED_OBJECT = 0x44,
//   VT_STORED_OBJECT = 0x45,
//   VT_BLOB_OBJECT = 0x46,
//   VT_CF = 0x47,
//   VT_CLSID = 0x48,
//   VT_VERSIONED_STREAM = 0x49,
//   VT_BSTR_BLOB = 0xFFF,
//   VT_VECTOR = 0x1000,
//   VT_ARRAY = 0x2000,
//   VT_BYREF = 0x4000,
//   VT_RESERVED = 0x8000,
//   VT_ILLEGAL = 0xFFFF,
//   VT_ILLEGALMASKED = 0xFFF,
//   VT_TYPEMASK = 0xFFF,
// };

// /* 7 */
// enum hintType_t : __int32
// {
//   HINT_NONE = 0x0,
//   HINT_NOICON = 0x1,
//   HINT_SEAT = 0x2,
//   HINT_ACTIVATE = 0x3,
//   HINT_HEALTH = 0x4,
//   HINT_FRIENDLY = 0x5,
//   HINT_SPECTATOR = 0x6,
//   HINT_TEAMPOT = 0x7,
//   FIRST_WEAPON_HINT = 0x8,
//   LAST_WEAPON_HINT = 0x807,
//   HINT_NUM_HINTS = 0x808,
// };

// /* 8 */
// enum $3EF1B360EB8A31FEC2447AAE8E446CD9 : __int32
// {
//   HUD_STANCE_STAND = 0x0,
//   HUD_STANCE_CROUCH = 0x1,
//   HUD_STANCE_PRONE = 0x2,
//   HUD_STANCE_FLASH = 0x3,
//   HUD_STANCE_SWIM = 0x4,
//   HUD_STANCE_NUM = 0x5,
// };

// /* 9 */
// enum $708003E590F9EEB5451E934A26975E39 : __int32
// {
//   qfalse = 0x0,
//   qtrue = 0x1,
// };

// /* 10 */
// enum $CC14BC328FC1C38C12056C4EA3A4FB7C : __int32
// {
//   HUD_OBJ_SAME = 0x0,
//   HUD_OBJ_NUM = 0x1,
// };

 /* 11 */
enum netsrc_t : __int32
{
  NS_CLIENT1 = 0x0,
  NS_SERVER = 0x1,
  NS_MAXCLIENTS = 0x1,
  NS_PACKET = 0x2,
};

// /* 12 */
// enum vc_attributes::YesNoMaybe : __int32
// {
//   No = 0xFFF0001,
//   Maybe = 0xFFF0010,
//   Yes = 0xFFF0100,
// };

// /* 13 */
// enum $5593DFA4C63DF5E5E386FB9B9F1F184D : __int32
// {
//   FRIEND_ICON = 0x0,
//   FRIEND_CHAT_ICON = 0x1,
//   FRIEND_REVIVE_ICON = 0x2,
//   FRIEND_ICON_NUM = 0x3,
// };

// /* 14 */
// enum vc_attributes::AccessType : __int32
// {
//   NoAccess = 0x0,
//   Read = 0x1,
//   Write = 0x2,
//   ReadWrite = 0x3,
// };

// /* 15 */
// enum csParseFieldType_t : __int32
// {
//   CSPFT_STRING = 0x0,
//   CSPFT_STRING_MAX_STRING_CHARS = 0x1,
//   CSPFT_STRING_MAX_QPATH = 0x2,
//   CSPFT_STRING_MAX_OSPATH = 0x3,
//   CSPFT_INT = 0x4,
//   CSPFT_BOOL = 0x5,
//   CSPFT_QBOOLEAN = 0x6,
//   CSPFT_FLOAT = 0x7,
//   CSPFT_MILLISECONDS = 0x8,
//   CSPFT_FX = 0x9,
//   CSPFT_XMODEL = 0xA,
//   CSPFT_MATERIAL = 0xB,
//   CSPFT_MATERIAL_STREAM = 0xC,
//   CSPFT_PHYS_PRESET = 0xD,
//   CSPFT_SCRIPT_STRING = 0xE,
//   CSPFT_NUM_BASE_FIELD_TYPES = 0xF,
// };

// /* 16 */
// enum GfxLightType : __int32
// {
//   GFX_LIGHT_TYPE_NONE = 0x0,
//   GFX_LIGHT_TYPE_DIR = 0x1,
//   GFX_LIGHT_TYPE_SPOT = 0x2,
//   GFX_LIGHT_TYPE_OMNI = 0x3,
//   GFX_LIGHT_TYPE_COUNT = 0x4,
//   GFX_LIGHT_TYPE_DIR_SHADOWMAP = 0x4,
//   GFX_LIGHT_TYPE_SPOT_SHADOWMAP = 0x5,
//   GFX_LIGHT_TYPE_OMNI_SHADOWMAP = 0x6,
//   GFX_LIGHT_TYPE_COUNT_WITH_SHADOWMAP_VERSIONS = 0x7,
// };

 /* 17 */
enum $B2ECDC88BFDCDA7EF94752921A61CE0E
{
  CON_CHANNEL_DONT_FILTER = 0x0,
  CON_CHANNEL_ERROR = 0x1,
  CON_CHANNEL_GAMENOTIFY = 0x2,
  CON_CHANNEL_BOLDGAME = 0x3,
  CON_CHANNEL_SUBTITLE = 0x4,
  CON_CHANNEL_OBITUARY = 0x5,
  CON_CHANNEL_LOGFILEONLY = 0x6,
  CON_CHANNEL_CONSOLEONLY = 0x7,
  CON_CHANNEL_GFX = 0x8,
  CON_CHANNEL_SOUND = 0x9,
  CON_CHANNEL_FILES = 0xA,
  CON_CHANNEL_DEVGUI = 0xB,
  CON_CHANNEL_PROFILE = 0xC,
  CON_CHANNEL_UI = 0xD,
  CON_CHANNEL_CLIENT = 0xE,
  CON_CHANNEL_SERVER = 0xF,
  CON_CHANNEL_SYSTEM = 0x10,
  CON_CHANNEL_PLAYERWEAP = 0x11,
  CON_CHANNEL_AI = 0x12,
  CON_CHANNEL_ANIM = 0x13,
  CON_CHANNEL_PHYS = 0x14,
  CON_CHANNEL_FX = 0x15,
  CON_CHANNEL_LEADERBOARDS = 0x16,
  CON_CHANNEL_LIVE = 0x17,
  CON_CHANNEL_PARSERSCRIPT = 0x18,
  CON_CHANNEL_SCRIPT = 0x19,
  CON_CHANNEL_SPAWNSYSTEM = 0x1A,
  CON_CHANNEL_COOPINFO = 0x1B,
  CON_CHANNEL_SERVERDEMO = 0x1C,
  CON_CHANNEL_DDL = 0x1D,
  CON_CHANNEL_NETWORK = 0x1E,
  CON_CHANNEL_SCHEDULER = 0x1F,
  CON_FIRST_DEBUG_CHANNEL = 0x1F,
  CON_CHANNEL_TASK = 0x20,
  CON_CHANNEL_SPU = 0x21,
  CON_CHANNEL_VERBOSE = 0x22,
  CON_BUILTIN_CHANNEL_COUNT = 0x23,
};

// /* 18 */
// enum tagTYSPEC : __int32
// {
//   TYSPEC_CLSID = 0x0,
//   TYSPEC_FILEEXT = 0x1,
//   TYSPEC_MIMETYPE = 0x2,
//   TYSPEC_FILENAME = 0x3,
//   TYSPEC_PROGID = 0x4,
//   TYSPEC_PACKAGENAME = 0x5,
//   TYSPEC_OBJECTID = 0x6,
// };

// /* 19 */
// enum tagBINDSTRING : __int32
// {
//   BINDSTRING_HEADERS = 0x1,
//   BINDSTRING_ACCEPT_MIMES = 0x2,
//   BINDSTRING_EXTRA_URL = 0x3,
//   BINDSTRING_LANGUAGE = 0x4,
//   BINDSTRING_USERNAME = 0x5,
//   BINDSTRING_PASSWORD = 0x6,
//   BINDSTRING_UA_PIXELS = 0x7,
//   BINDSTRING_UA_COLOR = 0x8,
//   BINDSTRING_OS = 0x9,
//   BINDSTRING_USER_AGENT = 0xA,
//   BINDSTRING_ACCEPT_ENCODINGS = 0xB,
//   BINDSTRING_POST_COOKIE = 0xC,
//   BINDSTRING_POST_DATA_MIME = 0xD,
//   BINDSTRING_URL = 0xE,
//   BINDSTRING_IID = 0xF,
//   BINDSTRING_FLAG_BIND_TO_OBJECT = 0x10,
//   BINDSTRING_PTR_BIND_CONTEXT = 0x11,
// };

 /* 20 */
enum scriptInstance_t : __int32
{
  SCRIPTINSTANCE_SERVER = 0x0,
  SCRIPTINSTANCE_CLIENT = 0x1,
  SCRIPT_INSTANCE_MAX = 0x2,
};

// /* 21 */
// enum bdLogMessageType : __int32
// {
//   BD_LOG_INFO = 0x0,
//   BD_LOG_WARNING = 0x1,
//   BD_LOG_ERROR = 0x2,
// };

// /* 22 */
// enum $3B02E3071707545AA15CBF34D7869793 : __int32
// {
//   STATMON_FPS = 0x0,
//   STATMON_FILEACCESS = 0x1,
//   STATMON_SOUNDCPU = 0x2,
//   STATMON_MAXEFFECTS = 0x3,
//   STATMON_SNAPSHOTENTS = 0x4,
//   STATMON_TRIS = 0x5,
//   STATMON_SERVERFPS = 0x6,
//   STATMON_NET = 0x7,
//   STATMON_DENSECOLLISION = 0x8,
//   STATMON_IK = 0x9,
//   STATMON_SCRIPTERROR = 0xA,
//   STATMON_BANDWIDTHEXCEEDED = 0xB,
//   STATMON_GAMESTATEEXCEEDED = 0xC,
//   STATMON_BANDWIDTHLIMITED = 0xD,
//   STATMON_COUNT = 0xE,
// };

// /* 23 */
// enum bdBitBufferDataType : __int32
// {
//   BD_BB_NO_TYPE = 0x0,
//   BD_BB_BOOL_TYPE = 0x1,
//   BD_BB_SIGNED_CHAR8_TYPE = 0x2,
//   BD_BB_UNSIGNED_CHAR8_TYPE = 0x3,
//   BD_BB_WCHAR16_TYPE = 0x4,
//   BD_BB_SIGNED_INTEGER16_TYPE = 0x5,
//   BD_BB_UNSIGNED_INTEGER16_TYPE = 0x6,
//   BD_BB_SIGNED_INTEGER32_TYPE = 0x7,
//   BD_BB_UNSIGNED_INTEGER32_TYPE = 0x8,
//   BD_BB_SIGNED_INTEGER64_TYPE = 0x9,
//   BD_BB_UNSIGNED_INTEGER64_TYPE = 0xA,
//   BD_BB_RANGED_SIGNED_INTEGER32_TYPE = 0xB,
//   BD_BB_RANGED_UNSIGNED_INTEGER32_TYPE = 0xC,
//   BD_BB_FLOAT32_TYPE = 0xD,
//   BD_BB_FLOAT64_TYPE = 0xE,
//   BD_BB_RANGED_FLOAT32_TYPE = 0xF,
//   BD_BB_SIGNED_CHAR8_STRING_TYPE = 0x10,
//   BD_BB_UNSIGNED_CHAR8_STRING_TYPE = 0x11,
//   BD_BB_MBSTRING_TYPE = 0x12,
//   BD_BB_BLOB_TYPE = 0x13,
//   BD_BB_NAN_TYPE = 0x14,
//   BD_BB_FULL_TYPE = 0x15,
//   BD_BB_MAX_TYPE = 0x20,
// };

// /* 24 */
// enum weapAnimFiles_t : __int32
// {
//   WEAP_ANIM_ROOT = 0x0,
//   WEAP_ANIM_IDLE = 0x1,
//   WEAP_ANIM_EMPTY_IDLE = 0x2,
//   WEAP_ANIM_FIRE = 0x3,
//   WEAP_ANIM_HOLD_FIRE = 0x4,
//   WEAP_ANIM_LASTSHOT = 0x5,
//   WEAP_ANIM_RECHAMBER = 0x6,
//   WEAP_ANIM_MELEE = 0x7,
//   WEAP_ANIM_MELEE_CHARGE = 0x8,
//   WEAP_ANIM_RELOAD = 0x9,
//   WEAP_ANIM_RELOAD_RIGHT = 0xA,
//   WEAP_ANIM_RELOAD_EMPTY = 0xB,
//   WEAP_ANIM_RELOAD_START = 0xC,
//   WEAP_ANIM_RELOAD_END = 0xD,
//   WEAP_ANIM_RELOAD_QUICK = 0xE,
//   WEAP_ANIM_RELOAD_QUICK_EMPTY = 0xF,
//   WEAP_ANIM_RAISE = 0x10,
//   WEAP_ANIM_FIRST_RAISE = 0x11,
//   WEAP_ANIM_DROP = 0x12,
//   WEAP_ANIM_ALT_RAISE = 0x13,
//   WEAP_ANIM_ALT_DROP = 0x14,
//   WEAP_ANIM_QUICK_RAISE = 0x15,
//   WEAP_ANIM_QUICK_DROP = 0x16,
//   WEAP_ANIM_EMPTY_RAISE = 0x17,
//   WEAP_ANIM_EMPTY_DROP = 0x18,
//   WEAP_ANIM_SPRINT_IN = 0x19,
//   WEAP_ANIM_SPRINT_LOOP = 0x1A,
//   WEAP_ANIM_SPRINT_OUT = 0x1B,
//   WEAP_ANIM_SPRINT_EMPTY_IN = 0x1C,
//   WEAP_ANIM_SPRINT_EMPTY_LOOP = 0x1D,
//   WEAP_ANIM_SPRINT_EMPTY_OUT = 0x1E,
//   WEAP_ANIM_LOWREADY_IN = 0x1F,
//   WEAP_ANIM_LOWREADY_LOOP = 0x20,
//   WEAP_ANIM_LOWREADY_OUT = 0x21,
//   WEAP_ANIM_CONT_FIRE_IN = 0x22,
//   WEAP_ANIM_CONT_FIRE_LOOP = 0x23,
//   WEAP_ANIM_CONT_FIRE_OUT = 0x24,
//   WEAP_ANIM_DEPLOY = 0x25,
//   WEAP_ANIM_BREAKDOWN = 0x26,
//   WEAP_ANIM_DETONATE = 0x27,
//   WEAP_ANIM_NIGHTVISION_WEAR = 0x28,
//   WEAP_ANIM_NIGHTVISION_REMOVE = 0x29,
//   WEAP_ANIM_ADS_FIRE = 0x2A,
//   WEAP_ANIM_ADS_LASTSHOT = 0x2B,
//   WEAP_ANIM_ADS_RECHAMBER = 0x2C,
//   WEAP_ANIM_DTP_IN = 0x2D,
//   WEAP_ANIM_DTP_LOOP = 0x2E,
//   WEAP_ANIM_DTP_OUT = 0x2F,
//   WEAP_ANIM_DTP_EMPTY_IN = 0x30,
//   WEAP_ANIM_DTP_EMPTY_LOOP = 0x31,
//   WEAP_ANIM_DTP_EMPTY_OUT = 0x32,
//   WEAP_ANIM_SLIDE_IN = 0x33,
//   WEAP_ANIM_MANTLE = 0x34,
//   WEAP_ANIM_CAMERA_SPRINT_LOOP = 0x35,
//   WEAP_ANIM_CAMERA_DTP_IN = 0x36,
//   WEAP_ANIM_CAMERA_DTP_LOOP = 0x37,
//   WEAP_ANIM_CAMERA_DTP_OUT = 0x38,
//   WEAP_ANIM_CAMERA_MANTLE = 0x39,
//   WEAP_ANIM_FIRE_LEFT = 0x3A,
//   WEAP_ANIM_LASTSHOT_LEFT = 0x3B,
//   WEAP_ANIM_IDLE_LEFT = 0x3C,
//   WEAP_ANIM_EMPTY_IDLE_LEFT = 0x3D,
//   WEAP_ANIM_RELOAD_EMPTY_LEFT = 0x3E,
//   WEAP_ANIM_RELOAD_LEFT = 0x3F,
//   WEAP_ANIM_ADS_UP = 0x40,
//   WEAP_ANIM_ADS_DOWN = 0x41,
//   NUM_WEAP_ANIMS = 0x42,
// };

// /* 25 */
// enum $067C566A97EEC6E7D3DB7B726B5C1A66 : __int32
// {
//   COL_PARTITION = 0x0,
//   COL_BRUSH = 0x1,
// };

// /* 26 */
// enum weaponstate_t : __int32
// {
//   WEAPON_READY = 0x0,
//   WEAPON_RAISING = 0x1,
//   WEAPON_RAISING_ALTSWITCH = 0x2,
//   WEAPON_DROPPING = 0x3,
//   WEAPON_DROPPING_QUICK = 0x4,
//   WEAPON_DROPPING_ALTSWITCH = 0x5,
//   WEAPON_FIRING = 0x6,
//   WEAPON_RECHAMBERING = 0x7,
//   WEAPON_RELOADING_RIGHT = 0x8,
//   WEAPON_RELOADING_LEFT = 0x9,
//   WEAPON_RELOADING = 0xA,
//   WEAPON_RELOADING_INTERUPT = 0xB,
//   WEAPON_RELOAD_START = 0xC,
//   WEAPON_RELOAD_START_INTERUPT = 0xD,
//   WEAPON_RELOAD_END = 0xE,
//   WEAPON_RELOAD_QUICK = 0xF,
//   WEAPON_RELOAD_QUICK_EMPTY = 0x10,
//   WEAPON_MELEE_INIT = 0x11,
//   WEAPON_MELEE_FIRE = 0x12,
//   WEAPON_MELEE_END = 0x13,
//   WEAPON_OFFHAND_INIT = 0x14,
//   WEAPON_OFFHAND_PREPARE = 0x15,
//   WEAPON_OFFHAND_HOLD = 0x16,
//   WEAPON_OFFHAND_START = 0x17,
//   WEAPON_OFFHAND = 0x18,
//   WEAPON_OFFHAND_END = 0x19,
//   WEAPON_DETONATING = 0x1A,
//   WEAPON_SPRINT_RAISE = 0x1B,
//   WEAPON_SPRINT_LOOP = 0x1C,
//   WEAPON_SPRINT_DROP = 0x1D,
//   WEAPON_CONT_FIRE_IN = 0x1E,
//   WEAPON_CONT_FIRE_LOOP = 0x1F,
//   WEAPON_CONT_FIRE_OUT = 0x20,
//   WEAPON_NIGHTVISION_WEAR = 0x21,
//   WEAPON_NIGHTVISION_REMOVE = 0x22,
//   WEAPON_DEPLOYING = 0x23,
//   WEAPON_DEPLOYED = 0x24,
//   WEAPON_BREAKING_DOWN = 0x25,
//   WEAPON_SWIM_IN = 0x26,
//   WEAPON_SWIM_OUT = 0x27,
//   WEAPON_DTP_IN = 0x28,
//   WEAPON_DTP_LOOP = 0x29,
//   WEAPON_DTP_OUT = 0x2A,
//   WEAPON_SLIDE_IN = 0x2B,
//   WEAPON_FIRING_LEFT = 0x2C,
//   WEAPON_FIRING_BOTH = 0x2D,
//   WEAPON_JAMMED = 0x2E,
//   WEAPON_LOWREADY_RAISE = 0x2F,
//   WEAPON_LOWREADY_LOOP = 0x30,
//   WEAPON_LOWREADY_DROP = 0x31,
//   WEAPONSTATES_NUM = 0x32,
// };

// /* 27 */
// enum tagDESCKIND : __int32
// {
//   DESCKIND_NONE = 0x0,
//   DESCKIND_FUNCDESC = 0x1,
//   DESCKIND_VARDESC = 0x2,
//   DESCKIND_TYPECOMP = 0x3,
//   DESCKIND_IMPLICITAPPOBJ = 0x4,
//   DESCKIND_MAX = 0x5,
// };

// /* 28 */
// enum keyNum_t : __int32
// {
//   K_NONE = 0x0,
//   K_FIRSTGAMEPADBUTTON_RANGE_1 = 0x1,
//   K_BUTTON_A = 0x1,
//   K_BUTTON_B = 0x2,
//   K_BUTTON_X = 0x3,
//   K_BUTTON_Y = 0x4,
//   K_BUTTON_LSHLDR = 0x5,
//   K_BUTTON_RSHLDR = 0x6,
//   K_LASTGAMEPADBUTTON_RANGE_1 = 0x6,
//   K_BS = 0x8,
//   K_TAB = 0x9,
//   K_NL = 0xA,
//   K_ENTER = 0xD,
//   K_FIRSTGAMEPADBUTTON_RANGE_2 = 0xE,
//   K_BUTTON_START = 0xE,
//   K_BUTTON_BACK = 0xF,
//   K_BUTTON_LSTICK = 0x10,
//   K_BUTTON_RSTICK = 0x11,
//   K_BUTTON_LTRIG = 0x12,
//   K_BUTTON_RTRIG = 0x13,
//   K_DPAD_UP = 0x14,
//   K_FIRSTDPAD = 0x14,
//   K_DPAD_DOWN = 0x15,
//   K_DPAD_LEFT = 0x16,
//   K_DPAD_RIGHT = 0x17,
//   K_BUTTON_LSTICK_ALTIMAGE2 = 0x10,
//   K_BUTTON_RSTICK_ALTIMAGE2 = 0x11,
//   K_BUTTON_LSTICK_ALTIMAGE = 0xBC,
//   K_BUTTON_RSTICK_ALTIMAGE = 0xBD,
//   K_LASTDPAD = 0x17,
//   K_DPAD_LEFTRIGHT = 0x18,
//   K_DPAD_UPDOWN = 0x19,
//   K_LASTGAMEPADBUTTON_RANGE_2 = 0x19,
//   K_CODPOINTS = 0x1A,
//   K_ESCAPE = 0x1B,
//   K_FIRSTGAMEPADBUTTON_RANGE_3 = 0x1C,
//   K_APAD_UP = 0x1C,
//   K_FIRSTAPAD = 0x1C,
//   K_APAD_DOWN = 0x1D,
//   K_APAD_LEFT = 0x1E,
//   K_APAD_RIGHT = 0x1F,
//   K_LASTAPAD = 0x1F,
//   K_LASTGAMEPADBUTTON_RANGE_3 = 0x1F,
//   K_SPACE = 0x20,
//   K_BACKSPACE = 0x7F,
//   K_ASCII_FIRST = 0x80,
//   K_ASCII_181 = 0x80,
//   K_ASCII_191 = 0x81,
//   K_ASCII_223 = 0x82,
//   K_ASCII_224 = 0x83,
//   K_ASCII_225 = 0x84,
//   K_ASCII_228 = 0x85,
//   K_ASCII_229 = 0x86,
//   K_ASCII_230 = 0x87,
//   K_ASCII_231 = 0x88,
//   K_ASCII_232 = 0x89,
//   K_ASCII_233 = 0x8A,
//   K_ASCII_236 = 0x8B,
//   K_ASCII_241 = 0x8C,
//   K_ASCII_242 = 0x8D,
//   K_ASCII_243 = 0x8E,
//   K_ASCII_246 = 0x8F,
//   K_ASCII_248 = 0x90,
//   K_ASCII_249 = 0x91,
//   K_ASCII_250 = 0x92,
//   K_ASCII_252 = 0x93,
//   K_END_ASCII_CHARS = 0x94,
//   K_COMMAND = 0x96,
//   K_CAPSLOCK = 0x97,
//   K_POWER = 0x98,
//   K_PAUSE = 0x99,
//   K_UPARROW = 0x9A,
//   K_DOWNARROW = 0x9B,
//   K_LEFTARROW = 0x9C,
//   K_RIGHTARROW = 0x9D,
//   K_ALT = 0x9E,
//   K_CTRL = 0x9F,
//   K_SHIFT = 0xA0,
//   K_INS = 0xA1,
//   K_DEL = 0xA2,
//   K_PGDN = 0xA3,
//   K_PGUP = 0xA4,
//   K_HOME = 0xA5,
//   K_END = 0xA6,
//   K_F1 = 0xA7,
//   K_F2 = 0xA8,
//   K_F3 = 0xA9,
//   K_F4 = 0xAA,
//   K_F5 = 0xAB,
//   K_F6 = 0xAC,
//   K_F7 = 0xAD,
//   K_F8 = 0xAE,
//   K_F9 = 0xAF,
//   K_F10 = 0xB0,
//   K_F11 = 0xB1,
//   K_F12 = 0xB2,
//   K_F13 = 0xB3,
//   K_F14 = 0xB4,
//   K_F15 = 0xB5,
//   K_KP_HOME = 0xB6,
//   K_KP_UPARROW = 0xB7,
//   K_KP_PGUP = 0xB8,
//   K_KP_LEFTARROW = 0xB9,
//   K_KP_5 = 0xBA,
//   K_KP_RIGHTARROW = 0xBB,
//   K_KP_END = 0xBC,
//   K_KP_DOWNARROW = 0xBD,
//   K_KP_PGDN = 0xBE,
//   K_KP_ENTER = 0xBF,
//   K_KP_INS = 0xC0,
//   K_KP_DEL = 0xC1,
//   K_KP_SLASH = 0xC2,
//   K_KP_MINUS = 0xC3,
//   K_KP_PLUS = 0xC4,
//   K_KP_NUMLOCK = 0xC5,
//   K_KP_STAR = 0xC6,
//   K_KP_EQUALS = 0xC7,
//   K_MOUSE1 = 0xC8,
//   K_MOUSE2 = 0xC9,
//   K_MOUSE3 = 0xCA,
//   K_MOUSE4 = 0xCB,
//   K_MOUSE5 = 0xCC,
//   K_MWHEELDOWN = 0xCD,
//   K_MWHEELUP = 0xCE,
//   K_AUX1 = 0xCF,
//   K_AUX2 = 0xD0,
//   K_AUX3 = 0xD1,
//   K_AUX4 = 0xD2,
//   K_AUX5 = 0xD3,
//   K_AUX6 = 0xD4,
//   K_AUX7 = 0xD5,
//   K_AUX8 = 0xD6,
//   K_AUX9 = 0xD7,
//   K_AUX10 = 0xD8,
//   K_AUX11 = 0xD9,
//   K_AUX12 = 0xDA,
//   K_AUX13 = 0xDB,
//   K_AUX14 = 0xDC,
//   K_AUX15 = 0xDD,
//   K_AUX16 = 0xDE,
//   K_LAST_KEY = 0xDF,
// };

// /* 29 */
// enum $7B978A8EAF4AE2627C6F063D7A9BDEE5 : __int32
// {
//   MARK_MODEL_TYPE_WORLD_BRUSH = 0x0,
//   MARK_MODEL_TYPE_WORLD_MODEL = 0x40,
//   MARK_MODEL_TYPE_ENT_BRUSH = 0x80,
//   MARK_MODEL_TYPE_ENT_MODEL = 0xC0,
//   MARK_MODEL_TYPE_MASK = 0xC0,
//   MARK_MODEL_SURF_MASK = 0x3F,
// };

// /* 30 */
// enum $DC39398868F8F7F398F8DA27178506AD : __int32
// {
//   VAR_UNDEFINED = 0x0,
//   VAR_BEGIN_REF = 0x1,
//   VAR_POINTER = 0x1,
//   VAR_STRING = 0x2,
//   VAR_ISTRING = 0x3,
//   VAR_VECTOR = 0x4,
//   VAR_END_REF = 0x5,
//   VAR_FLOAT = 0x5,
//   VAR_INTEGER = 0x6,
//   VAR_CODEPOS = 0x7,
//   VAR_PRECODEPOS = 0x8,
//   VAR_FUNCTION = 0x9,
//   VAR_STACK = 0xA,
//   VAR_ANIMATION = 0xB,
//   VAR_DEVELOPER_CODEPOS = 0xC,
//   VAR_THREAD = 0xD,
//   VAR_NOTIFY_THREAD = 0xE,
//   VAR_TIME_THREAD = 0xF,
//   VAR_CHILD_THREAD = 0x10,
//   VAR_OBJECT = 0x11,
//   VAR_DEAD_ENTITY = 0x12,
//   VAR_ENTITY = 0x13,
//   VAR_ARRAY = 0x14,
//   VAR_DEAD_THREAD = 0x15,
//   VAR_COUNT = 0x16,
//   VAR_THREAD_LIST = 0x17,
//   VAR_ENDON_LIST = 0x18,
// };

/* 31 */
enum EMemTrack : __int32
{
  TRACK_DEBUG = 0x0,
  TRACK_HUNK = 0x1,
  TRACK_BINARIES = 0x2,
  TRACK_MISC_SWAP = 0x3,
  TRACK_DELIMITER1 = 0x4,
  TRACK_AI = 0x5,
  TRACK_AI_NODES = 0x6,
  TRACK_SCRIPT = 0x7,
  TRACK_FX = 0x8,
  TRACK_GLASS = 0x9,
  TRACK_NETWORK_ENTITY = 0xA,
  TRACK_MISC = 0xB,
  TRACK_FASTFILE = 0xC,
  TRACK_ANIMATION = 0xD,
  TRACK_WORLD_GLOBALS = 0xE,
  TRACK_SOUND_GLOBALS = 0xF,
  TRACK_CLIENT_ANIMSCRIPT = 0x10,
  TRACK_SOUND = 0x11,
  TRACK_DELIMITER2 = 0x12,
  TRACK_RENDERER_GLOBALS = 0x13,
  TRACK_RENDERER_IMAGES = 0x14,
  TRACK_RENDERER_WORLD = 0x15,
  TRACK_RENDERER_MODELS = 0x16,
  TRACK_RENDERER_MISC = 0x17,
  TRACK_CINEMATICS = 0x18,
  TRACK_DELIMITER3 = 0x19,
  TRACK_COLLISION_MISC = 0x1A,
  TRACK_COLLISION_BRUSH = 0x1B,
  TRACK_COLLISION_MODEL_TRI = 0x1C,
  TRACK_COLLISION_TERRAIN = 0x1D,
  TRACK_PHYSICS = 0x1E,
  TRACK_MAP_ENTS = 0x1F,
  TRACK_TEMP = 0x20,
  TRACK_DELIMITER4 = 0x21,
  TRACK_LOCALIZATION = 0x22,
  TRACK_FLAME = 0x23,
  TRACK_UI = 0x24,
  TRACK_TL = 0x25,
  TRACK_ZMEM = 0x26,
  TRACK_FIREMANAGER = 0x27,
  TRACK_PROFILE = 0x28,
  TRACK_WATERSIM = 0x29,
  TRACK_CLIENT = 0x2A,
  TRACK_RECORDER = 0x2B,
  TRACK_RSTREAM = 0x2C,
  TRACK_RENDERER_STREAMBUFFER = 0x2D,
  TRACK_RENDERER_STREAMBUFFER_EXTRA = 0x2E,
  TRACK_GEOSTREAM = 0x2F,
  TRACK_DDL = 0x30,
  TRACK_ONLINE = 0x31,
  TRACK_EMBLEM = 0x32,
  TRACK_MINSPEC_IMAGES = 0x33,
  TRACK_DELIMITER5 = 0x34,
  TRACK_NONE = 0x35,
  TRACK_COUNT = 0x36,
};

// /* 32 */
// enum scriptAnimMoveTypes_t : __int32
// {
//   ANIM_MT_UNUSED = 0x0,
//   ANIM_MT_IDLE = 0x1,
//   ANIM_MT_SHUFFLE = 0x2,
//   ANIM_MT_WALK = 0x3,
//   ANIM_MT_RUN = 0x4,
//   ANIM_MT_CLIMBUP = 0x5,
//   ANIM_MT_CLIMBDOWN = 0x6,
//   ANIM_MT_SPRINT = 0x7,
//   ANIM_MT_MANTLE_ROOT = 0x8,
//   ANIM_MT_MANTLE_UP_57 = 0x9,
//   ANIM_MT_MANTLE_UP_51 = 0xA,
//   ANIM_MT_MANTLE_UP_45 = 0xB,
//   ANIM_MT_MANTLE_UP_39 = 0xC,
//   ANIM_MT_MANTLE_UP_33 = 0xD,
//   ANIM_MT_MANTLE_UP_27 = 0xE,
//   ANIM_MT_MANTLE_UP_21 = 0xF,
//   ANIM_MT_MANTLE_OVER_HIGH = 0x10,
//   ANIM_MT_MANTLE_OVER_MID = 0x11,
//   ANIM_MT_MANTLE_OVER_LOW = 0x12,
//   ANIM_MT_TURNRIGHT = 0x13,
//   ANIM_MT_TURNLEFT = 0x14,
//   ANIM_MT_STUMBLE = 0x15,
//   ANIM_MT_STUMBLE_WALK = 0x16,
//   ANIM_MT_STUMBLE_SPRINT = 0x17,
//   ANIM_MT_SWIM = 0x18,
//   ANIM_MT_DTP = 0x19,
//   ANIM_MT_SLIDE = 0x1A,
//   NUM_ANIM_MOVETYPES = 0x1B,
// };

// /* 33 */
// enum $F0CDD601FAA0743FEE4D3985578E11C1 : __int32
// {
//   FIRST_OBJECT = 0xD,
//   FIRST_CLEARABLE_OBJECT = 0x11,
//   LAST_NONENTITY_OBJECT = 0x11,
//   FIRST_ENTITY_OBJECT = 0x13,
//   FIRST_NONFIELD_OBJECT = 0x14,
//   FIRST_DEAD_OBJECT = 0x15,
// };

// /* 34 */
// enum entityType_t : __int32
// {
//   ET_GENERAL = 0x0,
//   ET_PLAYER = 0x1,
//   ET_PLAYER_CORPSE = 0x2,
//   ET_ITEM = 0x3,
//   ET_MISSILE = 0x4,
//   ET_INVISIBLE = 0x5,
//   ET_SCRIPTMOVER = 0x6,
//   ET_SOUND_BLEND = 0x7,
//   ET_FX = 0x8,
//   ET_LOOP_FX = 0x9,
//   ET_PRIMARY_LIGHT = 0xA,
//   ET_MG42 = 0xB,
//   ET_HELICOPTER = 0xC,
//   ET_PLANE = 0xD,
//   ET_VEHICLE = 0xE,
//   ET_VEHICLE_COLLMAP = 0xF,
//   ET_VEHICLE_CORPSE = 0x10,
//   ET_ACTOR = 0x11,
//   ET_ACTOR_SPAWNER = 0x12,
//   ET_ACTOR_CORPSE = 0x13,
//   ET_STREAMER_HINT = 0x14,
//   ET_EVENTS = 0x15,
// };

// /* 35 */
// enum scriptAnimEventTypes_t : __int32
// {
//   ANIM_ET_UNUSED = 0x0,
//   ANIM_ET_DEATH = 0x1,
//   ANIM_ET_FIREWEAPON = 0x2,
//   ANIM_ET_JUMP = 0x3,
//   ANIM_ET_LAND = 0x4,
//   ANIM_ET_DROPWEAPON = 0x5,
//   ANIM_ET_RAISEWEAPON = 0x6,
//   ANIM_ET_RELOAD = 0x7,
//   ANIM_ET_CROUCH_TO_PRONE = 0x8,
//   ANIM_ET_PRONE_TO_CROUCH = 0x9,
//   ANIM_ET_STAND_TO_CROUCH = 0xA,
//   ANIM_ET_CROUCH_TO_STAND = 0xB,
//   ANIM_ET_PRONE_TO_STAND = 0xC,
//   ANIM_ET_PRONE_TO_SPRINT = 0xD,
//   ANIM_ET_MELEEATTACK = 0xE,
//   ANIM_ET_KNIFE_MELEE = 0xF,
//   ANIM_ET_KNIFE_MELEE_CHARGE = 0x10,
//   ANIM_ET_FLINCH = 0x11,
//   ANIM_ET_SHELLSHOCK = 0x12,
//   ANIM_ET_VEHICLE_ENTER = 0x13,
//   ANIM_ET_VEHICLE_CHANGE_SEATS = 0x14,
//   ANIM_ET_VEHICLE_EXIT = 0x15,
//   ANIM_ET_SCRIPTEVENT = 0x16,
//   ANIM_ET_DTP_TAKEOFF = 0x17,
//   ANIM_ET_DTP_LAND = 0x18,
//   ANIM_ET_STAND_TO_LASTSTAND = 0x19,
//   ANIM_ET_CROUCH_TO_LASTSTAND = 0x1A,
//   ANIM_ET_PRONE_TO_LASTSTAND = 0x1B,
//   ANIM_ET_LASTSTAND_TO_STAND = 0x1C,
//   ANIM_ET_LASTSTAND_TO_CROUCH = 0x1D,
//   ANIM_ET_LASTSTAND_TO_PRONE = 0x1E,
//   ANIM_ET_FLARED = 0x1F,
//   ANIM_ET_LASTSTAND_SUICIDE = 0x20,
//   ANIM_ET_PRIME_GRENADE = 0x21,
//   NUM_ANIM_EVENTTYPES = 0x22,
// };

// /* 36 */
// enum $6CA45D1D21D0306FC70A3A896F8DC554 : __int32
// {
//   TRACK_LOCATION_MRAM = 0x0,
//   TRACK_LOCATION_LRAM = 0x1,
//   TRACK_LOCATION_COUNT = 0x2,
// };

// /* 37 */
// enum $58393598B37D691B0D64F3FCFD7C3E09 : __int32
// {
//   CRYPT_OK = 0x0,
//   CRYPT_ERROR = 0x1,
//   CRYPT_NOP = 0x2,
//   CRYPT_INVALID_KEYSIZE = 0x3,
//   CRYPT_INVALID_ROUNDS = 0x4,
//   CRYPT_FAIL_TESTVECTOR = 0x5,
//   CRYPT_BUFFER_OVERFLOW = 0x6,
//   CRYPT_INVALID_PACKET = 0x7,
//   CRYPT_INVALID_PRNGSIZE = 0x8,
//   CRYPT_ERROR_READPRNG = 0x9,
//   CRYPT_INVALID_CIPHER = 0xA,
//   CRYPT_INVALID_HASH = 0xB,
//   CRYPT_INVALID_PRNG = 0xC,
//   CRYPT_MEM = 0xD,
//   CRYPT_PK_TYPE_MISMATCH = 0xE,
//   CRYPT_PK_NOT_PRIVATE = 0xF,
//   CRYPT_INVALID_ARG = 0x10,
//   CRYPT_FILE_NOTFOUND = 0x11,
//   CRYPT_PK_INVALID_TYPE = 0x12,
//   CRYPT_PK_INVALID_SYSTEM = 0x13,
//   CRYPT_PK_DUP = 0x14,
//   CRYPT_PK_NOT_FOUND = 0x15,
//   CRYPT_PK_INVALID_SIZE = 0x16,
//   CRYPT_INVALID_PRIME_SIZE = 0x17,
//   CRYPT_PK_INVALID_PADDING = 0x18,
// };

// /* 38 */
// enum bdNATType : __int32
// {
//   BD_NAT_OPEN = 0x1,
//   BD_NAT_MODERATE = 0x2,
//   BD_NAT_STRICT = 0x3,
// };

// /* 39 */
// enum $4063C00325E3CB226EF18D9D8FC4A6BC : __int32
// {
//   SCR_XANIM_CLIENT = 0x0,
//   SCR_XANIM_SERVER = 0x1,
//   SCR_XANIM_COUNT = 0x2,
// };

// /* 40 */
// enum fileShareSearchFileType : __int32
// {
//   FILESHARE_FILETYPE_ALL = 0x0,
//   FILESHARE_FILETYPE_FILM = 0x1,
//   FILESHARE_FILETYPE_CLIP = 0x2,
//   FILESHARE_FILETYPE_SCREENSHOT = 0x3,
//   FILESHARE_FILETYPE_CUSTOM_GAME_MODE = 0x4,
//   FILESHARE_PUBLICFILES_START = 0x8000,
//   FILESHARE_FILETYPE_AVI = 0x8000,
// };

// /* 41 */
// enum customClass_t : __int32
// {
//   CUSTOM_CLASS_INVALID = 0xFFFFFFFF,
//   CUSTOM_CLASS_1 = 0x0,
//   CUSTOM_CLASS_FIRST = 0x0,
//   CUSTOM_CLASS_2 = 0x1,
//   CUSTOM_CLASS_3 = 0x2,
//   CUSTOM_CLASS_4 = 0x3,
//   CUSTOM_CLASS_5 = 0x4,
//   BASIC_CUSTOM_CLASS_COUNT = 0x5,
//   PRESTIGE_CLASS_1 = 0x5,
//   PRESTIGE_CLASS_2 = 0x6,
//   PRESTIGE_CLASS_3 = 0x7,
//   PRESTIGE_CLASS_4 = 0x8,
//   PRESTIGE_CLASS_5 = 0x9,
//   CUSTOM_CLASS_COUNT = 0xA,
// };

// /* 42 */
// enum trType_t : __int32
// {
//   TR_STATIONARY = 0x0,
//   TR_INTERPOLATE = 0x1,
//   TR_INTERPOLATE_MOVER = 0x2,
//   TR_LINEAR = 0x3,
//   TR_LINEAR_STOP = 0x4,
//   TR_SINE = 0x5,
//   TR_GRAVITY = 0x6,
//   TR_LOW_GRAVITY = 0x7,
//   TR_ACCELERATE = 0x8,
//   TR_DECELERATE = 0x9,
//   TR_PHYSICS = 0xA,
//   TR_XDOLL = 0xB,
//   TR_FIRST_RAGDOLL = 0xC,
//   TR_RAGDOLL = 0xC,
//   TR_RAGDOLL_GRAVITY = 0xD,
//   TR_RAGDOLL_INTERPOLATE = 0xE,
//   TR_LAST_RAGDOLL = 0xE,
//   NUM_TRTYPES = 0xF,
// };

// /* 43 */
// enum tagDOMNodeType : __int32
// {
//   NODE_INVALID = 0x0,
//   NODE_ELEMENT = 0x1,
//   NODE_ATTRIBUTE = 0x2,
//   NODE_TEXT = 0x3,
//   NODE_CDATA_SECTION = 0x4,
//   NODE_ENTITY_REFERENCE = 0x5,
//   NODE_ENTITY = 0x6,
//   NODE_PROCESSING_INSTRUCTION = 0x7,
//   NODE_COMMENT = 0x8,
//   NODE_DOCUMENT = 0x9,
//   NODE_DOCUMENT_TYPE = 0xA,
//   NODE_DOCUMENT_FRAGMENT = 0xB,
//   NODE_NOTATION = 0xC,
// };

/* 44 */
enum ImpactType : __int32
{
  IMPACT_TYPE_NONE = 0x0,
  IMPACT_TYPE_BULLET_SMALL = 0x1,
  IMPACT_TYPE_BULLET_LARGE = 0x2,
  IMPACT_TYPE_BULLET_AP = 0x3,
  IMPACT_TYPE_BULLET_XTREME = 0x4,
  IMPACT_TYPE_SHOTGUN = 0x5,
  IMPACT_TYPE_GRENADE_BOUNCE = 0x6,
  IMPACT_TYPE_GRENADE_EXPLODE = 0x7,
  IMPACT_TYPE_RIFLE_GRENADE = 0x8,
  IMPACT_TYPE_ROCKET_EXPLODE = 0x9,
  IMPACT_TYPE_ROCKET_EXPLODE_XTREME = 0xA,
  IMPACT_TYPE_PROJECTILE_DUD = 0xB,
  IMPACT_TYPE_MORTAR_SHELL = 0xC,
  IMPACT_TYPE_TANK_SHELL = 0xD,
  IMPACT_TYPE_BOLT = 0xE,
  IMPACT_TYPE_BLADE = 0xF,
  IMPACT_TYPE_COUNT = 0x10,
};

/* 45 */
enum team_t : __int32
{
  TEAM_FREE = 0x0,
  TEAM_BAD = 0x0,
  TEAM_AXIS = 0x1,
  TEAM_ALLIES = 0x2,
  TEAM_SPECTATOR = 0x3,
  TEAM_NUM_TEAMS = 0x4,
  TEAM_LOCALPLAYERS = 0x5,
};

// /* 46 */
// enum tagXMLEMEM_TYPE : __int32
// {
//   XMLELEMTYPE_ELEMENT = 0x0,
//   XMLELEMTYPE_TEXT = 0x1,
//   XMLELEMTYPE_COMMENT = 0x2,
//   XMLELEMTYPE_DOCUMENT = 0x3,
//   XMLELEMTYPE_DTD = 0x4,
//   XMLELEMTYPE_PI = 0x5,
//   XMLELEMTYPE_OTHER = 0x6,
// };

// /* 47 */
// enum scriptAnimConditions_t : __int32
// {
//   ANIM_COND_PLAYERANIMTYPE = 0x0,
//   ANIM_COND_WEAPONCLASS = 0x1,
//   ANIM_COND_NEXTPLAYERANIMTYPE = 0x2,
//   ANIM_COND_NEXTWEAPONCLASS = 0x3,
//   ANIM_COND_MOUNTED = 0x4,
//   ANIM_COND_MOVESTATUS = 0x5,
//   ANIM_COND_DIRECTION = 0x6,
//   ANIM_COND_DMGDIRECTION = 0x7,
//   ANIM_COND_DMGTYPE = 0x8,
//   ANIM_COND_STANCE = 0x9,
//   ANIM_COND_UNDERHAND = 0xA,
//   ANIM_COND_FIRING = 0xB,
//   ANIM_COND_WEAPON_POSITION = 0xC,
//   ANIM_COND_SLOPE = 0xD,
//   ANIM_COND_PERK = 0xE,
//   ANIM_COND_ATTACHMENT = 0xF,
//   ANIM_COND_VEHICLE_NAME = 0x10,
//   ANIM_COND_VEHICLE_SEAT_TO = 0x11,
//   ANIM_COND_VEHICLE_SEAT_FROM = 0x12,
//   ANIM_COND_VEHICLE_ANIM_STAGE = 0x13,
//   ANIM_COND_VEHICLE_ENTRY_POS = 0x14,
//   ANIM_COND_EVENT = 0x15,
//   ANIM_COND_CAC = 0x16,
//   NUM_ANIM_CONDITIONS = 0x17,
// };

// /* 48 */
// enum $BFD5AE103BB780F0525A6E5484407299 : __int32
// {
//   WATER_EFFECT_HIT_SM = 0x0,
//   WATER_EFFECT_HIT_MD = 0x1,
//   WATER_EFFECT_HIT_LG = 0x2,
//   WATER_EFFECT_HIT_OBJECT_RIPPLE = 0x3,
//   WATER_EFFECT_HIT_BUBBLES = 0x4,
//   WATER_EFFECT_HIT_WAIST_RIPPLE = 0x5,
//   WATER_EFFECT_HIT_KNEE_RIPPLE = 0x6,
//   WATER_EFFECT_HIT_SPLASH = 0x7,
//   WATER_EFFECT_NUM = 0x8,
// };

// /* 49 */
// enum VehicleSeatPositions : __int32
// {
//   VEH_POS_NONE = 0xFFFFFFFF,
//   VEH_POS_DRIVER = 0x0,
//   VEH_POS_MIN_GUNNER = 0x1,
//   VEH_POS_GUNNER_1 = 0x1,
//   VEH_POS_GUNNER_2 = 0x2,
//   VEH_POS_GUNNER_3 = 0x3,
//   VEH_POS_GUNNER_4 = 0x4,
//   VEH_POS_MAX_GUNNER = 0x4,
//   VEH_POS_MIN_PASSENGER = 0x5,
//   VEH_POS_PASSENGER_1 = 0x5,
//   VEH_POS_PASSENGER_2 = 0x6,
//   VEH_POS_PASSENGER_3 = 0x7,
//   VEH_POS_PASSENGER_4 = 0x8,
//   VEH_POS_PASSENGER_5 = 0x9,
//   VEH_POS_PASSENGER_6 = 0xA,
//   VEH_POS_MAX_PASSENGER = 0xA,
//   NUM_VEHICLE_POSITIONS = 0xB,
// };

// /* 50 */
// enum _tagPARSEACTION : __int32
// {
//   PARSE_CANONICALIZE = 0x1,
//   PARSE_FRIENDLY = 0x2,
//   PARSE_SECURITY_URL = 0x3,
//   PARSE_ROOTDOCUMENT = 0x4,
//   PARSE_DOCUMENT = 0x5,
//   PARSE_ANCHOR = 0x6,
//   PARSE_ENCODE = 0x7,
//   PARSE_DECODE = 0x8,
//   PARSE_PATH_FROM_URL = 0x9,
//   PARSE_URL_FROM_PATH = 0xA,
//   PARSE_MIME = 0xB,
//   PARSE_SERVER = 0xC,
//   PARSE_SCHEMA = 0xD,
//   PARSE_SITE = 0xE,
//   PARSE_DOMAIN = 0xF,
//   PARSE_LOCATION = 0x10,
//   PARSE_SECURITY_DOMAIN = 0x11,
//   PARSE_ESCAPE = 0x12,
//   PARSE_UNESCAPE = 0x13,
// };

// /* 51 */
// enum animCommandFlags : __int32
// {
//   ANIM_FL_THROW_GRENADE = 0x0,
//   ANIM_FL_TURN_TO_TURRET = 0x1,
//   ANIM_FL_MAX = 0x2,
// };

// /* 52 */
// enum aistateEnum_t : __int32
// {
//   AISTATE_COMBAT = 0x0,
//   MAX_AISTATES = 0x1,
// };

// /* 53 */
// enum _tagPSUACTION : __int32
// {
//   PSU_DEFAULT = 0x1,
//   PSU_SECURITY_URL_ONLY = 0x2,
// };

// /* 54 */
// enum weapPositionAnimNum_t : __int32
// {
//   WEAPPOS_HIP_TO_ADS = 0x0,
//   WEAPPOS_ADS_TO_HIP = 0x1,
//   NUM_WEAPPOS_ANIMS = 0x2,
// };

// /* 55 */
// enum WeapAccuracyType : __int32
// {
//   WEAP_ACCURACY_AI_VS_AI = 0x0,
//   WEAP_ACCURACY_AI_VS_PLAYER = 0x1,
//   WEAP_ACCURACY_COUNT = 0x2,
// };

// /* 56 */
// enum _tagQUERYOPTION : __int32
// {
//   QUERY_EXPIRATION_DATE = 0x1,
//   QUERY_TIME_OF_LAST_CHANGE = 0x2,
//   QUERY_CONTENT_ENCODING = 0x3,
//   QUERY_CONTENT_TYPE = 0x4,
//   QUERY_REFRESH = 0x5,
//   QUERY_RECOMBINE = 0x6,
//   QUERY_CAN_NAVIGATE = 0x7,
//   QUERY_USES_NETWORK = 0x8,
//   QUERY_IS_CACHED = 0x9,
//   QUERY_IS_INSTALLEDENTRY = 0xA,
//   QUERY_IS_CACHED_OR_MAPPED = 0xB,
//   QUERY_USES_CACHE = 0xC,
//   QUERY_IS_SECURE = 0xD,
//   QUERY_IS_SAFE = 0xE,
//   QUERY_USES_HISTORYFOLDER = 0xF,
// };

// /* 57 */
// enum $ECAFE4083822E47C3145D78CCAC317D5 : __int32
// {
//   DEMO_PROFILE_GAMESTATE = 0x0,
//   DEMO_PROFILE_SNAPSHOT = 0x1,
//   DEMO_PROFILE_MATCHSTATES = 0x2,
//   DEMO_PROFILE_PLAYERSTATES = 0x3,
//   DEMO_PROFILE_ENTITIES = 0x4,
//   DEMO_PROFILE_CLIENTS = 0x5,
//   DEMO_PROFILE_ACTORS = 0x6,
//   DEMO_PROFILE_ANIMCMDS = 0x7,
//   DEMO_PROFILE_DATA_TYPE_COUNT = 0x8,
// };

// /* 58 */
// enum statIndex_t : __int32
// {
//   STAT_HEALTH = 0x0,
//   STAT_DEAD_YAW = 0x1,
//   STAT_MAX_HEALTH = 0x2,
//   STAT_IDENT_CLIENT_NUM = 0x3,
//   STAT_SPAWN_COUNT = 0x4,
//   MAX_STATS = 0x5,
// };

// /* 59 */
// enum $E7AAD314F22BE06FF033C0AE94135DA1 : __int32
// {
//   MT_NODE_SIZE = 0x10,
// };

// /* 60 */
// enum $083BC78C7DD30283A6E169A89D9AB577 : __int32
// {
//   MEMORY_NODE_BITS = 0x10,
//   MEMORY_NODE_COUNT = 0x10000,
//   MT_SIZE = 0x100000,
//   REFSTRING_STRING_OFFSET = 0x4,
// };

// /* 61 */
// enum ReplacesCorHdrNumericDefines : __int32
// {
//   COMIMAGE_FLAGS_ILONLY = 0x1,
//   COMIMAGE_FLAGS_32BITREQUIRED = 0x2,
//   COMIMAGE_FLAGS_IL_LIBRARY = 0x4,
//   COMIMAGE_FLAGS_STRONGNAMESIGNED = 0x8,
//   COMIMAGE_FLAGS_TRACKDEBUGDATA = 0x10000,
//   COR_VERSION_MAJOR_V2 = 0x2,
//   COR_VERSION_MAJOR = 0x2,
//   COR_VERSION_MINOR = 0x0,
//   COR_DELETED_NAME_LENGTH = 0x8,
//   COR_VTABLEGAP_NAME_LENGTH = 0x8,
//   NATIVE_TYPE_MAX_CB = 0x1,
//   COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 0xFF,
//   IMAGE_COR_MIH_METHODRVA = 0x1,
//   IMAGE_COR_MIH_EHRVA = 0x2,
//   IMAGE_COR_MIH_BASICBLOCK = 0x8,
//   COR_VTABLE_32BIT = 0x1,
//   COR_VTABLE_64BIT = 0x2,
//   COR_VTABLE_FROM_UNMANAGED = 0x4,
//   COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 0x8,
//   COR_VTABLE_CALL_MOST_DERIVED = 0x10,
//   IMAGE_COR_EATJ_THUNK_SIZE = 0x20,
//   MAX_CLASS_NAME = 0x400,
//   MAX_PACKAGE_NAME = 0x400,
// };

// /* 62 */
// enum $D44733B056630FE0206961F2AB059A9D : __int32
// {
//   TOTAL_STRINGLIST_SIZE = 0xC000,
//   CLIENT_STRINGLIST_SIZE = 0x4000,
//   SERVER_STRINGLIST_SIZE = 0x8000,
// };

// /* 63 */
// enum tagSYSKIND : __int32
// {
//   SYS_WIN16 = 0x0,
//   SYS_WIN32 = 0x1,
//   SYS_MAC = 0x2,
//   SYS_WIN64 = 0x3,
// };

// /* 64 */
// enum VehicleMaterialSound : __int32
// {
//   VEH_WHEEL_ROAD_NOISE = 0x0,
//   VEH_WHEEL_SLIDING = 0x1,
//   VEH_WHEEL_PEELING_OUT = 0x2,
//   NUM_VEHICLE_MATERIAL_SNDS = 0x3,
// };

// /* 65 */
// enum tagTYPEKIND : __int32
// {
//   TKIND_ENUM = 0x0,
//   TKIND_RECORD = 0x1,
//   TKIND_MODULE = 0x2,
//   TKIND_INTERFACE = 0x3,
//   TKIND_DISPATCH = 0x4,
//   TKIND_COCLASS = 0x5,
//   TKIND_ALIAS = 0x6,
//   TKIND_UNION = 0x7,
//   TKIND_MAX = 0x8,
// };

 /* 66 */
enum Attachment_t : __int32
{
  ATTACHMENT_NONE = 0x0,
  ATTACHMENT_REFLEX = 0x1,
  ATTACHMENT_ELBIT = 0x2,
  ATTACHMENT_ACOG = 0x3,
  ATTACHMENT_LPS = 0x4,
  ATTACHMENT_VZOOM = 0x5,
  ATTACHMENT_IR = 0x6,
  ATTACHMENT_GL = 0x7,
  ATTACHMENT_MK = 0x8,
  ATTACHMENT_SILENCER = 0x9,
  ATTACHMENT_GRIP = 0xA,
  ATTACHMENT_EXTCLIP = 0xB,
  ATTACHMENT_DUALCLIP = 0xC,
  ATTACHMENT_SADDLE = 0xD,
  ATTACHMENT_FMJ = 0xE,
  ATTACHMENT_HP = 0xF,
  ATTACHMENT_RF = 0x10,
  ATTACHMENT_FT = 0x11,
  ATTACHMENT_BAYONET = 0x12,
  ATTACHMENT_AUTO = 0x13,
  ATTACHMENT_SPEED = 0x14,
  ATTACHMENT_UPGRADESIGHT = 0x15,
  ATTACHMENT_SNUB = 0x16,
  ATTACHMENT_LAST_REAL = 0x16,
  ATTACHMENT_DW = 0x17,
  ATTACHMENT_COUNT = 0x18,
  ATTACHMENT_INVALID = 0x18,
};

// /* 67 */
// enum tagShutdownType : __int32
// {
//   IdleShutdown = 0x0,
//   ForcedShutdown = 0x1,
// };

 /* 68 */
enum : __int32
{
  THREAD_VALUE_PROF_STACK = 0x0,
  THREAD_VALUE_VA = 0x1,
  THREAD_VALUE_COM_ERROR = 0x2,
  THREAD_VALUE_TRACE = 0x3,
  THREAD_VALUE_CMD = 0x4,
  THREAD_VALUE_COUNT = 0x5,
};

// /* 69 */
// enum tagBINDSTATUS : __int32
// {
//   BINDSTATUS_FINDINGRESOURCE = 0x1,
//   BINDSTATUS_CONNECTING = 0x2,
//   BINDSTATUS_REDIRECTING = 0x3,
//   BINDSTATUS_BEGINDOWNLOADDATA = 0x4,
//   BINDSTATUS_DOWNLOADINGDATA = 0x5,
//   BINDSTATUS_ENDDOWNLOADDATA = 0x6,
//   BINDSTATUS_BEGINDOWNLOADCOMPONENTS = 0x7,
//   BINDSTATUS_INSTALLINGCOMPONENTS = 0x8,
//   BINDSTATUS_ENDDOWNLOADCOMPONENTS = 0x9,
//   BINDSTATUS_USINGCACHEDCOPY = 0xA,
//   BINDSTATUS_SENDINGREQUEST = 0xB,
//   BINDSTATUS_CLASSIDAVAILABLE = 0xC,
//   BINDSTATUS_MIMETYPEAVAILABLE = 0xD,
//   BINDSTATUS_CACHEFILENAMEAVAILABLE = 0xE,
//   BINDSTATUS_BEGINSYNCOPERATION = 0xF,
//   BINDSTATUS_ENDSYNCOPERATION = 0x10,
//   BINDSTATUS_BEGINUPLOADDATA = 0x11,
//   BINDSTATUS_UPLOADINGDATA = 0x12,
//   BINDSTATUS_ENDUPLOADDATA = 0x13,
//   BINDSTATUS_PROTOCOLCLASSID = 0x14,
//   BINDSTATUS_ENCODING = 0x15,
//   BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE = 0x16,
//   BINDSTATUS_CLASSINSTALLLOCATION = 0x17,
//   BINDSTATUS_DECODING = 0x18,
//   BINDSTATUS_LOADINGMIMEHANDLER = 0x19,
//   BINDSTATUS_CONTENTDISPOSITIONATTACH = 0x1A,
//   BINDSTATUS_FILTERREPORTMIMETYPE = 0x1B,
//   BINDSTATUS_CLSIDCANINSTANTIATE = 0x1C,
//   BINDSTATUS_IUNKNOWNAVAILABLE = 0x1D,
//   BINDSTATUS_DIRECTBIND = 0x1E,
//   BINDSTATUS_RAWMIMETYPE = 0x1F,
//   BINDSTATUS_PROXYDETECTING = 0x20,
//   BINDSTATUS_ACCEPTRANGES = 0x21,
//   BINDSTATUS_COOKIE_SENT = 0x22,
//   BINDSTATUS_COMPACT_POLICY_RECEIVED = 0x23,
//   BINDSTATUS_COOKIE_SUPPRESSED = 0x24,
//   BINDSTATUS_COOKIE_STATE_UNKNOWN = 0x25,
//   BINDSTATUS_COOKIE_STATE_ACCEPT = 0x26,
//   BINDSTATUS_COOKIE_STATE_REJECT = 0x27,
//   BINDSTATUS_COOKIE_STATE_PROMPT = 0x28,
//   BINDSTATUS_COOKIE_STATE_LEASH = 0x29,
//   BINDSTATUS_COOKIE_STATE_DOWNGRADE = 0x2A,
//   BINDSTATUS_POLICY_HREF = 0x2B,
//   BINDSTATUS_P3P_HEADER = 0x2C,
//   BINDSTATUS_SESSION_COOKIE_RECEIVED = 0x2D,
//   BINDSTATUS_PERSISTENT_COOKIE_RECEIVED = 0x2E,
//   BINDSTATUS_SESSION_COOKIES_ALLOWED = 0x2F,
//   BINDSTATUS_CACHECONTROL = 0x30,
//   BINDSTATUS_CONTENTDISPOSITIONFILENAME = 0x31,
//   BINDSTATUS_MIMETEXTPLAINMISMATCH = 0x32,
//   BINDSTATUS_PUBLISHERAVAILABLE = 0x33,
//   BINDSTATUS_DISPLAYNAMEAVAILABLE = 0x34,
//   BINDSTATUS_SSLUX_NAVBLOCKED = 0x35,
// };

// /* 70 */
// enum $93E05B02D75CB8D5BD679C8A761DAE10 : __int32
// {
//   THREAD_CONTEXT_MAIN = 0x0,
//   THREAD_CONTEXT_BACKEND = 0x1,
//   THREAD_CONTEXT_WORKER0 = 0x2,
//   THREAD_CONTEXT_WORKER1 = 0x3,
//   THREAD_CONTEXT_WORKER2 = 0x4,
//   THREAD_CONTEXT_WORKER3 = 0x5,
//   THREAD_CONTEXT_WORKER4 = 0x6,
//   THREAD_CONTEXT_WORKER5 = 0x7,
//   THREAD_CONTEXT_WORKER6 = 0x8,
//   THREAD_CONTEXT_WORKER7 = 0x9,
//   THREAD_CONTEXT_SERVER = 0xA,
//   THREAD_CONTEXT_OCCLUSION = 0xB,
//   THREAD_CONTEXT_TRACE_COUNT = 0xC,
//   THREAD_CONTEXT_TRACE_LAST = 0xB,
//   THREAD_CONTEXT_TITLE_SERVER = 0xC,
//   THREAD_CONTEXT_DATABASE = 0xD,
//   THREAD_CONTEXT_STREAM = 0xE,
//   THREAD_CONTEXT_COUNT = 0xF,
//   THREAD_CONTEXT_INVALID = 0xFFFFFFFF,
// };

 /* 71 */
enum scoreboardColumnType_t : __int32
{
  SB_TYPE_INVALID = 0x0,
  SB_TYPE_NONE = 0x1,
  SB_TYPE_KILLS = 0x2,
  SB_TYPE_DEATHS = 0x3,
  SB_TYPE_ASSISTS = 0x4,
  SB_TYPE_DEFENDS = 0x5,
  SB_TYPE_PLANTS = 0x6,
  SB_TYPE_DEFUSES = 0x7,
  SB_TYPE_RETURNS = 0x8,
  SB_TYPE_CAPTURES = 0x9,
  SB_TYPE_DESTRUCTIONS = 0xA,
  SB_TYPE_KDRATIO = 0xB,
  SB_TYPE_SURVIVED = 0xC,
  SB_TYPE_STABS = 0xD,
  SB_TYPE_TOMAHAWKS = 0xE,
  SB_TYPE_HUMILIATED = 0xF,
  SB_TYPE_X2SCORE = 0x10,
  SB_TYPE_HEADSHOTS = 0x11,
  NUM_SB_TYPES = 0x12,
};

// /* 72 */
// enum eAttachmentGroup : __int32
// {
//   ATTACHMENT_GROUP_ATTACHMENT = 0x0,
//   ATTACHMENT_GROUP_WEAPONOPTIONS = 0x1,
//   ATTACHMENT_GROUP_POINTS = 0x2,
//   ATTACHMENT_GROUP_COUNT = 0x3,
//   ATTACHMENT_GROUP_INVALID = 0x3,
// };

 /* 73 */
enum OffhandSecondaryClass : __int32
{
  PLAYER_OFFHAND_SECONDARY_SMOKE = 0x0,
  PLAYER_OFFHAND_SECONDARY_FLASH = 0x1,
  PLAYER_OFFHAND_SECONDARIES_TOTAL = 0x2,
};

/* 74 */
enum OffhandPrimaryClass : __int32
{
  PLAYER_OFFHAND_PRIMARY_FRAG = 0x0,
  PLAYER_OFFHAND_PRIMARY_GEAR = 0x1,
  PLAYER_OFFHAND_PRIMARIES_TOTAL = 0x2,
};

/* 75 */
enum AISpecies : __int32
{
  AI_SPECIES_DOG = 0x0,
  MAX_AI_SPECIES = 0x1,
  AI_SPECIES_ALL = 0x1,
};

// /* 76 */
// enum $A78E51A31D437A17720506A08EDF09E5 : __int32
// {
//   DEMO_CONTROLS_BUTTON_PLAY = 0x0,
//   DEMO_CONTROLS_BUTTON_RECORD = 0x1,
//   DEMO_CONTROLS_BUTTON_SWITCH_PLAYER = 0x2,
//   DEMO_CONTROLS_BUTTON_SWITCH_CAMERA = 0x3,
//   DEMO_CONTROLS_BUTTON_TOGGLE_GAME_HUD = 0x4,
//   DEMO_CONTROLS_BUTTON_TOGGLE_DEMO_HUD = 0x5,
//   DEMO_CONTROLS_BUTTON_JUMP_BACK = 0x6,
//   DEMO_CONTROLS_BUTTON_JUMP_FORWARD = 0x7,
//   DEMO_CONTROLS_BUTTON_TIMESCALE_DECREASE = 0x8,
//   DEMO_CONTROLS_BUTTON_TIMESCALE_INCREASE = 0x9,
//   DEMO_CONTROLS_BUTTON_COUNT = 0xA,
// };

 /* 77 */
enum ActionSlotType : __int32
{
  ACTIONSLOTTYPE_DONOTHING = 0x0,
  ACTIONSLOTTYPE_SPECIFYWEAPON = 0x1,
  ACTIONSLOTTYPE_ALTWEAPONTOGGLE = 0x2,
  ACTIONSLOTTYPE_NIGHTVISION = 0x3,
  ACTIONSLOTTYPECOUNT = 0x4,
};

// /* 78 */
// enum perksEnum : __int32
// {
//   PERK_ARMORPIERCING = 0x0,
//   PERK_ARMORVEST = 0x1,
//   PERK_ACCURACY = 0x2,
//   PERK_BULLETDMG = 0x3,
//   PERK_REDUCEBULLETFLINCH = 0x4,
//   PERK_EXTRABP = 0x5,
//   PERK_COPYCAT = 0x6,
//   PERK_DELAYEXPLOSIVE = 0x7,
//   PERK_DETECTEXPLOSIVE = 0x8,
//   PERK_DISARMEXPLOSIVE = 0x9,
//   PERK_EXPLOSIVEDMG = 0xA,
//   PERK_EXTRAAMMO = 0xB,
//   PERK_EXTRAMONEY = 0xC,
//   PERK_FALLHEIGHT = 0xD,
//   PERK_FASTADS = 0xE,
//   PERK_FASTINTERACT = 0xF,
//   PERK_FASTMANTLE = 0x10,
//   PERK_FASTMELEE = 0x11,
//   PERK_FASTRELOAD = 0x12,
//   PERK_FASTSWITCH = 0x13,
//   PERK_FINALSTAND = 0x14,
//   PERK_FIREPROOF = 0x15,
//   PERK_FLAKJACKET = 0x16,
//   PERK_GAMBLER = 0x17,
//   PERK_GASMASK = 0x18,
//   PERK_JAMRADAR = 0x19,
//   PERK_GRENADEDEATH = 0x1A,
//   PERK_HEALTHREGEN = 0x1B,
//   PERK_EXTRABREATH = 0x1C,
//   PERK_KILLSTREAK = 0x1D,
//   PERK_LONGERSPRINT = 0x1E,
//   PERK_LOUDENEMIES = 0x1F,
//   PERK_MOVEFASTER = 0x20,
//   PERK_NOMOTIONSENSOR = 0x21,
//   PERK_NONAME = 0x22,
//   PERK_GHOST = 0x23,
//   PERK_TOSSBACK = 0x24,
//   PERK_PISTOLDEATH = 0x25,
//   PERK_QUIETMOVE = 0x26,
//   PERK_RECON = 0x27,
//   PERK_RATEOFFIRE = 0x28,
//   PERK_SCAVENGER = 0x29,
//   PERK_SHADES = 0x2A,
//   PERK_SHOWENEMYEQUIPMENT = 0x2B,
//   PERK_STUNPROTECTION = 0x2C,
//   PERK_REDUCESHELLSHOCK = 0x2D,
//   PERK_SPRINTRECOVERY = 0x2E,
//   PERK_SHOWONRADAR = 0x2F,
//   PERK_TWOATTACH = 0x30,
//   PERK_TWOGRENADES = 0x31,
//   PERK_TWOPRIMARIES = 0x32,
//   PERK_UNLIMITEDSPRINT = 0x33,
//   PERK_COUNT = 0x34,
//   PERK_UNKNOWN = 0x34,
// };

// /* 79 */
// enum $DDCB6898DD9E0FE6C3119C21024A2B49 : __int32
// {
//   DEMO_RESTORE_POINT_START = 0x0,
//   DEMO_RESTORE_POINT_END = 0x1,
//   DEMO_RESTORE_POINT_COUNT = 0x2,
// };

// /* 80 */
// enum entity_event_t : __int32
// {
//   EV_NONE = 0x0,
//   EV_FOLIAGE_SOUND = 0x1,
//   EV_STOP_WEAPON_SOUND = 0x2,
//   EV_STOP_SOUND_ALIAS = 0x3,
//   EV_SOUND_ALIAS = 0x4,
//   EV_SOUND_ALIAS_NOTIFY = 0x5,
//   EV_SOUND_BATTLECHAT_ALIAS = 0x6,
//   EV_STOPSOUNDS = 0x7,
//   EV_STANCE_FORCE_STAND = 0x8,
//   EV_STANCE_FORCE_CROUCH = 0x9,
//   EV_STANCE_FORCE_PRONE = 0xA,
//   EV_ITEM_PICKUP = 0xB,
//   EV_AMMO_PICKUP = 0xC,
//   EV_NOAMMO = 0xD,
//   EV_NOAMMO_LEFT = 0xE,
//   EV_EMPTYCLIP = 0xF,
//   EV_EMPTY_OFFHAND = 0x10,
//   EV_RESET_ADS = 0x11,
//   EV_RELOAD = 0x12,
//   EV_RELOAD_FROM_EMPTY = 0x13,
//   EV_RELOAD_START = 0x14,
//   EV_RELOAD_END = 0x15,
//   EV_RELOAD_START_NOTIFY = 0x16,
//   EV_RELOAD_ADDAMMO = 0x17,
//   EV_RAISE_WEAPON = 0x18,
//   EV_FIRST_RAISE_WEAPON = 0x19,
//   EV_PUTAWAY_WEAPON = 0x1A,
//   EV_WEAPON_ALT = 0x1B,
//   EV_PULLBACK_WEAPON = 0x1C,
//   EV_FIRE_WEAPON = 0x1D,
//   EV_FIRE_WEAPON_LASTSHOT = 0x1E,
//   EV_FIRE_WEAPON_LEFT = 0x1F,
//   EV_FIRE_WEAPON_LASTSHOT_LEFT = 0x20,
//   EV_RECHAMBER_WEAPON = 0x21,
//   EV_EJECT_BRASS = 0x22,
//   EV_MELEE_SWIPE = 0x23,
//   EV_FIRE_MELEE = 0x24,
//   EV_WEAPON_DEPLOYING = 0x25,
//   EV_WEAPON_FINISH_DEPLOYING = 0x26,
//   EV_WEAPON_BREAKING_DOWN = 0x27,
//   EV_WEAPON_FINISH_BREAKING_DOWN = 0x28,
//   EV_PREP_OFFHAND = 0x29,
//   EV_USE_OFFHAND = 0x2A,
//   EV_SWITCH_OFFHAND = 0x2B,
//   EV_MELEE_HIT = 0x2C,
//   EV_MELEE_MISS = 0x2D,
//   EV_MELEE_BLOOD = 0x2E,
//   EV_FIRE_WEAPON_MG42 = 0x2F,
//   EV_FIRE_WEAPON_MG42A = 0x30,
//   EV_FIRE_QUADBARREL_1 = 0x31,
//   EV_FIRE_QUADBARREL_2 = 0x32,
//   EV_BULLET_HIT = 0x33,
//   EV_BULLET_HIT_CLIENT_SMALL = 0x34,
//   EV_BULLET_HIT_CLIENT_LARGE = 0x35,
//   EV_DESTRUCTIBLE_BULLET_HIT = 0x36,
//   EV_DESTRUCTIBLE_EXPLOSION_HIT = 0x37,
//   EV_GRENADE_BOUNCE = 0x38,
//   EV_GRENADE_EXPLODE = 0x39,
//   EV_ROCKET_EXPLODE = 0x3A,
//   EV_ROCKET_EXPLODE_NOMARKS = 0x3B,
//   EV_FLASHBANG_EXPLODE = 0x3C,
//   EV_CUSTOM_EXPLODE = 0x3D,
//   EV_CUSTOM_EXPLODE_NOMARKS = 0x3E,
//   EV_CHANGE_TO_DUD = 0x3F,
//   EV_DUD_EXPLODE = 0x40,
//   EV_DUD_IMPACT = 0x41,
//   EV_FIRE_EXPLODE = 0x42,
//   EV_TIMED_FX = 0x43,
//   EV_MOLOTOV_FLOAT = 0x44,
//   EV_FAKE_FIRE = 0x45,
//   EV_PLAY_FX = 0x46,
//   EV_PLAY_FX_ON_TAG = 0x47,
//   EV_PHYS_EXPLOSION_SPHERE = 0x48,
//   EV_PHYS_EXPLOSION_CYLINDER = 0x49,
//   EV_PHYS_EXPLOSION_JOLT = 0x4A,
//   EV_PHYS_LAUNCH = 0x4B,
//   EV_CREATE_DYNENT = 0x4C,
//   EV_CREATE_ROPE = 0x4D,
//   EV_BLOOD_IMPACTS = 0x4E,
//   EV_DETACH_ENTITY = 0x4F,
//   EV_DELETE_ROPE = 0x50,
//   EV_ROPE_COLLIDE = 0x51,
//   EV_ROPE_SETFLAG = 0x52,
//   EV_ROPE_SETPARAM = 0x53,
//   EV_ROPE_ADDANCHOR = 0x54,
//   EV_ROPE_REMOVEANCHOR = 0x55,
//   EV_ROPE_MOVEANCHOR = 0x56,
//   EV_SETWETNESS = 0x57,
//   EV_EARTHQUAKE = 0x58,
//   EV_GRENADE_DROP = 0x59,
//   EV_GRENADE_SUICIDE = 0x5A,
//   EV_DETONATE = 0x5B,
//   EV_NIGHTVISION_WEAR = 0x5C,
//   EV_NIGHTVISION_REMOVE = 0x5D,
//   EV_OBITUARY = 0x5E,
//   EV_REVIVE_OBITUARY = 0x5F,
//   EV_DIRECTIONAL_HIT_INDICATOR = 0x60,
//   EV_ANIMATE_UI = 0x61,
//   EV_NO_FRAG_GRENADE_HINT = 0x62,
//   EV_NO_SPECIAL_GRENADE_HINT = 0x63,
//   EV_TARGET_TOO_CLOSE_HINT = 0x64,
//   EV_TARGET_NOT_ENOUGH_CLEARANCE = 0x65,
//   EV_LOCKON_REQUIRED_HINT = 0x66,
//   EV_FOOTSTEP_SPRINT = 0x67,
//   EV_FOOTSTEP_RUN = 0x68,
//   EV_FOOTSTEP_WALK = 0x69,
//   EV_FOOTSTEP_CROUCHRUN = 0x6A,
//   EV_FOOTSTEP_CROUCHWALK = 0x6B,
//   EV_FOOTSTEP_PRONE = 0x6C,
//   EV_MANTLE = 0x6D,
//   EV_JUMP = 0x6E,
//   EV_LANDING_FIRST = 0x6F,
//   EV_LANDING_LAST = 0x8D,
//   EV_LANDING_PAIN_FIRST = 0x8E,
//   EV_LANDING_PAIN_LAST = 0xAC,
//   EV_FIRE_VEHICLE_TURRET = 0xAD,
//   EV_FIRE_GUNNER_1 = 0xAE,
//   EV_FIRE_GUNNER_2 = 0xAF,
//   EV_FIRE_GUNNER_3 = 0xB0,
//   EV_FIRE_GUNNER_4 = 0xB1,
//   EV_FIRE_GUNNER_1A = 0xB2,
//   EV_FIRE_GUNNER_2A = 0xB3,
//   EV_FIRE_GUNNER_3A = 0xB4,
//   EV_FIRE_GUNNER_4A = 0xB5,
//   EV_START_CAMERA_TWEEN = 0xB6,
//   EV_DESTRUCTIBLE_DISABLE_PIECES = 0xB7,
//   EV_FOOTPRINT = 0xB8,
//   EV_CANNOTPLANT = 0xB9,
//   EV_DTP_LAUNCH = 0xBA,
//   EV_DTP_LAND = 0xBB,
//   EV_SLIDE_START = 0xBC,
//   EV_SLIDE_STOP = 0xBD,
//   EV_SCOPE_ZOOM = 0xBE,
//   EV_JAM_WEAPON = 0xBF,
//   EV_STACKFIRE = 0xC0,
//   EV_BOLT_IMPACT = 0xC1,
//   EV_BOLT_IMPALE = 0xC2,
//   EV_PLAY_WEAPON_DEATH_EFFECTS = 0xC3,
//   EV_PLAY_WEAPON_DAMAGE_EFFECTS = 0xC4,
//   EV_FACE_EVENT = 0xC5,
//   EV_SETLOCALWIND = 0xC6,
//   EV_FLOAT_LONGER = 0xC7,
//   EV_FORCE_BUOYANCY = 0xC8,
//   EV_DISABLE_DEPTH_BUOYANCY_ADJUSTMENTS = 0xC9,
//   EV_SCALE_BUOYANCY = 0xCA,
//   EV_ALLOWPITCH = 0xCB,
//   EV_GIB = 0xCC,
//   EV_MAX_EVENTS = 0xCD,
// };

// /* 81 */
// enum tagCHANGEKIND : __int32
// {
//   CHANGEKIND_ADDMEMBER = 0x0,
//   CHANGEKIND_DELETEMEMBER = 0x1,
//   CHANGEKIND_SETNAMES = 0x2,
//   CHANGEKIND_SETDOCUMENTATION = 0x3,
//   CHANGEKIND_GENERAL = 0x4,
//   CHANGEKIND_INVALIDATE = 0x5,
//   CHANGEKIND_CHANGEFAILED = 0x6,
//   CHANGEKIND_MAX = 0x7,
// };

// /* 82 */
// enum $AA89F05AB2B3171A2BDA21648F09F117 : __int32
// {
//   IMGF_MIPMAPS = 0x1,
//   IMGF_ALLOWPICMIP = 0x2,
//   IMGF_CHARACTERMIP = 0x4,
//   IMGF_LIGHTMAP = 0x8,
//   IMGF_CLAMP_S = 0x10,
//   IMGF_CLAMP_T = 0x20,
//   IMGF_HEIGHTMAP = 0x40,
//   IMGF_DELAYLOAD = 0x80,
//   IMGF_NOOPT = 0x100,
//   IMGF_SCREENDEPTH = 0x200,
//   IMGF_TEXTURENAME = 0x400,
//   IMGF_SHEET_KEEP_FLAGS = 0x1,
// };

// /* 83 */
// enum $F1A8C94D0E509EAAC339967BB69B48A5 : __int32
// {
//   BOMB_TIMER_PRIMARY = 0x0,
//   BOMB_TIMER_SECONDARY = 0x1,
//   BOMB_TIMER_COUNT = 0x2,
// };

 /* 84 */
enum ViewLockTypes : __int32
{
  PLAYERVIEWLOCK_NONE = 0x0,
  PLAYERVIEWLOCK_FULL = 0x1,
  PLAYERVIEWLOCK_WEAPONJITTER = 0x2,
  PLAYERVIEWLOCKCOUNT = 0x3,
};

/* 85 */
enum VehicleAnimState : __int32
{
  VEHICLEANIMSTATE_IDLE = 0x0,
  VEHICLEANIMSTATE_ENTRY = 0x1,
  VEHICLEANIMSTATE_CHANGEPOS = 0x2,
  VEHICLEANIMSTATE_EXIT = 0x3,
  VEHICLEANIMSTATECOUNT = 0x4,
};

// /* 86 */
// enum tagCALLCONV : __int32
// {
//   CC_FASTCALL = 0x0,
//   CC_CDECL = 0x1,
//   CC_MSCPASCAL = 0x2,
//   CC_PASCAL = 0x2,
//   CC_MACPASCAL = 0x3,
//   CC_STDCALL = 0x4,
//   CC_FPFASTCALL = 0x5,
//   CC_SYSCALL = 0x6,
//   CC_MPWCDECL = 0x7,
//   CC_MPWPASCAL = 0x8,
//   CC_MAX = 0x9,
// };

// /* 87 */
// enum $0625F1EA0FCD0D07867F21EE65C1E532 : __int32
// {
//   DOBJ_MAX_PARTS = 0xA0,
//   DOBJ_MAX_PART_BITS = 0x5,
//   MAX_LODS = 0x4,
// };

// /* 88 */
// enum $7750782190E2FC1D8823C628DB2DF5C2 : __int32
// {
//   FS_LOOK_IN_MAIN = 0x1,
//   FS_LOOK_IN_DEV = 0x2,
//   FS_LOOK_IN_TEMP = 0x4,
//   FS_LOOK_IN_RAW = 0x8,
//   FS_LOOK_IN_RAWSHARED = 0x10,
//   FS_LOOK_IN_DEVRAW = 0x20,
//   FS_LOOK_IN_ALL = 0x3F,
// };

// /* 89 */
// enum $13F9397E79D9CCECD04953BDD0966834 : __int32
// {
//   DRAW_SURF_CAMERA_LIT_BEGIN = 0x0,
//   DRAW_SURF_BSP_CAMERA_LIT = 0x0,
//   DRAW_SURF_SMODEL_CAMERA_LIT = 0x1,
//   DRAW_SURF_ENT_CAMERA_LIT = 0x2,
//   DRAW_SURF_CAMERA_LIT_END = 0x3,
//   DRAW_SURF_CAMERA_DECAL_BEGIN = 0x3,
//   DRAW_SURF_BSP_CAMERA_DECAL = 0x3,
//   DRAW_SURF_SMODEL_CAMERA_DECAL = 0x4,
//   DRAW_SURF_ENT_CAMERA_DECAL = 0x5,
//   DRAW_SURF_FX_CAMERA_LIT = 0x6,
//   DRAW_SURF_FX_CAMERA_LIT_AUTO = 0x7,
//   DRAW_SURF_FX_CAMERA_LIT_DECAL = 0x8,
//   DRAW_SURF_CODEMESH_CAMERA_LIT = 0x9,
//   DRAW_SURF_CAMERA_DECAL_END = 0xA,
//   DRAW_SURF_CAMERA_EMISSIVE_BEGIN = 0xA,
//   DRAW_SURF_BSP_CAMERA_EMISSIVE = 0xA,
//   DRAW_SURF_SMODEL_CAMERA_EMISSIVE = 0xB,
//   DRAW_SURF_ENT_CAMERA_EMISSIVE = 0xC,
//   DRAW_SURF_FX_CAMERA_EMISSIVE = 0xD,
//   DRAW_SURF_FX_CAMERA_EMISSIVE_AUTO = 0xE,
//   DRAW_SURF_FX_CAMERA_EMISSIVE_DECAL = 0xF,
//   DRAW_SURF_CAMERA_EMISSIVE_END = 0x10,
//   DRAW_SURF_REFLECTED_EMISSIVE_BEGIN = 0x10,
//   DRAW_SURF_FX_REFLECTED_EMISSIVE = 0x10,
//   DRAW_SURF_FX_REFLECTED_EMISSIVE_AUTO = 0x11,
//   DRAW_SURF_FX_REFLECTED_EMISSIVE_DECAL = 0x12,
//   DRAW_SURF_REFLECTED_EMISSIVE_END = 0x13,
//   DRAW_SURF_SUNSHADOW_0_BEGIN = 0x13,
//   DRAW_SURF_BSP_SUNSHADOW_0 = 0x13,
//   DRAW_SURF_SMODEL_SUNSHADOW_0 = 0x14,
//   DRAW_SURF_ENT_SUNSHADOW_0 = 0x15,
//   DRAW_SURF_CODEMESH_SUNSHADOW_0 = 0x16,
//   DRAW_SURF_SUNSHADOW_1_BEGIN = 0x17,
//   DRAW_SURF_BSP_SUNSHADOW_1 = 0x17,
//   DRAW_SURF_SMODEL_SUNSHADOW_1 = 0x18,
//   DRAW_SURF_ENT_SUNSHADOW_1 = 0x19,
//   DRAW_SURF_CODEMESH_SUNSHADOW_1 = 0x1A,
//   DRAW_SURF_SPOTSHADOW_0_BEGIN = 0x1B,
//   DRAW_SURF_BSP_SPOTSHADOW_0 = 0x1B,
//   DRAW_SURF_SMODEL_SPOTSHADOW_0 = 0x1C,
//   DRAW_SURF_ENT_SPOTSHADOW_0 = 0x1D,
//   DRAW_SURF_SPOTSHADOW_1_BEGIN = 0x1E,
//   DRAW_SURF_BSP_SPOTSHADOW_1 = 0x1E,
//   DRAW_SURF_SMODEL_SPOTSHADOW_1 = 0x1F,
//   DRAW_SURF_ENT_SPOTSHADOW_1 = 0x20,
//   DRAW_SURF_SPOTSHADOW_2_BEGIN = 0x21,
//   DRAW_SURF_BSP_SPOTSHADOW_2 = 0x21,
//   DRAW_SURF_SMODEL_SPOTSHADOW_2 = 0x22,
//   DRAW_SURF_ENT_SPOTSHADOW_2 = 0x23,
//   DRAW_SURF_SPOTSHADOW_3_BEGIN = 0x24,
//   DRAW_SURF_BSP_SPOTSHADOW_3 = 0x24,
//   DRAW_SURF_SMODEL_SPOTSHADOW_3 = 0x25,
//   DRAW_SURF_ENT_SPOTSHADOW_3 = 0x26,
//   DRAW_SURF_TYPE_COUNT = 0x27,
// };

// /* 90 */
// enum $8D041886EF3022F9893A45FB1AB1517F : __int32
// {
//   DSKEL_CREATE_INC = 0x20,
// };

// /* 91 */
// enum $5BD965B339D4C68C182552AD18EF6065 : __int32
// {
//   TECHNIQUE_DEPTH_PREPASS = 0x0,
//   TECHNIQUE_BUILD_FLOAT_Z = 0x1,
//   TECHNIQUE_BUILD_SHADOWMAP_DEPTH = 0x2,
//   TECHNIQUE_BUILD_SHADOWMAP_COLOR = 0x3,
//   TECHNIQUE_UNLIT = 0x4,
//   TECHNIQUE_EMISSIVE = 0x5,
//   TECHNIQUE_EMISSIVE_SHADOW = 0x6,
//   TECHNIQUE_EMISSIVE_NV_INTZ = 0x7,
//   TECHNIQUE_EMISSIVE_SHADOW_NV_INTZ = 0x8,
//   TECHNIQUE_EMISSIVE_REFLECTED = 0x9,
//   TECHNIQUE_LIT_BEGIN = 0xA,
//   TECHNIQUE_LIT = 0xA,
//   TECHNIQUE_LIT_SUN = 0xB,
//   TECHNIQUE_LIT_SUN_SHADOW = 0xC,
//   TECHNIQUE_LIT_SPOT = 0xD,
//   TECHNIQUE_LIT_SPOT_SHADOW = 0xE,
//   TECHNIQUE_LIT_OMNI = 0xF,
//   TECHNIQUE_LIT_OMNI_SHADOW = 0x10,
//   TECHNIQUE_LIT_DLIGHT = 0x11,
//   TECHNIQUE_LIT_SUN_DLIGHT = 0x12,
//   TECHNIQUE_LIT_SUN_SHADOW_DLIGHT = 0x13,
//   TECHNIQUE_LIT_SPOT_DLIGHT = 0x14,
//   TECHNIQUE_LIT_SPOT_SHADOW_DLIGHT = 0x15,
//   TECHNIQUE_LIT_OMNI_DLIGHT = 0x16,
//   TECHNIQUE_LIT_OMNI_SHADOW_DLIGHT = 0x17,
//   TECHNIQUE_LIT_GLIGHT = 0x18,
//   TECHNIQUE_LIT_SUN_GLIGHT = 0x19,
//   TECHNIQUE_LIT_SUN_SHADOW_GLIGHT = 0x1A,
//   TECHNIQUE_LIT_SPOT_GLIGHT = 0x1B,
//   TECHNIQUE_LIT_SPOT_SHADOW_GLIGHT = 0x1C,
//   TECHNIQUE_LIT_OMNI_GLIGHT = 0x1D,
//   TECHNIQUE_LIT_OMNI_SHADOW_GLIGHT = 0x1E,
//   TECHNIQUE_LIT_DLIGHT_GLIGHT = 0x1F,
//   TECHNIQUE_LIT_SUN_DLIGHT_GLIGHT = 0x20,
//   TECHNIQUE_LIT_SUN_SHADOW_DLIGHT_GLIGHT = 0x21,
//   TECHNIQUE_LIT_SPOT_DLIGHT_GLIGHT = 0x22,
//   TECHNIQUE_LIT_SPOT_SHADOW_DLIGHT_GLIGHT = 0x23,
//   TECHNIQUE_LIT_OMNI_DLIGHT_GLIGHT = 0x24,
//   TECHNIQUE_LIT_OMNI_SHADOW_DLIGHT_GLIGHT = 0x25,
//   TECHNIQUE_LIT_ALPHA = 0x26,
//   TECHNIQUE_LIT_SUN_ALPHA = 0x27,
//   TECHNIQUE_LIT_SUN_SHADOW_ALPHA = 0x28,
//   TECHNIQUE_LIT_SPOT_ALPHA = 0x29,
//   TECHNIQUE_LIT_SPOT_SHADOW_ALPHA = 0x2A,
//   TECHNIQUE_LIT_OMNI_ALPHA = 0x2B,
//   TECHNIQUE_LIT_OMNI_SHADOW_ALPHA = 0x2C,
//   TECHNIQUE_LIT_REMAP = 0x2D,
//   TECHNIQUE_LIT_SUN_REMAP = 0x2E,
//   TECHNIQUE_LIT_SUN_SHADOW_REMAP = 0x2F,
//   TECHNIQUE_LIT_SPOT_REMAP = 0x30,
//   TECHNIQUE_LIT_SPOT_SHADOW_REMAP = 0x31,
//   TECHNIQUE_LIT_OMNI_REMAP = 0x32,
//   TECHNIQUE_LIT_OMNI_SHADOW_REMAP = 0x33,
//   TECHNIQUE_LIT_NO_HDR_SUPPORT = 0x34,
//   TECHNIQUE_LIT_FADE = 0x34,
//   TECHNIQUE_LIT_SUN_FADE = 0x35,
//   TECHNIQUE_LIT_SUN_SHADOW_FADE = 0x36,
//   TECHNIQUE_LIT_SPOT_FADE = 0x37,
//   TECHNIQUE_LIT_SPOT_SHADOW_FADE = 0x38,
//   TECHNIQUE_LIT_OMNI_FADE = 0x39,
//   TECHNIQUE_LIT_OMNI_SHADOW_FADE = 0x3A,
//   TECHNIQUE_LIT_CHARRED = 0x3B,
//   TECHNIQUE_LIT_FADE_CHARRED = 0x3C,
//   TECHNIQUE_LIT_SUN_CHARRED = 0x3D,
//   TECHNIQUE_LIT_SUN_FADE_CHARRED = 0x3E,
//   TECHNIQUE_LIT_SUN_SHADOW_CHARRED = 0x3F,
//   TECHNIQUE_LIT_SUN_SHADOW_FADE_CHARRED = 0x40,
//   TECHNIQUE_LIT_SPOT_CHARRED = 0x41,
//   TECHNIQUE_LIT_SPOT_FADE_CHARRED = 0x42,
//   TECHNIQUE_LIT_SPOT_SHADOW_CHARRED = 0x43,
//   TECHNIQUE_LIT_SPOT_SHADOW_FADE_CHARRED = 0x44,
//   TECHNIQUE_LIT_OMNI_CHARRED = 0x45,
//   TECHNIQUE_LIT_OMNI_FADE_CHARRED = 0x46,
//   TECHNIQUE_LIT_OMNI_SHADOW_CHARRED = 0x47,
//   TECHNIQUE_LIT_OMNI_SHADOW_FADE_CHARRED = 0x48,
//   TECHNIQUE_LIT_INSTANCED = 0x49,
//   TECHNIQUE_LIT_INSTANCED_SUN = 0x4A,
//   TECHNIQUE_LIT_INSTANCED_SUN_SHADOW = 0x4B,
//   TECHNIQUE_LIT_INSTANCED_SPOT = 0x4C,
//   TECHNIQUE_LIT_INSTANCED_SPOT_SHADOW = 0x4D,
//   TECHNIQUE_LIT_INSTANCED_OMNI = 0x4E,
//   TECHNIQUE_LIT_INSTANCED_OMNI_SHADOW = 0x4F,
//   TECHNIQUE_LIT_NV_BEGIN = 0x50,
//   TECHNIQUE_LIT_NV_INTZ = 0x50,
//   TECHNIQUE_LIT_SUN_NV_INTZ = 0x51,
//   TECHNIQUE_LIT_SUN_SHADOW_NV_INTZ = 0x52,
//   TECHNIQUE_LIT_SPOT_NV_INTZ = 0x53,
//   TECHNIQUE_LIT_SPOT_SHADOW_NV_INTZ = 0x54,
//   TECHNIQUE_LIT_OMNI_NV_INTZ = 0x55,
//   TECHNIQUE_LIT_OMNI_SHADOW_NV_INTZ = 0x56,
//   TECHNIQUE_LIT_DLIGHT_NV_INTZ = 0x57,
//   TECHNIQUE_LIT_SUN_DLIGHT_NV_INTZ = 0x58,
//   TECHNIQUE_LIT_SUN_SHADOW_DLIGHT_NV_INTZ = 0x59,
//   TECHNIQUE_LIT_SPOT_DLIGHT_NV_INTZ = 0x5A,
//   TECHNIQUE_LIT_SPOT_SHADOW_DLIGHT_NV_INTZ = 0x5B,
//   TECHNIQUE_LIT_OMNI_DLIGHT_NV_INTZ = 0x5C,
//   TECHNIQUE_LIT_OMNI_SHADOW_DLIGHT_NV_INTZ = 0x5D,
//   TECHNIQUE_LIT_GLIGHT_NV_INTZ = 0x5E,
//   TECHNIQUE_LIT_SUN_GLIGHT_NV_INTZ = 0x5F,
//   TECHNIQUE_LIT_SUN_SHADOW_GLIGHT_NV_INTZ = 0x60,
//   TECHNIQUE_LIT_SPOT_GLIGHT_NV_INTZ = 0x61,
//   TECHNIQUE_LIT_SPOT_SHADOW_GLIGHT_NV_INTZ = 0x62,
//   TECHNIQUE_LIT_OMNI_GLIGHT_NV_INTZ = 0x63,
//   TECHNIQUE_LIT_OMNI_SHADOW_GLIGHT_NV_INTZ = 0x64,
//   TECHNIQUE_LIT_DLIGHT_GLIGHT_NV_INTZ = 0x65,
//   TECHNIQUE_LIT_SUN_DLIGHT_GLIGHT_NV_INTZ = 0x66,
//   TECHNIQUE_LIT_SUN_SHADOW_DLIGHT_GLIGHT_NV_INTZ = 0x67,
//   TECHNIQUE_LIT_SPOT_DLIGHT_GLIGHT_NV_INTZ = 0x68,
//   TECHNIQUE_LIT_SPOT_SHADOW_DLIGHT_GLIGHT_NV_INTZ = 0x69,
//   TECHNIQUE_LIT_OMNI_DLIGHT_GLIGHT_NV_INTZ = 0x6A,
//   TECHNIQUE_LIT_OMNI_SHADOW_DLIGHT_GLIGHT_NV_INTZ = 0x6B,
//   TECHNIQUE_LIT_INSTANCED_NV_INTZ = 0x6C,
//   TECHNIQUE_LIT_INSTANCED_SUN_NV_INTZ = 0x6D,
//   TECHNIQUE_LIT_INSTANCED_SUN_SHADOW_NV_INTZ = 0x6E,
//   TECHNIQUE_LIT_INSTANCED_SPOT_NV_INTZ = 0x6F,
//   TECHNIQUE_LIT_INSTANCED_SPOT_SHADOW_NV_INTZ = 0x70,
//   TECHNIQUE_LIT_INSTANCED_OMNI_NV_INTZ = 0x71,
//   TECHNIQUE_LIT_INSTANCED_OMNI_SHADOW_NV_INTZ = 0x72,
//   TECHNIQUE_LIT_NV_END = 0x73,
//   TECHNIQUE_LIT_END = 0x73,
//   TECHNIQUE_LIGHT_SPOT = 0x73,
//   TECHNIQUE_LIGHT_OMNI = 0x74,
//   TECHNIQUE_LIGHT_SPOT_SHADOW = 0x75,
//   TECHNIQUE_LIGHT_SPOT_CHARRED = 0x76,
//   TECHNIQUE_LIGHT_OMNI_CHARRED = 0x77,
//   TECHNIQUE_LIGHT_SPOT_SHADOW_CHARRED = 0x78,
//   TECHNIQUE_FAKELIGHT_NORMAL = 0x79,
//   TECHNIQUE_FAKELIGHT_VIEW = 0x7A,
//   TECHNIQUE_SUNLIGHT_PREVIEW = 0x7B,
//   TECHNIQUE_CASE_TEXTURE = 0x7C,
//   TECHNIQUE_WIREFRAME_SOLID = 0x7D,
//   TECHNIQUE_WIREFRAME_SHADED = 0x7E,
//   TECHNIQUE_DEBUG_BUMPMAP = 0x7F,
//   TECHNIQUE_DEBUG_BUMPMAP_INSTANCED = 0x80,
//   TECHNIQUE_IMPACT_MASK = 0x81,
//   TECHNIQUE_COUNT = 0x82,
//   TECHNIQUE_TOTAL_COUNT = 0x83,
//   TECHNIQUE_NONE = 0xFF,
// };

// /* 92 */
// enum $84976B9B613A346E800CAE9EA573286F : __int32
// {
//   PROFILE_LOADOUT_PRIMARY = 0x0,
//   PROFILE_LOADOUT_PRIMARYATTACHMENT = 0x1,
//   PROFILE_LOADOUT_PRIMARYATTACHMENTTOP = 0x2,
//   PROFILE_LOADOUT_PRIMARYATTACHMENTBOTTOM = 0x3,
//   PROFILE_LOADOUT_PRIMARYATTACHMENTTRIGGER = 0x4,
//   PROFILE_LOADOUT_PRIMARYATTACHMENTMUZZLE = 0x5,
//   PROFILE_LOADOUT_PRIMARYCAMO = 0x6,
//   PROFILE_LOADOUT_PRIMARYRETICLE = 0x7,
//   PROFILE_LOADOUT_PRIMARYRETICLECOLOR = 0x8,
//   PROFILE_LOADOUT_PRIMARYLENS = 0x9,
//   PROFILE_LOADOUT_PRIMARYTAG = 0xA,
//   PROFILE_LOADOUT_PRIMARYEMBLEM = 0xB,
//   PROFILE_LOADOUT_SECONDARY = 0xC,
//   PROFILE_LOADOUT_SECONDARYATTACHMENT = 0xD,
//   PROFILE_LOADOUT_SECONDARYATTACHMENTTOP = 0xE,
//   PROFILE_LOADOUT_SECONDARYATTACHMENTBOTTOM = 0xF,
//   PROFILE_LOADOUT_SECONDARYATTACHMENTTRIGGER = 0x10,
//   PROFILE_LOADOUT_SECONDARYATTACHMENTMUZZLE = 0x11,
//   PROFILE_LOADOUT_SECONDARYCAMO = 0x12,
//   PROFILE_LOADOUT_SECONDARYRETICLE = 0x13,
//   PROFILE_LOADOUT_SECONDARYRETICLECOLOR = 0x14,
//   PROFILE_LOADOUT_SECONDARYLENS = 0x15,
//   PROFILE_LOADOUT_SECONDARYTAG = 0x16,
//   PROFILE_LOADOUT_SECONDARYEMBLEM = 0x17,
//   PROFILE_LOADOUT_SPECIALTY1 = 0x18,
//   PROFILE_LOADOUT_SPECIALTY2 = 0x19,
//   PROFILE_LOADOUT_SPECIALTY3 = 0x1A,
//   PROFILE_LOADOUT_PRIMARYGRENADE = 0x1B,
//   PROFILE_LOADOUT_SPECIALGRENADE = 0x1C,
//   PROFILE_LOADOUT_EQUIPMENT = 0x1D,
//   PROFILE_LOADOUT_HEAD = 0x1E,
//   PROFILE_LOADOUT_BODY = 0x1F,
//   PROFILE_LOADOUT_FACEPAINTPATTERN = 0x20,
//   PROFILE_LOADOUT_FACEPAINTCOLOR = 0x21,
//   PROFILE_LOADOUT_COUNT = 0x22,
// };

// /* 93 */
// enum $EC7F08C277F8E05410D9264B45EF85AA : __int32
// {
//   PROFILE_KILLSTREAK_KILLSTREAK1 = 0x0,
//   PROFILE_KILLSTREAK_KILLSTREAK2 = 0x1,
//   PROFILE_KILLSTREAK_KILLSTREAK3 = 0x2,
//   PROFILE_KILLSTREAK_COUNT = 0x3,
// };

// /* 94 */
// enum tagURLZONE : __int32
// {
//   URLZONE_INVALID = 0xFFFFFFFF,
//   URLZONE_PREDEFINED_MIN = 0x0,
//   URLZONE_LOCAL_MACHINE = 0x0,
//   URLZONE_INTRANET = 0x1,
//   URLZONE_TRUSTED = 0x2,
//   URLZONE_INTERNET = 0x3,
//   URLZONE_UNTRUSTED = 0x4,
//   URLZONE_PREDEFINED_MAX = 0x3E7,
//   URLZONE_USER_MIN = 0x3E8,
//   URLZONE_USER_MAX = 0x2710,
// };

// /* 95 */
// enum tagVARKIND : __int32
// {
//   VAR_PERINSTANCE = 0x0,
//   VAR_STATIC = 0x1,
//   VAR_CONST = 0x2,
//   VAR_DISPATCH = 0x3,
// };

// /* 96 */
// enum __MIDL_ICodeInstall_0001 : __int32
// {
//   CIP_DISK_FULL = 0x0,
//   CIP_ACCESS_DENIED = 0x1,
//   CIP_NEWER_VERSION_EXISTS = 0x2,
//   CIP_OLDER_VERSION_EXISTS = 0x3,
//   CIP_NAME_CONFLICT = 0x4,
//   CIP_TRUST_VERIFICATION_COMPONENT_MISSING = 0x5,
//   CIP_EXE_SELF_REGISTERATION_TIMEOUT = 0x6,
//   CIP_UNSAFE_TO_ABORT = 0x7,
//   CIP_NEED_REBOOT = 0x8,
//   CIP_NEED_REBOOT_UI_PERMISSION = 0x9,
// };

 /* 97 */
enum PacketEntityType : __int32
{
  ANALYZE_DATATYPE_ENTITYTYPE_GENERALENTITY = 0x0,
  ANALYZE_DATATYPE_ENTITYTYPE_PLAYERENTITY = 0x1,
  ANALYZE_DATATYPE_ENTITYTYPE_PLAYERCORPSEENTITY = 0x2,
  ANALYZE_DATATYPE_ENTITYTYPE_ITEMENTITY = 0x3,
  ANALYZE_DATATYPE_ENTITYTYPE_MISSILEENTITY = 0x4,
  ANALYZE_DATATYPE_ENTITYTYPE_INVISIBLEENTITY = 0x5,
  ANALYZE_DATATYPE_ENTITYTYPE_SCRIPTMOVERENTITY = 0x6,
  ANALYZE_DATATYPE_ENTITYTYPE_SOUNDBLENDENTITY = 0x7,
  ANALYZE_DATATYPE_ENTITYTYPE_FXENTITY = 0x8,
  ANALYZE_DATATYPE_ENTITYTYPE_LOOPFXENTITY = 0x9,
  ANALYZE_DATATYPE_ENTITYTYPE_PRIMARYLIGHTENTITY = 0xA,
  ANALYZE_DATATYPE_ENTITYTYPE_MG42ENTITY = 0xB,
  ANALYZE_DATATYPE_ENTITYTYPE_HELICOPTER = 0xC,
  ANALYZE_DATATYPE_ENTITYTYPE_PLANE = 0xD,
  ANALYZE_DATATYPE_ENTITYTYPE_VEHICLE = 0xE,
  ANALYZE_DATATYPE_ENTITYTYPE_VEHICLE_COLLMAP = 0xF,
  ANALYZE_DATATYPE_ENTITYTYPE_VEHICLE_CORPSE = 0x10,
  ANALYZE_DATATYPE_ENTITYTYPE_ACTOR = 0x11,
  ANALYZE_DATATYPE_ENTITYTYPE_ACTOR_SPAWNER = 0x12,
  ANALYZE_DATATYPE_ENTITYTYPE_ACTOR_CORPSE = 0x13,
  ANALYZE_DATATYPE_ENTITYTYPE_STREAMER_HINT = 0x14,
  ANALYZE_DATATYPE_ENTITYTYPE_TEMPENTITY = 0x15,
  ANALYZE_DATATYPE_ENTITYTYPE_ARCHIVEDENTITY = 0x16,
  ANALYZE_DATATYPE_ENTITYTYPE_MATCHSTATE = 0x17,
  ANALYZE_DATATYPE_ENTITYTYPE_CLIENTSTATE = 0x18,
  ANALYZE_DATATYPE_ENTITYTYPE_PLAYERSTATE = 0x19,
  ANALYZE_DATATYPE_ENTITYTYPE_HUDELEM = 0x1A,
  ANALYZE_DATATYPE_ENTITYTYPE_BASELINE = 0x1B,
  ANALYZE_DATATYPE_ENTITYTYPE_COUNT = 0x1C,
};

// /* 98 */
// enum demoKeyboardModes : __int32
// {
//   DEMO_KEYBOARD_NONE = 0x0,
//   DEMO_KEYBOARD_SEGMENT_NAME = 0x1,
//   DEMO_KEYBOARD_CLIP_NAME_INGAME = 0x2,
//   DEMO_KEYBOARD_CLIP_DESC_INGAME = 0x3,
//   DEMO_KEYBOARD_SCREENSHOT_NAME_INGAME = 0x4,
//   DEMO_KEYBOARD_SCREENSHOT_DESC_INGAME = 0x5,
//   DEMO_KEYBOARD_FILESHARE_FILE_NAME = 0x6,
//   DEMO_KEYBOARD_FILESHARE_FILE_DESCRIPTION = 0x7,
//   DEMO_KEYBOARD_COUNT = 0x8,
// };

 /* 99 */
enum XAssetType : __int32
{
  ASSET_TYPE_XMODELPIECES = 0x0,
  ASSET_TYPE_PHYSPRESET = 0x1,
  ASSET_TYPE_PHYSCONSTRAINTS = 0x2,
  ASSET_TYPE_DESTRUCTIBLEDEF = 0x3,
  ASSET_TYPE_XANIMPARTS = 0x4,
  ASSET_TYPE_XMODEL = 0x5,
  ASSET_TYPE_MATERIAL = 0x6,
  ASSET_TYPE_TECHNIQUE_SET = 0x7,
  ASSET_TYPE_IMAGE = 0x8,
  ASSET_TYPE_SOUND = 0x9,
  ASSET_TYPE_SOUND_PATCH = 0xA,
  ASSET_TYPE_CLIPMAP = 0xB,
  ASSET_TYPE_CLIPMAP_PVS = 0xC,
  ASSET_TYPE_COMWORLD = 0xD,
  ASSET_TYPE_GAMEWORLD_SP = 0xE,
  ASSET_TYPE_GAMEWORLD_MP = 0xF,
  ASSET_TYPE_MAP_ENTS = 0x10,
  ASSET_TYPE_GFXWORLD = 0x11,
  ASSET_TYPE_LIGHT_DEF = 0x12,
  ASSET_TYPE_UI_MAP = 0x13,
  ASSET_TYPE_FONT = 0x14,
  ASSET_TYPE_MENULIST = 0x15,
  ASSET_TYPE_MENU = 0x16,
  ASSET_TYPE_LOCALIZE_ENTRY = 0x17,
  ASSET_TYPE_WEAPON = 0x18,
  ASSET_TYPE_WEAPONDEF = 0x19,
  ASSET_TYPE_WEAPON_VARIANT = 0x1A,
  ASSET_TYPE_SNDDRIVER_GLOBALS = 0x1B,
  ASSET_TYPE_FX = 0x1C,
  ASSET_TYPE_IMPACT_FX = 0x1D,
  ASSET_TYPE_AITYPE = 0x1E,
  ASSET_TYPE_MPTYPE = 0x1F,
  ASSET_TYPE_MPBODY = 0x20,
  ASSET_TYPE_MPHEAD = 0x21,
  ASSET_TYPE_CHARACTER = 0x22,
  ASSET_TYPE_XMODELALIAS = 0x23,
  ASSET_TYPE_RAWFILE = 0x24,
  ASSET_TYPE_STRINGTABLE = 0x25,
  ASSET_TYPE_PACK_INDEX = 0x26,
  ASSET_TYPE_XGLOBALS = 0x27,
  ASSET_TYPE_DDL = 0x28,
  ASSET_TYPE_GLASSES = 0x29,
  ASSET_TYPE_EMBLEMSET = 0x2A,
  ASSET_TYPE_COUNT = 0x2B,
  ASSET_TYPE_STRING = 0x2B,
  ASSET_TYPE_ASSETLIST = 0x2C,
};

// /* 100 */
// enum $444C08B790DF9B70A526DB33E16E72C8 : __int32
// {
//   CAMERA_REGION_LIT = 0x0,
//   CAMERA_REGION_DECAL = 0x1,
//   CAMERA_REGION_EMISSIVE = 0x2,
//   CAMERA_REGION_COUNT = 0x3,
//   CAMERA_REGION_NONE = 0x3,
// };

// /* 101 */
// enum _URLZONEREG : __int32
// {
//   URLZONEREG_DEFAULT = 0x0,
//   URLZONEREG_HKLM = 0x1,
//   URLZONEREG_HKCU = 0x2,
// };

// /* 102 */
// enum profileWriteState_t : __int32
// {
//   PROFILE_NO_WRITE = 0x0,
//   PROFILE_WRITE_IF_CHANGED = 0x1,
// };

// /* 103 */
// enum $1A0051E006B0CE232622289CC200D5ED : __int32
// {
//   FX_FLESHTYPE_BODY_NONFATAL = 0x0,
//   FX_FLESHTYPE_BODY_FATAL = 0x1,
//   FX_FLESHTYPE_HEAD_NONFATAL = 0x2,
//   FX_FLESHTYPE_HEAD_FATAL = 0x3,
//   FX_FLESHTYPE_COUNT = 0x4,
// };

// /* 104 */
// enum $4D82FFD23A232AE1E043C123231C9F85 : __int32
// {
//   CS_GAME_VERSION = 0x2,
//   CS_SERVERID = 0x3,
//   CS_MESSAGE = 0x4,
//   CS_SCORES1 = 0x5,
//   CS_SCORES2 = 0x6,
//   CS_CULLDIST = 0x7,
//   CS_SUNLIGHT = 0x8,
//   CS_SUNDIR = 0x9,
//   CS_FOGVARS = 0xA,
//   CS_MOTD = 0xB,
//   CS_GAMEENDTIME = 0xC,
//   CS_MAPCENTER = 0xD,
//   CS_TIMESCALE = 0xE,
//   CS_VOTE_TIME = 0xF,
//   CS_VOTE_STRING = 0x10,
//   CS_VOTE_YES = 0x11,
//   CS_VOTE_NO = 0x12,
//   CS_VOTE_MAPNAME = 0x13,
//   CS_VOTE_GAMETYPE = 0x14,
//   CS_MULTI_MAPWINNER = 0x15,
//   CS_ENEMY_CROSSHAIR = 0x16,
//   CS_CODINFO = 0x17,
//   CS_CODINFO_LAST = 0xAC,
//   CS_CODINFO_VALUE = 0xAD,
//   CS_CODINFO_VALUE_LAST = 0x142,
//   CS_PLAYEREMBLEMS = 0x143,
//   CS_PLAYEREMBLEMS_LAST = 0x162,
//   CS_TARGETS = 0x163,
//   CS_TARGETS_LAST = 0x182,
//   CS_USE_TRIG_STRINGS = 0x183,
//   CS_USE_TRIG_STRINGS_LAST = 0x1E2,
//   CS_LOCALIZED_STRINGS = 0x1E3,
//   CS_LOCALIZED_STRINGS_LAST = 0x5E1,
//   CS_CLIENTSYSTEM_NAMES = 0x5E2,
//   CS_CLIENTSYSTEM_NAMES_LAST = 0x5EA,
//   CS_CASE_INSENSITIVE_BEGIN = 0x5EB,
//   CS_AMBIENT = 0x5EB,
//   CS_NORTHYAW = 0x5EC,
//   CS_MINIMAP = 0x5ED,
//   CS_VISIONSET_NAKED = 0x5EE,
//   CS_VISIONSET_NIGHT = 0x5EF,
//   CS_NIGHTVISION = 0x5F0,
//   CS_LOC_SEL_MTLS = 0x5F1,
//   CS_LOC_SEL_MTLS_LAST = 0x5FF,
//   CS_MODELS = 0x600,
//   CS_MODELS_LAST = 0x7FF,
//   CS_EFFECT_NAMES = 0x800,
//   CS_EFFECT_NAMES_LAST = 0x8C3,
//   CS_EFFECT_TAGS = 0x8C4,
//   CS_EFFECT_TAGS_LAST = 0x9C3,
//   CS_SHELLSHOCKS = 0x9C4,
//   CS_SHELLSHOCKS_LAST = 0x9D3,
//   CS_SCRIPT_MENUS = 0x9D4,
//   CS_SCRIPT_MENUS_LAST = 0x9F3,
//   CS_SERVER_MATERIALS = 0x9F4,
//   CS_SERVER_MATERIALS_LAST = 0xAF3,
//   CS_WEAPONFILES = 0xAF4,
//   CS_WEAPONFILES_LAST = 0xBF3,
//   CS_STATUS_ICONS = 0xBF4,
//   CS_STATUS_ICONS_LAST = 0xBFB,
//   CS_HEAD_ICONS = 0xBFC,
//   CS_HEAD_ICONS_LAST = 0xC0A,
//   CS_TAGS = 0xC0B,
//   CS_TAGS_LAST = 0xC2A,
//   CS_ITEMS = 0xC2B,
//   CS_VEHICLE_TYPES = 0xC2C,
//   CS_VEHICLE_TYPES_LAST = 0xC4B,
//   CS_DESTRUCTIBLES = 0xC4C,
//   CS_DESTRUCTIBLES_LAST = 0xC8B,
//   CS_ANIMTREES = 0xC8C,
//   CS_ANIMTREES_LAST = 0xC9B,
//   MAX_CONFIGSTRINGS = 0xC9C,
// };

// /* 105 */
// enum $C32DA671A31131557419CF33BE0831E5 : __int32
// {
//   ASSERT_TYPE_ASSERT = 0x0,
//   ASSERT_TYPE_SANITY = 0x1,
//   ASSERT_TYPE_STACKTRACE = 0x2,
// };

// /* 106 */
// enum XAnimFlags : __int32
// {
//   XANIM_LOOP_SYNC_TIME = 0x1,
//   XANIM_NONLOOP_SYNC_TIME = 0x2,
//   XANIM_SYNC_ROOT = 0x4,
//   XANIM_COMPLETE = 0x8,
//   XANIM_ADDITIVE = 0x10,
//   XANIM_CLIENT = 0x20,
//   XANIM_SEPARATE = 0x40,
//   XANIM_FORCELOAD = 0x80,
//   XANIM_PROPOGATE_FLAGS = 0x63,
// };

// /* 107 */
// enum $4EC7240C982D538B5489DCB6F94986FB : __int32
// {
//   XANIM_NOTIFY_NO_ONE = 0x0,
//   XANIM_NOTIFY_SERVER = 0x1,
//   XANIM_NOTIFY_CLIENT = 0x2,
//   XANIM_NOTIFY_BOTH = 0x3,
// };

// /* 108 */
// enum meansOfDeath_t : __int32
// {
//   MOD_UNKNOWN = 0x0,
//   MOD_PISTOL_BULLET = 0x1,
//   MOD_RIFLE_BULLET = 0x2,
//   MOD_GRENADE = 0x3,
//   MOD_GRENADE_SPLASH = 0x4,
//   MOD_PROJECTILE = 0x5,
//   MOD_PROJECTILE_SPLASH = 0x6,
//   MOD_MELEE = 0x7,
//   MOD_BAYONET = 0x8,
//   MOD_HEAD_SHOT = 0x9,
//   MOD_CRUSH = 0xA,
//   MOD_TELEFRAG = 0xB,
//   MOD_FALLING = 0xC,
//   MOD_SUICIDE = 0xD,
//   MOD_TRIGGER_HURT = 0xE,
//   MOD_EXPLOSIVE = 0xF,
//   MOD_IMPACT = 0x10,
//   MOD_BURNED = 0x11,
//   MOD_HIT_BY_OBJECT = 0x12,
//   MOD_DROWN = 0x13,
//   MOD_GAS = 0x14,
//   MOD_NUM = 0x15,
// };

 /* 109 */
enum expDataType : __int32
{
  VAL_INT = 0x0,
  VAL_FLOAT = 0x1,
  VAL_STRING = 0x2,
};

/* 110 */
enum ConstraintType : __int32
{
  CONSTRAINT_NONE = 0x0,
  CONSTRAINT_POINT = 0x1,
  CONSTRAINT_DISTANCE = 0x2,
  CONSTRAINT_HINGE = 0x3,
  CONSTRAINT_JOINT = 0x4,
  CONSTRAINT_ACTUATOR = 0x5,
  CONSTRAINT_FAKE_SHAKE = 0x6,
  CONSTRAINT_LAUNCH = 0x7,
  CONSTRAINT_ROPE = 0x8,
  CONSTRAINT_LIGHT = 0x9,
  NUM_CONSTRAINT_TYPES = 0xA,
};

/* 111 */
enum AttachPointType : __int32
{
  ATTACH_POINT_WORLD = 0x0,
  ATTACH_POINT_DYNENT = 0x1,
  ATTACH_POINT_ENT = 0x2,
  ATTACH_POINT_BONE = 0x3,
};

// /* 112 */
// enum GfxSaveScreenParam::SAVESCREEN_MODE : __int32
// {
//   SAVESCREEN_OFF = 0x0,
//   SAVESCREEN = 0x1,
//   SAVESCREEN_SECTION = 0x2,
// };

// /* 113 */
// enum tagFUNCKIND : __int32
// {
//   FUNC_VIRTUAL = 0x0,
//   FUNC_PUREVIRTUAL = 0x1,
//   FUNC_NONVIRTUAL = 0x2,
//   FUNC_STATIC = 0x3,
//   FUNC_DISPATCH = 0x4,
// };

 /* 114 */
enum guidedMissileType_t : __int32
{
  MISSILE_GUIDANCE_NONE = 0x0,
  MISSILE_GUIDANCE_SIDEWINDER = 0x1,
  MISSILE_GUIDANCE_HELLFIRE = 0x2,
  MISSILE_GUIDANCE_JAVELIN = 0x3,
  MISSILE_GUIDANCE_BALLISTIC = 0x4,
  MISSILE_GUIDANCE_WIREGUIDED = 0x5,
  MISSILE_GUIDANCE_TVGUIDED = 0x6,
  MISSILE_GUIDANCE_COUNT = 0x7,
};

// /* 115 */
// enum bdNATTravClientData::bdNATTravClientDataState : __int32
// {
//   BD_NTCDS_INITIAL = 0x0,
//   BD_NTCDS_STAGE_1 = 0x1,
//   BD_NTCDS_STAGE_2 = 0x2,
//   BD_NTCDS_STAGE_3 = 0x3,
// };

 /* 116 */
enum OffhandClass : __int32
{
  OFFHAND_CLASS_NONE = 0x0,
  OFFHAND_CLASS_FRAG_GRENADE = 0x1,
  OFFHAND_CLASS_SMOKE_GRENADE = 0x2,
  OFFHAND_CLASS_FLASH_GRENADE = 0x3,
  OFFHAND_CLASS_GEAR = 0x4,
  OFFHAND_CLASS_COUNT = 0x5,
};

/* 117 */
enum weapProjExposion_t : __int32
{
  WEAPPROJEXP_GRENADE = 0x0,
  WEAPPROJEXP_ROCKET = 0x1,
  WEAPPROJEXP_FLASHBANG = 0x2,
  WEAPPROJEXP_NONE = 0x3,
  WEAPPROJEXP_DUD = 0x4,
  WEAPPROJEXP_SMOKE = 0x5,
  WEAPPROJEXP_HEAVY = 0x6,
  WEAPPROJEXP_FIRE = 0x7,
  WEAPPROJEXP_NAPALMBLOB = 0x8,
  WEAPPROJEXP_BOLT = 0x9,
  WEAPPROJEXP_NUM = 0xA,
};

/* 118 */
enum activeReticleType_t : __int32
{
  VEH_ACTIVE_RETICLE_NONE = 0x0,
  VEH_ACTIVE_RETICLE_PIP_ON_A_STICK = 0x1,
  VEH_ACTIVE_RETICLE_BOUNCING_DIAMOND = 0x2,
  VEH_ACTIVE_RETICLE_COUNT = 0x3,
};

/* 119 */
enum ammoCounterClipType_t : __int32
{
  AMMO_COUNTER_CLIP_NONE = 0x0,
  AMMO_COUNTER_CLIP_MAGAZINE = 0x1,
  AMMO_COUNTER_CLIP_SHORTMAGAZINE = 0x2,
  AMMO_COUNTER_CLIP_SHOTGUN = 0x3,
  AMMO_COUNTER_CLIP_ROCKET = 0x4,
  AMMO_COUNTER_CLIP_BELTFED = 0x5,
  AMMO_COUNTER_CLIP_ALTWEAPON = 0x6,
  AMMO_COUNTER_CLIP_COUNT = 0x7,
};

/* 120 */
enum PenetrateType : __int32
{
  PENETRATE_TYPE_NONE = 0x0,
  PENETRATE_TYPE_SMALL = 0x1,
  PENETRATE_TYPE_MEDIUM = 0x2,
  PENETRATE_TYPE_LARGE = 0x3,
  PENETRATE_TYPE_COUNT = 0x4,
};

// /* 121 */
// enum ShaderConstantSet::<unnamed_tag> : __int32
// {
//   NUM_CONSTANTS_PER_SET = 0x7,
// };

 /* 122 */
enum objectiveState_t : __int32
{
  OBJST_EMPTY = 0x0,
  OBJST_ACTIVE = 0x1,
  OBJST_INVISIBLE = 0x2,
  OBJST_DONE = 0x3,
  OBJST_CURRENT = 0x4,
  OBJST_FAILED = 0x5,
  OBJST_NUMSTATES = 0x6,
};

// /* 123 */
// enum tagINVOKEKIND : __int32
// {
//   INVOKE_FUNC = 0x1,
//   INVOKE_PROPERTYGET = 0x2,
//   INVOKE_PROPERTYPUT = 0x4,
//   INVOKE_PROPERTYPUTREF = 0x8,
// };

 /* 124 */
enum weapInventoryType_t : __int32
{
  WEAPINVENTORY_PRIMARY = 0x0,
  WEAPINVENTORY_OFFHAND = 0x1,
  WEAPINVENTORY_ITEM = 0x2,
  WEAPINVENTORY_ALTMODE = 0x3,
  WEAPINVENTORY_MELEE = 0x4,
  WEAPINVENTORYCOUNT = 0x5,
};

// /* 125 */
// enum bdAuthTicket::bdTicketTypes : __int32
// {
//   BD_AUTH_USER_TO_SERVICE_TICKET = 0x0,
//   BD_AUTH_HOST_TO_SERVICE_TICKET = 0x1,
//   BD_AUTH_USER_TO_HOST_TICKET = 0x2,
// };

 /* 126 */
enum DemoType : __int32
{
  DEMO_TYPE_NONE = 0x0,
  DEMO_TYPE_CLIENT = 0x1,
  DEMO_TYPE_SERVER = 0x2,
  DEMO_TYPE_SERVER_SNAPSHOT = 0x3,
};

/* 127 */
enum CubemapShot : __int32
{
  CUBEMAPSHOT_NONE = 0x0,
  CUBEMAPSHOT_RIGHT = 0x1,
  CUBEMAPSHOT_LEFT = 0x2,
  CUBEMAPSHOT_BACK = 0x3,
  CUBEMAPSHOT_FRONT = 0x4,
  CUBEMAPSHOT_UP = 0x5,
  CUBEMAPSHOT_DOWN = 0x6,
  CUBEMAPSHOT_COUNT = 0x7,
};

/* 128 */
enum thirdPersonType : __int32
{
  TP_OFF = 0x0,
  TP_FOR_MODEL = 0x1,
  TP_FOR_SHADOW = 0x2,
};

/* 129 */
enum InvalidCmdHintType : __int32
{
  INVALID_CMD_NONE = 0x0,
  INVALID_CMD_NO_AMMO_BULLETS = 0x1,
  INVALID_CMD_NO_AMMO_FRAG_GRENADE = 0x2,
  INVALID_CMD_NO_AMMO_SPECIAL_GRENADE = 0x3,
  INVALID_CMD_NO_AMMO_FLASH_GRENADE = 0x4,
  INVALID_CMD_NO_AMMO_EQUIPMENT = 0x5,
  INVALID_CMD_STAND_BLOCKED = 0x6,
  INVALID_CMD_CROUCH_BLOCKED = 0x7,
  INVALID_CMD_TARGET_TOO_CLOSE = 0x8,
  INVALID_CMD_LOCKON_REQUIRED = 0x9,
  INVALID_CMD_NOT_ENOUGH_CLEARANCE = 0xA,
  INVALID_CMD_CANT_PLACE_TURRET = 0xB,
  INVALID_CMD_CANT_EQUIP_WHILE_PRONE = 0xC,
  INVALID_CMD_CANT_PLANT_EQUIPMENT = 0xD,
};

/* 130 */
enum SuccessfulCmdHintType : __int32
{
  SUCCESSFUL_CMD_NONE = 0x0,
  SUCCESSFUL_CMD_GOD_MODE_ON = 0x1,
  SUCCESSFUL_CMD_GOD_MODE_OFF = 0x2,
  SUCCESSFUL_CMD_DEMIGOD_MODE_ON = 0x3,
  SUCCESSFUL_CMD_DEMIGOD_MODE_OFF = 0x4,
  SUCCESSFUL_CMD_UFO_ON = 0x5,
  SUCCESSFUL_CMD_UFO_OFF = 0x6,
  SUCCESSFUL_CMD_WEAPNEXT = 0x7,
  SUCCESSFUL_CMD_WEAPPREV = 0x8,
  SUCCESSFUL_CMD_GIVE_ALL = 0x9,
  SUCCESSFUL_CMD_CAMLOCK_ON = 0xA,
  SUCCESSFUL_CMD_CAMLOCK_OFF = 0xB,
  SUCCESSFUL_CMD_LOOKSPRING_ON = 0xC,
  SUCCESSFUL_CMD_LOOKSPRING_OFF = 0xD,
};

/* 131 */
enum KillCamEntityType : __int32
{
  KC_NO_ENTITY = 0x0,
  KC_HELICOPTER = 0x1,
  KC_DESTRUCTIBLE = 0x2,
  KC_SCRIPTED = 0x3,
  KC_EXPLOSIVE = 0x4,
  KC_FAST_EXPLOSIVE = 0x5,
  KC_ROCKET = 0x6,
  KC_DOG = 0x7,
  KC_ARTILLERY = 0x8,
  KC_VEHICLE = 0x9,
  KC_TURRET = 0xA,
};

/* 132 */
enum KillCamEntityRestState : __int32
{
  KC_ENT_MOVING = 0x0,
  KC_ENT_AT_REST = 0x1,
  KC_ENT_STUCK_GROUND = 0x2,
  KC_ENT_STUCK_WALL = 0x3,
};

/* 133 */
enum link_type_e : __int32
{
  PITCH_CTRL = 0x0,
  YAW_CTRL = 0x1,
  ROLL_CTRL = 0x2,
  SWIM_CTRL = 0x3,
  FULL_CTRL = 0x4,
};

// /* 134 */
// enum tagApplicationType : __int32
// {
//   ServerApplication = 0x0,
//   LibraryApplication = 0x1,
// };

// /* 135 */
// enum PIDMSI_STATUS_VALUE : __int32
// {
//   PIDMSI_STATUS_NORMAL = 0x0,
//   PIDMSI_STATUS_NEW = 0x1,
//   PIDMSI_STATUS_PRELIM = 0x2,
//   PIDMSI_STATUS_DRAFT = 0x3,
//   PIDMSI_STATUS_INPROGRESS = 0x4,
//   PIDMSI_STATUS_EDIT = 0x5,
//   PIDMSI_STATUS_REVIEW = 0x6,
//   PIDMSI_STATUS_PROOF = 0x7,
//   PIDMSI_STATUS_FINAL = 0x8,
//   PIDMSI_STATUS_OTHER = 0x7FFF,
// };

// /* 136 */
// enum bdAuthService::bdStatus : __int32
// {
//   BD_READY = 0x0,
//   BD_CONNECTING = 0x1,
//   BD_PENDING_REPLY = 0x2,
// };

// /* 137 */
// enum eAttachmentPoint : __int32
// {
//   ATTACHMENT_POINT_NONE = 0x0,
//   ATTACHMENT_POINT_TOP = 0x1,
//   ATTACHMENT_POINT_FIRST = 0x1,
//   ATTACHMENT_POINT_BOTTOM = 0x2,
//   ATTACHMENT_POINT_TRIGGER = 0x3,
//   ATTACHMENT_POINT_MUZZLE = 0x4,
//   ATTACHMENT_POINT_COUNT = 0x5,
//   ATTACHMENT_POINT_INVALID = 0x5,
// };

// /* 138 */
// enum bdQoSProbe::bdQoSProbeStatus : __int32
// {
//   BD_QOS_PROBE_UNINITIALIZED = 0x0,
//   BD_QOS_PROBE_INITIALIZED = 0x1,
//   BD_QOS_PROBE_RUNNING = 0x2,
// };

// /* 139 */
// enum bdQoSProbe::bdQoSListenerState : __int32
// {
//   BD_QOS_OFF = 0x0,
//   BD_QOS_DISABLED = 0x1,
//   BD_QOS_ENABLED = 0x2,
// };

// /* 140 */
// enum clc_ops_e : __int32
// {
//   clc_move = 0x0,
//   clc_moveNoDelta = 0x1,
//   clc_clientCommand = 0x2,
//   clc_EOF = 0x3,
// };

// /* 141 */
// enum bitarray<51>::<unnamed_tag> : __int32
// {
//   BITS_PER_WORD = 0x20,
//   WORD_COUNT = 0x2,
// };

 /* 142 */
enum weapType_t : __int32
{
  WEAPTYPE_BULLET = 0x0,
  WEAPTYPE_GRENADE = 0x1,
  WEAPTYPE_PROJECTILE = 0x2,
  WEAPTYPE_BINOCULARS = 0x3,
  WEAPTYPE_GAS = 0x4,
  WEAPTYPE_BOMB = 0x5,
  WEAPTYPE_MINE = 0x6,
  WEAPTYPE_MELEE = 0x7,
  WEAPTYPE_NUM = 0x8,
};

// /* 143 */
// enum bdStats::bdWriteType : __int32
// {
//   STAT_WRITE_REPLACE = 0x0,
//   STAT_WRITE_ADD = 0x1,
//   STAT_WRITE_MAX = 0x2,
//   STAT_WRITE_MIN = 0x3,
//   STAT_WRITE_REPLACE_WHEN_RATING_INCREASE = 0x4,
//   STAT_WRITE_ADD_WHEN_RATING_INCREASE = 0x5,
//   STAT_WRITE_MAX_WHEN_RATING_INCREASE = 0x6,
//   STAT_WRITE_MIN_WHEN_RATING_INCREASE = 0x7,
// };

// /* 144 */
// enum tlThreadPriority : __int32
// {
//   TL_THREAD_PRIORITY_IDLE = 0xFFFFFFFE,
//   TL_THREAD_PRIORITY_LOWEST = 0xFFFFFFFE,
//   TL_THREAD_PRIORITY_BELOW_NORMAL = 0xFFFFFFFF,
//   TL_THREAD_PRIORITY_NORMAL = 0x0,
//   TL_THREAD_PRIORITY_ABOVE_NORMAL = 0x1,
//   TL_THREAD_PRIORITY_HIGHEST = 0x2,
//   TL_THREAD_PRIORITY_TIME_CRITICAL = 0xF,
// };

 /* 145 */
enum TaskState : __int32
{
  TASK_STATE_INVALID = 0x0,
  TASK_STATE_INIT = 0x1,
  TASK_STATE_INPROGRESS = 0x2,
  TASK_STATE_CHILDCOMPLETE = 0x3,
  TASK_STATE_CHILDFAILED = 0x4,
  TASK_STATE_COMPLETED = 0x5,
  TASK_STATE_FAILED = 0x6,
};

// /* 146 */
// enum bdDTLSAssociationStatus : __int32
// {
//   BD_SOCKET_IDLE = 0x0,
//   BD_SOCKET_PENDING = 0x1,
//   BD_SOCKET_CONNECTED = 0x2,
//   BD_SOCKET_LOST = 0x3,
// };

// /* 147 */
// enum bdDTLSAssociation::bdDTLSStatus : __int32
// {
//   BD_DTLS_CLOSED = 0x0,
//   BD_DTLS_COOKIE_WAIT = 0x1,
//   BD_DTLS_COOKIE_ECHOED = 0x2,
//   BD_DTLS_ESTABLISHED = 0x3,
// };

// /* 148 */
// enum bdDTLSError::bdDTLSErrorType : __int32
// {
//   BD_DTLS_ERROR_BAD_SECID = 0x0,
//   BD_DTLS_INVALID_STATE = 0x1,
// };

// /* 149 */
// enum bdKeyValuePair::bdArchiveUpdateType : __int32
// {
//   BD_REPLACE = 0x0,
//   BD_ADD = 0x1,
//   BD_MAX = 0x2,
//   BD_MIN = 0x3,
//   BD_AND = 0x4,
//   BD_OR = 0x5,
//   BD_XOR = 0x6,
// };

 /* 150 */
enum locSel_t : __int32
{
  LOC_SEL_NONE = 0x0,
  LOC_SEL_ARTILLERY = 0x1,
  LOC_SEL_AIRSTRIKE = 0x2,
  LOC_SEL_MORTAR = 0x3,
  LOC_SEL_NAPALM = 0x4,
  LOC_SEL_COMLINK = 0x5,
};

// /* 151 */
// enum eHand : __int32
// {
//   HAND_RIGHT = 0x0,
//   HAND_LEFT = 0x1,
//   MAX_HANDS = 0x2,
// };

// /* 152 */
// enum bdECCKey::bdECCKeyStatus : __int32
// {
//   BD_ECC_KEY_UNINITIALIZED = 0x0,
//   BD_ECC_KEY_INITIALIZED = 0x1,
// };

// /* 153 */
// enum tlThreadFlags : __int32
// {
//   TL_THREAD_JOINABLE = 0x0,
//   TL_THREAD_CREATE_SUSPENDED = 0x4,
//   TL_THREAD_DEFAULT_FLAGS = 0x0,
// };

// /* 154 */
// enum itemType_t : __int32
// {
//   IT_BAD = 0x0,
//   IT_WEAPON = 0x1,
// };

 /* 155 */
enum WeapOverlayInteface_t : __int32
{
  WEAPOVERLAYINTERFACE_NONE = 0x0,
  WEAPOVERLAYINTERFACE_JAVELIN = 0x1,
  WEAPOVERLAYINTERFACE_TURRETSCOPE = 0x2,
  WEAPOVERLAYINTERFACECOUNT = 0x3,
};

// /* 156 */
// enum VehicleMantlePoints : __int32
// {
//   MANTLE_ANGLE_FRONT = 0x0,
//   MANTLE_ANGLE_BACK = 0x1,
//   MANTLE_ANGLE_LEFT = 0x2,
//   MANTLE_ANGLE_RIGHT = 0x3,
//   MANTLE_ANGLE_MAX = 0x4,
// };

 /* 157 */
enum weapFireType_t : __int32
{
  WEAPON_FIRETYPE_FULLAUTO = 0x0,
  WEAPON_FIRETYPE_SINGLESHOT = 0x1,
  WEAPON_FIRETYPE_BURSTFIRE2 = 0x2,
  WEAPON_FIRETYPE_BURSTFIRE3 = 0x3,
  WEAPON_FIRETYPE_BURSTFIRE4 = 0x4,
  WEAPON_FIRETYPE_STACKED = 0x5,
  WEAPON_FIRETYPE_MINIGUN = 0x6,
  WEAPON_FIRETYPECOUNT = 0x7,
};

/* 158 */
enum ffa_team_t : __int32
{
  TEAM_FFA_NONE = 0x0,
  TEAM_FFA_AXIS = 0x1,
  TEAM_FFA_ALLIES = 0x2,
};

// /* 159 */
// enum bdUPnP::bdUPnPState : __int32
// {
//   BD_UPNP_UNINITIALISED = 0x0,
//   BD_UPNP_INITIALISED = 0x1,
//   BD_UPNP_DISCOVERING_DEVICES = 0x2,
//   BD_UPNP_DISCOVERED_DEVICE = 0x3,
//   BD_UPNP_CONFIGURING_DEVICE = 0x4,
//   BD_UPNP_SHUTTING_DOWN = 0x5,
//   BD_UPNP_FINISHED = 0x6,
//   BD_UPNP_FAILED = 0x7,
// };

// /* 160 */
// enum bdUPnPDevice::bdUPnPDeviceShutdownType : __int32
// {
//   BD_UPNP_DEVICE_SHUTDOWN_ELEGANT = 0x0,
//   BD_UPNP_DEVICE_SHUTDOWN_IMMEDIATE = 0x1,
// };

// /* 161 */
// enum bdUPnPDevice::bdUPnPPortStatus : __int32
// {
//   BD_UPNP_PORT_STATUS_UNKNOWN = 0x0,
//   BD_UPNP_PORT_COLLISION_FOUND = 0x1,
//   BD_UPNP_PORT_NOT_MAPPED = 0x2,
//   BD_UPNP_PORT_MAPPED = 0x3,
// };

// /* 162 */
// enum connstate_t : __int32
// {
//   CA_DISCONNECTED = 0x0,
//   CA_CINEMATIC = 0x1,
//   CA_UICINEMATIC = 0x2,
//   CA_LOGO = 0x3,
//   CA_CONNECTING = 0x4,
//   CA_CHALLENGING = 0x5,
//   CA_CONNECTED = 0x6,
//   CA_SENDINGSTATS = 0x7,
//   CA_LOADING = 0x8,
//   CA_PRIMED = 0x9,
//   CA_ACTIVE = 0xA,
// };

// /* 163 */
// enum bdGetHostByName::bdStatus : __int32
// {
//   BD_LOOKUP_UNINITIALIZED = 0x0,
//   BD_LOOKUP_PENDING = 0x1,
//   BD_LOOKUP_SUCCEEDED = 0x2,
//   BD_LOOKUP_FAILED = 0x3,
//   BD_LOOKUP_CANCELLED = 0x4,
//   BD_LOOKUP_TIMED_OUT = 0x5,
//   BD_LOOKUP_ERROR = 0x6,
// };

// /* 164 */
// enum bdRemoteTask::bdStatus : __int32
// {
//   BD_EMPTY = 0x0,
//   BD_PENDING = 0x1,
//   BD_DONE = 0x2,
//   BD_FAILED = 0x3,
//   BD_TIMED_OUT = 0x4,
//   BD_CANCELLED = 0x5,
//   BD_MAX_STATUS = 0x6,
// };

 /* 165 */
enum visionSetLerpStyle_t : __int32
{
  VISIONSETLERP_UNDEFINED = 0x0,
  VISIONSETLERP_NONE = 0x1,
  VISIONSETLERP_TO_LINEAR = 0x2,
  VISIONSETLERP_TO_SMOOTH = 0x3,
  VISIONSETLERP_BACKFORTH_LINEAR = 0x4,
  VISIONSETLERP_BACKFORTH_SMOOTH = 0x5,
  VISIONSETLERP_CUSTOM_VALUE = 0x6,
};

// /* 166 */
// enum bdNetImpl::bdNetStatus : __int32
// {
//   BD_NET_PARAMS_CONFIG_ERROR = 0xFFFFFFFC,
//   BD_NET_BIND_FAILED = 0xFFFFFFFD,
//   BD_NET_ONLINE_FAILED = 0xFFFFFFFE,
//   BD_NET_INIT_FAILED = 0xFFFFFFFF,
//   BD_NET_STOPPED = 0x0,
//   BD_NET_PENDING = 0x1,
//   BD_NET_DONE = 0x2,
// };

// /* 167 */
// enum bdAddrHandle::bdAddrHandleStatus : __int32
// {
//   BD_ADDR_NOT_CONSTRUCTED = 0x0,
//   BD_ADDR_NOT_RESOLVED = 0x1,
//   BD_ADDR_ERROR = 0x2,
//   BD_ADDR_RESOLVED = 0x3,
//   BD_ADDR_UNRESOLVED = 0x4,
// };

 /* 168 */
enum WeapStickinessType : __int32
{
  WEAPSTICKINESS_NONE = 0x0,
  WEAPSTICKINESS_ALL = 0x1,
  WEAPSTICKINESS_ALL_NO_SENTIENTS = 0x2,
  WEAPSTICKINESS_GROUND = 0x3,
  WEAPSTICKINESS_GROUND_WITH_YAW = 0x4,
  WEAPSTICKINESS_FLESH = 0x5,
  WEAPSTICKINESS_COUNT = 0x6,
};

/* 169 */
enum weapClass_t : __int32
{
  WEAPCLASS_RIFLE = 0x0,
  WEAPCLASS_MG = 0x1,
  WEAPCLASS_SMG = 0x2,
  WEAPCLASS_SPREAD = 0x3,
  WEAPCLASS_PISTOL = 0x4,
  WEAPCLASS_GRENADE = 0x5,
  WEAPCLASS_ROCKETLAUNCHER = 0x6,
  WEAPCLASS_TURRET = 0x7,
  WEAPCLASS_NON_PLAYER = 0x8,
  WEAPCLASS_GAS = 0x9,
  WEAPCLASS_ITEM = 0xA,
  WEAPCLASS_MELEE = 0xB,
  WEAPCLASS_KILLSTREAK_ALT_STORED_WEAPON = 0xC,
  WEAPCLASS_NUM = 0xD,
};

/* 170 */
enum TraceHitType : __int32
{
  TRACE_HITTYPE_NONE = 0x0,
  TRACE_HITTYPE_ENTITY = 0x1,
  TRACE_HITTYPE_DYNENT_MODEL = 0x2,
  TRACE_HITTYPE_DYNENT_BRUSH = 0x3,
  TRACE_HITTYPE_GLASS = 0x4,
};

// /* 171 */
// enum bdFileMetaData::bdVisibility : __int32
// {
//   BD_VISIBLE_PUBLIC = 0x0,
//   BD_VISIBLE_PRIVATE = 0x1,
//   BD_MAX_VISIBILITY_TYPE = 0x2,
// };

// /* 172 */
// enum visionSetMode_t : __int32
// {
//   VISIONSETMODE_NAKED = 0x0,
//   VISIONSETMODE_NIGHT = 0x1,
//   VISIONSETMODE_FLARE = 0x2,
//   VISIONSETMODE_INFRARED = 0x3,
//   VISIONSETMODE_TVGUIDED = 0x4,
//   VISIONSETMODE_EXTRACAM = 0x5,
//   VISIONSETMODECOUNT = 0x6,
// };

// /* 173 */
// enum CriticalSection : __int32
// {
//   CRITSECT_FX_UNIQUE_HANDLE = 0x0,
//   CRITSEC_SOUND_OCCLUSION = 0x1,
//   CRITSECT_SOUND_COMMAND_ALLOC = 0x2,
//   CRITSECT_SOUND_COMMAND_PUSH = 0x3,
//   CRITSECT_SOUND_NOTIFY_ALLOC = 0x4,
//   CRITSECT_SOUND_NOTIFY_PUSH = 0x5,
//   CRITSECT_SOUND_PLAYBACK_ALLOC = 0x6,
//   CRITSECT_SOUND_BANK = 0x7,
//   CRITSECT_SOUND_REMOTE = 0x8,
//   CRITSECT_SOUND_LOOKUP_CACHE = 0x9,
//   CRITSECT_CONSOLE = 0xA,
//   CRITSECT_DEBUG_SOCKET = 0xB,
//   CRITSECT_COM_ERROR = 0xC,
//   CRITSECT_STATMON = 0xD,
//   CRITSECT_DEBUG_LINE = 0xE,
//   CRTISECT_DEBUG_BRUSHES_AND_PATCHES = 0xF,
//   CRITSECT_ALLOC_MARK = 0x10,
//   CRITSECT_FREE_MARK = 0x11,
//   CRITSECT_FX_PRIORITY_SEARCH = 0x12,
//   CRITSECT_FAKELAG = 0x13,
//   CRITSECT_CLIENT_MESSAGE = 0x14,
//   CRITSECT_CLIENT_CMD = 0x15,
//   CRITSECT_DOBJ_ALLOC = 0x16,
//   CRITSECT_XANIM_ALLOC = 0x17,
//   CRITSECT_KEY_BINDINGS = 0x18,
//   CRITSECT_FX_VIS = 0x19,
//   CRITSECT_SERVER_MESSAGE = 0x1A,
//   CRITSECT_SCRIPT_STRING = 0x1B,
//   CRITSECT_MEMORY_TREE = 0x1C,
//   CRITSECT_ASSERT = 0x1D,
//   CRITSECT_RD_BUFFER = 0x1E,
//   CRITSECT_SYS_EVENT_QUEUE = 0x1F,
//   CRITSECT_GPU_FENCE = 0x20,
//   CRITSECT_FATAL_ERROR = 0x21,
//   CRITSECT_DXDEVICE = 0x22,
//   CRITSECT_DXDEVICE_GLOB = 0x23,
//   CRITSECT_SCRIPT_DEBUGGER_ALLOC = 0x24,
//   CRITSECT_SCRIPT_DEBUGGER_SORT = 0x25,
//   CRITSECT_MISSING_ASSET = 0x26,
//   CRITSECT_PHYSICS = 0x27,
//   CRITSECT_PHYSICS_UPDATE = 0x28,
//   CRITSECT_PHYSICS_DESTRUCTIBLE_HIT = 0x29,
//   CRITSECT_LIVE = 0x2A,
//   CRITSECT_AUDIO_PHYSICS = 0x2B,
//   CRITSECT_CINEMATIC = 0x2C,
//   CRITSECT_CINEMATIC_TARGET_CHANGE = 0x2D,
//   CRITSECT_RB_TRANSFER = 0x2E,
//   CRITSECT_STREAM_ASYNC_COMMAND = 0x2F,
//   CRITSECT_STREAM_FORCE_LOAD_COMMAND = 0x30,
//   CRITSECT_STREAM_SYNC_COMMAND = 0x31,
//   CRITSECT_NETTHREAD_OVERRIDE = 0x32,
//   CRITSECT_DEMONWARE = 0x33,
//   CRITSECT_DEFERRED_DW = 0x34,
//   CRITSECT_IK = 0x35,
//   CRITSECT_TL_MEMALLOC = 0x36,
//   CRITSECT_VA_ALLOC = 0x37,
//   CRITSECT_MEMTRACK = 0x38,
//   CRITSECT_CBUF = 0x39,
//   CRITSECT_CURVEALLOC = 0x3A,
//   CRITSEC_XAUDIO2_RELEASE_STREAM_BUFFER = 0x3B,
//   CRITSECT_ZLIB = 0x3C,
//   CRITSECT_BLACKBOX = 0x3D,
//   CRITSECT_BLACKBOX_NET = 0x3E,
//   CRITSECT_GDT_COMMAND = 0x3F,
//   CRITSECT_STRINGED_COMMAND = 0x40,
//   CRITSECT_RADIANT_SERVER_COMMAND = 0x41,
//   CRITSECT_RADIANT_CLIENT_COMMAND = 0x42,
//   CRITSECT_RECORDER = 0x43,
//   CRITSECT_SERVERDEMO = 0x44,
//   CRITSECT_TENSION = 0x45,
//   CRITSECT_IO_SCHEDULER = 0x46,
//   CRITSECT_MEMFIRSTFIT = 0x47,
//   CRITSECT_FXBEAM = 0x48,
//   CRITSECT_GLASS_ACTIONS = 0x49,
//   CRITSECT_DBHASH = 0x4A,
//   CRITSECT_COUNT = 0x4B,
// };

// /* 174 */
// enum bdUPnPConfig::bdUPnPRunMode : __int32
// {
//   BD_UPNP_DO_PORT_MAPPING = 0x0,
//   BD_UPNP_EXTERNAL_IP_ONLY = 0x1,
// };

 /* 175 */
enum weapOverlayReticle_t : __int32
{
  WEAPOVERLAYRETICLE_NONE = 0x0,
  WEAPOVERLAYRETICLE_CROSSHAIR = 0x1,
  WEAPOVERLAYRETICLE_NUM = 0x2,
};

/* 176 */
enum OffhandSlot : __int32
{
  OFFHAND_SLOT_NONE = 0x0,
  OFFHAND_SLOT_LETHAL_GRENADE = 0x1,
  OFFHAND_SLOT_TACTICAL_GRENADE = 0x2,
  OFFHAND_SLOT_EQUIPMENT = 0x3,
  OFFHAND_SLOT_SPECIFIC_USE = 0x4,
  OFFHAND_SLOT_COUNT = 0x5,
};

// /* 177 */
// typedef bdLobbyErrorCode bdLobbyConnection::Status;

// /* 178 */
// enum bdNATTravClient::bdNATTravClientStatus : __int32
// {
//   BD_NAT_TRAV_UNINITIALIZED = 0x0,
//   BD_NAT_TRAV_INITIALIZED = 0x1,
//   BD_NAT_TRAV_RUNNING = 0x2,
// };

// /* 179 */
// enum Dtp_SurfaceType : __int32
// {
//   DTP_SURF_TYPE_DEFAULT = 0x0,
//   DTP_SURF_TYPE_METAL = 0x1,
//   DTP_SURF_TYPE_CONCRETE = 0x2,
//   DTP_SURF_TYPE_WOOD = 0x3,
//   DTP_SURF_TYPE_SNOW = 0x4,
//   DTP_SURF_TYPE_DIRT = 0x5,
//   DTP_SURF_TYPE_GRAVEL = 0x6,
//   DTP_SURF_TYPE_GRASS = 0x7,
//   DTP_SURF_TYPE_MUD = 0x8,
//   DTP_SURF_TYPE_COUNT = 0x9,
// };

// 180
enum DvarType_t : __int32
{
  DVAR_TYPE_BOOL = 0x0,
  DVAR_TYPE_FLOAT = 0x1,
  DVAR_TYPE_FLOAT_2 = 0x2,
  DVAR_TYPE_FLOAT_3 = 0x3,
  DVAR_TYPE_FLOAT_4 = 0x4,
  DVAR_TYPE_INT = 0x5,
  DVAR_TYPE_ENUM = 0x6,
  DVAR_TYPE_STRING = 0x7,
  DVAR_TYPE_COLOR = 0x8,
  DVAR_TYPE_INT64 = 0x9,
  DVAR_TYPE_LINEAR_COLOR_RGB = 0xA,
  DVAR_TYPE_COLOR_XYZ = 0xB,
  DVAR_TYPE_COUNT = 0xC,
};

/* 181 */
enum weaponIconRatioType_t : __int32
{
  WEAPON_ICON_RATIO_1TO1 = 0x0,
  WEAPON_ICON_RATIO_2TO1 = 0x1,
  WEAPON_ICON_RATIO_4TO1 = 0x2,
  WEAPON_ICON_RATIO_COUNT = 0x3,
};

/* 182 */
enum weapClipType_t : __int32
{
  WEAPON_CLIPTYPE_BOTTOM = 0x0,
  WEAPON_CLIPTYPE_TOP = 0x1,
  WEAPON_CLIPTYPE_LEFT = 0x2,
  WEAPON_CLIPTYPE_DP28 = 0x3,
  WEAPON_CLIPTYPE_PTRS = 0x4,
  WEAPON_CLIPTYPE_LMG = 0x5,
  WEAPON_CLIPTYPECOUNT = 0x6,
};

// /* 183 */
// enum HELICOPTER_STAGES : __int32
// {
//   HELICOPTER_ONFIRE = 0x0,
//   HELICOPTER_HEAVYSMOKE = 0x1,
//   HELICOPTER_SMOKING = 0x2,
//   HELICOPTER_FULLHEALTH = 0x3,
//   NUM_HELICOPTERSTAGES = 0x4,
// };

// /* 184 */
// enum VehicleSound : __int32
// {
//   VEH_LOW_IDLE_SND = 0x0,
//   VEH_LOW_IDLE_SND_PLYR = 0x1,
//   VEH_HIGH_IDLE_SND = 0x2,
//   VEH_LOW_ENGINE_SND = 0x3,
//   VEH_HIGH_ENGINE_SND = 0x4,
//   VEH_TURRET_SPIN_SND = 0x5,
//   VEH_TURRET_STOP_SND = 0x6,
//   VEH_ENGINE_MODLOOP_NOLOAD_SND = 0x7,
//   VEH_ENGINE_MODLOOP_NOLOAD_SND_PLYR = 0x8,
//   VEH_ENGINE_MODLOOP_LOAD_SND = 0x9,
//   VEH_ENGINE_MODLOOP_LOAD_SND_PLYR = 0xA,
//   VEH_BODYDMG_LOOP_LEFT_SND = 0xB,
//   VEH_BODYDMG_LOOP_RIGHT_SND = 0xC,
//   VEH_TANK_GRIND_LEFT_SND = 0xD,
//   VEH_TANK_GRIND_RIGHT_SND = 0xE,
//   VEH_TANK_GRIND_LEFT_DMG_SND = 0xF,
//   VEH_TANK_GRIND_RIGHT_DMG_SND = 0x10,
//   VEH_TANK_BOOSTPERK_SND = 0x11,
//   VEH_TANK_BOOSTPERK_SND_PLYR = 0x12,
//   NUM_VEHICLE_SNDS = 0x13,
// };

// /* 185 */
// enum bdNATTypeDiscoveryPacket::bdNATTypeDiscoveryPacketRequest : __int32
// {
//   BD_NTDP_SAME_ADDR = 0x0,
//   BD_NTDP_DIFF_PORT = 0x1,
//   BD_NTDP_DIFF_IP = 0x2,
//   BD_NTDP_DIFF_PORT_IP = 0x3,
//   BD_NTDP_INVALID_TYPE = 0x4,
// };

// /* 186 */
// enum PerLocalClientAllocFlags : __int32
// {
//   CLIENT_ALLOC_FLAG_NONE = 0x0,
//   CLIENT_ALLOC_FLAG_NO_SERVER_MEM = 0x1,
// };

// /* 187 */
// enum bdNATTypeDiscoveryClient::bdNATTypeDiscoveryClientState : __int32
// {
//   BD_NTDCS_UNINITIALIZED = 0x0,
//   BD_NTDCS_RUN_TEST_1 = 0x1,
//   BD_NTDCS_RUN_TEST_2 = 0x2,
//   BD_NTDCS_RUN_TEST_3 = 0x3,
//   BD_NTDCS_FINI = 0x4,
//   BD_NTDCS_ERROR = 0x5,
// };

// /* 188 */
// enum bdLobbyConnection::RecvState : __int32
// {
//   BD_READ_INIT = 0x0,
//   BD_READ_SIZE = 0x1,
//   BD_READ_ENCRYPT = 0x2,
//   BD_READ_MESSAGE = 0x3,
//   BD_READ_COMPLETE = 0x4,
// };

 /* 189 */
enum WeapRotateType : __int32
{
  WEAPROTATE_GRENADE_ROTATE = 0x0,
  WEAPROTATE_BLADE_ROTATE = 0x1,
  WEAPROTATE_CYLINDER_ROTATE = 0x2,
  WEAPROTATE_COUNT = 0x3,
};

// /* 190 */
// enum bdPriority : __int32
// {
//   BD_PRIORITY_VERY_LOW = 0x0,
//   BD_PRIORITY_LOW = 0x1,
//   BD_PRIORITY_NORMAL = 0x2,
//   BD_PRIORITY_HIGH = 0x3,
//   BD_PRIORITY_VERY_HIGH = 0x4,
//   BD_NUM_PRIORITIES = 0x5,
// };

// /* 191 */
// enum bdSocketStatusCode : __int32
// {
//   BD_NET_SUCCESS = 0x1,
//   BD_NET_CONNECTION_CLOSED = 0x0,
//   BD_NET_ERROR = 0xFFFFFFFF,
//   BD_NET_WOULD_BLOCK = 0xFFFFFFFE,
//   BD_NET_SUBSYTEM_ERROR = 0xFFFFFFFD,
//   BD_NET_ADDRESS_IN_USE = 0xFFFFFFFC,
//   BD_NET_CONNECTION_RESET = 0xFFFFFFFB,
//   BD_NET_MSG_SIZE = 0xFFFFFFFA,
//   BD_NET_ADDRESS_INVALID = 0xFFFFFFF9,
//   BD_NET_BLOCKING_CALL_CANCELED = 0xFFFFFFF8,
//   BD_NET_NOT_BOUND = 0xFFFFFFF7,
//   BD_NET_INVALID_HANDLE = 0xFFFFFFF6,
//   BD_NET_NOT_CONNECTED = 0xFFFFFFF5,
//   BD_NET_CONNECTION_REFUSED = 0xFFFFFFF4,
//   BD_NET_HOST_UNREACH = 0xFFFFFFF3,
// };

 /* 192 */
enum weapStance_t : __int32
{
  WEAPSTANCE_STAND = 0x0,
  WEAPSTANCE_DUCK = 0x1,
  WEAPSTANCE_PRONE = 0x2,
  WEAPSTANCE_NUM = 0x3,
};

// /* 193 */
// enum StanceState : __int32
// {
//   CL_STANCE_STAND = 0x0,
//   CL_STANCE_CROUCH = 0x1,
//   CL_STANCE_PRONE = 0x2,
//   CL_STANCE_DIVE_TO_PRONE = 0x3,
// };

 /* 194 */
enum eWeaponOptionGroup : __int32
{
  WEAPONOPTION_GROUP_FIRST = 0x0,
  WEAPONOPTION_GROUP_CAMO = 0x0,
  WEAPONOPTION_GROUP_RETICLE = 0x1,
  WEAPONOPTION_GROUP_LENS = 0x2,
  WEAPONOPTION_GROUP_TAG = 0x3,
  WEAPONOPTION_GROUP_EMBLEM = 0x4,
  WEAPONOPTION_GROUP_RETICLE_COLOR = 0x5,
  WEAPONOPTION_GROUP_COUNT = 0x6,
  WEAPONOPTION_GROUP_INVALID = 0x6,
};

// /* 195 */
// enum bdConnectionStore::bdConnectionStoreStatus : __int32
// {
//   BD_CONNECTION_STORE_UNINITIALIZED = 0x0,
//   BD_CONNECTION_STORE_INITIALIZED = 0x1,
//   BD_CONNECTION_STORE_SHUTTING_DOWN = 0x2,
//   BD_CONNECTION_STORE_ERROR = 0x3,
// };

// /* 196 */
// enum bdConnectionStore::bdConnectionStoreShutdownType : __int32
// {
//   BD_CONNECTION_STORE_SHUTDOWN_ELEGANT = 0x0,
//   BD_CONNECTION_STORE_SHUTDOWN_IMMEDIATE = 0x1,
// };

// /* 197 */
// enum bdHTTPClient::BD_HTTP_OPERATION : __int32
// {
//   BD_HTTP_GET_OPERATION = 0x0,
//   BD_HTTP_PUT_OPERATION = 0x1,
//   BD_HTTP_POST_OPERATION = 0x2,
//   BD_HTTP_DELETE_OPERATION = 0x3,
//   BD_HTTP_COPY_OPERATION = 0x4,
// };

// /* 198 */
// enum bdHTTPClient::BD_HTTP_STATUS : __int32
// {
//   BD_HTTP_STATUS_READY = 0x0,
//   BD_HTTP_STATUS_BUSY = 0x1,
//   BD_HTTP_STATUS_DONE = 0x2,
//   BD_HTTP_STATUS_ERROR = 0x3,
// };

// /* 199 */
// enum bdDTLSPacketTypes : __int32
// {
//   BD_DTLS_INIT = 0x1,
//   BD_DTLS_INIT_ACK = 0x2,
//   BD_DTLS_COOKIE_ECHO = 0x3,
//   BD_DTLS_COOKIE_ACK = 0x4,
//   BD_DTLS_ERROR = 0x5,
//   BD_DTLS_DATA = 0x6,
// };

// /* 200 */
// enum _D3DRESOURCETYPE : __int32
// {
//   D3DRTYPE_SURFACE = 0x1,
//   D3DRTYPE_VOLUME = 0x2,
//   D3DRTYPE_TEXTURE = 0x3,
//   D3DRTYPE_VOLUMETEXTURE = 0x4,
//   D3DRTYPE_CUBETEXTURE = 0x5,
//   D3DRTYPE_VERTEXBUFFER = 0x6,
//   D3DRTYPE_INDEXBUFFER = 0x7,
//   D3DRTYPE_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 201 */
// enum bdRSAKey::bdRSAKeyStatus : __int32
// {
//   BD_RSA_KEY_UNINITIALIZED = 0x0,
//   BD_RSA_KEY_INITIALIZED = 0x1,
// };

// /* 202 */
// enum bdSocketRouter::bdSocketRouterStatus : __int32
// {
//   BD_SOCKET_ROUTER_UNINITIALIZED = 0x0,
//   BD_SOCKET_ROUTER_INITIALIZED = 0x1,
//   BD_SOCKET_ROUTER_ERROR = 0x2,
// };

 /* 203 */
enum netadrtype_t : __int32
{
  NA_BOT = 0x0,
  NA_BAD = 0x1,
  NA_LOOPBACK = 0x2,
  NA_BROADCAST = 0x3,
  NA_IP = 0x4,
};

/* 204 */
enum ShockViewTypes : __int32
{
  SHELLSHOCK_VIEWTYPE_BLURRED = 0x0,
  SHELLSHOCK_VIEWTYPE_FLASHED = 0x1,
  SHELLSHOCK_VIEWTYPE_NONE = 0x2,
};

/* 205 */
enum MissileStage : __int32
{
  MISSILESTAGE_SOFTLAUNCH = 0x0,
  MISSILESTAGE_ASCENT = 0x1,
  MISSILESTAGE_DESCENT = 0x2,
};

/* 206 */
enum MissileFlightMode : __int32
{
  MISSILEFLIGHTMODE_TOP = 0x0,
  MISSILEFLIGHTMODE_DIRECT = 0x1,
};

// /* 207 */
// typedef bdFileMetaData::bdVisibility bdFileInfo::bdVisibility;

// /* 208 */
// enum VehicleEntryPoints : __int32
// {
//   VEH_ENTRY_LEFT = 0x0,
//   VEH_ENTRY_RIGHT = 0x1,
//   VEH_ENTRY_REAR = 0x2,
//   VEH_ENTRY_GUNNER3 = 0x3,
//   VEH_ENTRY_GUNNER4 = 0x4,
//   NUM_VEHICLE_ENTRY_POINTS = 0x5,
// };

// /* 209 */
// typedef bdRemoteTask::bdStatus bdHTTPWrapperBase::bdStatus;

// /* 210 */
// enum bdSequenceNumberStore::bdSequenuceStatus : __int32
// {
//   BD_SN_INVALID_SMALLER = 0xFFFFFFFE,
//   BD_SN_VALID_SMALLER = 0xFFFFFFFF,
//   BD_SN_INVALID_DUPLICATE = 0x0,
//   BD_SN_VALID_LARGER = 0x1,
//   BD_SN_VALID_MUCH_LARGER = 0x2,
// };

// /* 211 */
// enum bdContentStreamingBase::bdStatus : __int32
// {
//   READY = 0x0,
//   PRE_HTTP_OPERATION = 0x1,
//   HTTP_OPERATION = 0x2,
//   POST_HTTP_OPERATION = 0x3,
//   DONE = 0x4,
//   FAILED = 0x5,
// };

// /* 212 */
// enum bdUPnPDevice::bdUPnPDeviceState : __int32
// {
//   BD_UPNP_DEVICE_UNINITIALISED = 0x0,
//   BD_UPNP_DEVICE_INITIALISED = 0x1,
//   BD_UPNP_DEVICE_SENDING_DESCRIPTION_REQ = 0x2,
//   BD_UPNP_DEVICE_GETTING_DESCRIPTION = 0x3,
//   BD_UPNP_DEVICE_GOT_DESCRIPTION = 0x4,
//   BD_UPNP_DEVICE_SENDING_IP_REQ = 0x5,
//   BD_UPNP_DEVICE_DISCOVERING_IP = 0x6,
//   BD_UPNP_DEVICE_DISCOVERED_IP = 0x7,
//   BD_UPNP_DEVICE_SENDING_PORT_QUERY_REQ = 0x8,
//   BD_UPNP_DEVICE_DISCOVERING_PORT_MAPPING = 0x9,
//   BD_UPNP_DEVICE_DISCOVERED_PORT_MAPPING = 0xA,
//   BD_UPNP_DEVICE_SENDING_MAPPING_REQ = 0xB,
//   BD_UPNP_DEVICE_MAPPING_PORT = 0xC,
//   BD_UPNP_DEVICE_MAPPED_PORT = 0xD,
//   BD_UPNP_DEVICE_SENDING_UNMAPPING_REQ = 0xE,
//   BD_UPNP_DEVICE_UNMAPPING_PORT = 0xF,
//   BD_UPNP_DEVICE_UNMAPPED_PORT = 0x10,
//   BD_UPNP_DEVICE_SHUTTING_DOWN = 0x11,
//   BD_UPNP_DEVICE_FINISHED = 0x12,
//   BD_UPNP_DEVICE_FAILED = 0x13,
// };

 /* 213 */
enum CameraMode : __int32
{
  CAM_NORMAL = 0x0,
  CAM_LINKED = 0x1,
  CAM_VEHICLE = 0x2,
  CAM_VEHICLE_THIRDPERSON = 0x3,
  CAM_VEHICLE_GUNNER = 0x4,
  CAM_TURRET = 0x5,
  CAM_MISSILE = 0x6,
  CAM_EXTRACAM = 0x7,
  CAM_RADIANT = 0x8,
  CAM_TOP_DOWN = 0x9,
};

// /* 214 */
// enum bdHTTPWrapperBase::bdOperation : __int32
// {
//   BD_IDLE = 0x0,
//   BD_UPLOAD = 0x1,
//   BD_DOWNLOAD = 0x2,
//   BD_DELETE = 0x3,
//   BD_COPY = 0x4,
// };

// /* 215 */
// enum bdIPDiscoveryClient::bdIPDiscoveryClientStatus : __int32
// {
//   BD_IP_DISC_UNINITIALIZED = 0x0,
//   BD_IP_DISC_RUNNING = 0x1,
//   BD_IP_DISC_SUCCESS = 0x2,
//   BD_IP_DISC_FAIL = 0x3,
//   BD_IP_DISC_ERROR = 0x4,
// };

// /* 216 */
// enum $9D8FAF1F6329DA5B6AB22B763A72053E : __int32
// {
//   VAR_MASK = 0x1F,
// };

// /* 217 */
// enum $3FFC1CCCF67A053E976ADE59AFDC0E97 : __int32
// {
//   VAR_STAT_FREE = 0x0,
//   VAR_STAT_MOVABLE = 0x20,
//   VAR_STAT_HEAD = 0x40,
//   VAR_STAT_EXTERNAL = 0x60,
//   VAR_STAT_MASK = 0x60,
// };

// /* 218 */
// enum pregameStateEnum : __int32
// {
//   PREGAME_IDLE = 0x0,
//   PREGAME_INPROGRESS = 0x1,
//   PREGAME_GAMESTARTED = 0x2,
// };

// /* 219 */
// enum $145432CFA0AE95C42CC91CF5430C7FB0 : __int32
// {
//   SERVER_VARIABLELIST_PARENT_SIZE = 0x7FFE,
//   SERVER_VARIABLELIST_PARENT_BEGIN = 0x1,
//   SERVER_VARIABLELIST_PARENT_END = 0x7FFF,
//   SERVER_VARIABLELIST_CHILD_SIZE = 0x3FFFE,
//   SERVER_VARIABLELIST_CHILD_BEGIN = 0x8000,
//   SERVER_VARIABLELIST_CHILD_END = 0x47FFE,
//   SERVER_VARIABLELIST_PARENT_DEV_SIZE = 0x737E,
//   SERVER_VARIABLELIST_CHILD_DEV_SIZE = 0x3F37E,
//   SERVER_VARIABLELIST_SIZE = 0x47FFE,
// };

// /* 220 */
// enum $FD410047F4FD46CA0F445FE59BE3CFD2 : __int32
// {
//   CLIENT_VARIABLELIST_PARENT_SIZE = 0x7FFE,
//   CLIENT_VARIABLELIST_PARENT_BEGIN = 0x1,
//   CLIENT_VARIABLELIST_PARENT_END = 0x7FFF,
//   CLIENT_VARIABLELIST_CHILD_SIZE = 0x3FFFE,
//   CLIENT_VARIABLELIST_CHILD_BEGIN = 0x8000,
//   CLIENT_VARIABLELIST_CHILD_END = 0x47FFE,
//   CLIENT_VARIABLELIST_PARENT_DEV_SIZE = 0x737E,
//   CLIENT_VARIABLELIST_CHILD_DEV_SIZE = 0x3F37E,
//   CLIENT_VARIABLELIST_SIZE = 0x47FFE,
// };

// /* 221 */
// enum $E2E2C36E575AB5BC4ACD37A49CE227A1 : __int32
// {
//   VAR_NAME_BITS = 0x8,
//   VAR_NAME_LOW_MASK = 0xFFFFFF,
//   VAR_NAME_HIGH_MASK = 0xFFFFFF00,
//   VAR_MIN_INT = 0xFF800000,
//   VAR_MAX_INT = 0x7FFFFF,
//   ENTITY_NUM_BITS = 0xE,
// };

// /* 222 */
// enum HU_ALLOCATION_SCHEME : __int32
// {
//   HU_SCHEME_DEFAULT = 0x0,
//   HU_SCHEME_DEBUG = 0x1,
//   HU_SCHEME_FIRSTFIT = 0x2,
//   HU_SCHEME_FIXED = 0x3,
//   HU_SCHEME_COUNT = 0x4,
// };

// /* 223 */
// enum serverState_t : __int32
// {
//   SS_DEAD = 0x0,
//   SS_LOADING = 0x1,
//   SS_GAME = 0x2,
// };

/* 224 */
enum errorParm_t : __int32
{
  ERR_FATAL = 0x0,
  ERR_DROP = 0x1,
  ERR_SERVERDISCONNECT = 0x2,
  ERR_DISCONNECT = 0x3,
  ERR_SCRIPT = 0x4,
  ERR_SCRIPT_DROP = 0x5,
  ERR_LOCALIZATION = 0x6,
};

// /* 225 */
// enum netFieldTypes_t : __int32
// {
//   NET_FIELD_TYPE_ARCHIVED_ENTITY = 0x0,
//   NET_FIELD_TYPE_CLIENT_STATE = 0x1,
//   NET_FIELD_TYPE_PLAYERSTATE = 0x2,
//   NET_FIELD_TYPE_OBJECTIVE = 0x3,
//   NET_FIELD_TYPE_HUDELEMS = 0x4,
//   NET_FIELD_TYPE_MATCHSTATE = 0x5,
//   NET_FIELD_TYPE_COUNT = 0x6,
// };

// /* 226 */
// enum server_hardware_types : __int32
// {
//   SERVERHARDWARE_UNKNOWN = 0x0,
//   SERVERHARDWARE_LINUXDEDICATED = 0x1,
//   SERVERHARDWARE_WINDEDICATED = 0x2,
//   SERVERHARDWARE_MACDEDICATED = 0x3,
//   SERVERHARDWARE_XENONDEDICATED = 0x4,
//   SERVERHARDWARE_PS3DEDICATED = 0x5,
//   SERVERHARDWARE_WINLISTEN = 0x6,
//   SERVERHARDWARE_MACLISTEN = 0x7,
//   SERVERHARDWARE_XENONLISTEN = 0x8,
//   SERVERHARDWARE_PS3LISTEN = 0x9,
//   MAX_SERVERHARDWARE = 0xA,
// };

// /* 227 */
// enum $68618EC5F93A10C688A9BEC48B421031 : __int32
// {
//   DEMO_CLIP_TAG_KILL = 0x0,
//   DEMO_CLIP_TAG_DEATH = 0x1,
//   DEMO_CLIP_TAG_KILLSTREAK = 0x2,
//   DEMO_CLIP_TAG_PERK = 0x3,
//   DEMO_CLIP_TAG_WEAPON = 0x4,
//   DEMO_CLIP_TAG_EQUIPMENT = 0x5,
//   DEMO_CLIP_TAG_GRENADE = 0x6,
//   DEMO_CLIP_TAG_MELEE = 0x7,
//   DEMO_CLIP_TAG_COUNT = 0x8,
// };

// /* 228 */
// enum $E563F31FC3F720CE59EF7D40674A3392 : __int32
// {
//   DEMO_SAVE_POPUP_CLIP = 0x0,
//   DEMO_SAVE_POPUP_SCREENSHOT = 0x1,
// };

// /* 229 */
// enum $E08F47FD7D11EC4433125498C5BDDA2C : __int32
// {
//   DEMO_BOOKMARK_KILL = 0x0,
//   DEMO_BOOKMARK_EVENT = 0x1,
//   DEMO_BOOKMARK_BADSPAWN = 0x2,
// };

// /* 230 */
// enum GlobalLbType : __int32
// {
//   GLOBAL_LB_SCORE = 0x0,
//   GLOBAL_LB_START = 0x0,
//   GLOBAL_LB_WINS = 0x1,
//   GLOBAL_LB_KILLS = 0x2,
//   GLOBAL_LB_CODPOINTS = 0x3,
//   GLOBAL_LB_COUNT = 0x4,
// };

// /* 231 */
// enum LbStatEnum : __int32
// {
//   LB_STAT_MATCHES_PLAYED = 0x0,
//   LB_STAT_SCORE = 0x1,
//   LB_STAT_TIME_PLAYED_TOTAL = 0x2,
//   LB_STAT_SCORE_PER_MINUTE = 0x3,
//   LB_STAT_XP = 0x4,
//   LB_STAT_PRESTIGE_LEVEL = 0x5,
//   LB_STAT_KILLS = 0x6,
//   LB_STAT_DEATHS = 0x7,
//   LB_STAT_KDRATIO = 0x8,
//   LB_STAT_ASSISTS = 0x9,
//   LB_STAT_CAPTURES = 0xA,
//   LB_STAT_RETURNS = 0xB,
//   LB_STAT_DEFENDS = 0xC,
//   LB_STAT_PICKUPS = 0xD,
//   LB_STAT_PLANTS = 0xE,
//   LB_STAT_DEFUSES = 0xF,
//   LB_STAT_DESTRUCTIONS = 0x10,
//   LB_STAT_COUNT = 0x11,
// };

// /* 232 */
// enum GlobalLbStatEnum : __int32
// {
//   GLOBAL_LB_STAT_SCORE_PER_MINUTE = 0x0,
//   GLOBAL_LB_STAT_KILLS = 0x1,
//   GLOBAL_LB_STAT_DEATHS = 0x2,
//   GLOBAL_LB_STAT_KDRATIO = 0x3,
//   GLOBAL_LB_STAT_ASSISTS = 0x4,
//   GLOBAL_LB_STAT_XP = 0x5,
//   GLOBAL_LB_STAT_PRESTIGE_LEVEL = 0x6,
//   GLOBAL_LB_STAT_TIMEPLAYED = 0x7,
//   GLOBAL_LB_STAT_WINS = 0x8,
//   GLOBAL_LB_STAT_LOSSES = 0x9,
//   GLOBAL_LB_STAT_WLRATIO = 0xA,
//   GLOBAL_LB_STAT_HEADSHOTS = 0xB,
//   GLOBAL_LB_STAT_ACCURACY = 0xC,
//   GLOBAL_LB_STAT_CODPOINTS = 0xD,
//   GLOBAL_LB_STAT_CURRENCYEARNED = 0xE,
//   GLOBAL_LB_STAT_CURRENCYSPENT = 0xF,
//   GLOBAL_LB_STAT_SCORE = 0x10,
//   GLOBAL_LB_STAT_WIN_STREAK = 0x11,
//   GLOBAL_LB_STAT_KILL_STREAK = 0x12,
//   GLOBAL_LB_STAT_COUNT = 0x13,
// };

// /* 233 */
// enum LbType : __int32
// {
//   LB_TDM = 0x0,
//   LB_GAMEMODE_START = 0x0,
//   LB_DM = 0x1,
//   LB_CTF = 0x2,
//   LB_DOM = 0x3,
//   LB_SAB = 0x4,
//   LB_SD = 0x5,
//   LB_KOTH = 0x6,
//   LB_DEM = 0x7,
//   LB_BASIC_GAMEMODE_COUNT = 0x8,
//   LB_HCTDM = 0x8,
//   LB_HARDCORE_TYPES_START = 0x8,
//   LB_HCDM = 0x9,
//   LB_HCCTF = 0xA,
//   LB_HCDOM = 0xB,
//   LB_HCSAB = 0xC,
//   LB_HCSD = 0xD,
//   LB_HCKOTH = 0xE,
//   LB_HCDEM = 0xF,
//   LB_COUNT = 0x10,
//   LB_GAMEMODE_COUNT = 0x10,
// };

// /* 234 */
// enum UILocalVarType : __int32
// {
//   UILOCALVAR_INT = 0x0,
//   UILOCALVAR_FLOAT = 0x1,
//   UILOCALVAR_STRING = 0x2,
// };

 /* 235 */
enum uiMenuCommand_t : __int32
{
  UIMENU_NONE = 0x0,
  UIMENU_MAIN = 0x1,
  UIMENU_INGAME = 0x2,
  UIMENU_PREGAME = 0x3,
  UIMENU_POSTGAME = 0x4,
  UIMENU_WM_QUICKMESSAGE = 0x5,
  UIMENU_SCRIPT_POPUP = 0x6,
  UIMENU_SCOREBOARD = 0x7,
  UIMENU_GAMERCARD = 0x8,
  UIMENU_MUTEERROR = 0x9,
  UIMENU_ENDOFGAME = 0xA,
};

// /* 236 */
// enum DeltaFlags : __int32
// {
//   DELTA_FLAGS_NONE = 0x1,
//   DELTA_FLAGS_FORCE = 0x0,
// };

// /* 237 */
// enum jqWorkerType : __int32
// {
//   JQ_WORKER_GENERIC = 0x0,
//   JQ_WORKER_MAX = 0x1,
//   JQ_WORKER_DEFAULT = 0x0,
// };

// /* 238 */
// enum jqProcessor : __int32
// {
//   JQ_CORE_0 = 0x1,
//   JQ_CORE_1 = 0x2,
//   JQ_CORE_2 = 0x4,
//   JQ_CORE_3 = 0x8,
//   JQ_CORE_4 = 0x10,
//   JQ_CORE_5 = 0x20,
//   JQ_CORE_6 = 0x40,
//   JQ_CORE_7 = 0x80,
//   JQ_CORE_ALL = 0xFF,
// };

// /* 239 */
// enum $FF1423CDEF9F4500740331F8DB02605D : __int32
// {
//   DEMOCLIENT_IDLE = 0x0,
//   DEMOCLIENT_GAMESTATE_SENT = 0x1,
// };

// /* 240 */
// enum $6DEC6DC544DE40267D6A86B04B78DBDA : __int32
// {
//   DEMO_PACKET_END_OF_MSG_BLOCK = 0x0,
//   DEMO_PACKET_END_OF_DEMO = 0x1,
//   DEMO_PACKET_CLIP_COMMAND = 0x2,
//   DEMO_PACKET_RAW_SNAPSHOT = 0x3,
//   DEMO_PACKET_TYPE_COUNT = 0x4,
// };

// /* 241 */
// enum svc_ops_e : __int32
// {
//   svc_nop = 0x0,
//   svc_gamestate = 0x1,
//   svc_configstring = 0x2,
//   svc_gameinformation = 0x3,
//   svc_baseline = 0x4,
//   svc_entitycache = 0x5,
//   svc_dynentstate = 0x6,
//   svc_destructiblestate = 0x7,
//   svc_ropestate = 0x8,
//   svc_glassstate = 0x9,
//   svc_serverCommand = 0xA,
//   svc_download = 0xB,
//   svc_snapshot = 0xC,
//   svc_servercommands = 0xD,
//   svc_EOF = 0xE,
// };

 /* 242 */
enum ai_state_t : __int32
{
  AIS_INVALID = 0x0,
  AIS_KEEPCURRENT = 0x0,
  AIS_EXPOSED = 0x1,
  AIS_TURRET = 0x2,
  AIS_GRENADE_RESPONSE = 0x3,
  AIS_BADPLACE_FLEE = 0x4,
  AIS_COVERARRIVAL = 0x5,
  AIS_DEATH = 0x6,
  AIS_DEFAULT = 0x1,
  AIS_SETABLE_FIRST = 0x1,
  AIS_SETABLE_LAST = 0x6,
  AIS_PAIN = 0x7,
  AIS_REACT = 0x8,
  AIS_SCRIPTEDANIM = 0x9,
  AIS_CUSTOMANIM = 0xA,
  AIS_NEGOTIATION = 0xB,
  AIS_PUSHABLE_FIRST = 0x7,
  AIS_PUSHABLE_LAST = 0xB,
  AIS_COUNT = 0xC,
};

// /* 243 */
// enum fileShareLocation : __int32
// {
//   FILESHARE_LOCATION_INVALID = 0x0,
//   FILESHARE_LOCATION_PUBLISHERSTORAGE = 0x1,
//   FILESHARE_LOCATION_USERSTORAGE = 0x2,
//   FILESHARE_LOCATION_POOLEDSTORAGE = 0x3,
// };

 /* 244 */
enum nodeType : __int32
{
  NODE_BADNODE = 0x0,
  NODE_PATHNODE = 0x1,
  NODE_COVER_STAND = 0x2,
  NODE_COVER_CROUCH = 0x3,
  NODE_COVER_CROUCH_WINDOW = 0x4,
  NODE_COVER_PRONE = 0x5,
  NODE_COVER_RIGHT = 0x6,
  NODE_COVER_LEFT = 0x7,
  NODE_COVER_WIDE_RIGHT = 0x8,
  NODE_COVER_WIDE_LEFT = 0x9,
  NODE_COVER_PILLAR = 0xA,
  NODE_CONCEALMENT_STAND = 0xB,
  NODE_CONCEALMENT_CROUCH = 0xC,
  NODE_CONCEALMENT_PRONE = 0xD,
  NODE_REACQUIRE = 0xE,
  NODE_BALCONY = 0xF,
  NODE_SCRIPTED = 0x10,
  NODE_NEGOTIATION_BEGIN = 0x11,
  NODE_NEGOTIATION_END = 0x12,
  NODE_TURRET = 0x13,
  NODE_GUARD = 0x14,
  NODE_NUMTYPES = 0x15,
  NODE_DONTLINK = 0x15,
};

// /* 245 */
// enum $C93903FD3F6D18A0FAD8456E4768C868 : __int32
// {
//   PNF_DONTLINK = 0x1,
//   PNF_NOTCHAIN = 0x2,
//   PNF_DONTSTAND = 0x4,
//   PNF_DONTCROUCH = 0x8,
//   PNF_DONTPRONE = 0x10,
//   PNF_NORAILING = 0x20,
//   PNF_PRIORITY = 0x40,
//   PNF_IDLE = 0x80,
//   PNF_CAN_PARENT = 0x100,
//   PNF_DISABLED = 0x200,
//   PNF_DONTLEFT = 0x400,
//   PNF_DONTRIGHT = 0x800,
//   PNF_STRICT_CONNECT = 0x800,
//   PNF_TEMP_LINKS = 0x4000,
//   PNF_ANGLEVALID = 0x8000,
// };

 /* 246 */
enum ai_stance_e : __int32
{
  STANCE_BAD = 0x0,
  STANCE_STAND = 0x1,
  STANCE_CROUCH = 0x2,
  STANCE_PRONE = 0x4,
  STANCE_ANY = 0x7,
};

// /* 247 */
// enum $70E16829EC40C8058B1C5B9C4EC33319 : __int32
// {
//   CS_FREE = 0x0,
//   CS_ZOMBIE = 0x1,
//   CS_RECONNECTING = 0x2,
//   CS_CONNECTED = 0x3,
//   CS_CLIENTLOADING = 0x4,
//   CS_ACTIVE = 0x5,
// };

// /* 248 */
// enum nearestNodeHeightCheck : __int32
// {
//   NEAREST_NODE_DO_HEIGHT_CHECK = 0x0,
//   NEAREST_NODE_DONT_DO_HEIGHT_CHECK = 0x1,
// };

 /* 249 */
enum sessionState_t : __int32
{
  SESS_STATE_PLAYING = 0x0,
  SESS_STATE_DEAD = 0x1,
  SESS_STATE_SPECTATOR = 0x2,
  SESS_STATE_INTERMISSION = 0x3,
};

// /* 250 */
// enum pmtype_t : __int32
// {
//   PM_NORMAL = 0x0,
//   PM_NORMAL_LINKED = 0x1,
//   PM_NOCLIP = 0x2,
//   PM_UFO = 0x3,
//   PM_SPECTATOR = 0x4,
//   PM_INTERMISSION = 0x5,
//   PM_LASTSTAND = 0x6,
//   PM_REVIVEE = 0x7,
//   PM_LASTSTAND_TRANSITION = 0x8,
//   PM_DEAD = 0x9,
//   PM_DEAD_LINKED = 0xA,
// };

// /* 251 */
// enum $43C5652E2B4BDC973F972A9A22182A5D : __int32
// {
//   CONNECT_PATHS_NONE = 0x0,
//   CONNECT_PATHS_RUN_GAME_WHEN_DONE = 0x1,
//   CONNECT_PATHS_EXIT_WHEN_DONE = 0x2,
//   CONNECT_PATHS_EXIT_WHEN_DONE_OR_ERROR = 0x3,
//   NUM_CONNECT_PATH_OPTIONS = 0x3,
// };

// /* 252 */
// enum hudelem_update_t : __int32
// {
//   HUDELEM_UPDATE_ARCHIVAL = 0x1,
//   HUDELEM_UPDATE_CURRENT = 0x2,
//   HUDELEM_UPDATE_ARCHIVAL_AND_CURRENT = 0x3,
// };

// /* 253 */
// enum ParamDataDesc : __int32
// {
//   P_WORKERCMD = 0x0,
//   P_FENCE = 0x1,
//   P_LAST = 0x2,
// };

 /* 254 */
enum clientConnected_t : __int32
{
  CON_DISCONNECTED = 0x0,
  CON_CONNECTING = 0x1,
  CON_CONNECTED = 0x2,
};

// /* 255 */
// enum jqAtomicHeap::<unnamed_tag> : __int32
// {
//   CellWidth = 0x40,
// };

 /* 256 */
enum ai_state_transition_t
{
  AIS_TRANSITION_CANONICAL = 0xFFFFFFFF,
  AIS_TRANSITION_NONE = 0x0,
  AIS_TRANSITION_SET = 0x1,
  AIS_TRANSITION_PUSH = 0x2,
  AIS_TRANSITION_POP = 0x3,
};

/* 257 */
enum aiphys_t : __int32
{
  AIPHYS_BAD = 0x0,
  AIPHYS_NORMAL_ABSOLUTE = 0x1,
  AIPHYS_NORMAL_RELATIVE = 0x2,
  AIPHYS_NOCLIP = 0x3,
  AIPHYS_NOGRAVITY = 0x4,
  AIPHYS_ZONLY_PHYSICS_RELATIVE = 0x5,
};

/* 258 */
enum ai_substate_t : __int32
{
  STATE_EXPOSED_COMBAT = 0x64,
  STATE_EXPOSED_NONCOMBAT = 0x65,
  STATE_EXPOSED_REACQUIRE_MOVE = 0x66,
  STATE_EXPOSED_FLASHBANGED = 0x67,
  STATE_DEATH_PRECLEANUP = 0xC8,
  STATE_DEATH_POSTCLEANUP = 0xC9,
  STATE_GRENADE_FLEE = 0x12C,
  STATE_GRENADE_TAKECOVER = 0x12D,
  STATE_GRENADE_COWER = 0x12E,
  STATE_GRENADE_COMBAT = 0x12F,
  STATE_GRENADE_COVERATTACK = 0x130,
  STATE_GRENADE_ACQUIRE = 0x131,
  STATE_GRENADE_THROWBACK = 0x132,
};

/* 259 */
enum ai_traverse_mode_t : __int32
{
  AI_TRAVERSE_INVALID = 0x0,
  AI_TRAVERSE_GRAVITY = 0x1,
  AI_TRAVERSE_NOGRAVITY = 0x2,
  AI_TRAVERSE_NOCLIP = 0x3,
  AI_TRAVERSE_COUNT = 0x4,
};

/* 260 */
enum ai_animmode_t : __int32
{
  AI_ANIM_UNKNOWN = 0x0,
  AI_ANIM_MOVE_CODE = 0x1,
  AI_ANIM_USE_POS_DELTAS = 0x2,
  AI_ANIM_USE_ANGLE_DELTAS = 0x3,
  AI_ANIM_USE_BOTH_DELTAS = 0x4,
  AI_ANIM_USE_BOTH_DELTAS_NOCLIP = 0x5,
  AI_ANIM_USE_BOTH_DELTAS_NOGRAVITY = 0x6,
  AI_ANIM_USE_BOTH_DELTAS_ZONLY_PHYSICS = 0x7,
  AI_ANIM_NOPHYSICS = 0x8,
  AI_ANIM_POINT_RELATIVE = 0x9,
};

/* 261 */
enum aiGoalSources : __int32
{
  AI_GOAL_SRC_SCRIPT_GOAL = 0x0,
  AI_GOAL_SRC_SCRIPT_ENTITY_GOAL = 0x1,
  AI_GOAL_SRC_FRIENDLY_CHAIN = 0x2,
  AI_GOAL_SRC_ENEMY = 0x3,
};

/* 262 */
enum ai_badplace_t : __int32
{
  AI_BADPLACE_NONE = 0x0,
  AI_BADPLACE_NORMAL = 0x1,
  AI_BADPLACE_REALLYBAD = 0x2,
};

/* 263 */
enum ai_orient_mode_t : __int32
{
  AI_ORIENT_INVALID = 0x0,
  AI_ORIENT_DONT_CHANGE = 0x1,
  AI_ORIENT_TO_MOTION = 0x2,
  AI_ORIENT_TO_ENEMY = 0x3,
  AI_ORIENT_TO_ENEMY_OR_MOTION = 0x4,
  AI_ORIENT_TO_ENEMY_OR_MOTION_SIDESTEP = 0x5,
  AI_ORIENT_TO_GOAL = 0x6,
  AI_ORIENT_COUNT = 0x7,
};

// /* 264 */
// enum $5211EC0B67EDE529C4C718BDEE3CECA2 : __int32
// {
//   DEMO_DEBUG_INFORMATION_NONE = 0x0,
//   DEMO_DEBUG_INFORMATION_ENTITIES = 0x1,
//   DEMO_DEBUG_INFORMATION_FAKE_ENTITIES = 0x2,
//   DEMO_DEBUG_INFORMATION_COUNT = 0x3,
// };

 /* 265 */
enum print_msg_dest_t
{
  CON_DEST_CONSOLE = 0x0,
  CON_DEST_MINICON = 0x1,
  CON_DEST_ERROR = 0x2,
  CON_DEST_GAME_FIRST = 0x3,
  CON_DEST_GAME1 = 0x3,
  CON_DEST_GAME2 = 0x4,
  CON_DEST_GAME3 = 0x5,
  CON_DEST_GAME_LAST = 0x5,
  CON_DEST_COUNT = 0x6,
};

// /* 266 */
// enum $6347B7AB855E7FFD2C84E8F32147E2A9 : __int32
// {
//   STREAMING_STATE_GAMESTATE = 0x0,
//   STREAMING_STATE_SEGMENTS = 0x1,
//   STREAMING_STATE_TRANSITION = 0x2,
//   STREAMING_STATE_ENDOFCLIP = 0x3,
//   STREAMING_STATE_INFO = 0x4,
//   STREAMING_STATE_DONE = 0x5,
// };

// /* 267 */
// enum $AB7C1172C4CCEA2C28BE9E0D0DE41A5F : __int32
// {
//   CLASS_NUM_ENTITY = 0x0,
//   CLASS_NUM_HUDELEM = 0x1,
//   CLASS_NUM_PATHNODE = 0x2,
//   CLASS_NUM_VEHICLENODE = 0x3,
//   CLASS_NUM_DYNENTITY = 0x4,
//   CLASS_NUM_COUNT = 0x5,
// };

// /* 268 */
// enum $88C43078020AABAAC4BA1EEBC5CB0549 : __int32
// {
//   FREEMOVE_NONE = 0x0,
//   FREEMOVE_MOVIECAMERA = 0x1,
//   FREEMOVE_FOLLOWCAMERA = 0x2,
//   FREEMOVE_COUNT = 0x3,
// };

// /* 269 */
// enum $919790EDE7FF207337C0F1686414D82A : __int32
// {
//   DEMO_CAMERA_MODE_NONE = 0x0,
//   DEMO_CAMERA_MODE_THIRDPERSON = 0x1,
//   DEMO_CAMERA_MODE_MOVIECAM = 0x2,
//   DEMO_CAMERA_MODE_COUNT = 0x3,
// };

// /* 270 */
// enum $0E9B293962D1297B91E4656844A5B9D7 : __int32
// {
//   DEMO_CLIP_IDLE = 0x0,
//   DEMO_CLIP_RECORD_UNCOMPRESSED_SNAPHOT = 0x1,
//   DEMO_CLIP_RECORD_CONTINOUS = 0x2,
//   DEMO_CLIP_PAUSED = 0x3,
//   DEMO_CLIP_PREVIEW = 0x4,
//   DEMO_CLIP_STREAMING = 0x5,
// };

// /* 271 */
// enum $F0488472A55C48C71EC75F21B2FBDF47 : __int32
// {
//   DEMO_CLIP_CMD_SET_CLIENT = 0x0,
//   DEMO_CLIP_CMD_SET_TIMESCALE = 0x1,
//   DEMO_CLIP_CMD_SET_CAMERA_MODE = 0x2,
//   DEMO_CLIP_CMD_SET_CAMERA_ORIGIN = 0x3,
//   DEMO_CLIP_CMD_SET_CAMERA_ANGLES = 0x4,
//   DEMO_CLIP_CMD_HIDE_GAME_HUD = 0x5,
//   DEMO_CLIP_CMD_RESET_SNAPSHOT_DATA = 0x6,
//   DEMO_CLIP_CMD_SET_PAUSED_STATE = 0x7,
//   DEMO_CLIP_CMD_TRANSITION = 0x8,
//   DEMO_CLIP_CMD_END_OF_FRAME = 0x9,
// };

// /* 272 */
// enum $7489A867DFB497534FB3E841BE9F9BF2 : __int32
// {
//   DEMO_CLIP_TRANSITION_NONE = 0x0,
//   DEMO_CLIP_TRANSITION_FADE = 0x1,
//   DEMO_CLIP_TRANSITION_COUNT = 0x2,
// };

// /* 273 */
// enum $36A79457C78E16D40A71EE73CD551291 : __int32
// {
//   DEMO_CONTROLLER_CONFIG_DEFAULT = 0x0,
//   DEMO_CONTROLLER_CONFIG_DIGITAL = 0x1,
//   DEMO_CONTROLLER_CONFIG_BADBOT = 0x2,
//   DEMO_CONTROLLER_CONFIG_COUNT = 0x3,
// };

// /* 274 */
// enum he_type_t : __int32
// {
//   HE_TYPE_FREE = 0x0,
//   HE_TYPE_TEXT = 0x1,
//   HE_TYPE_VALUE = 0x2,
//   HE_TYPE_PLAYERNAME = 0x3,
//   HE_TYPE_MAPNAME = 0x4,
//   HE_TYPE_GAMETYPE = 0x5,
//   HE_TYPE_WAR_GAME_DATA = 0x6,
//   HE_TYPE_SCORE = 0x7,
//   HE_TYPE_MATERIAL = 0x8,
//   HE_TYPE_TIMER_DOWN = 0x9,
//   HE_TYPE_TIMER_UP = 0xA,
//   HE_TYPE_TENTHS_TIMER_DOWN = 0xB,
//   HE_TYPE_TENTHS_TIMER_UP = 0xC,
//   HE_TYPE_CLOCK_DOWN = 0xD,
//   HE_TYPE_CLOCK_UP = 0xE,
//   HE_TYPE_WAYPOINT = 0xF,
//   HE_TYPE_COUNT = 0x10,
// };

// /* 275 */
// enum fileSharePrimaryTags : __int32
// {
//   FILESHARE_PRITAG_GAMETYPE = 0x1,
//   FILESHARE_PRITAG_MAP = 0x2,
//   FILESHARE_PRITAG_TYPE = 0x3,
//   FILESHARE_PRITAG_XUIDS = 0x4,
//   FILESHARE_PRITAG_USERTAG = 0x5,
// };

// /* 276 */
// enum $15936261679C69E832C21696373667DC : __int32
// {
//   HUDELEMFLAG_FOREGROUND = 0x1,
//   HUDELEMFLAG_HIDEWHENDEAD = 0x2,
//   HUDELEMFLAG_HIDEWHENINMENU = 0x4,
//   HUDELEMFLAG_FONTSTYLE3D_SHADOWED = 0x8,
//   HUDELEMFLAG_FONTSTYLE3D_SHADOWED_MORE = 0x10,
//   HUDELEMFLAG_FONT3D_USE_GLOWCOLOR = 0x20,
//   HUDELEMFLAG_HIDEWHENINKILLCAM = 0x40,
//   HUDELEMFLAG_REDACT = 0x80,
//   HUDELEMFLAG_FADEWHENTARGETED = 0x100,
//   HUDELEMFLAG_HIDEWHENINDEMO = 0x200,
//   HUDELEMFLAG_OVERRIDEWHENINDEMO = 0x400,
//   HUDELEMFLAG_HIDEWHILEREMOTECONTROLING = 0x800,
//   HUDELEMFLAG_COD7DECODE = 0x1000,
//   HUDELEMFLAG_DEBUG = 0x2000,
//   HUDELEMFLAGBITS = 0xD,
// };

 /* 277 */
enum snd_stop_sound_flags : __int32
{
  SND_STOP_ALL = 0x0,
  SND_STOP_STREAMED = 0x1,
  SND_EVERY_SINGLE_ONE_DONT_ASK_ANY_QUESTIONS = 0x2,
};

// /* 278 */
// enum $C5F67ECC1FFA3223BD26960E4427EC66 : __int32
// {
//   FS_SEEK_CUR = 0x0,
//   FS_SEEK_END = 0x1,
//   FS_SEEK_SET = 0x2,
// };

// /* 279 */
// enum GamePadButton : __int32
// {
//   GPAD_NONE = 0x0,
//   GPAD_UP = 0x10000001,
//   GPAD_DOWN = 0x10000002,
//   GPAD_LEFT = 0x10000004,
//   GPAD_RIGHT = 0x10000008,
//   GPAD_START = 0x10000010,
//   GPAD_BACK = 0x10000020,
//   GPAD_L3 = 0x10000040,
//   GPAD_R3 = 0x10000080,
//   GPAD_A = 0x10001000,
//   GPAD_B = 0x10002000,
//   GPAD_X = 0x10004000,
//   GPAD_Y = 0x10008000,
//   GPAD_L_SHLDR = 0x10000100,
//   GPAD_R_SHLDR = 0x10000200,
//   GPAD_L_TRIG = 0x20000000,
//   GPAD_R_TRIG = 0x20000001,
// };

// /* 280 */
// enum $CB33564A1D9890384362DF6B1C41D5D9 : __int32
// {
//   R_CODEC_MJPEG = 0x0,
//   R_CODEC_VPX = 0x1,
//   R_CODEC_COUNT = 0x2,
// };

// /* 281 */
// enum $3BB55576B801C4A3B2938F63B9B1E1E7 : __int32
// {
//   R_CLIP_SIZE_360 = 0x0,
//   R_CLIP_SIZE_480 = 0x1,
//   R_CLIP_SIZE_720 = 0x2,
//   R_CLIP_SIZE_1080 = 0x3,
//   R_CLIP_SIZE_COUNT = 0x4,
// };

// /* 282 */
// enum VehicleTypes : __int32
// {
//   VEH_WHEELS_4 = 0x0,
//   VEH_MOTORCYCLE = 0x1,
//   VEH_TANK = 0x2,
//   VEH_PLANE = 0x3,
//   VEH_BOAT = 0x4,
//   VEH_ARTILLERY = 0x5,
//   VEH_HELICOPTER = 0x6,
//   NUM_VEHICLE_TYPES = 0x7,
// };

// /* 283 */
// enum RecordEventType : __int32
// {
//   DW_EVENT_UNKNOWN = 0x0,
//   DW_EVENT_AVI = 0x1,
//   DW_EVENT_SCREENSHOT = 0x2,
//   DW_EVENT_MATCH_RECORD_POINTS_SPENT = 0x3,
//   DW_EVENT_NUM_EVENTS = 0x4,
// };

// /* 284 */
// enum NitrousVehicle::NitrousVehicleFlags : __int32
// {
//   FLAG_PAUSED = 0x1,
//   FLAG_INITIALIZED = 0x2,
//   FLAG_SCRIPT_CONTROL = 0x4,
//   FLAG_DEBUG_RENDER = 0x8,
//   FLAG_PLAYERS_VEHICLE = 0x40,
//   FLAG_ATTACHED_PATH = 0x80,
//   FLAG_DRIVING_PATH = 0x100,
//   FLAG_ACTUATOR_DISABLED = 0x200,
//   FLAG_IN_WATER = 0x400,
//   FLAG_BOOSTING = 0x800,
//   FLAG_DISABLE_STABILIZERS = 0x1000,
//   FLAG_STUNNED = 0x2000,
// };

// /* 285 */
// enum NitrousVehicle::NitrousNotifyFlags : __int32
// {
//   NOTIFY_COLLISION = 0x1,
//   NOTIFY_IN_AIR = 0x2,
//   NOTIFY_LANDED = 0x4,
//   NOTIFY_SUSPENSION_LIMIT_ACTIVATED = 0x8,
//   NOTIFY_ENGINE_STUTTER = 0x10,
// };

// /* 286 */
// enum NitrousVehicle::NitrousVehicleSFXFlags : __int32
// {
//   SFXFLAG_LAST_KNOWN_BOOST_STATE = 0x2,
//   SFXFLAG_LAST_KNOWN_MAINGUN_OVERHEAT_STATE = 0x4,
//   SFXFLAG_LAST_KNOWN_COAX1_OVERHEAT_STATE = 0x8,
// };

// /* 287 */
// enum NitrousVehicle::NitrousVehicleModelFlags : __int32
// {
//   FLAG_IS_POWER_BRAKING = 0x1,
//   FLAG_IS_BRAKING = 0x2,
//   FLAG_IS_FORWARD_ACCELERATION = 0x4,
//   FLAG_IS_REVERSE_ACCELERATION = 0x8,
//   FLAG_IS_COASTING = 0x10,
// };

// /* 288 */
// enum rigid_body_constraint_wheel::internal_wheel_flags_e : __int32
// {
//   WHEEL_FLAG_IS_COLLIDING = 0x1,
//   WHEEL_FLAG_HARD_LIMIT_ACTIVE = 0x2,
//   WHEEL_FLAG_IS_SLIDING = 0x4,
// };

// /* 289 */
// enum rigid_body_constraint_wheel::wheel_flags_e : __int32
// {
//   WHEEL_FLAG_HAS_TURNING = 0x8,
//   WHEEL_FLAG_HAS_POWER = 0x10,
//   WHEEL_FLAG_HAS_POWER_BRAKING = 0x20,
//   WHEEL_FLAG_HAS_BRAKING = 0x40,
//   WHEEL_FLAG_DISABLE_TURN_ON_BREAK = 0x80,
// };

// /* 290 */
// enum rigid_body_constraint_wheel::ps_cache_e : __int32
// {
//   PSC_HARD_LIMIT = 0x0,
//   PSC_SUSPENSION = 0x1,
//   PSC_SIDE_FRIC = 0x2,
//   PSC_FWD_FRIC = 0x3,
//   NUM_PSC = 0x4,
// };

// /* 291 */
// enum rigid_body_constraint_wheel::wheel_state_e : __int32
// {
//   WHEEL_STATE_ACCELERATING = 0x0,
//   WHEEL_STATE_BRAKING = 0x1,
// };

// /* 292 */
// enum rigid_body_constraint_ragdoll::flags_e : __int32
// {
//   FLAG_HAS_HINGE = 0x4,
//   FLAG_HAS_SWIVEL = 0x8,
//   FLAG_HAS_DAMP = 0x40,
//   FLAG_FORCE_LIMITS_ACTIVE = 0x80,
//   FLAG_DISABLE_JOINT_LIMITS = 0x100,
//   FLAG_DAMP_TYPE_IMPLICIT = 0x200,
// };

// /* 293 */
// typedef rigid_body_constraint_wheel::ps_cache_e rigid_body_constraint_ragdoll::ps_cache_e;

// /* 294 */
// typedef rigid_body_constraint_wheel::ps_cache_e rigid_body_constraint_hinge::ps_cache_e;

// /* 295 */
// enum rigid_body_constraint_hinge::flags_e : __int32
// {
//   HINGE_MIN_LIMIT_ACTIVE = 0x1,
//   HINGE_MAX_LIMIT_ACTIVE = 0x2,
//   PRIVATE_FLAGS_END = 0x2,
// };

// /* 296 */
// enum rigid_body_constraint_hinge::public_flags_e : __int32
// {
//   NO_HINGE_LIMITS = 0x4,
//   SNIDER_STYLE_HINGE = 0x8,
//   NO_POINT_TO_POINT = 0x10,
// };

// /* 297 */
// typedef rigid_body_constraint_wheel::ps_cache_e rigid_body_constraint_upright::ps_cache_e;

// /* 298 */
// typedef rigid_body_constraint_wheel::ps_cache_e contact_point_info::ps_cache_e;

// /* 299 */
// enum contact_point_info::flags_e : __int32
// {
//   FLAG_SOLVER_PRIORITY_MASK = 0x7,
//   FLAG_NO_OVERFLOW_ERROR = 0x8,
//   FLAG_HAS_VALID_RB2_ENTITY = 0x10,
// };

// /* 300 */
// enum rigid_body_constraint_distance::flags_e : __int32
// {
//   FLAG_ENABLE = 0x1,
//   FLAG_B2_R_IS_DAMP_POINT = 0x2,
// };

// /* 301 */
// typedef rigid_body_constraint_wheel::ps_cache_e rigid_body_constraint_distance::ps_cache_e;

// /* 302 */
// typedef rigid_body_constraint_wheel::ps_cache_e rigid_body_constraint_custom_orientation::ps_cache_e;

// /* 303 */
// enum AntiBurnHudMenus : __int32
// {
//   HUD_MENU_HEALTH = 0x0,
//   HUD_MENU_AMMO = 0x1,
//   HUD_MENU_HEAT = 0x2,
//   HUD_MENU_COMPASS = 0x3,
//   HUD_MENU_STANCE = 0x4,
//   HUD_MENU_OFFHAND = 0x5,
//   HUD_MENU_OBJECTIVES = 0x6,
//   HUD_MENU_SPRINT = 0x7,
//   HUD_MENU_VEHICLE = 0x8,
// };

// /* 304 */
// typedef rigid_body_constraint_wheel::ps_cache_e rigid_body_constraint_point::ps_cache_e;

 /* 305 */
enum WheelEffectState : __int32
{
  WHEEL_STATE_ROLLING = 0x0,
  WHEEL_STATE_AIRBORN = 0x1,
  WHEEL_STATE_SKIDDING = 0x2,
  WHEEL_STATE_MAX = 0x3,
};

// /* 306 */
// enum phys_transient_allocator::<unnamed_tag> : __int32
// {
//   BLOCK_SIZE = 0x4000,
//   BLOCK_ALIGNMENT = 0x4,
// };

// /* 307 */
// enum rigid_body::rigid_body_flags_e : __int32
// {
//   FLAG_DISABLE_FORCES = 0x1,
//   FLAG_STABLE = 0x4,
//   FLAG_GROUP_STABLE = 0x8,
//   FLAG_ENVIRONMENT_RIGID_BODY = 0x10,
//   FLAG_USER_RIGID_BODY = 0x20,
//   FLAG_NO_AUTO_REMOVE = 0x40,
//   FLAG_DANGEROUS = 0x80,
//   FLAG_CLIENT_FLAGS_START = 0x100,
// };

// /* 308 */
// typedef rigid_body_constraint_wheel::ps_cache_e rigid_body_constraint_angular_actuator::ps_cache_e;

// /* 309 */
// typedef rigid_body_constraint_wheel::ps_cache_e rigid_body_constraint_custom_path::ps_cache_e;

 /* 310 */
enum TractionType : __int32
{
  TRACTION_TYPE_FRONT = 0x0,
  TRACTION_TYPE_BACK = 0x1,
  TRACTION_TYPE_ALL_WD = 0x2,
  NUM_TRACTION_TYPES = 0x3,
};

// /* 311 */
// enum eGameModes : __int32
// {
//   GAMEMODE_SYSTEMLINK = 0x0,
//   GAMEMODE_LOCAL_SPLITSCREEN = 0x1,
//   GAMEMODE_FIRST_ONLINE_GAMEMODE = 0x2,
//   GAMEMODE_PUBLIC_MATCH = 0x2,
//   GAMEMODE_FIRST_PRIVATE_ONLINE_GAMEMODE = 0x3,
//   GAMEMODE_PRIVATE_MATCH = 0x3,
//   GAMEMODE_WAGER_MATCH = 0x4,
//   GAMEMODE_BASIC_TRAINING = 0x5,
//   GAMEMODE_THEATER = 0x6,
//   GAMEMODE_LAST_ONLINE_GAMEMODE = 0x7,
// };

// /* 312 */
// enum $4898E5ED096BBC2F7E1F5B6459B850C6 : __int32
// {
//   DEMO_STATE_IDLE = 0x0,
//   DEMO_STATE_RECORDING = 0x1,
//   DEMO_STATE_PLAYING = 0x2,
//   DEMO_STATE_COUNT = 0x3,
// };

// /* 313 */
// enum $2D64CC9D2E0FE62D3B45D52627320DF0 : __int32
// {
//   KEYBOARD_TYPE_NONE = 0x0,
//   KEYBOARD_TYPE_DEMO = 0x1,
//   KEYBOARD_TYPE_EMAIL = 0x2,
//   KEYBOARD_TYPE_COUNT = 0x3,
// };

 /* 314 */
enum turret_handler : __int32
{
  TURRET_HANDLER_CLIENT = 0x0,
  TURRET_HANDLER_SERVER = 0x1,
  TURRET_HANDLER_COUNT = 0x2,
};

// /* 315 */
// enum $F308677C8D9D5C560321D786B31E852A : __int32
// {
//   TS_TURRET_SENTRY = 0x1,
//   TS_TURRET_TOW = 0x2,
//   TS_TURRET_FIRING = 0x4,
//   TS_TURRET_IS_CARRIED = 0x8,
//   TS_TURRET_OVERHEATING = 0x10,
//   TS_TURRET_INITIALIZING = 0x20,
// };

// /* 316 */
// enum _D3DFORMAT : __int32
// {
//   D3DFMT_UNKNOWN = 0x0,
//   D3DFMT_R8G8B8 = 0x14,
//   D3DFMT_A8R8G8B8 = 0x15,
//   D3DFMT_X8R8G8B8 = 0x16,
//   D3DFMT_R5G6B5 = 0x17,
//   D3DFMT_X1R5G5B5 = 0x18,
//   D3DFMT_A1R5G5B5 = 0x19,
//   D3DFMT_A4R4G4B4 = 0x1A,
//   D3DFMT_R3G3B2 = 0x1B,
//   D3DFMT_A8 = 0x1C,
//   D3DFMT_A8R3G3B2 = 0x1D,
//   D3DFMT_X4R4G4B4 = 0x1E,
//   D3DFMT_A2B10G10R10 = 0x1F,
//   D3DFMT_A8B8G8R8 = 0x20,
//   D3DFMT_X8B8G8R8 = 0x21,
//   D3DFMT_G16R16 = 0x22,
//   D3DFMT_A2R10G10B10 = 0x23,
//   D3DFMT_A16B16G16R16 = 0x24,
//   D3DFMT_A8P8 = 0x28,
//   D3DFMT_P8 = 0x29,
//   D3DFMT_L8 = 0x32,
//   D3DFMT_A8L8 = 0x33,
//   D3DFMT_A4L4 = 0x34,
//   D3DFMT_V8U8 = 0x3C,
//   D3DFMT_L6V5U5 = 0x3D,
//   D3DFMT_X8L8V8U8 = 0x3E,
//   D3DFMT_Q8W8V8U8 = 0x3F,
//   D3DFMT_V16U16 = 0x40,
//   D3DFMT_A2W10V10U10 = 0x43,
//   D3DFMT_UYVY = 0x59565955,
//   D3DFMT_R8G8_B8G8 = 0x47424752,
//   D3DFMT_YUY2 = 0x32595559,
//   D3DFMT_G8R8_G8B8 = 0x42475247,
//   D3DFMT_DXT1 = 0x31545844,
//   D3DFMT_DXT2 = 0x32545844,
//   D3DFMT_DXT3 = 0x33545844,
//   D3DFMT_DXT4 = 0x34545844,
//   D3DFMT_DXT5 = 0x35545844,
//   D3DFMT_D16_LOCKABLE = 0x46,
//   D3DFMT_D32 = 0x47,
//   D3DFMT_D15S1 = 0x49,
//   D3DFMT_D24S8 = 0x4B,
//   D3DFMT_D24X8 = 0x4D,
//   D3DFMT_D24X4S4 = 0x4F,
//   D3DFMT_D16 = 0x50,
//   D3DFMT_D32F_LOCKABLE = 0x52,
//   D3DFMT_D24FS8 = 0x53,
//   D3DFMT_D32_LOCKABLE = 0x54,
//   D3DFMT_S8_LOCKABLE = 0x55,
//   D3DFMT_L16 = 0x51,
//   D3DFMT_VERTEXDATA = 0x64,
//   D3DFMT_INDEX16 = 0x65,
//   D3DFMT_INDEX32 = 0x66,
//   D3DFMT_Q16W16V16U16 = 0x6E,
//   D3DFMT_MULTI2_ARGB8 = 0x3154454D,
//   D3DFMT_R16F = 0x6F,
//   D3DFMT_G16R16F = 0x70,
//   D3DFMT_A16B16G16R16F = 0x71,
//   D3DFMT_R32F = 0x72,
//   D3DFMT_G32R32F = 0x73,
//   D3DFMT_A32B32G32R32F = 0x74,
//   D3DFMT_CxV8U8 = 0x75,
//   D3DFMT_A1 = 0x76,
//   D3DFMT_A2B10G10R10_XR_BIAS = 0x77,
//   D3DFMT_BINARYBUFFER = 0xC7,
//   D3DFMT_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 317 */
// enum _D3DMULTISAMPLE_TYPE : __int32
// {
//   D3DMULTISAMPLE_NONE = 0x0,
//   D3DMULTISAMPLE_NONMASKABLE = 0x1,
//   D3DMULTISAMPLE_2_SAMPLES = 0x2,
//   D3DMULTISAMPLE_3_SAMPLES = 0x3,
//   D3DMULTISAMPLE_4_SAMPLES = 0x4,
//   D3DMULTISAMPLE_5_SAMPLES = 0x5,
//   D3DMULTISAMPLE_6_SAMPLES = 0x6,
//   D3DMULTISAMPLE_7_SAMPLES = 0x7,
//   D3DMULTISAMPLE_8_SAMPLES = 0x8,
//   D3DMULTISAMPLE_9_SAMPLES = 0x9,
//   D3DMULTISAMPLE_10_SAMPLES = 0xA,
//   D3DMULTISAMPLE_11_SAMPLES = 0xB,
//   D3DMULTISAMPLE_12_SAMPLES = 0xC,
//   D3DMULTISAMPLE_13_SAMPLES = 0xD,
//   D3DMULTISAMPLE_14_SAMPLES = 0xE,
//   D3DMULTISAMPLE_15_SAMPLES = 0xF,
//   D3DMULTISAMPLE_16_SAMPLES = 0x10,
//   D3DMULTISAMPLE_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 318 */
// enum _D3DTEXTUREFILTERTYPE : __int32
// {
//   D3DTEXF_NONE = 0x0,
//   D3DTEXF_POINT = 0x1,
//   D3DTEXF_LINEAR = 0x2,
//   D3DTEXF_ANISOTROPIC = 0x3,
//   D3DTEXF_PYRAMIDALQUAD = 0x6,
//   D3DTEXF_GAUSSIANQUAD = 0x7,
//   D3DTEXF_CONVOLUTIONMONO = 0x8,
//   D3DTEXF_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 319 */
// enum GfxDepthRangeType : __int32
// {
//   GFX_DEPTH_RANGE_SCENE = 0x0,
//   GFX_DEPTH_RANGE_VIEWMODEL = 0x2,
//   GFX_DEPTH_RANGE_FULL = 0xFFFFFFFF,
// };

// /* 320 */
// enum MaterialVertexDeclType : __int32
// {
//   VERTDECL_GENERIC = 0x0,
//   VERTDECL_PACKED = 0x1,
//   VERTDECL_WORLD = 0x2,
//   VERTDECL_WORLD_T1N0 = 0x3,
//   VERTDECL_WORLD_T1N1 = 0x4,
//   VERTDECL_WORLD_T2N0 = 0x5,
//   VERTDECL_WORLD_T2N1 = 0x6,
//   VERTDECL_WORLD_T2N2 = 0x7,
//   VERTDECL_WORLD_T3N0 = 0x8,
//   VERTDECL_WORLD_T3N1 = 0x9,
//   VERTDECL_WORLD_T3N2 = 0xA,
//   VERTDECL_WORLD_T4N0 = 0xB,
//   VERTDECL_WORLD_T4N1 = 0xC,
//   VERTDECL_WORLD_T4N2 = 0xD,
//   VERTDECL_POS_TEX = 0xE,
//   VERTDECL_STATICMODELCACHE = 0xF,
//   VERTDECL_WATER = 0x10,
//   VERTDECL_PARTICLECLOUD = 0x11,
//   VERTDECL_COUNT = 0x12,
// };

// /* 321 */
// enum _D3DPOOL : __int32
// {
//   D3DPOOL_DEFAULT = 0x0,
//   D3DPOOL_MANAGED = 0x1,
//   D3DPOOL_SYSTEMMEM = 0x2,
//   D3DPOOL_SCRATCH = 0x3,
//   D3DPOOL_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 322 */
// enum $74254F2FBB58A9D84A85080F50CF363D : __int32
// {
//   MTL_ARG_MATERIAL_VERTEX_CONST = 0x0,
//   MTL_ARG_LITERAL_VERTEX_CONST = 0x1,
//   MTL_ARG_MATERIAL_PIXEL_SAMPLER = 0x2,
//   MTL_ARG_CODE_PRIM_BEGIN = 0x3,
//   MTL_ARG_CODE_VERTEX_CONST = 0x3,
//   MTL_ARG_CODE_PIXEL_SAMPLER = 0x4,
//   MTL_ARG_CODE_PIXEL_CONST = 0x5,
//   MTL_ARG_CODE_PRIM_END = 0x6,
//   MTL_ARG_MATERIAL_PIXEL_CONST = 0x6,
//   MTL_ARG_LITERAL_PIXEL_CONST = 0x7,
//   MLT_ARG_COUNT = 0x8,
// };

// /* 323 */
// enum GfxDisplayMode : __int32
// {
//   SINGLE_PLAYER_FULLSCENE_WIDE = 0x0,
//   TWO_PLAYER_COOP_1UP_WIDE = 0x1,
//   TWO_PLAYER_COOP_2UP_WIDE = 0x2,
//   FOUR_PLAYER_1UP_WIDE = 0x3,
//   FOUR_PLAYER_2UP_WIDE = 0x4,
//   FOUR_PLAYER_3UP_WIDE = 0x5,
//   FOUR_PLAYER_4UP_WIDE = 0x6,
//   SINGLE_PLAYER_FULLSCENE = 0x7,
//   TWO_PLAYER_COOP_1UP = 0x8,
//   TWO_PLAYER_COOP_2UP = 0x9,
//   FOUR_PLAYER_1UP = 0xA,
//   FOUR_PLAYER_2UP = 0xB,
//   FOUR_PLAYER_3UP = 0xC,
//   FOUR_PLAYER_4UP = 0xD,
//   DISPLAY_MODE_TYPES = 0xE,
// };

// /* 324 */
// enum _D3DFILLMODE : __int32
// {
//   D3DFILL_POINT = 0x1,
//   D3DFILL_WIREFRAME = 0x2,
//   D3DFILL_SOLID = 0x3,
//   D3DFILL_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 325 */
// enum _D3DBLEND : __int32
// {
//   D3DBLEND_ZERO = 0x1,
//   D3DBLEND_ONE = 0x2,
//   D3DBLEND_SRCCOLOR = 0x3,
//   D3DBLEND_INVSRCCOLOR = 0x4,
//   D3DBLEND_SRCALPHA = 0x5,
//   D3DBLEND_INVSRCALPHA = 0x6,
//   D3DBLEND_DESTALPHA = 0x7,
//   D3DBLEND_INVDESTALPHA = 0x8,
//   D3DBLEND_DESTCOLOR = 0x9,
//   D3DBLEND_INVDESTCOLOR = 0xA,
//   D3DBLEND_SRCALPHASAT = 0xB,
//   D3DBLEND_BOTHSRCALPHA = 0xC,
//   D3DBLEND_BOTHINVSRCALPHA = 0xD,
//   D3DBLEND_BLENDFACTOR = 0xE,
//   D3DBLEND_INVBLENDFACTOR = 0xF,
//   D3DBLEND_SRCCOLOR2 = 0x10,
//   D3DBLEND_INVSRCCOLOR2 = 0x11,
//   D3DBLEND_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 326 */
// enum _D3DBLENDOP : __int32
// {
//   D3DBLENDOP_ADD = 0x1,
//   D3DBLENDOP_SUBTRACT = 0x2,
//   D3DBLENDOP_REVSUBTRACT = 0x3,
//   D3DBLENDOP_MIN = 0x4,
//   D3DBLENDOP_MAX = 0x5,
//   D3DBLENDOP_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 327 */
// enum _D3DTEXTUREADDRESS : __int32
// {
//   D3DTADDRESS_WRAP = 0x1,
//   D3DTADDRESS_MIRROR = 0x2,
//   D3DTADDRESS_CLAMP = 0x3,
//   D3DTADDRESS_BORDER = 0x4,
//   D3DTADDRESS_MIRRORONCE = 0x5,
//   D3DTADDRESS_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 328 */
// enum _D3DCMPFUNC : __int32
// {
//   D3DCMP_NEVER = 0x1,
//   D3DCMP_LESS = 0x2,
//   D3DCMP_EQUAL = 0x3,
//   D3DCMP_LESSEQUAL = 0x4,
//   D3DCMP_GREATER = 0x5,
//   D3DCMP_NOTEQUAL = 0x6,
//   D3DCMP_GREATEREQUAL = 0x7,
//   D3DCMP_ALWAYS = 0x8,
//   D3DCMP_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 329 */
// enum _D3DSTENCILOP : __int32
// {
//   D3DSTENCILOP_KEEP = 0x1,
//   D3DSTENCILOP_ZERO = 0x2,
//   D3DSTENCILOP_REPLACE = 0x3,
//   D3DSTENCILOP_INCRSAT = 0x4,
//   D3DSTENCILOP_DECRSAT = 0x5,
//   D3DSTENCILOP_INVERT = 0x6,
//   D3DSTENCILOP_INCR = 0x7,
//   D3DSTENCILOP_DECR = 0x8,
//   D3DSTENCILOP_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 330 */
// enum MaterialTextureSource : __int32
// {
//   TEXTURE_SRC_CODE_BLACK = 0x0,
//   TEXTURE_SRC_CODE_WHITE = 0x1,
//   TEXTURE_SRC_CODE_IDENTITY_NORMAL_MAP = 0x2,
//   TEXTURE_SRC_CODE_MODEL_LIGHTING = 0x3,
//   TEXTURE_SRC_CODE_LIGHTMAP_PRIMARY = 0x4,
//   TEXTURE_SRC_CODE_LIGHTMAP_SECONDARY = 0x5,
//   TEXTURE_SRC_CODE_SHADOWMAP_SUN = 0x6,
//   TEXTURE_SRC_CODE_SHADOWMAP_SPOT = 0x7,
//   TEXTURE_SRC_CODE_FEEDBACK = 0x8,
//   TEXTURE_SRC_CODE_RESOLVED_POST_SUN = 0x9,
//   TEXTURE_SRC_CODE_RESOLVED_SCENE = 0xA,
//   TEXTURE_SRC_CODE_POST_EFFECT_SRC = 0xB,
//   TEXTURE_SRC_CODE_POST_EFFECT_GODRAYS = 0xC,
//   TEXTURE_SRC_CODE_POST_EFFECT_0 = 0xD,
//   TEXTURE_SRC_CODE_POST_EFFECT_1 = 0xE,
//   TEXTURE_SRC_CODE_SKY = 0xF,
//   TEXTURE_SRC_CODE_LIGHT_ATTENUATION = 0x10,
//   TEXTURE_SRC_CODE_DLIGHT_ATTENUATION = 0x11,
//   TEXTURE_SRC_CODE_OUTDOOR = 0x12,
//   TEXTURE_SRC_CODE_FLOATZ = 0x13,
//   TEXTURE_SRC_CODE_PROCESSED_FLOATZ = 0x14,
//   TEXTURE_SRC_CODE_RAW_FLOATZ = 0x15,
//   TEXTURE_SRC_CODE_CASE_TEXTURE = 0x16,
//   TEXTURE_SRC_CODE_CINEMATIC_Y = 0x17,
//   TEXTURE_SRC_CODE_CINEMATIC_CR = 0x18,
//   TEXTURE_SRC_CODE_CINEMATIC_CB = 0x19,
//   TEXTURE_SRC_CODE_CINEMATIC_A = 0x1A,
//   TEXTURE_SRC_CODE_REFLECTION_PROBE = 0x1B,
//   TEXTURE_SRC_CODE_FEATHER_FLOAT_Z = 0x1C,
//   TEXTURE_SRC_CODE_TERRAIN_SCORCH_TEXTURE_0 = 0x1D,
//   TEXTURE_SRC_CODE_TERRAIN_SCORCH_TEXTURE_1 = 0x1E,
//   TEXTURE_SRC_CODE_TERRAIN_SCORCH_TEXTURE_2 = 0x1F,
//   TEXTURE_SRC_CODE_TERRAIN_SCORCH_TEXTURE_3 = 0x20,
//   TEXTURE_SRC_CODE_TERRAIN_SCORCH_TEXTURE_LAST = 0x20,
//   TEXTURE_SRC_CODE_LIGHTMAP_SECONDARYB = 0x21,
//   TEXTURE_SRC_CODE_TEXTURE_0 = 0x22,
//   TEXTURE_SRC_CODE_TEXTURE_1 = 0x23,
//   TEXTURE_SRC_CODE_TEXTURE_2 = 0x24,
//   TEXTURE_SRC_CODE_TEXTURE_3 = 0x25,
//   TEXTURE_SRC_CODE_IMPACT_MASK = 0x26,
//   TEXTURE_SRC_CODE_UI3D = 0x27,
//   TEXTURE_SRC_CODE_MISSILE_CAM = 0x28,
//   TEXTURE_SRC_CODE_COMPOSITE_RESULT = 0x29,
//   TEXTURE_SRC_CODE_HEATMAP = 0x2A,
//   TEXTURE_SRC_CODE_COUNT = 0x2B,
// };

// /* 331 */
// enum _D3DZBUFFERTYPE : __int32
// {
//   D3DZB_FALSE = 0x0,
//   D3DZB_TRUE = 0x1,
//   D3DZB_USEW = 0x2,
//   D3DZB_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 332 */
// enum _D3DPRIMITIVETYPE : __int32
// {
//   D3DPT_POINTLIST = 0x1,
//   D3DPT_LINELIST = 0x2,
//   D3DPT_LINESTRIP = 0x3,
//   D3DPT_TRIANGLELIST = 0x4,
//   D3DPT_TRIANGLESTRIP = 0x5,
//   D3DPT_TRIANGLEFAN = 0x6,
//   D3DPT_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 333 */
// enum _D3DRENDERSTATETYPE : __int32
// {
//   D3DRS_ZENABLE = 0x7,
//   D3DRS_FILLMODE = 0x8,
//   D3DRS_SHADEMODE = 0x9,
//   D3DRS_ZWRITEENABLE = 0xE,
//   D3DRS_ALPHATESTENABLE = 0xF,
//   D3DRS_LASTPIXEL = 0x10,
//   D3DRS_SRCBLEND = 0x13,
//   D3DRS_DESTBLEND = 0x14,
//   D3DRS_CULLMODE = 0x16,
//   D3DRS_ZFUNC = 0x17,
//   D3DRS_ALPHAREF = 0x18,
//   D3DRS_ALPHAFUNC = 0x19,
//   D3DRS_DITHERENABLE = 0x1A,
//   D3DRS_ALPHABLENDENABLE = 0x1B,
//   D3DRS_FOGENABLE = 0x1C,
//   D3DRS_SPECULARENABLE = 0x1D,
//   D3DRS_FOGCOLOR = 0x22,
//   D3DRS_FOGTABLEMODE = 0x23,
//   D3DRS_FOGSTART = 0x24,
//   D3DRS_FOGEND = 0x25,
//   D3DRS_FOGDENSITY = 0x26,
//   D3DRS_RANGEFOGENABLE = 0x30,
//   D3DRS_STENCILENABLE = 0x34,
//   D3DRS_STENCILFAIL = 0x35,
//   D3DRS_STENCILZFAIL = 0x36,
//   D3DRS_STENCILPASS = 0x37,
//   D3DRS_STENCILFUNC = 0x38,
//   D3DRS_STENCILREF = 0x39,
//   D3DRS_STENCILMASK = 0x3A,
//   D3DRS_STENCILWRITEMASK = 0x3B,
//   D3DRS_TEXTUREFACTOR = 0x3C,
//   D3DRS_WRAP0 = 0x80,
//   D3DRS_WRAP1 = 0x81,
//   D3DRS_WRAP2 = 0x82,
//   D3DRS_WRAP3 = 0x83,
//   D3DRS_WRAP4 = 0x84,
//   D3DRS_WRAP5 = 0x85,
//   D3DRS_WRAP6 = 0x86,
//   D3DRS_WRAP7 = 0x87,
//   D3DRS_CLIPPING = 0x88,
//   D3DRS_LIGHTING = 0x89,
//   D3DRS_AMBIENT = 0x8B,
//   D3DRS_FOGVERTEXMODE = 0x8C,
//   D3DRS_COLORVERTEX = 0x8D,
//   D3DRS_LOCALVIEWER = 0x8E,
//   D3DRS_NORMALIZENORMALS = 0x8F,
//   D3DRS_DIFFUSEMATERIALSOURCE = 0x91,
//   D3DRS_SPECULARMATERIALSOURCE = 0x92,
//   D3DRS_AMBIENTMATERIALSOURCE = 0x93,
//   D3DRS_EMISSIVEMATERIALSOURCE = 0x94,
//   D3DRS_VERTEXBLEND = 0x97,
//   D3DRS_CLIPPLANEENABLE = 0x98,
//   D3DRS_POINTSIZE = 0x9A,
//   D3DRS_POINTSIZE_MIN = 0x9B,
//   D3DRS_POINTSPRITEENABLE = 0x9C,
//   D3DRS_POINTSCALEENABLE = 0x9D,
//   D3DRS_POINTSCALE_A = 0x9E,
//   D3DRS_POINTSCALE_B = 0x9F,
//   D3DRS_POINTSCALE_C = 0xA0,
//   D3DRS_MULTISAMPLEANTIALIAS = 0xA1,
//   D3DRS_MULTISAMPLEMASK = 0xA2,
//   D3DRS_PATCHEDGESTYLE = 0xA3,
//   D3DRS_DEBUGMONITORTOKEN = 0xA5,
//   D3DRS_POINTSIZE_MAX = 0xA6,
//   D3DRS_INDEXEDVERTEXBLENDENABLE = 0xA7,
//   D3DRS_COLORWRITEENABLE = 0xA8,
//   D3DRS_TWEENFACTOR = 0xAA,
//   D3DRS_BLENDOP = 0xAB,
//   D3DRS_POSITIONDEGREE = 0xAC,
//   D3DRS_NORMALDEGREE = 0xAD,
//   D3DRS_SCISSORTESTENABLE = 0xAE,
//   D3DRS_SLOPESCALEDEPTHBIAS = 0xAF,
//   D3DRS_ANTIALIASEDLINEENABLE = 0xB0,
//   D3DRS_MINTESSELLATIONLEVEL = 0xB2,
//   D3DRS_MAXTESSELLATIONLEVEL = 0xB3,
//   D3DRS_ADAPTIVETESS_X = 0xB4,
//   D3DRS_ADAPTIVETESS_Y = 0xB5,
//   D3DRS_ADAPTIVETESS_Z = 0xB6,
//   D3DRS_ADAPTIVETESS_W = 0xB7,
//   D3DRS_ENABLEADAPTIVETESSELLATION = 0xB8,
//   D3DRS_TWOSIDEDSTENCILMODE = 0xB9,
//   D3DRS_CCW_STENCILFAIL = 0xBA,
//   D3DRS_CCW_STENCILZFAIL = 0xBB,
//   D3DRS_CCW_STENCILPASS = 0xBC,
//   D3DRS_CCW_STENCILFUNC = 0xBD,
//   D3DRS_COLORWRITEENABLE1 = 0xBE,
//   D3DRS_COLORWRITEENABLE2 = 0xBF,
//   D3DRS_COLORWRITEENABLE3 = 0xC0,
//   D3DRS_BLENDFACTOR = 0xC1,
//   D3DRS_SRGBWRITEENABLE = 0xC2,
//   D3DRS_DEPTHBIAS = 0xC3,
//   D3DRS_WRAP8 = 0xC6,
//   D3DRS_WRAP9 = 0xC7,
//   D3DRS_WRAP10 = 0xC8,
//   D3DRS_WRAP11 = 0xC9,
//   D3DRS_WRAP12 = 0xCA,
//   D3DRS_WRAP13 = 0xCB,
//   D3DRS_WRAP14 = 0xCC,
//   D3DRS_WRAP15 = 0xCD,
//   D3DRS_SEPARATEALPHABLENDENABLE = 0xCE,
//   D3DRS_SRCBLENDALPHA = 0xCF,
//   D3DRS_DESTBLENDALPHA = 0xD0,
//   D3DRS_BLENDOPALPHA = 0xD1,
//   D3DRS_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 334 */
// enum MaterialUpdateFrequency : __int32
// {
//   MTL_UPDATE_PER_PRIM = 0x0,
//   MTL_UPDATE_PER_OBJECT = 0x1,
//   MTL_UPDATE_RARELY = 0x2,
//   MTL_UPDATE_CUSTOM = 0x3,
// };

// /* 335 */
// enum StreamStatMetrics : __int32
// {
//   STREAMSTATMETRIC_NUMBER = 0x0,
//   STREAMSTATMETRIC_SIZE = 0x1,
//   STREAMSTATMETRIC_COUNT = 0x2,
// };

// /* 336 */
// enum $468271FF1901306E39AF422E484DED00 : __int32
// {
//   STATE_FLAG_CULL_BACK = 0x1,
//   STATE_FLAG_CULL_FRONT = 0x2,
//   STATE_FLAG_DECAL = 0x4,
//   STATE_FLAG_WRITES_DEPTH = 0x8,
//   STATE_FLAG_USES_DEPTH_BUFFER = 0x10,
//   STATE_FLAG_USES_STENCIL_BUFFER = 0x20,
//   STATE_FLAG_CULL_BACK_SHADOW = 0x40,
//   STATE_FLAG_CULL_FRONT_SHADOW = 0x80,
// };

// /* 337 */
// enum $78AFE9152D51E9B54BBF22F90DA08BBB : __int32
// {
//   TEXTURE_FILTER_DISABLED = 0x0,
//   TEXTURE_FILTER_NEAREST = 0x1,
//   TEXTURE_FILTER_LINEAR = 0x2,
//   TEXTURE_FILTER_ANISO2X = 0x3,
//   TEXTURE_FILTER_ANISO4X = 0x4,
// };

// /* 338 */
// enum $229373BFF2A42ED620863B5D083EE9A5 : __int32
// {
//   SAMPLER_FILTER_SHIFT = 0x0,
//   SAMPLER_FILTER_NEAREST = 0x1,
//   SAMPLER_FILTER_LINEAR = 0x2,
//   SAMPLER_FILTER_ANISO2X = 0x3,
//   SAMPLER_FILTER_ANISO4X = 0x4,
//   SAMPLER_FILTER_MASK = 0x7,
//   SAMPLER_MIPMAP_SHIFT = 0x3,
//   SAMPLER_MIPMAP_DISABLED = 0x0,
//   SAMPLER_MIPMAP_NEAREST = 0x8,
//   SAMPLER_MIPMAP_LINEAR = 0x10,
//   SAMPLER_MIPMAP_COUNT = 0x3,
//   SAMPLER_MIPMAP_MASK = 0x18,
//   SAMPLER_CLAMP_U_SHIFT = 0x5,
//   SAMPLER_CLAMP_V_SHIFT = 0x6,
//   SAMPLER_CLAMP_W_SHIFT = 0x7,
//   SAMPLER_CLAMP_U = 0x20,
//   SAMPLER_CLAMP_V = 0x40,
//   SAMPLER_CLAMP_W = 0x80,
//   SAMPLER_CLAMP_MASK = 0xE0,
//   SAMPLER_ANISO_SHIFT = 0x8,
//   SAMPLER_ANISO_1X = 0x0,
//   SAMPLER_ANISO_2X = 0x100,
//   SAMPLER_ANISO_4X = 0x200,
//   SAMPLER_ANISO_6X = 0x300,
//   SAMPLER_ANISO_8X = 0x400,
//   SAMPLER_ANISO_10X = 0x500,
//   SAMPLER_ANISO_12X = 0x600,
//   SAMPLER_ANISO_16X = 0x700,
//   SAMPLER_ANISO_MASK = 0x700,
//   SAMPLER_CONVOLUTION = 0x20000,
//   SAMPLER_GAMMA = 0x40000,
//   SAMPLER_UNNORMALIZED_UV = 0x80000,
//   SAMPLER_DIRECT_FILTER_UNNORMALIZED = 0x80000,
// };

// /* 339 */
// enum $CF43A0974C3EB2799D9079D7BDE5CE8D : __int32
// {
//   FOG_NONE = 0x0,
//   FOG_SERVER = 0x1,
//   FOG_CURRENT = 0x2,
//   FOG_LAST = 0x3,
//   FOG_TARGET = 0x4,
//   FOG_COUNT = 0x5,
// };

// /* 340 */
// enum _D3DSAMPLERSTATETYPE : __int32
// {
//   D3DSAMP_ADDRESSU = 0x1,
//   D3DSAMP_ADDRESSV = 0x2,
//   D3DSAMP_ADDRESSW = 0x3,
//   D3DSAMP_BORDERCOLOR = 0x4,
//   D3DSAMP_MAGFILTER = 0x5,
//   D3DSAMP_MINFILTER = 0x6,
//   D3DSAMP_MIPFILTER = 0x7,
//   D3DSAMP_MIPMAPLODBIAS = 0x8,
//   D3DSAMP_MAXMIPLEVEL = 0x9,
//   D3DSAMP_MAXANISOTROPY = 0xA,
//   D3DSAMP_SRGBTEXTURE = 0xB,
//   D3DSAMP_ELEMENTINDEX = 0xC,
//   D3DSAMP_DMAPOFFSET = 0xD,
//   D3DSAMP_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 341 */
// enum $31FFB9E6056DA49884E11DD1F4062753 : __int32
// {
//   R_RENDERTARGET_NULL = 0x0,
//   R_RENDERTARGET_NONE = 0x0,
//   R_RENDERTARGET_SAVED_SCREEN = 0x1,
//   R_RENDERTARGET_FRAME_BUFFER = 0x2,
//   R_RENDERTARGET_SCENE = 0x3,
//   R_RENDERTARGET_SCENE_NULLCOLOR = 0x4,
//   R_RENDERTARGET_RESOLVED_POST_SUN = 0x5,
//   R_RENDERTARGET_RESOLVED_SCENE = 0x6,
//   R_RENDERTARGET_FLOAT_Z = 0x7,
//   R_RENDERTARGET_PINGPONG_0 = 0x8,
//   R_RENDERTARGET_PINGPONG_1 = 0x9,
//   R_RENDERTARGET_POST_EFFECT_SRC = 0xA,
//   R_RENDERTARGET_POST_EFFECT_GODRAYS = 0xB,
//   R_RENDERTARGET_POST_EFFECT_0 = 0xC,
//   R_RENDERTARGET_POST_EFFECT_1 = 0xD,
//   R_RENDERTARGET_SHADOWMAP_SUN = 0xE,
//   R_RENDERTARGET_SHADOWMAP_SPOT = 0xF,
//   R_RENDERTARGET_16BIT_SYSTEM = 0x10,
//   R_RENDERTARGET_8BIT_SYSTEM = 0x11,
//   R_RENDERTARGET_8BIT_SWAPCHAIN_BACKBUFFER = 0x12,
//   R_RENDERTARGET_SEETHRU_DECAL = 0x13,
//   R_RENDERTARGET_UI3D = 0x14,
//   R_RENDERTARGET_UI3D_PING_PONG = 0x15,
//   R_RENDERTARGET_MISSILE_CAM = 0x16,
//   R_RENDERTARGET_FLOAT_Z_MISSILE_CAM = 0x17,
//   R_RENDERTARGET_COMPOSITE = 0x18,
//   R_RENDERTARGET_BLOOM_MIP1 = 0x19,
//   R_RENDERTARGET_BLOOM_MIP2 = 0x1A,
//   R_RENDERTARGET_BLOOM_MIP3 = 0x1B,
//   R_RENDERTARGET_BLOOM_MIP3_PING = 0x1C,
//   R_RENDERTARGET_BLOOM_MIP3_PONG = 0x1D,
//   R_RENDERTARGET_BLOOM_STREAK = 0x1E,
//   R_RENDERTARGET_SHADOWMAP_SUN_HI_FULL = 0x1F,
//   R_RENDERTARGET_SHADOWMAP_SUN_HI_PARTITION_0 = 0x20,
//   R_RENDERTARGET_SHADOWMAP_SUN_HI_PARTITION_1 = 0x21,
//   R_RENDERTARGET_SHADOWMAP_SUN_LO_FULL = 0x22,
//   R_RENDERTARGET_SHADOWMAP_SUN_LO_PARTITION_0 = 0x23,
//   R_RENDERTARGET_SHADOWMAP_SUN_LO_PARTITION_1 = 0x24,
//   R_RENDERTARGET_SHADOWMAP_SPOT_FULL = 0x25,
//   R_RENDERTARGET_SHADOWMAP_SPOT_0 = 0x26,
//   R_RENDERTARGET_SHADOWMAP_SPOT_1 = 0x27,
//   R_RENDERTARGET_SHADOWMAP_SPOT_2 = 0x28,
//   R_RENDERTARGET_SHADOWMAP_SPOT_3 = 0x29,
//   R_RENDERTARGET_SHADOWMAP_SPOT_HI_0 = 0x2A,
//   R_RENDERTARGET_SHADOWMAP_SPOT_HI_1 = 0x2B,
//   R_RENDERTARGET_COUNT = 0x2C,
// };

// /* 342 */
// enum GfxBlend : __int32
// {
//   GFXS_BLEND_DISABLED = 0x0,
//   GFXS_BLEND_ZERO = 0x1,
//   GFXS_BLEND_ONE = 0x2,
//   GFXS_BLEND_SRCCOLOR = 0x3,
//   GFXS_BLEND_INVSRCCOLOR = 0x4,
//   GFXS_BLEND_SRCALPHA = 0x5,
//   GFXS_BLEND_INVSRCALPHA = 0x6,
//   GFXS_BLEND_DESTALPHA = 0x7,
//   GFXS_BLEND_INVDESTALPHA = 0x8,
//   GFXS_BLEND_DESTCOLOR = 0x9,
//   GFXS_BLEND_INVDESTCOLOR = 0xA,
//   GFXS_BLEND_MASK = 0xF,
// };

// /* 343 */
// enum GfxBlendOp : __int32
// {
//   GFXS_BLENDOP_DISABLED = 0x0,
//   GFXS_BLENDOP_ADD = 0x1,
//   GFXS_BLENDOP_SUBTRACT = 0x2,
//   GFXS_BLENDOP_REVSUBTRACT = 0x3,
//   GFXS_BLENDOP_MIN = 0x4,
//   GFXS_BLENDOP_MAX = 0x5,
//   GFXS_BLENDOP_MASK = 0x7,
// };

// /* 344 */
// enum $9902796B456A3FABC62F2C7D255BC3D2 : __int32
// {
//   GFXS0_SRCBLEND_RGB_SHIFT = 0x0,
//   GFXS0_SRCBLEND_RGB_MASK = 0xF,
//   GFXS0_DSTBLEND_RGB_SHIFT = 0x4,
//   GFXS0_DSTBLEND_RGB_MASK = 0xF0,
//   GFXS0_BLENDOP_RGB_SHIFT = 0x8,
//   GFXS0_BLENDOP_RGB_MASK = 0x700,
//   GFXS0_BLEND_RGB_MASK = 0x7FF,
//   GFXS0_ATEST_DISABLE = 0x800,
//   GFXS0_ATEST_GT_0 = 0x1000,
//   GFXS0_ATEST_GE_255 = 0x2000,
//   GFXS0_ATEST_GE_128 = 0x3000,
//   GFXS0_ATEST_MASK = 0x3000,
//   GFXS0_CULL_SHIFT = 0xE,
//   GFXS0_CULL_NONE = 0x4000,
//   GFXS0_CULL_BACK = 0x8000,
//   GFXS0_CULL_FRONT = 0xC000,
//   GFXS0_CULL_MASK = 0xC000,
//   GFXS0_SRCBLEND_ALPHA_SHIFT = 0x10,
//   GFXS0_SRCBLEND_ALPHA_MASK = 0xF0000,
//   GFXS0_DSTBLEND_ALPHA_SHIFT = 0x14,
//   GFXS0_DSTBLEND_ALPHA_MASK = 0xF00000,
//   GFXS0_BLENDOP_ALPHA_SHIFT = 0x18,
//   GFXS0_BLENDOP_ALPHA_MASK = 0x7000000,
//   GFXS0_BLEND_ALPHA_MASK = 0x7FF0000,
//   GFXS0_COLORWRITE_RGB = 0x8000000,
//   GFXS0_COLORWRITE_ALPHA = 0x10000000,
//   GFXS0_COLORWRITE_MASK = 0x18000000,
//   GFXS0_POLYMODE_LINE = 0x80000000,
//   GFXS1_DEPTHWRITE = 0x1,
//   GFXS1_DEPTHTEST_DISABLE = 0x2,
//   GFXS1_DEPTHTEST_SHIFT = 0x2,
//   GFXS1_DEPTHTEST_ALWAYS = 0x0,
//   GFXS1_DEPTHTEST_LESS = 0x4,
//   GFXS1_DEPTHTEST_EQUAL = 0x8,
//   GFXS1_DEPTHTEST_LESSEQUAL = 0xC,
//   GFXS1_DEPTHTEST_MASK = 0xC,
//   GFXS1_DEPTHFUNC_MASK = 0xF,
//   GFXS1_POLYGON_OFFSET_SHIFT = 0x4,
//   GFXS1_POLYGON_OFFSET_0 = 0x0,
//   GFXS1_POLYGON_OFFSET_1 = 0x10,
//   GFXS1_POLYGON_OFFSET_2 = 0x20,
//   GFXS1_POLYGON_OFFSET_SHADOWMAP = 0x30,
//   GFXS1_POLYGON_OFFSET_MASK = 0x30,
//   GFXS1_STENCIL_FRONT_ENABLE = 0x40,
//   GFXS1_STENCIL_BACK_ENABLE = 0x80,
//   GFXS1_STENCIL_MASK = 0xC0,
//   GFXS1_STENCIL_FRONT_PASS_SHIFT = 0x8,
//   GFXS1_STENCIL_FRONT_FAIL_SHIFT = 0xB,
//   GFXS1_STENCIL_FRONT_ZFAIL_SHIFT = 0xE,
//   GFXS1_STENCIL_FRONT_FUNC_SHIFT = 0x11,
//   GFXS1_STENCIL_FRONT_MASK = 0xFFF00,
//   GFXS1_STENCIL_BACK_PASS_SHIFT = 0x14,
//   GFXS1_STENCIL_BACK_FAIL_SHIFT = 0x17,
//   GFXS1_STENCIL_BACK_ZFAIL_SHIFT = 0x1A,
//   GFXS1_STENCIL_BACK_FUNC_SHIFT = 0x1D,
//   GFXS1_STENCIL_BACK_MASK = 0xFFF00000,
//   GFXS1_STENCILFUNC_FRONTBACK_MASK = 0xE00E0000,
//   GFXS1_STENCILOP_FRONTBACK_MASK = 0x1FF1FF00,
// };

// /* 345 */
// enum _D3DDECLTYPE : __int32
// {
//   D3DDECLTYPE_FLOAT1 = 0x0,
//   D3DDECLTYPE_FLOAT2 = 0x1,
//   D3DDECLTYPE_FLOAT3 = 0x2,
//   D3DDECLTYPE_FLOAT4 = 0x3,
//   D3DDECLTYPE_D3DCOLOR = 0x4,
//   D3DDECLTYPE_UBYTE4 = 0x5,
//   D3DDECLTYPE_SHORT2 = 0x6,
//   D3DDECLTYPE_SHORT4 = 0x7,
//   D3DDECLTYPE_UBYTE4N = 0x8,
//   D3DDECLTYPE_SHORT2N = 0x9,
//   D3DDECLTYPE_SHORT4N = 0xA,
//   D3DDECLTYPE_USHORT2N = 0xB,
//   D3DDECLTYPE_USHORT4N = 0xC,
//   D3DDECLTYPE_UDEC3 = 0xD,
//   D3DDECLTYPE_DEC3N = 0xE,
//   D3DDECLTYPE_FLOAT16_2 = 0xF,
//   D3DDECLTYPE_FLOAT16_4 = 0x10,
//   D3DDECLTYPE_UNUSED = 0x11,
// };

// /* 346 */
// enum GfxTextureOp : __int32
// {
//   GFXS_TEXOP_DISABLE = 0x0,
//   GFXS_TEXOP_SELECTARG1 = 0x1,
//   GFXS_TEXOP_SELECTARG2 = 0x2,
//   GFXS_TEXOP_MODULATE = 0x3,
//   GFXS_TEXOP_MODULATE2X = 0x4,
//   GFXS_TEXOP_MODULATE4X = 0x5,
//   GFXS_TEXOP_ADD = 0x6,
//   GFXS_TEXOP_ADDSIGNED = 0x7,
//   GFXS_TEXOP_ADDSIGNED2X = 0x8,
//   GFXS_TEXOP_SUBTRACT = 0x9,
//   GFXS_TEXOP_ADDSMOOTH = 0xA,
//   GFXS_TEXOP_BLENDDIFFUSEALPHA = 0xB,
//   GFXS_TEXOP_BLENDTEXTUREALPHA = 0xC,
//   GFXS_TEXOP_BLENDFACTORALPHA = 0xD,
//   GFXS_TEXOP_BLENDTEXTUREALPHAPM = 0xE,
//   GFXS_TEXOP_BLENDCURRENTALPHA = 0xF,
//   GFXS_TEXOP_MODULATEALPHA_ADDCOLOR = 0x10,
//   GFXS_TEXOP_MODULATECOLOR_ADDALPHA = 0x11,
//   GFXS_TEXOP_MODULATEINVALPHA_ADDCOLOR = 0x12,
//   GFXS_TEXOP_MODULATEINVCOLOR_ADDALPHA = 0x13,
//   GFXS_TEXOP_DOTPRODUCT3 = 0x14,
//   GFXS_TEXOP_MULTIPLYADD = 0x15,
//   GFXS_TEXOP_LERP = 0x16,
//   GFXS_TEXOP_COUNT = 0x17,
//   GFXS_TEXOP_BITS = 0x5,
//   GFXS_TEXOP_MASK = 0x1F,
// };

// /* 347 */
// enum $E681A048096CB9E4B36F1590F98F8E52 : __int32
// {
//   IMG_CATEGORY_UNKNOWN = 0x0,
//   IMG_CATEGORY_AUTO_GENERATED = 0x1,
//   IMG_CATEGORY_LIGHTMAP = 0x2,
//   IMG_CATEGORY_LOAD_FROM_FILE = 0x3,
//   IMG_CATEGORY_RAW = 0x4,
//   IMG_CATEGORY_FIRST_UNMANAGED = 0x5,
//   IMG_CATEGORY_WATER = 0x5,
//   IMG_CATEGORY_RENDERTARGET = 0x6,
//   IMG_CATEGORY_TEMP = 0x7,
// };

// /* 348 */
// enum $92364187413C9A0320C404614F91083D : __int32
// {
//   PICMIP_PLATFORM_USED = 0x0,
//   PICMIP_PLATFORM_MINSPEC = 0x1,
//   PICMIP_PLATFORM_COUNT = 0x2,
// };

// /* 349 */
// enum GfxTextureArg : __int32
// {
//   GFXS_TEXARG_CONSTANT = 0x0,
//   GFXS_TEXARG_CURRENT = 0x1,
//   GFXS_TEXARG_COLOR_0 = 0x2,
//   GFXS_TEXARG_COLOR_1 = 0x3,
//   GFXS_TEXARG_TEMP = 0x4,
//   GFXS_TEXARG_TEXTURE = 0x5,
//   GFXS_TEXARG_TFACTOR = 0x6,
//   GFXS_TEXARG_COUNT = 0x7,
//   GFXS_TEXARG_BASE_BITS = 0x3,
//   GFXS_TEXARG_BASE_MASK = 0x7,
//   GFXS_TEXARG_COMPLEMENT = 0x8,
//   GFXS_TEXARG_ALPHA_REPLICATE = 0x10,
//   GFXS_TEXARG_BITS = 0x5,
//   GFXS_TEXARG_MASK = 0x1F,
// };

// /* 350 */
// enum GfxTextureFunc : __int32
// {
//   GFXS_TEXFUNC_OP_SHIFT = 0x0,
//   GFXS_TEXFUNC_DEST_SHIFT = 0x5,
//   GFXS_TEXFUNC_ARG1_SHIFT = 0xA,
//   GFXS_TEXFUNC_ARG2_SHIFT = 0xF,
//   GFXS_TEXFUNC_ARG0_SHIFT = 0x14,
// };

// /* 351 */
// enum $229F243C29BD2822189FBA4671A843A3 : __int32
// {
//   CONST_SRC_CODE_MAYBE_DIRTY_PS_BEGIN = 0x0,
//   CONST_SRC_CODE_LIGHT_POSITION = 0x0,
//   CONST_SRC_CODE_LIGHT_DIFFUSE = 0x1,
//   CONST_SRC_CODE_LIGHT_SPECULAR = 0x2,
//   CONST_SRC_CODE_LIGHT_SPOTDIR = 0x3,
//   CONST_SRC_CODE_LIGHT_SPOTFACTORS = 0x4,
//   CONST_SRC_CODE_LIGHT_ATTENUATION = 0x5,
//   CONST_SRC_CODE_LIGHT_FALLOFF_A = 0x6,
//   CONST_SRC_CODE_LIGHT_FALLOFF_B = 0x7,
//   CONST_SRC_CODE_LIGHT_SPOT_MATRIX0 = 0x8,
//   CONST_SRC_CODE_LIGHT_SPOT_MATRIX1 = 0x9,
//   CONST_SRC_CODE_LIGHT_SPOT_MATRIX2 = 0xA,
//   CONST_SRC_CODE_LIGHT_SPOT_MATRIX3 = 0xB,
//   CONST_SRC_CODE_LIGHT_SPOT_AABB = 0xC,
//   CONST_SRC_CODE_LIGHT_CONE_CONTROL1 = 0xD,
//   CONST_SRC_CODE_LIGHT_CONE_CONTROL2 = 0xE,
//   CONST_SRC_CODE_LIGHT_SPOT_COOKIE_SLIDE_CONTROL = 0xF,
//   CONST_SRC_CODE_NEARPLANE_ORG = 0x10,
//   CONST_SRC_CODE_NEARPLANE_DX = 0x11,
//   CONST_SRC_CODE_NEARPLANE_DY = 0x12,
//   CONST_SRC_CODE_SHADOW_PARMS = 0x13,
//   CONST_SRC_CODE_SHADOWMAP_POLYGON_OFFSET = 0x14,
//   CONST_SRC_CODE_RENDER_TARGET_SIZE = 0x15,
//   CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT = 0x16,
//   CONST_SRC_CODE_DOF_EQUATION_VIEWMODEL_AND_FAR_BLUR = 0x17,
//   CONST_SRC_CODE_DOF_EQUATION_SCENE = 0x18,
//   CONST_SRC_CODE_DOF_LERP_SCALE = 0x19,
//   CONST_SRC_CODE_DOF_LERP_BIAS = 0x1A,
//   CONST_SRC_CODE_DOF_ROW_DELTA = 0x1B,
//   CONST_SRC_CODE_PARTICLE_CLOUD_COLOR = 0x1C,
//   CONST_SRC_CODE_GAMETIME = 0x1D,
//   CONST_SRC_CODE_ALPHA_FADE = 0x1E,
//   CONST_SRC_CODE_MAYBE_DIRTY_PS_END = 0x1F,
//   CONST_SRC_CODE_ALWAYS_DIRTY_PS_BEGIN = 0x1F,
//   CONST_SRC_CODE_PIXEL_COST_FRACS = 0x1F,
//   CONST_SRC_CODE_PIXEL_COST_DECODE = 0x20,
//   CONST_SRC_CODE_FILTER_TAP_0 = 0x21,
//   CONST_SRC_CODE_FILTER_TAP_1 = 0x22,
//   CONST_SRC_CODE_FILTER_TAP_2 = 0x23,
//   CONST_SRC_CODE_FILTER_TAP_3 = 0x24,
//   CONST_SRC_CODE_FILTER_TAP_4 = 0x25,
//   CONST_SRC_CODE_FILTER_TAP_5 = 0x26,
//   CONST_SRC_CODE_FILTER_TAP_6 = 0x27,
//   CONST_SRC_CODE_FILTER_TAP_7 = 0x28,
//   CONST_SRC_CODE_COLOR_MATRIX_R = 0x29,
//   CONST_SRC_CODE_COLOR_MATRIX_G = 0x2A,
//   CONST_SRC_CODE_COLOR_MATRIX_B = 0x2B,
//   CONST_SRC_CODE_ALWAYS_DIRTY_PS_END = 0x2C,
//   CONST_SRC_CODE_NEVER_DIRTY_PS_BEGIN = 0x2C,
//   CONST_SRC_CODE_SHADOWMAP_SWITCH_PARTITION = 0x2C,
//   CONST_SRC_CODE_SHADOWMAP_SCALE = 0x2D,
//   CONST_SRC_CODE_ZNEAR = 0x2E,
//   CONST_SRC_CODE_SUN_POSITION = 0x2F,
//   CONST_SRC_CODE_SUN_DIFFUSE = 0x30,
//   CONST_SRC_CODE_SUN_SPECULAR = 0x31,
//   CONST_SRC_CODE_LIGHTING_LOOKUP_SCALE = 0x32,
//   CONST_SRC_CODE_DEBUG_BUMPMAP = 0x33,
//   CONST_SRC_CODE_MATERIAL_COLOR = 0x34,
//   CONST_SRC_CODE_FOG = 0x35,
//   CONST_SRC_CODE_FOG2 = 0x36,
//   CONST_SRC_CODE_FOG_COLOR = 0x37,
//   CONST_SRC_CODE_SUN_FOG = 0x38,
//   CONST_SRC_CODE_SUN_FOG_DIR = 0x39,
//   CONST_SRC_CODE_SUN_FOG_COLOR = 0x3A,
//   CONST_SRC_CODE_GLOW_SETUP = 0x3B,
//   CONST_SRC_CODE_GLOW_APPLY = 0x3C,
//   CONST_SRC_CODE_COLOR_BIAS = 0x3D,
//   CONST_SRC_CODE_COLOR_TINT_BASE = 0x3E,
//   CONST_SRC_CODE_COLOR_TINT_DELTA = 0x3F,
//   CONST_SRC_CODE_OUTDOOR_FEATHER_PARMS = 0x40,
//   CONST_SRC_CODE_SKY_TRANSITION = 0x41,
//   CONST_SRC_CODE_ENVMAP_PARMS = 0x42,
//   CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST = 0x43,
//   CONST_SRC_CODE_DLIGHT_SPOT_SHADOWMAP_PIXEL_ADJUST = 0x44,
//   CONST_SRC_CODE_CLIP_SPACE_LOOKUP_SCALE = 0x45,
//   CONST_SRC_CODE_CLIP_SPACE_LOOKUP_OFFSET = 0x46,
//   CONST_SRC_CODE_PARTICLE_CLOUD_MATRIX = 0x47,
//   CONST_SRC_CODE_DEPTH_FROM_CLIP = 0x48,
//   CONST_SRC_CODE_CODE_MESH_ARG_0 = 0x49,
//   CONST_SRC_CODE_CODE_MESH_ARG_1 = 0x4A,
//   CONST_SRC_CODE_CODE_MESH_ARG_LAST = 0x4A,
//   CONST_SRC_CODE_BASE_LIGHTING_COORDS = 0x4B,
//   CONST_SRC_CODE_WIND_DIRECTION = 0x4C,
//   CONST_SRC_CODE_WATER_PARMS = 0x4D,
//   CONST_SRC_CODE_GRASS_PARMS = 0x4E,
//   CONST_SRC_CODE_GRASS_FORCE0 = 0x4F,
//   CONST_SRC_CODE_GRASS_FORCE1 = 0x50,
//   CONST_SRC_CODE_GRASS_WIND_FORCE0 = 0x51,
//   CONST_SRC_CODE_MOTIONBLUR_DIRECTION_AND_MAGNITUDE = 0x52,
//   CONST_SRC_CODE_COMPOSITE_FX_DISTORTION = 0x53,
//   CONST_SRC_CODE_GLOW_BLOOM_SCALE = 0x54,
//   CONST_SRC_CODE_COMPOSITE_FX_OVERLAY_TEXCOORD = 0x55,
//   CONST_SRC_CODE_COLOR_BIAS1 = 0x56,
//   CONST_SRC_CODE_COLOR_TINT_BASE1 = 0x57,
//   CONST_SRC_CODE_COLOR_TINT_DELTA1 = 0x58,
//   CONST_SRC_CODE_POSTFX_FADE_EFFECT = 0x59,
//   CONST_SRC_CODE_VIEWPORT_DIMENSIONS = 0x5A,
//   CONST_SRC_CODE_FRAMEBUFFER_READ = 0x5B,
//   CONST_SRC_CODE_RESIZE_PARAMS1 = 0x5C,
//   CONST_SRC_CODE_RESIZE_PARAMS2 = 0x5D,
//   CONST_SRC_CODE_RESIZE_PARAMS3 = 0x5E,
//   CONST_SRC_CODE_VARIANT_WIND_SPRING_0 = 0x5F,
//   CONST_SRC_CODE_VARIANT_WIND_SPRING_1 = 0x60,
//   CONST_SRC_CODE_VARIANT_WIND_SPRING_2 = 0x61,
//   CONST_SRC_CODE_VARIANT_WIND_SPRING_3 = 0x62,
//   CONST_SRC_CODE_VARIANT_WIND_SPRING_4 = 0x63,
//   CONST_SRC_CODE_VARIANT_WIND_SPRING_5 = 0x64,
//   CONST_SRC_CODE_VARIANT_WIND_SPRING_6 = 0x65,
//   CONST_SRC_CODE_VARIANT_WIND_SPRING_7 = 0x66,
//   CONST_SRC_CODE_VARIANT_WIND_SPRING_8 = 0x67,
//   CONST_SRC_CODE_VARIANT_WIND_SPRING_9 = 0x68,
//   CONST_SRC_CODE_VARIANT_WIND_SPRING_10 = 0x69,
//   CONST_SRC_CODE_VARIANT_WIND_SPRING_11 = 0x6A,
//   CONST_SRC_CODE_VARIANT_WIND_SPRING_12 = 0x6B,
//   CONST_SRC_CODE_VARIANT_WIND_SPRING_13 = 0x6C,
//   CONST_SRC_CODE_VARIANT_WIND_SPRING_14 = 0x6D,
//   CONST_SRC_CODE_VARIANT_WIND_SPRING_15 = 0x6E,
//   CONST_SRC_CODE_DESTRUCTIBLE_PARMS = 0x6F,
//   CONST_SRC_CODE_CLOUD_WORLD_AREA = 0x70,
//   CONST_SRC_CODE_WATER_SCROLL = 0x71,
//   CONST_SRC_CODE_CROSSFADE_PARMS = 0x72,
//   CONST_SRC_CODE_CHARACTER_CHARRED_AMOUNT = 0x73,
//   CONST_SRC_CODE_TREECANOPY_PARMS = 0x74,
//   CONST_SRC_CODE_MARKS_HIT_NORMAL = 0x75,
//   CONST_SRC_CODE_POSTFX_CONTROL0 = 0x76,
//   CONST_SRC_CODE_POSTFX_CONTROL1 = 0x77,
//   CONST_SRC_CODE_POSTFX_CONTROL2 = 0x78,
//   CONST_SRC_CODE_POSTFX_CONTROL3 = 0x79,
//   CONST_SRC_CODE_POSTFX_CONTROL4 = 0x7A,
//   CONST_SRC_CODE_POSTFX_CONTROL5 = 0x7B,
//   CONST_SRC_CODE_POSTFX_CONTROL6 = 0x7C,
//   CONST_SRC_CODE_POSTFX_CONTROL7 = 0x7D,
//   CONST_SRC_CODE_POSTFX_CONTROL8 = 0x7E,
//   CONST_SRC_CODE_POSTFX_CONTROL9 = 0x7F,
//   CONST_SRC_CODE_POSTFX_CONTROLA = 0x80,
//   CONST_SRC_CODE_POSTFX_CONTROLB = 0x81,
//   CONST_SRC_CODE_POSTFX_CONTROLC = 0x82,
//   CONST_SRC_CODE_POSTFX_CONTROLD = 0x83,
//   CONST_SRC_CODE_POSTFX_CONTROLE = 0x84,
//   CONST_SRC_CODE_POSTFX_CONTROLF = 0x85,
//   CONST_SRC_CODE_HDRCONTROL_0 = 0x86,
//   CONST_SRC_CODE_HDRCONTROL_1 = 0x87,
//   CONST_SRC_CODE_GLIGHT_POSXS = 0x88,
//   CONST_SRC_CODE_GLIGHT_POSYS = 0x89,
//   CONST_SRC_CODE_GLIGHT_POSZS = 0x8A,
//   CONST_SRC_CODE_GLIGHT_FALLOFFS = 0x8B,
//   CONST_SRC_CODE_GLIGHT_REDS = 0x8C,
//   CONST_SRC_CODE_GLIGHT_GREENS = 0x8D,
//   CONST_SRC_CODE_GLIGHT_BLUES = 0x8E,
//   CONST_SRC_CODE_DLIGHT_POSITION = 0x8F,
//   CONST_SRC_CODE_DLIGHT_DIFFUSE = 0x90,
//   CONST_SRC_CODE_DLIGHT_SPECULAR = 0x91,
//   CONST_SRC_CODE_DLIGHT_ATTENUATION = 0x92,
//   CONST_SRC_CODE_DLIGHT_FALLOFF = 0x93,
//   CONST_SRC_CODE_DLIGHT_SPOT_MATRIX_0 = 0x94,
//   CONST_SRC_CODE_DLIGHT_SPOT_MATRIX_1 = 0x95,
//   CONST_SRC_CODE_DLIGHT_SPOT_MATRIX_2 = 0x96,
//   CONST_SRC_CODE_DLIGHT_SPOT_MATRIX_3 = 0x97,
//   CONST_SRC_CODE_DLIGHT_SPOT_DIR = 0x98,
//   CONST_SRC_CODE_DLIGHT_SPOT_FACTORS = 0x99,
//   CONST_SRC_CODE_DLIGHT_SHADOW_LOOKUP_MATRIX_0 = 0x9A,
//   CONST_SRC_CODE_DLIGHT_SHADOW_LOOKUP_MATRIX_1 = 0x9B,
//   CONST_SRC_CODE_DLIGHT_SHADOW_LOOKUP_MATRIX_2 = 0x9C,
//   CONST_SRC_CODE_DLIGHT_SHADOW_LOOKUP_MATRIX_3 = 0x9D,
//   CONST_SRC_CODE_CLOUD_LAYER_CONTROL0 = 0x9E,
//   CONST_SRC_CODE_CLOUD_LAYER_CONTROL1 = 0x9F,
//   CONST_SRC_CODE_CLOUD_LAYER_CONTROL2 = 0xA0,
//   CONST_SRC_CODE_CLOUD_LAYER_CONTROL3 = 0xA1,
//   CONST_SRC_CODE_CLOUD_LAYER_CONTROL4 = 0xA2,
//   CONST_SRC_CODE_HERO_LIGHTING_R = 0xA3,
//   CONST_SRC_CODE_HERO_LIGHTING_G = 0xA4,
//   CONST_SRC_CODE_HERO_LIGHTING_B = 0xA5,
//   CONST_SRC_CODE_LIGHT_HERO_SCALE = 0xA6,
//   CONST_SRC_CODE_CINEMATIC_BLUR_BOX = 0xA7,
//   CONST_SRC_CODE_CINEMATIC_BLUR_BOX2 = 0xA8,
//   CONST_SRC_CODE_ADSZSCALE = 0xA9,
//   CONST_SRC_CODE_UI3D_UV_SETUP_0 = 0xAA,
//   CONST_SRC_CODE_UI3D_UV_SETUP_1 = 0xAB,
//   CONST_SRC_CODE_UI3D_UV_SETUP_2 = 0xAC,
//   CONST_SRC_CODE_UI3D_UV_SETUP_3 = 0xAD,
//   CONST_SRC_CODE_UI3D_UV_SETUP_4 = 0xAE,
//   CONST_SRC_CODE_UI3D_UV_SETUP_5 = 0xAF,
//   CONST_SRC_CODE_CHARACTER_DISSOLVE_COLOR = 0xB0,
//   CONST_SRC_CODE_CAMERA_LOOK = 0xB1,
//   CONST_SRC_CODE_CAMERA_UP = 0xB2,
//   CONST_SRC_CODE_CAMERA_SIDE = 0xB3,
//   CONST_SRC_CODE_GENERIC_PARAM0 = 0xB4,
//   CONST_SRC_CODE_GENERIC_PARAM1 = 0xB5,
//   CONST_SRC_CODE_GENERIC_PARAM2 = 0xB6,
//   CONST_SRC_CODE_GENERIC_PARAM3 = 0xB7,
//   CONST_SRC_CODE_GENERIC_PARAM4 = 0xB8,
//   CONST_SRC_CODE_GENERIC_PARAM5 = 0xB9,
//   CONST_SRC_CODE_GENERIC_PARAM6 = 0xBA,
//   CONST_SRC_CODE_GENERIC_PARAM7 = 0xBB,
//   CONST_SRC_CODE_EYEOFFSET = 0xBC,
//   CONST_SRC_CODE_CUSTOMWIND_CENTER = 0xBD,
//   CONST_SRC_CODE_CUSTOMWIND_SPRING = 0xBE,
//   CONST_SRC_CODE_SKY_COLOR_MULTIPLIER = 0xBF,
//   CONST_SRC_CODE_EXTRA_CAM_PARAM = 0xC0,
//   CONST_SRC_CODE_EMBLEM_LUT_SELECTOR = 0xC1,
//   CONST_SRC_CODE_NEVER_DIRTY_PS_END = 0xC2,
//   CONST_SRC_CODE_COUNT_FLOAT4 = 0xC2,
//   CONST_SRC_FIRST_CODE_MATRIX = 0xC2,
//   CONST_SRC_CODE_WORLD_MATRIX = 0xC2,
//   CONST_SRC_CODE_INVERSE_WORLD_MATRIX = 0xC3,
//   CONST_SRC_CODE_TRANSPOSE_WORLD_MATRIX = 0xC4,
//   CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_MATRIX = 0xC5,
//   CONST_SRC_CODE_VIEW_MATRIX = 0xC6,
//   CONST_SRC_CODE_INVERSE_VIEW_MATRIX = 0xC7,
//   CONST_SRC_CODE_TRANSPOSE_VIEW_MATRIX = 0xC8,
//   CONST_SRC_CODE_INVERSE_TRANSPOSE_VIEW_MATRIX = 0xC9,
//   CONST_SRC_CODE_PROJECTION_MATRIX = 0xCA,
//   CONST_SRC_CODE_INVERSE_PROJECTION_MATRIX = 0xCB,
//   CONST_SRC_CODE_TRANSPOSE_PROJECTION_MATRIX = 0xCC,
//   CONST_SRC_CODE_INVERSE_TRANSPOSE_PROJECTION_MATRIX = 0xCD,
//   CONST_SRC_CODE_WORLD_VIEW_MATRIX = 0xCE,
//   CONST_SRC_CODE_INVERSE_WORLD_VIEW_MATRIX = 0xCF,
//   CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_MATRIX = 0xD0,
//   CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX = 0xD1,
//   CONST_SRC_CODE_VIEW_PROJECTION_MATRIX = 0xD2,
//   CONST_SRC_CODE_INVERSE_VIEW_PROJECTION_MATRIX = 0xD3,
//   CONST_SRC_CODE_TRANSPOSE_VIEW_PROJECTION_MATRIX = 0xD4,
//   CONST_SRC_CODE_INVERSE_TRANSPOSE_VIEW_PROJECTION_MATRIX = 0xD5,
//   CONST_SRC_CODE_WORLD_VIEW_PROJECTION_MATRIX = 0xD6,
//   CONST_SRC_CODE_INVERSE_WORLD_VIEW_PROJECTION_MATRIX = 0xD7,
//   CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX = 0xD8,
//   CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX = 0xD9,
//   CONST_SRC_CODE_SHADOW_LOOKUP_MATRIX = 0xDA,
//   CONST_SRC_CODE_INVERSE_SHADOW_LOOKUP_MATRIX = 0xDB,
//   CONST_SRC_CODE_TRANSPOSE_SHADOW_LOOKUP_MATRIX = 0xDC,
//   CONST_SRC_CODE_INVERSE_TRANSPOSE_SHADOW_LOOKUP_MATRIX = 0xDD,
//   CONST_SRC_CODE_WORLD_OUTDOOR_LOOKUP_MATRIX = 0xDE,
//   CONST_SRC_CODE_INVERSE_WORLD_OUTDOOR_LOOKUP_MATRIX = 0xDF,
//   CONST_SRC_CODE_TRANSPOSE_WORLD_OUTDOOR_LOOKUP_MATRIX = 0xE0,
//   CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_OUTDOOR_LOOKUP_MATRIX = 0xE1,
//   CONST_SRC_TOTAL_COUNT = 0xE2,
//   CONST_SRC_NONE = 0xE3,
// };

// /* 352 */
// enum $01E7036930A8EFDA0126158D6C64F2AD : __int32
// {
//   GFX_SYM_FILTER_1 = 0x0,
//   GFX_SYM_FILTER_2 = 0x1,
//   GFX_SYM_FILTER_3 = 0x2,
//   GFX_SYM_FILTER_4 = 0x3,
//   GFX_SYM_FILTER_5 = 0x4,
//   GFX_SYM_FILTER_6 = 0x5,
//   GFX_SYM_FILTER_7 = 0x6,
//   GFX_SYM_FILTER_8 = 0x7,
//   GFX_SYM_FILTER_COUNT = 0x8,
// };

// /* 353 */
// enum $EC705DCD80BF0704915343A891D5C1A8 : __int32
// {
//   XSURFACE_FLAG_QUANTIZED = 0x1,
//   XSURFACE_FLAG_SKINNED = 0x2,
//   XSURFACE_FLAG_CONSTANT_COLOR = 0x4,
//   XSURFACE_FLAG_DEFORMED = 0x80,
//   XSURFACE_FLAG_STREAMED = 0x8000,
// };

// /* 354 */
// enum $FFF3ADCD47B1D49B31B51B9770ED0B95 : __int32
// {
//   STREAM_SRC_POSITION = 0x0,
//   STREAM_SRC_COLOR = 0x1,
//   STREAM_SRC_TEXCOORD_0 = 0x2,
//   STREAM_SRC_NORMAL = 0x3,
//   STREAM_SRC_TANGENT = 0x4,
//   STREAM_SRC_OPTIONAL_BEGIN = 0x5,
//   STREAM_SRC_PRE_OPTIONAL_BEGIN = 0x4,
//   STREAM_SRC_TEXCOORD_1 = 0x5,
//   STREAM_SRC_TEXCOORD_2 = 0x6,
//   STREAM_SRC_NORMAL_TRANSFORM_0 = 0x7,
//   STREAM_SRC_NORMAL_TRANSFORM_1 = 0x8,
//   STREAM_SRC_BLEND_WEIGHT = 0x9,
//   STREAM_SRC_COUNT = 0xA,
// };

// /* 355 */
// enum $8AF32F0C101F1907026B5E5E1FBB2B65 : __int32
// {
//   STREAM_DST_POSITION = 0x0,
//   STREAM_DST_NORMAL = 0x1,
//   STREAM_DST_COLOR_0 = 0x2,
//   STREAM_DST_COLOR_1 = 0x3,
//   STREAM_DST_DEPTH = 0x4,
//   STREAM_DST_TEXCOORD_0 = 0x5,
//   STREAM_DST_TEXCOORD_1 = 0x6,
//   STREAM_DST_TEXCOORD_2 = 0x7,
//   STREAM_DST_TEXCOORD_3 = 0x8,
//   STREAM_DST_TEXCOORD_4 = 0x9,
//   STREAM_DST_TEXCOORD_5 = 0xA,
//   STREAM_DST_TEXCOORD_6 = 0xB,
//   STREAM_DST_TEXCOORD_7 = 0xC,
//   STREAM_DST_TEXCOORD_8 = 0xD,
//   STREAM_DST_TEXCOORD_9 = 0xE,
//   STREAM_DST_TEXCOORD_10 = 0xF,
//   STREAM_DST_TEXCOORD_11 = 0x10,
//   STREAM_DST_TEXCOORD_12 = 0x11,
//   STREAM_DST_TEXCOORD_13 = 0x12,
//   STREAM_DST_BLENDWEIGHT = 0x13,
//   STREAM_DST_COUNT = 0x14,
// };

// /* 356 */
// enum _D3DLIGHTTYPE : __int32
// {
//   D3DLIGHT_POINT = 0x1,
//   D3DLIGHT_SPOT = 0x2,
//   D3DLIGHT_DIRECTIONAL = 0x3,
//   D3DLIGHT_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 357 */
// enum GfxViewStatsTarget : __int32
// {
//   GFX_VIEW_STATS_VISIBLE = 0x0,
//   GFX_VIEW_STATS_SHADOW = 0x1,
//   GFX_VIEW_STATS_COUNT = 0x2,
// };

// /* 358 */
// enum _D3DSWAPEFFECT : __int32
// {
//   D3DSWAPEFFECT_DISCARD = 0x1,
//   D3DSWAPEFFECT_FLIP = 0x2,
//   D3DSWAPEFFECT_COPY = 0x3,
//   D3DSWAPEFFECT_OVERLAY = 0x4,
//   D3DSWAPEFFECT_FLIPEX = 0x5,
//   D3DSWAPEFFECT_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 359 */
// enum GfxStencilOp : __int32
// {
//   GFXS_STENCILOP_KEEP = 0x0,
//   GFXS_STENCILOP_ZERO = 0x1,
//   GFXS_STENCILOP_REPLACE = 0x2,
//   GFXS_STENCILOP_INCRSAT = 0x3,
//   GFXS_STENCILOP_DECRSAT = 0x4,
//   GFXS_STENCILOP_INVERT = 0x5,
//   GFXS_STENCILOP_INCR = 0x6,
//   GFXS_STENCILOP_DECR = 0x7,
//   GFXS_STENCILOP_COUNT = 0x8,
// };

// /* 360 */
// enum _D3DBACKBUFFER_TYPE : __int32
// {
//   D3DBACKBUFFER_TYPE_MONO = 0x0,
//   D3DBACKBUFFER_TYPE_LEFT = 0x1,
//   D3DBACKBUFFER_TYPE_RIGHT = 0x2,
//   D3DBACKBUFFER_TYPE_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 361 */
// enum _D3DCULL : __int32
// {
//   D3DCULL_NONE = 0x1,
//   D3DCULL_CW = 0x2,
//   D3DCULL_CCW = 0x3,
//   D3DCULL_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 362 */
// enum GfxPrimStatsTarget : __int32
// {
//   GFX_PRIM_STATS_WORLD = 0x0,
//   GFX_PRIM_STATS_SMODELCACHED = 0x1,
//   GFX_PRIM_STATS_SMODELRIGID = 0x2,
//   GFX_PRIM_STATS_XMODELRIGID = 0x3,
//   GFX_PRIM_STATS_XMODELSKINNED = 0x4,
//   GFX_PRIM_STATS_BMODEL = 0x5,
//   GFX_PRIM_STATS_FX = 0x6,
//   GFX_PRIM_STATS_HUD = 0x7,
//   GFX_PRIM_STATS_DEBUG = 0x8,
//   GFX_PRIM_STATS_CODE = 0x9,
//   GFX_PRIM_STATS_COUNT = 0xA,
// };

// /* 363 */
// enum StreamStatElements : __int32
// {
//   STREAMSTATITEM_RESIDENT_BEGIN = 0x0,
//   STREAMSTATITEM_RESIDENT_ZERO = 0x0,
//   STREAMSTATITEM_RESIDENT_LOW = 0x1,
//   STREAMSTATITEM_RESIDENT_MEDIUM = 0x2,
//   STREAMSTATITEM_RESIDENT_HIGH = 0x3,
//   STREAMSTATITEM_RESIDENT_FALLING_FROM_USE = 0x4,
//   STREAMSTATITEM_RESIDENT_IN_USE = 0x5,
//   STREAMSTATITEM_RESIDENT_END = 0x6,
//   STREAMSTATITEM_LOADED_CHANGE = 0x6,
//   STREAMSTATITEM_DISCARDED_CHANGE = 0x7,
//   STREAMSTATITEM_RELOADED_CHANGE = 0x8,
//   STREAMSTATITEM_FAILED_INACTIVE_CHANGE = 0x9,
//   STREAMSTATITEM_FAILED_ACTIVE_CHANGE = 0xA,
//   STREAMSTATITEM_LOADED_TOTAL = 0xB,
//   STREAMSTATITEM_RELOADED_TOTAL = 0xC,
//   STREAMSTATITEM_DISCARDED_TOTAL = 0xD,
//   STREAMSTATITEM_VISIBLE_HIMIP_SURFS = 0xE,
//   STREAMSTATITEM_VISIBLE_LOADED_HIMIP_SURFS = 0xF,
//   STREAMSTATITEM_VISIBLE_UNLOADED_HIMIP_SURFS = 0x10,
//   STREAMSTATITEM_VISIBLE_HIMIP_IMGS = 0x11,
//   STREAMSTATITEM_VISIBLE_LOADED_HIMIP_IMGS = 0x12,
//   STREAMSTATITEM_VISIBLE_UNLOADED_HIMIP_IMGS = 0x13,
//   STREAMSTATITEM_COUNT = 0x14,
// };

// /* 364 */
// enum _D3DSTATEBLOCKTYPE : __int32
// {
//   D3DSBT_ALL = 0x1,
//   D3DSBT_PIXELSTATE = 0x2,
//   D3DSBT_VERTEXSTATE = 0x3,
//   D3DSBT_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 365 */
// enum _D3DDEGREETYPE : __int32
// {
//   D3DDEGREE_LINEAR = 0x1,
//   D3DDEGREE_QUADRATIC = 0x2,
//   D3DDEGREE_CUBIC = 0x3,
//   D3DDEGREE_QUINTIC = 0x5,
//   D3DDEGREE_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 366 */
// enum _D3DBASISTYPE : __int32
// {
//   D3DBASIS_BEZIER = 0x0,
//   D3DBASIS_BSPLINE = 0x1,
//   D3DBASIS_CATMULL_ROM = 0x2,
//   D3DBASIS_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 367 */
// enum _D3DDECLMETHOD : __int32
// {
//   D3DDECLMETHOD_DEFAULT = 0x0,
//   D3DDECLMETHOD_PARTIALU = 0x1,
//   D3DDECLMETHOD_PARTIALV = 0x2,
//   D3DDECLMETHOD_CROSSUV = 0x3,
//   D3DDECLMETHOD_UV = 0x4,
//   D3DDECLMETHOD_LOOKUP = 0x5,
//   D3DDECLMETHOD_LOOKUPPRESAMPLED = 0x6,
// };

// /* 368 */
// enum _D3DQUERYTYPE : __int32
// {
//   D3DQUERYTYPE_VCACHE = 0x4,
//   D3DQUERYTYPE_RESOURCEMANAGER = 0x5,
//   D3DQUERYTYPE_VERTEXSTATS = 0x6,
//   D3DQUERYTYPE_EVENT = 0x8,
//   D3DQUERYTYPE_OCCLUSION = 0x9,
//   D3DQUERYTYPE_TIMESTAMP = 0xA,
//   D3DQUERYTYPE_TIMESTAMPDISJOINT = 0xB,
//   D3DQUERYTYPE_TIMESTAMPFREQ = 0xC,
//   D3DQUERYTYPE_PIPELINETIMINGS = 0xD,
//   D3DQUERYTYPE_INTERFACETIMINGS = 0xE,
//   D3DQUERYTYPE_VERTEXTIMINGS = 0xF,
//   D3DQUERYTYPE_PIXELTIMINGS = 0x10,
//   D3DQUERYTYPE_BANDWIDTHTIMINGS = 0x11,
//   D3DQUERYTYPE_CACHEUTILIZATION = 0x12,
//   D3DQUERYTYPE_MEMORYPRESSURE = 0x13,
// };

// /* 369 */
// enum _D3DTEXTURESTAGESTATETYPE : __int32
// {
//   D3DTSS_COLOROP = 0x1,
//   D3DTSS_COLORARG1 = 0x2,
//   D3DTSS_COLORARG2 = 0x3,
//   D3DTSS_ALPHAOP = 0x4,
//   D3DTSS_ALPHAARG1 = 0x5,
//   D3DTSS_ALPHAARG2 = 0x6,
//   D3DTSS_BUMPENVMAT00 = 0x7,
//   D3DTSS_BUMPENVMAT01 = 0x8,
//   D3DTSS_BUMPENVMAT10 = 0x9,
//   D3DTSS_BUMPENVMAT11 = 0xA,
//   D3DTSS_TEXCOORDINDEX = 0xB,
//   D3DTSS_BUMPENVLSCALE = 0x16,
//   D3DTSS_BUMPENVLOFFSET = 0x17,
//   D3DTSS_TEXTURETRANSFORMFLAGS = 0x18,
//   D3DTSS_COLORARG0 = 0x1A,
//   D3DTSS_ALPHAARG0 = 0x1B,
//   D3DTSS_RESULTARG = 0x1C,
//   D3DTSS_CONSTANT = 0x20,
//   D3DTSS_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 370 */
// enum _D3DDEVTYPE : __int32
// {
//   D3DDEVTYPE_HAL = 0x1,
//   D3DDEVTYPE_REF = 0x2,
//   D3DDEVTYPE_SW = 0x3,
//   D3DDEVTYPE_NULLREF = 0x4,
//   D3DDEVTYPE_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 371 */
// enum _D3DTRANSFORMSTATETYPE : __int32
// {
//   D3DTS_VIEW = 0x2,
//   D3DTS_PROJECTION = 0x3,
//   D3DTS_TEXTURE0 = 0x10,
//   D3DTS_TEXTURE1 = 0x11,
//   D3DTS_TEXTURE2 = 0x12,
//   D3DTS_TEXTURE3 = 0x13,
//   D3DTS_TEXTURE4 = 0x14,
//   D3DTS_TEXTURE5 = 0x15,
//   D3DTS_TEXTURE6 = 0x16,
//   D3DTS_TEXTURE7 = 0x17,
//   D3DTS_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 372 */
// enum _D3DCUBEMAP_FACES : __int32
// {
//   D3DCUBEMAP_FACE_POSITIVE_X = 0x0,
//   D3DCUBEMAP_FACE_NEGATIVE_X = 0x1,
//   D3DCUBEMAP_FACE_POSITIVE_Y = 0x2,
//   D3DCUBEMAP_FACE_NEGATIVE_Y = 0x3,
//   D3DCUBEMAP_FACE_POSITIVE_Z = 0x4,
//   D3DCUBEMAP_FACE_NEGATIVE_Z = 0x5,
//   D3DCUBEMAP_FACE_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 373 */
// enum MaterialStateSet : __int32
// {
//   MTL_STATE_SET_ALPHA_TEST = 0x0,
//   MTL_STATE_SET_BLEND_FUNC_RGB = 0x1,
//   MTL_STATE_SET_BLEND_FUNC_ALPHA = 0x2,
//   MTL_STATE_SET_CULL_FACE = 0x3,
//   MTL_STATE_SET_DEPTH_TEST = 0x4,
//   MTL_STATE_SET_DEPTH_WRITE = 0x5,
//   MTL_STATE_SET_COLOR_WRITE = 0x6,
//   MTL_STATE_SET_POLYGON_OFFSET = 0x7,
//   MTL_STATE_SET_STENCIL = 0x8,
//   MTL_STATE_SET_WIREFRAME = 0x9,
//   MTL_STATE_SET_COUNT = 0xA,
// };

// /* 374 */
// enum DrawCommandGroup : __int32
// {
//   DRAWCMD_SUNSHADOW = 0x0,
//   DRAWCMD_LIGHTMAP = 0x1,
//   DRAWCMD_DECAL = 0x2,
//   DRAWCMD_COUNT = 0x3,
// };

// /* 375 */
// enum GfxViewMode : __int32
// {
//   VIEW_MODE_NONE = 0x0,
//   VIEW_MODE_3D = 0x1,
//   VIEW_MODE_2D = 0x2,
//   VIEW_MODE_IDENTITY = 0x3,
// };

// /* 376 */
// enum GfxViewportBehavior : __int32
// {
//   GFX_USE_VIEWPORT_FOR_VIEW = 0x0,
//   GFX_USE_VIEWPORT_FULL = 0x1,
// };

// /* 377 */
// enum GfxStencilFunc : __int32
// {
//   GFXS_STENCILFUNC_NEVER = 0x0,
//   GFXS_STENCILFUNC_LESS = 0x1,
//   GFXS_STENCILFUNC_EQUAL = 0x2,
//   GFXS_STENCILFUNC_LESSEQUAL = 0x3,
//   GFXS_STENCILFUNC_GREATER = 0x4,
//   GFXS_STENCILFUNC_NOTEQUAL = 0x5,
//   GFXS_STENCILFUNC_GREATEREQUAL = 0x6,
//   GFXS_STENCILFUNC_ALWAYS = 0x7,
//   GFXS_STENCILFUNC_COUNT = 0x8,
// };

// /* 378 */
// enum _D3DDECLUSAGE : __int32
// {
//   D3DDECLUSAGE_POSITION = 0x0,
//   D3DDECLUSAGE_BLENDWEIGHT = 0x1,
//   D3DDECLUSAGE_BLENDINDICES = 0x2,
//   D3DDECLUSAGE_NORMAL = 0x3,
//   D3DDECLUSAGE_PSIZE = 0x4,
//   D3DDECLUSAGE_TEXCOORD = 0x5,
//   D3DDECLUSAGE_TANGENT = 0x6,
//   D3DDECLUSAGE_BINORMAL = 0x7,
//   D3DDECLUSAGE_TESSFACTOR = 0x8,
//   D3DDECLUSAGE_POSITIONT = 0x9,
//   D3DDECLUSAGE_COLOR = 0xA,
//   D3DDECLUSAGE_FOG = 0xB,
//   D3DDECLUSAGE_DEPTH = 0xC,
//   D3DDECLUSAGE_SAMPLE = 0xD,
// };

// /* 379 */
// enum vpx_codec_cx_pkt_kind : __int32
// {
//   VPX_CODEC_CX_FRAME_PKT = 0x0,
//   VPX_CODEC_STATS_PKT = 0x1,
//   VPX_CODEC_PSNR_PKT = 0x2,
//   VPX_CODEC_CUSTOM_PKT = 0x100,
// };

// /* 380 */
// enum vpx_enc_pass : __int32
// {
//   VPX_RC_ONE_PASS = 0x0,
//   VPX_RC_FIRST_PASS = 0x1,
//   VPX_RC_LAST_PASS = 0x2,
// };

// /* 381 */
// enum vpx_img_fmt : __int32
// {
//   VPX_IMG_FMT_NONE = 0x0,
//   VPX_IMG_FMT_RGB24 = 0x1,
//   VPX_IMG_FMT_RGB32 = 0x2,
//   VPX_IMG_FMT_RGB565 = 0x3,
//   VPX_IMG_FMT_RGB555 = 0x4,
//   VPX_IMG_FMT_UYVY = 0x5,
//   VPX_IMG_FMT_YUY2 = 0x6,
//   VPX_IMG_FMT_YVYU = 0x7,
//   VPX_IMG_FMT_BGR24 = 0x8,
//   VPX_IMG_FMT_RGB32_LE = 0x9,
//   VPX_IMG_FMT_ARGB = 0xA,
//   VPX_IMG_FMT_ARGB_LE = 0xB,
//   VPX_IMG_FMT_RGB565_LE = 0xC,
//   VPX_IMG_FMT_RGB555_LE = 0xD,
//   VPX_IMG_FMT_YV12 = 0x301,
//   VPX_IMG_FMT_I420 = 0x102,
//   VPX_IMG_FMT_VPXYV12 = 0x303,
//   VPX_IMG_FMT_VPXI420 = 0x104,
// };

// /* 382 */
// enum vpx_ref_frame_type : __int32
// {
//   VP8_LAST_FRAME = 0x1,
//   VP8_GOLD_FRAME = 0x2,
//   VP8_ALTR_FRAME = 0x4,
// };

// /* 383 */
// enum vpx_codec_err_t : __int32
// {
//   VPX_CODEC_OK = 0x0,
//   VPX_CODEC_ERROR = 0x1,
//   VPX_CODEC_MEM_ERROR = 0x2,
//   VPX_CODEC_ABI_MISMATCH = 0x3,
//   VPX_CODEC_INCAPABLE = 0x4,
//   VPX_CODEC_UNSUP_BITSTREAM = 0x5,
//   VPX_CODEC_UNSUP_FEATURE = 0x6,
//   VPX_CODEC_CORRUPT_FRAME = 0x7,
//   VPX_CODEC_INVALID_PARAM = 0x8,
//   VPX_CODEC_LIST_END = 0x9,
// };

// /* 384 */
// enum vp8e_token_partitions : __int32
// {
//   VP8_ONE_TOKENPARTITION = 0x0,
//   VP8_TWO_TOKENPARTITION = 0x1,
//   VP8_FOUR_TOKENPARTITION = 0x2,
//   VP8_EIGHT_TOKENPARTITION = 0x3,
// };

// /* 385 */
// enum vpx_scaling_mode_1d : __int32
// {
//   VP8E_NORMAL = 0x0,
//   VP8E_FOURFIVE = 0x1,
//   VP8E_THREEFIVE = 0x2,
//   VP8E_ONETWO = 0x3,
// };

// /* 386 */
// enum vpx_rc_mode : __int32
// {
//   VPX_VBR = 0x0,
//   VPX_CBR = 0x1,
// };

// /* 387 */
// enum vpx_kf_mode : __int32
// {
//   VPX_KF_FIXED = 0x0,
//   VPX_KF_AUTO = 0x1,
//   VPX_KF_DISABLED = 0x0,
// };

// /* 388 */
// enum $C7007264CFAB8D50CA98B821F6858488 : __int32
// {
//   ZOOKEEPER_PORT = 0x1B58,
// };

// /* 389 */
// enum IPPROTO : __int32
// {
//   IPPROTO_HOPOPTS = 0x0,
//   IPPROTO_ICMP = 0x1,
//   IPPROTO_IGMP = 0x2,
//   IPPROTO_GGP = 0x3,
//   IPPROTO_IPV4 = 0x4,
//   IPPROTO_TCP = 0x6,
//   IPPROTO_PUP = 0xC,
//   IPPROTO_UDP = 0x11,
//   IPPROTO_IDP = 0x16,
//   IPPROTO_IPV6 = 0x29,
//   IPPROTO_ROUTING = 0x2B,
//   IPPROTO_FRAGMENT = 0x2C,
//   IPPROTO_ESP = 0x32,
//   IPPROTO_AH = 0x33,
//   IPPROTO_ICMPV6 = 0x3A,
//   IPPROTO_NONE = 0x3B,
//   IPPROTO_DSTOPTS = 0x3C,
//   IPPROTO_ND = 0x4D,
//   IPPROTO_ICLFXBM = 0x4E,
//   IPPROTO_RAW = 0xFF,
//   IPPROTO_MAX = 0x100,
//   IPPROTO_RESERVED_RAW = 0x101,
//   IPPROTO_RESERVED_IPSEC = 0x102,
//   IPPROTO_RESERVED_IPSECOFFLOAD = 0x103,
//   IPPROTO_RESERVED_MAX = 0x104,
// };

// /* 390 */
// enum $ADE2C48FB91C8613C6E03A6DC3F37861 : __int32
// {
//   MONKEY_OOK_TIMEOUT_MS = 0x3E8,
// };

// /* 391 */
// enum DynEntityDrawType : __int32
// {
//   DYNENT_DRAW_MODEL = 0x0,
//   DYNENT_DRAW_BRUSH = 0x1,
//   DYNENT_DRAW_COUNT = 0x2,
// };

// /* 392 */
// enum surfaceType_t : __int32
// {
//   SF_TRIANGLES = 0x0,
//   SF_TRIANGLES_PRETESS = 0x1,
//   SF_BEGIN_STATICMODEL = 0x2,
//   SF_STATICMODEL_RIGID = 0x2,
//   SF_STATICMODEL_PRETESS = 0x3,
//   SF_STATICMODEL_CACHED = 0x4,
//   SF_STATICMODEL_SKINNED = 0x5,
//   SF_END_STATICMODEL = 0x6,
//   SF_BMODEL = 0x6,
//   SF_BEGIN_XMODEL = 0x7,
//   SF_XMODEL_RIGID = 0x7,
//   SF_XMODEL_RIGID_SKINNED = 0x8,
//   SF_XMODEL_SKINNED = 0x9,
//   SF_XMODEL_WATER = 0xA,
//   SF_END_XMODEL = 0xB,
//   SF_BEGIN_FX = 0xB,
//   SF_CODE_MESH = 0xB,
//   SF_MARK_MESH = 0xC,
//   SF_PARTICLE_CLOUD = 0xD,
//   SF_ROPE_MESH = 0xE,
//   SF_GLASS_MESH = 0xF,
//   SF_END_FX = 0x10,
//   SF_NUM_SURFACE_TYPES = 0x10,
//   SF_FORCE_32_BITS = 0xFFFFFFFF,
// };

// /* 393 */
// enum $A1218AF7D1C12B1D50BD9B9B70D78FD4 : __int32
// {
//   SCENE_VIEW_CAMERA = 0x0,
//   SCENE_VIEW_SUNSHADOW_0 = 0x1,
//   SCENE_VIEW_SUNSHADOW_1 = 0x2,
//   SCENE_VIEW_COUNT = 0x3,
//   SCENE_VIEW_SPOTSHADOW_0 = 0x3,
//   SCENE_VIEW_SPOTSHADOW_1 = 0x4,
//   SCENE_VIEW_SPOTSHADOW_2 = 0x5,
//   SCENE_VIEW_SPOTSHADOW_3 = 0x6,
//   SCENE_VIEW_COUNT_ENTVIS = 0x7,
// };

// /* 394 */
// enum $2DE106F947F3758108E2812F8595AD24 : __int32
// {
//   GJK_BASE = 0x0,
//   GJK_AABB = 0x1,
//   GJK_BRUSH = 0x2,
//   GJK_PARTITION = 0x3,
//   GJK_DOUBLE_SPHERE = 0x4,
//   GJK_CYLINDER = 0x5,
//   GJK_OBB = 0x6,
//   GJK_POLYGON_CYLINDER = 0x7,
// };

// /* 395 */
// enum PhysWorld : __int32
// {
//   PHYS_WORLD_DYNENT = 0x0,
//   PHYS_WORLD_FX = 0x1,
//   PHYS_WORLD_RAGDOLL = 0x2,
//   PHYS_WORLD_COUNT = 0x3,
// };

// /* 396 */
// enum GlassShard::RemoveReason : __int32
// {
//   REMOVE_HIT_BOTTOM = 0x0,
//   REMOVE_OUT_OF_SHARDS = 0x1,
//   REMOVE_OUT_OF_VERTEX_MEMORY = 0x2,
//   REMOVE_OUT_OF_SHARD_MEMORY = 0x3,
//   REMOVE_OUT_OF_PHYSICS = 0x4,
//   REMOVE_ROLLBACK_TIME = 0x5,
//   NUM_REMOVE_REASONS = 0x6,
//   REMOVE_DONT_TRACK = 0x7,
// };

// /* 397 */
// enum GlassShard::SplitFailReason : __int32
// {
//   SPLIT_FAIL_START_POS = 0x0,
//   SPLIT_FAIL_START_DIR = 0x1,
//   SPLIT_FAIL_INIT = 0x2,
//   SPLIT_FAIL_VERTS = 0x3,
//   SPLIT_FAIL_AREA = 0x4,
//   SPLIT_FAIL_MEMORY = 0x5,
//   SPLIT_FAIL_ANGLE = 0x6,
//   SPLIT_FAIL_NARROW = 0x7,
//   NUM_SPLIT_FAIL_REASONS = 0x8,
// };

// /* 398 */
// enum std::wstring::<unnamed_tag> : __int32
// {
//   _BUF_SIZE = 0x8,
// };

// /* 399 */
// typedef std::wstring::<unnamed_tag> std::string::<unnamed_tag>;

// /* 400 */
// enum broad_phase_group::<unnamed_tag> : __int32
// {
//   FLAG_DO_INITIAL_TUNNEL_TEST = 0x200,
//   BPG_FIRST_UNUSED_FLAG = 0x400,
// };

// /* 401 */
// enum broad_phase_info::<unnamed_tag> : __int32
// {
//   FLAG_CALC_CG_TO_WORLD_XFORM = 0x200,
//   BPI_FIRST_UNUSED_FLAG = 0x400,
// };

// /* 402 */
// enum gjk_base_t::<unnamed_tag> : __int32
// {
//   FLAG_TEMP_ALLOCATION = 0x1,
//   FLAG_AABB_LOC_VALID = 0x2,
//   FLAG_GEOM_ID_VALID = 0x4,
//   FLAG_XFORM_VALID = 0x8,
//   FLAG_CONTENTS_VALID = 0x10,
// };

// /* 403 */
// enum Allocator::Memory::<unnamed_tag> : __int32
// {
//   OVERHEAD = 0x10,
//   MIN_SIZE = 0x20,
// };

// /* 404 */
// enum GlassState::State : __int32
// {
//   PRISTINE = 0x0,
//   CRACKED = 0x1,
//   SHATTERED = 0x2,
//   INVALID = 0x3,
// };

// /* 405 */
// enum phys_free_list<broad_phase_collision_pair>::<unnamed_tag> : __int32
// {
//   PTR_LIST_SIZE = 0x100,
// };

// /* 406 */
// typedef phys_free_list<broad_phase_collision_pair>::<unnamed_tag> phys_free_list<broad_phase_info>::<unnamed_tag>;

// /* 407 */
// enum phys_gjk_cache_info::phys_gjk_cache_info_e : __int32
// {
//   FLAG_WAS_TOUCHED = 0x1,
//   FLAG_IS_SWAPPED = 0x2,
//   FLAG_IS_SUPPORT_DIR_VALID = 0x4,
//   FLAG_IS_SIMPLEX_VALID = 0x8,
// };

// /* 408 */
// enum phys_contact_manifold_process::<unnamed_tag> : __int32
// {
//   ALLOCATOR_MEMORY_SIZE = 0x4000,
// };

// /* 409 */
// enum gjk_polygon_cylinder_t::poly_verts::<unnamed_tag> : __int32
// {
//   NUM_QUAD_VERTS = 0x4,
// };

// /* 410 */
// typedef phys_free_list<broad_phase_collision_pair>::<unnamed_tag> phys_free_list<broad_phase_group>::<unnamed_tag>;

// /* 411 */
// enum phys_gjk_info::gjk_retval_e : __int32
// {
//   GJK_SEPARATED = 0x0,
//   GJK_VALID = 0x1,
//   GJK_PENETRATING = 0x2,
//   GJK_INVALID = 0x3,
// };

// /* 412 */
// enum phys_gjk_info::gjk_flags_e : __int32
// {
//   FLAG_EXIT_ON_SEP_THRESH = 0x1,
//   INTERSECTION_TEST_ONLY = 0x2,
//   FLAG_TEST_CONVERGENCE = 0x4,
//   CONTINUOUS_COLLISION = 0x8,
//   FLAG_TEST_UD_LT_SP = 0x10,
//   FLAG_IS_SEPARATED = 0x20,
// };

// /* 413 */
// enum broad_phase_base::<unnamed_tag> : __int32
// {
//   FLAG_IS_BPI = 0x1,
//   FLAG_IS_BPG = 0x2,
//   FLAG_IS_BPI_ENV = 0x4,
//   FLAG_IS_IN_CLUSTER = 0x10,
//   FLAG_ON_ENV_LIST = 0x20,
//   FLAG_ON_BPG_LIST = 0x40,
//   FLAG_IS_AUTO_ACTIVATE = 0x80,
//   BPB_FIRST_UNUSED_FLAG = 0x200,
// };

// /* 414 */
// enum GlassRenderer::Action::<unnamed_type_type> : __int32
// {
//   SHATTER = 0x0,
//   TRACE_POINT = 0x1,
//   EXPLOSION = 0x2,
//   MELEE = 0x3,
//   MAX_ACTIONS = 0x64,
// };

// /* 415 */
// typedef NitrousVehicle::NitrousVehicleModelFlags rb_vehicle_model::rb_vehicle_model_flags_e;

// /* 416 */
// enum GlassesServer::<unnamed_tag> : __int32
// {
//   MAX_GLASSES = 0x3E8,
// };

// /* 417 */
// enum $6B5913277FB02B4635833F62604EE97D : __int32
// {
//   PHYS_OBJ_ID_NULL = 0x0,
//   PHYS_OBJ_ID_DEAD = 0xFFFFFFFF,
// };

 /* 418 */
enum VehicleTurretState : __int32
{
  VEH_TURRET_STOPPED = 0x0,
  VEH_TURRET_STOPPING = 0x1,
  VEH_TURRET_MOVING = 0x2,
};

/* 419 */
enum VehicleMoveState : __int32
{
  VEH_MOVESTATE_STOP = 0x0,
  VEH_MOVESTATE_MOVE = 0x1,
  VEH_MOVESTATE_HOVER = 0x2,
  VEH_MOVESTATE_PLANE_ONCURVE = 0x3,
  VEH_MOVESTATE_PLANE_FREE = 0x4,
};

// /* 420 */
// enum GfxRenderCommand : __int32
// {
//   RC_END_OF_LIST = 0x0,
//   RC_SET_CUSTOM_CONSTANT = 0x1,
//   RC_SET_MATERIAL_COLOR = 0x2,
//   RC_SAVE_SCREEN = 0x3,
//   RC_SAVE_SCREEN_SECTION = 0x4,
//   RC_CLEAR_SCREEN = 0x5,
//   RC_SET_VIEWPORT = 0x6,
//   RC_SET_SCISSOR = 0x7,
//   RC_RESOLVE_COMPOSITE = 0x8,
//   RC_PC_COPY_IMAGE_GEN_MIP = 0x9,
//   RC_FIRST_NONCRITICAL = 0xA,
//   RC_STRETCH_PIC = 0xA,
//   RC_STRETCH_PIC_FLIP_ST = 0xB,
//   RC_STRETCH_PIC_ROTATE_XY = 0xC,
//   RC_STRETCH_PIC_ROTATE_ST = 0xD,
//   RC_STRETCH_RAW = 0xE,
//   RC_DRAW_QUAD_PIC = 0xF,
//   RC_DRAW_FULL_SCREEN_COLORED_QUAD = 0x10,
//   RC_DRAW_TEXT_2D = 0x11,
//   RC_DRAW_TEXT_3D = 0x12,
//   RC_BLEND_SAVED_SCREEN_BLURRED = 0x13,
//   RC_BLEND_SAVED_SCREEN_FLASHED = 0x14,
//   RC_DRAW_POINTS = 0x15,
//   RC_DRAW_LINES = 0x16,
//   RC_DRAW_TRIANGLES = 0x17,
//   RC_DRAW_QUADLIST_2D = 0x18,
//   RC_DRAW_EMBLEM_LAYER = 0x19,
//   RC_STRETCH_COMPOSITE = 0x1A,
//   RC_PROJECTION_SET = 0x1B,
//   RC_DRAW_FRAMED = 0x1C,
//   RC_COUNT = 0x1D,
// };

// /* 421 */
// enum GfxTechCharredType : __int32
// {
//   GFX_TECHNIQUE_NOT_CHARRED = 0x0,
//   GFX_TECHNIQUE_CHARRED = 0x1,
//   GFX_TECHNIQUE_CHARRED_TYPES = 0x2,
// };

// /* 422 */
// enum $FA8CAEF21A4B336C234573FF5E09E0DB : __int32
// {
//   DRAWLIST_LIT = 0x0,
//   DRAWLIST_LIT_POST_RESOLVE = 0x1,
//   DRAWLIST_LIT_PUNCHTHROUGH = 0x2,
//   DRAWLIST_LIT_COUNT = 0x3,
//   DRAWLIST_DECAL = 0x3,
//   DRAWLIST_EMISSIVE = 0x4,
//   DRAWLIST_REFLECTED = 0x5,
//   DRAWLIST_CLOAKED = 0x6,
//   DRAWLIST_EMISSIVE_VIEWMODEL = 0x7,
//   DRAWLIST_SUN_SHADOW_MAP0 = 0x8,
//   DRAWLIST_SUN_SHADOW_MAP1 = 0x9,
//   DRAWLIST_SPOT_SHADOW_MAP0 = 0xA,
//   DRAWLIST_SPOT_SHADOW_MAP1 = 0xB,
//   DRAWLIST_SPOT_SHADOW_MAP2 = 0xC,
//   DRAWLIST_SPOT_SHADOW_MAP3 = 0xD,
//   DRAWLIST_COUNT = 0xE,
// };

// /* 423 */
// enum XModelLodRampType : __int32
// {
//   XMODEL_LOD_RAMP_RIGID = 0x0,
//   XMODEL_LOD_RAMP_SKINNED = 0x1,
//   XMODEL_LOD_RAMP_COUNT = 0x2,
// };

// /* 424 */
// enum GfxFadeType : __int32
// {
//   GFX_TECHNIQUE_NO_FADE = 0x0,
//   GFX_TECHNIQUE_FADE = 0x1,
//   GFX_TECHNIQUE_FADE_TYPES = 0x2,
// };

// /* 425 */
// enum GrassPersistForce::ForceType : __int32
// {
//   GRENADE_EXPLOSION = 0x0,
//   NEAR_MUZZLE_SHAKE = 0x1,
// };

// /* 426 */
// enum GrassPersistForce::ShakeForceState : __int32
// {
//   GAINING = 0x0,
//   MAINTAINING = 0x1,
//   DECAYING = 0x2,
// };

// /* 427 */
// enum ShadowType : __int32
// {
//   SHADOW_NONE = 0x0,
//   SHADOW_MAP = 0x1,
// };

// /* 428 */
// enum PerFrameFoliageInfo::<unnamed_tag> : __int32
// {
//   MAX_INSTANT_GRASS_FORCES = 0x10,
//   MAX_PERSISTANT_GRASS_FORCES = 0x8,
//   MAX_WIND_GRASS_FORCES = 0x10,
// };

// /* 429 */
// enum $4DF4D94423C9A5CC82BFA70AB1D44424 : __int32
// {
//   FX_ATLAS_START_FIXED = 0x0,
//   FX_ATLAS_START_RANDOM = 0x1,
//   FX_ATLAS_START_INDEXED = 0x2,
//   FX_ATLAS_START_FIXED_RANGE = 0x3,
//   FX_ATLAS_START_MASK = 0x3,
//   FX_ATLAS_PLAY_OVER_LIFE = 0x4,
//   FX_ATLAS_LOOP_ONLY_N_TIMES = 0x8,
// };

// /* 430 */
// enum DynEntityCollType : __int32
// {
//   DYNENT_COLL_CLIENT_FIRST = 0x0,
//   DYNENT_COLL_CLIENT_MODEL = 0x0,
//   DYNENT_COLL_CLIENT_BRUSH = 0x1,
//   DYNENT_COLL_SERVER_FIRST = 0x2,
//   DYNENT_COLL_SERVER_MODEL = 0x2,
//   DYNENT_COLL_SERVER_BRUSH = 0x3,
//   DYNENT_COLL_COUNT = 0x4,
// };

 /* 431 */
enum rope_constraint_e : __int32
{
  ROPE_PAIR_CONSTRAINT = 0x0,
  ROPE_WORLD_CONSTRAINT = 0x1,
  ROPE_DENTITY_CONSTRAINT = 0x2,
  ROPE_CENTITY_CONSTRAINT = 0x3,
};

// /* 432 */
// enum $87E5AE5B7F4B76C5118673BF899C605F : __int32
// {
//   FX_MARK_VISUALS_CLASS_MODEL_INDEX = 0x0,
//   FX_MARK_VISUALS_CLASS_WORLD_INDEX = 0x1,
//   FX_MARK_VISUALS_CLASS_COUNT = 0x2,
// };

// /* 433 */
// enum $78672C3F748DF0A4375975F40B4A0EAC : __int32
// {
//   FX_ELEM_SPAWN_RELATIVE_TO_EFFECT = 0x2,
//   FX_ELEM_SPAWN_FRUSTUM_CULL = 0x4,
//   FX_ELEM_RUNNER_USES_RAND_ROT = 0x8,
//   FX_ELEM_SPAWN_OFFSET_NONE = 0x0,
//   FX_ELEM_SPAWN_OFFSET_SPHERE = 0x10,
//   FX_ELEM_SPAWN_OFFSET_CYLINDER = 0x20,
//   FX_ELEM_SPAWN_OFFSET_MASK = 0x30,
//   FX_ELEM_RUN_RELATIVE_TO_WORLD = 0x0,
//   FX_ELEM_RUN_RELATIVE_TO_SPAWN = 0x40,
//   FX_ELEM_RUN_RELATIVE_TO_EFFECT = 0x80,
//   FX_ELEM_RUN_RELATIVE_TO_OFFSET = 0xC0,
//   FX_ELEM_RUN_MASK = 0xC0,
//   FX_ELEM_USE_COLLISION = 0x100,
//   FX_ELEM_DIE_ON_TOUCH = 0x200,
//   FX_ELEM_DRAW_PAST_FOG = 0x400,
//   FX_ELEM_DRAW_WITH_VIEWMODEL = 0x800,
//   FX_ELEM_BLOCK_SIGHT = 0x1000,
//   FX_ELEM_USE_ITEM_CLIP = 0x2000,
//   FX_ELEM_ORIENT_TYPE0 = 0x0,
//   FX_ELEM_ORIENT_TYPE1 = 0x4000,
//   FX_ELEM_ORIENT_TYPE2 = 0x8000,
//   FX_ELEM_ORIENT_TYPE3 = 0xC000,
//   FX_ELEM_ORIENT_TYPE4 = 0x10000,
//   FX_ELEM_ORIENT_TYPE5 = 0x14000,
//   FX_ELEM_ORIENT_MASK = 0x1C000,
//   FX_ELEM_USE_WORLD_UP = 0x80000,
//   FX_ELEM_ALIGN_VIEWPOINT = 0x100000,
//   FX_ELEM_USE_BILLBOARD_PIVOT = 0x200000,
//   FX_ELEM_USE_GAUSSIAN_CLOUD = 0x400000,
//   FX_ELEM_USE_ROTATIONAXIS = 0x800000,
//   FX_ELEM_HAS_VELOCITY_GRAPH_LOCAL = 0x1000000,
//   FX_ELEM_HAS_VELOCITY_GRAPH_WORLD = 0x2000000,
//   FX_ELEM_HAS_GRAVITY = 0x4000000,
//   FX_ELEM_USE_MODEL_PHYSICS = 0x8000000,
//   FX_ELEM_NONUNIFORM_SCALE = 0x10000000,
//   FX_ELEM_FLAME_CHUNK = 0x20000000,
//   FX_ELEM_HAS_REFLECTION = 0x40000000,
//   FX_ELEM_IS_MATURE_CONTENT = 0x80000000,
// };

// /* 434 */
// enum $F18C17676CCABCF3A7521CF0683F7501 : __int32
// {
//   IMAGE_TRACK_MISC = 0x0,
//   IMAGE_TRACK_DEBUG = 0x1,
//   IMAGE_TRACK_TEXTURENAME = 0x2,
//   IMAGE_TRACK_UI = 0x3,
//   IMAGE_TRACK_LIGHTMAP = 0x4,
//   IMAGE_TRACK_LIGHT = 0x5,
//   IMAGE_TRACK_FX = 0x6,
//   IMAGE_TRACK_HUD = 0x7,
//   IMAGE_TRACK_MODEL = 0x8,
//   IMAGE_TRACK_WORLD = 0x9,
//   IMAGE_TRACK_COUNT = 0xA,
// };

// /* 435 */
// enum $C7C2ADEA3AF53E649A85C380F70AD5A7 : __int32
// {
//   FX_ELEM_TYPE_SPRITE_BILLBOARD = 0x0,
//   FX_ELEM_TYPE_SPRITE_ORIENTED = 0x1,
//   FX_ELEM_TYPE_SPRITE_ROTATED = 0x2,
//   FX_ELEM_TYPE_TAIL = 0x3,
//   FX_ELEM_TYPE_LINE = 0x4,
//   FX_ELEM_TYPE_TRAIL = 0x5,
//   FX_ELEM_TYPE_CLOUD = 0x6,
//   FX_ELEM_TYPE_MODEL = 0x7,
//   FX_ELEM_TYPE_OMNI_LIGHT = 0x8,
//   FX_ELEM_TYPE_SPOT_LIGHT = 0x9,
//   FX_ELEM_TYPE_SOUND = 0xA,
//   FX_ELEM_TYPE_DECAL = 0xB,
//   FX_ELEM_TYPE_RUNNER = 0xC,
//   FX_ELEM_TYPE_COUNT = 0xD,
//   FX_ELEM_TYPE_LAST_SPRITE = 0x5,
//   FX_ELEM_TYPE_LAST_DRAWN = 0x9,
// };

 /* 436 */
enum fsMode_t : __int32
{
  FS_READ = 0x0,
  FS_WRITE = 0x1,
  FS_APPEND = 0x2,
  FS_APPEND_SYNC = 0x3,
};

// /* 437 */
// enum FxElemAtlas::<unnamed_tag> : __int32
// {
//   ENTRY_COUNT_BIT_COUNT = 0x9,
//   ENTRY_COUNT_MASK = 0x1FF,
//   ENTRY_COUNT_MAX = 0x100,
//   INDEX_RANGE_BIT_COUNT = 0x7,
//   INDEX_RANGE_SHIFT = 0x9,
//   INDEX_RANGE_MASK = 0x7F,
//   INDEX_RANGE_MAX = 0x7F,
// };

 /* 438 */
enum DynEntityType : __int32
{
  DYNENT_TYPE_INVALID = 0x0,
  DYNENT_TYPE_CLUTTER = 0x1,
  DYNENT_TYPE_DESTRUCT = 0x2,
  DYNENT_TYPE_COUNT = 0x3,
};

// /* 439 */
// enum streamName_t : __int32
// {
//   TICKER_STREAM_COD = 0x0,
//   TICKER_STREAM_SQUADS = 0x1,
//   TICKER_STREAM_FRIENDS = 0x2,
//   TICKER_STREAM_EVENTS = 0x3,
//   TICKER_STREAM_CONTRACTS = 0x4,
//   TICKER_STREAM_NONE = 0x5,
//   TICKER_STREAM_COUNT = 0x5,
// };

// /* 440 */
// enum LbWagerGameMode : __int32
// {
//   LB_GAMEMODE_OIC = 0x0,
//   LB_WAGER_GAMEMODE_START = 0x0,
//   LB_GAMEMODE_HLND = 0x1,
//   LB_GAMEMODE_GUN = 0x2,
//   LB_GAMEMODE_SHRP = 0x3,
//   LB_WAGER_GAMEMODE_COUNT = 0x4,
// };

// /* 441 */
// enum DWOnlineStatus : __int32
// {
//   DW_WAITING_FOR_USERNAME = 0x0,
//   DW_LIVE_ERROR = 0x1,
//   DW_LIVE_DISCONNECTED = 0x2,
//   DW_LIVE_CONNECTING = 0x3,
//   DW_LIVE_CONNECTED = 0x4,
//   DW_LIVE_PLATFORM_AUTH_ERROR = 0x5,
// };

// /* 442 */
// enum XONLINE_NAT_TYPE : __int32
// {
//   XONLINE_NAT_OPEN = 0x1,
//   XONLINE_NAT_MODERATE = 0x2,
//   XONLINE_NAT_STRICT = 0x3,
// };

// /* 443 */
// enum bdBandwidthTestType : __int32
// {
//   BD_UPLOAD_TEST = 0x0,
//   BD_UPLOAD_DOWNLOAD_TEST = 0x1,
// };

// /* 444 */
// enum bdBandwidthTestStatus : __int32
// {
//   BD_BANDWIDTH_TEST_IDLE = 0x0,
//   BD_BANDWIDTH_TEST_REQUESTING_TEST = 0x1,
//   BD_BANDWIDTH_TEST_UPLOAD_WAITING = 0x2,
//   BD_BANDWIDTH_TEST_UPLOAD_SENDING = 0x3,
//   BD_BANDWIDTH_TEST_DOWNLOAD_WAITING = 0x4,
//   BD_BANDWIDTH_TEST_DOWNLOAD_RECEIVING = 0x5,
//   BD_BANDWIDTH_TEST_FINALIZING = 0x6,
//   BD_BANDWIDTH_TEST_DONE = 0x7,
// };

// /* 445 */
// enum bdBandwidthTestInitStatus : __int32
// {
//   BD_BANDWIDTH_TEST_UNINITIALIZED = 0x0,
//   BD_BANDWIDTH_TEST_INITIALIZED = 0x1,
// };

// /* 446 */
// enum EUserTier : __int32
// {
//   USER_TIER_NONE = 0x0,
//   USER_TIER_SUPER = 0x1,
//   USER_TIER_DEVELOPER = 0x2,
//   USER_TIER_FRIEND = 0x3,
//   USER_TIER_ENEMY = 0x29A,
// };

// /* 447 */
// enum $FE7BE661958762EA7238145D886DC9CE : __int32
// {
//   TASK_QOSPROBE = 0x1,
//   TASK_WRITESTATS = 0x2,
//   TASK_BANDWIDTHTEST = 0x3,
//   TASK_STARTTEAMMATCH = 0x4,
//   TASK_FETCHPARTYPERFORMANCE = 0x5,
//   TASK_UPDATEPERFORMANCE = 0x6,
//   TASK_UNLOCKTROPHY = 0x7,
//   TASK_INVITEFRIEND = 0x8,
//   TASK_CREATEACCOUNT = 0x9,
//   TASK_DELETEACCOUNT = 0xA,
//   NUM_LIVE_TASKS = 0xB,
// };

// /* 448 */
// enum fileShareBufferLocation : __int32
// {
//   FILESHARE_BUFFER_PRIMARY = 0x0,
//   FILESHARE_BUFFER_SECONDARY = 0x1,
// };

// /* 449 */
// enum _XUSER_SIGNIN_STATE : __int32
// {
//   eXUserSigninState_NotSignedIn = 0x0,
//   eXUserSigninState_SignedInLocally = 0x1,
//   eXUserSigninState_SignedInToLive = 0x2,
// };

 /* 450 */
enum taskCompleteResults : __int32
{
  TASK_NOTCOMPLETE = 0x0,
  TASK_COMPLETE = 0x1,
  TASK_ERROR = 0x2,
};

// /* 451 */
// enum bdNotificationType : __int32
// {
//   BD_FRIENDSHIP_REJECTED = 0x1,
//   BD_FRIENDSHIP_ACCEPTED = 0x2,
//   BD_FRIENDSHIP_REVOKED = 0x3,
//   BD_TEAMNAME_UPDATED = 0x4,
//   BD_TEAMMEMBER_PROMOTED_TO_ADMIN = 0x5,
//   BD_TEAMMEMBER_PROMOTED_TO_OWNER = 0x6,
//   BD_TEAMMEMBER_DEMOTED_TO_ORDINARY = 0x7,
//   BD_TEAMMEMBER_KICKED = 0x8,
//   BD_TEAM_DISSOLVED = 0x9,
//   BD_TEAMMEMBER_LEFT = 0xA,
//   BD_TEAMMEMBER_INVITE_REJECTED = 0xB,
//   BD_TEAMMEMBER_INVITE_ACCEPTED = 0xC,
// };

// /* 452 */
// enum bdMessaging::bdBlockLevel : __int32
// {
//   BD_NOT_BLOCKED = 0x0,
//   BD_BLOCKED = 0x1,
// };

// /* 453 */
// enum messageState_e : __int32
// {
//   MESSAGE_NOT_DISPLAYING = 0x0,
//   MESSAGE_SCROLLING_UP_A = 0x1,
//   MESSAGE_PAUSED_A = 0x2,
//   MESSAGE_SCROLLING_LEFT = 0x3,
//   MESSAGE_PAUSED_B = 0x4,
//   MESSAGE_SCROLLING_UP_B = 0x5,
//   MESSAGE_DONE_DISPLAYING = 0x6,
// };

// /* 454 */
// enum LbFilter : __int32
// {
//   LB_FILTER_NONE = 0x0,
//   LB_FILTER_FRIENDS = 0x1,
//   LB_FILTER_LOBBY_MEMBERS = 0x2,
//   LB_FILTER_COUNT = 0x3,
// };

// /* 455 */
// enum LbResetPeriod : __int32
// {
//   LB_RESETPERIOD_ALL_TIME = 0x0,
//   LB_RESETPERIOD_WEEKLY = 0x1,
//   LB_RESETPERIOD_MONTHLY = 0x2,
//   LB_RESETPERIOD_COUNT = 0x3,
// };

// /* 456 */
// enum LbWriteMinRequirements : __int32
// {
//   LB_ALL_TIME_LB_WRITE_MIN_REQ = 0x32,
//   LB_WEEKLY_LB_WRITE_MIN_REQ = 0x5,
//   LB_MONTHLY_LB_WRITE_MIN_REQ = 0x19,
// };

// /* 457 */
// enum sv_cacvalidate_state_t : __int32
// {
//   CAC_IDLE = 0x0,
//   CAC_WAITING = 0x1,
//   CAC_FETCHONE = 0x2,
//   CAC_FETCHTWO = 0x3,
//   CAC_WAITINGAGAIN = 0x4,
//   CAC_WRITEONE = 0x5,
//   CAC_WRITETWO = 0x6,
// };

// /* 458 */
// enum dwStatsTask : __int32
// {
//   DW_NONE = 0x0,
//   DW_WRITE_STATS = 0x1,
//   DW_READ_STATS = 0x2,
//   DW_DELETE_STATS = 0x3,
// };

 /* 459 */
enum ItemGroup_t
{
  ITEMGROUP_SMG = 0x0,
  ITEMGROUP_FIRST = 0x0,
  ITEMGROUP_ASSAULT = 0x1,
  ITEMGROUP_CQB = 0x2,
  ITEMGROUP_LMG = 0x3,
  ITEMGROUP_SNIPER = 0x4,
  ITEMGROUP_PISTOL = 0x5,
  ITEMGROUP_LAUNCHER = 0x6,
  ITEMGROUP_SPECIAL = 0x7,
  ITEMGROUP_SHOTGUN = 0x8,
  ITEMGROUP_EXPLOSIVE = 0x9,
  ITEMGROUP_GRENADE = 0xA,
  ITEMGROUP_MASTERKEY = 0xB,
  ITEMGROUP_GRENADELAUNCHER = 0xC,
  ITEMGROUP_FLAMETHROWER = 0xD,
  ITEMGROUP_SPECIALTY = 0xE,
  ITEMGROUP_SPECIALGRENADE = 0xF,
  ITEMGROUP_INVENTORY = 0x10,
  ITEMGROUP_HEAD = 0x11,
  ITEMGROUP_HEADGEAR = 0x12,
  ITEMGROUP_BODY = 0x13,
  ITEMGROUP_MISCWEAPON = 0x14,
  ITEMGROUP_FEATURE = 0x15,
  ITEMGROUP_DEATHSTREAK = 0x16,
  ITEMGROUP_GLOBAL_ITEMS_START = 0x17,
  ITEMGROUP_KILLSTREAK = 0x17,
  ITEMGROUP_COUNT = 0x18,
  ITEMGROUP_INVALID = 0xFFFFFFFF,
};

// /* 460 */
enum LoadoutSlot_t
{
  LOADOUTSLOT_INVALID = 0xFFFFFFFF,
  LOADOUTSLOT_FIRST = 0x0,
  LOADOUTSLOT_PRIMARY_WEAPON = 0x0,
  LOADOUTSLOT_PRIMARY_ATTACHMENT = 0x1,
  LOADOUTSLOT_PRIMARY_ATTACHMENT_TOP = 0x2,
  LOADOUTSLOT_PRIMARY_ATTACHMENT_BOTTOM = 0x3,
  LOADOUTSLOT_PRIMARY_ATTACHMENT_TRIGGER = 0x4,
  LOADOUTSLOT_PRIMARY_ATTACHMENT_MUZZLE = 0x5,
  LOADOUTSLOT_PRIMARY_CAMO = 0x6,
  LOADOUTSLOT_PRIMARY_RETICLE = 0x7,
  LOADOUTSLOT_PRIMARY_RETICLE_COLOR = 0x8,
  LOADOUTSLOT_PRIMARY_LENS = 0x9,
  LOADOUTSLOT_PRIMARY_EMBLEM = 0xA,
  LOADOUTSLOT_PRIMARY_TAG = 0xB,
  LOADOUTSLOT_SECONDARY_WEAPON = 0xC,
  LOADOUTSLOT_SECONDARY_ATTACHMENT = 0xD,
  LOADOUTSLOT_SECONDARY_ATTACHMENT_TOP = 0xE,
  LOADOUTSLOT_SECONDARY_ATTACHMENT_BOTTOM = 0xF,
  LOADOUTSLOT_SECONDARY_ATTACHMENT_TRIGGER = 0x10,
  LOADOUTSLOT_SECONDARY_ATTACHMENT_MUZZLE = 0x11,
  LOADOUTSLOT_SECONDARY_CAMO = 0x12,
  LOADOUTSLOT_SECONDARY_RETICLE = 0x13,
  LOADOUTSLOT_SECONDARY_RETICLE_COLOR = 0x14,
  LOADOUTSLOT_SECONDARY_LENS = 0x15,
  LOADOUTSLOT_SECONDARY_EMBLEM = 0x16,
  LOADOUTSLOT_SECONDARY_TAG = 0x17,
  LOADOUTSLOT_FIRST_SPECIALTY = 0x18,
  LOADOUTSLOT_SPECIALTY1 = 0x18,
  LOADOUTSLOT_SPECIALTY2 = 0x19,
  LOADOUTSLOT_SPECIALTY3 = 0x1A,
  LOADOUTSLOT_LAST_SPECIALTY = 0x1A,
  LOADOUTSLOT_CLASSBONUS = 0x1B,
  LOADOUTSLOT_HEAD = 0x1C,
  LOADOUTSLOT_BODY = 0x1D,
  LOADOUTSLOT_PRIMARY_GRENADE = 0x1E,
  LOADOUTSLOT_SPECIAL_GRENADE = 0x1F,
  LOADOUTSLOT_EQUIPMENT = 0x20,
  LOADOUTSLOT_FACEPAINT_PATTERN = 0x21,
  LOADOUTSLOT_FACEPAINT_COLOR = 0x22,
  LOADOUTSLOT_GLOBAL_ITEMS_START = 0x23,
  LOADOUTSLOT_KILLSTREAK1 = 0x23,
  LOADOUTSLOT_KILLSTREAK2 = 0x24,
  LOADOUTSLOT_KILLSTREAK3 = 0x25,
  LOADOUTSLOT_DEATHSTREAK = 0x26,
  LOADOUTSLOT_COUNT = 0x27,
};

// /* 461 */
// enum clanTagFeatureColumn_t : __int32
// {
//   CLANTAG_COL_INDEX = 0x0,
//   CLANTAG_COL_NAME = 0x1,
//   CLANTAG_COL_UNLOCKLVL = 0x2,
//   CLANTAG_COL_UNLOCKPLVL = 0x3,
//   CLANTAG_COL_COST = 0x4,
//   CLANTAG_COL_TYPE = 0x5,
//   CLANTAG_COL_DATA = 0x6,
//   CLANTAG_COL_NUMFRAMES = 0x7,
//   CLANTAG_COL_PHASE = 0x8,
//   CLANTAG_COL_FRAME1 = 0x9,
//   CLANTAG_COL_FRAME2 = 0xA,
//   CLANTAG_COL_FRAME3 = 0xB,
//   CLANTAG_COL_FRAME4 = 0xC,
//   CLANTAG_COL_FRAME5 = 0xD,
//   CLANTAG_COL_FRAME6 = 0xE,
//   CLANTAG_COL_FRAME7 = 0xF,
//   CLANTAG_COL_FRAME8 = 0x10,
// };

// /* 462 */
// enum day_t : __int32
// {
//   SUNDAY = 0x0,
//   MONDAY = 0x1,
//   TUESDAY = 0x2,
//   WEDNESDAY = 0x3,
//   THURSDAY = 0x4,
//   FRIDAY = 0x5,
//   SATURDAY = 0x6,
// };

// /* 463 */
// enum playerStatsKeyIndex_t : __int32
// {
//   MP_PLAYERSTATSKEY_RANKXP = 0x0,
//   MP_PLAYERSTATSKEY_PLEVEL = 0x1,
//   MP_PLAYERSTATSKEY_SCORE = 0x2,
//   MP_PLAYERSTATSKEY_TIMEPLAYEDTOTAL = 0x3,
//   MP_PLAYERSTATSKEY_GAMETYPEBAN = 0x4,
//   MP_PLAYERSTATSKEY_TIMEWHENNEXTHOST = 0x5,
//   MP_PLAYERSTATSKEY_BADHOSTCOUNT = 0x6,
//   MP_PLAYERSTATSKEY_LEADERBOARDFAILURES = 0x7,
//   MP_PLAYERSTATSKEY_LASTSTATSBACKUP = 0x8,
//   MP_PLAYERSTATSKEY_MAPPACKMASK = 0x9,
//   MP_PLAYERSTATSKEY_STATSBACKUPVERSION = 0xA,
//   MP_PLAYERSTATSKEY_MP_MAP_SKIPPED = 0xB,
//   MP_PLAYERSTATSKEY_COOP_MAP_SKIPPED = 0xC,
//   MP_PLAYERSTATSKEY_CODPOINTS = 0xD,
//   MP_PLAYERSTATSKEY_CURRENCYSPENT = 0xE,
//   MP_PLAYERSTATSKEY_STATS_VERSION = 0xF,
//   MP_PLAYERSTATSKEY_KILLS = 0x10,
//   MP_PLAYERSTATSKEY_DEATHS = 0x11,
//   MP_PLAYERSTATSKEY_DEATHSDURINGUSE = 0x12,
//   MP_PLAYERSTATSKEY_HEADSHOTS = 0x13,
//   MP_PLAYERSTATSKEY_KDRATIO = 0x14,
//   MP_PLAYERSTATSKEY_HIGHEST_KDRATIO = 0x15,
//   MP_PLAYERSTATSKEY_ACCURACY = 0x16,
//   MP_PLAYERSTATSKEY_HIGHEST_ACCURACY = 0x17,
//   MP_PLAYERSTATSKEY_SHOTS = 0x18,
//   MP_PLAYERSTATSKEY_HITS = 0x19,
//   MP_PLAYERSTATSKEY_TIMEUSED = 0x1A,
//   MP_PLAYERSTATSKEY_USED = 0x1B,
//   MP_PLAYERSTATSKEY_DESTROYED = 0x1C,
//   MP_PLAYERSTATSKEY_GAMETYPE = 0x1D,
//   MP_PLAYERSTATSKEY_WINS = 0x1E,
//   MP_PLAYERSTATSKEY_LOSSES = 0x1F,
//   MP_PLAYERSTATSKEY_TIES = 0x20,
//   MP_PLAYERSTATSKEY_LIFETIME_EARNINGS = 0x21,
//   MP_PLAYERSTATSKEY_LIFETIME_BUYIN = 0x22,
//   MP_PLAYERSTATSKEY_CONTRACTS_PURCHASED = 0x23,
//   MP_PLAYERSTATSKEY_CONTRACTS_COMPLETED = 0x24,
//   MP_PLAYERSTATSKEY_LASTESCROW = 0x25,
//   MP_PLAYERSTATSKEY_WEEKLYTIMESTAMP = 0x26,
//   MP_PLAYERSTATSKEY_MONTHLYTIMESTAMP = 0x27,
//   MP_PLAYERSTATSKEY_COUNT = 0x28,
// };

// /* 464 */
// enum LeaderBoardID : __int32
// {
//   ENUM_WHITELIST_LEADERBOARD_ID = 0x1,
//   ENUM_TDM_LEADERBOARD_ID = 0x3E8,
//   ENUM_FFA_LEADERBOARD_ID = 0x3E9,
//   ENUM_CTF_LEADERBOARD_ID = 0x3EA,
//   ENUM_DOM_LEADERBOARD_ID = 0x3EB,
//   ENUM_SAB_LEADERBOARD_ID = 0x3EC,
//   ENUM_SND_LEADERBOARD_ID = 0x3ED,
//   ENUM_HQ_LEADERBOARD_ID = 0x3EE,
//   ENUM_DEM_LEADERBOARD_ID = 0x3EF,
//   ENUM_HC_TDM_LEADERBOARD_ID = 0x44C,
//   ENUM_HC_FFA_LEADERBOARD_ID = 0x44D,
//   ENUM_HC_CTF_LEADERBOARD_ID = 0x44E,
//   ENUM_HC_DOM_LEADERBOARD_ID = 0x44F,
//   ENUM_HC_SAB_LEADERBOARD_ID = 0x450,
//   ENUM_HC_SND_LEADERBOARD_ID = 0x451,
//   ENUM_HC_HQ_LEADERBOARD_ID = 0x452,
//   ENUM_HC_DEM_LEADERBOARD_ID = 0x453,
//   ENUM_TDM_WEEKLY_LEADERBOARD_ID = 0x4B0,
//   ENUM_FFA_WEEKLY_LEADERBOARD_ID = 0x4B1,
//   ENUM_CTF_WEEKLY_LEADERBOARD_ID = 0x4B2,
//   ENUM_DOM_WEEKLY_LEADERBOARD_ID = 0x4B3,
//   ENUM_SAB_WEEKLY_LEADERBOARD_ID = 0x4B4,
//   ENUM_SND_WEEKLY_LEADERBOARD_ID = 0x4B5,
//   ENUM_HQ_WEEKLY_LEADERBOARD_ID = 0x4B6,
//   ENUM_DEM_WEEKLY_LEADERBOARD_ID = 0x4B7,
//   ENUM_HC_TDM_WEEKLY_LEADERBOARD_ID = 0x514,
//   ENUM_HC_FFA_WEEKLY_LEADERBOARD_ID = 0x515,
//   ENUM_HC_CTF_WEEKLY_LEADERBOARD_ID = 0x516,
//   ENUM_HC_DOM_WEEKLY_LEADERBOARD_ID = 0x517,
//   ENUM_HC_SAB_WEEKLY_LEADERBOARD_ID = 0x518,
//   ENUM_HC_SND_WEEKLY_LEADERBOARD_ID = 0x519,
//   ENUM_HC_HQ_WEEKLY_LEADERBOARD_ID = 0x51A,
//   ENUM_HC_DEM_WEEKLY_LEADERBOARD_ID = 0x51B,
//   ENUM_TDM_WEEKLY_HIDDEN_LEADERBOARD_ID = 0x578,
//   ENUM_FFA_WEEKLY_HIDDEN_LEADERBOARD_ID = 0x579,
//   ENUM_CTF_WEEKLY_HIDDEN_LEADERBOARD_ID = 0x57A,
//   ENUM_DOM_WEEKLY_HIDDEN_LEADERBOARD_ID = 0x57B,
//   ENUM_SAB_WEEKLY_HIDDEN_LEADERBOARD_ID = 0x57C,
//   ENUM_SND_WEEKLY_HIDDEN_LEADERBOARD_ID = 0x57D,
//   ENUM_HQ_WEEKLY_HIDDEN_LEADERBOARD_ID = 0x57E,
//   ENUM_DEM_WEEKLY_HIDDEN_LEADERBOARD_ID = 0x57F,
//   ENUM_HC_TDM_WEEKLY_HIDDEN_LEADERBOARD_ID = 0x5DC,
//   ENUM_HC_FFA_WEEKLY_HIDDEN_LEADERBOARD_ID = 0x5DD,
//   ENUM_HC_CTF_WEEKLY_HIDDEN_LEADERBOARD_ID = 0x5DE,
//   ENUM_HC_DOM_WEEKLY_HIDDEN_LEADERBOARD_ID = 0x5DF,
//   ENUM_HC_SAB_WEEKLY_HIDDEN_LEADERBOARD_ID = 0x5E0,
//   ENUM_HC_SND_WEEKLY_HIDDEN_LEADERBOARD_ID = 0x5E1,
//   ENUM_HC_HQ_WEEKLY_HIDDEN_LEADERBOARD_ID = 0x5E2,
//   ENUM_HC_DEM_WEEKLY_HIDDEN_LEADERBOARD_ID = 0x5E3,
//   ENUM_TDM_MONTHLY_LEADERBOARD_ID = 0x640,
//   ENUM_FFA_MONTHLY_LEADERBOARD_ID = 0x641,
//   ENUM_CTF_MONTHLY_LEADERBOARD_ID = 0x642,
//   ENUM_DOM_MONTHLY_LEADERBOARD_ID = 0x643,
//   ENUM_SAB_MONTHLY_LEADERBOARD_ID = 0x644,
//   ENUM_SND_MONTHLY_LEADERBOARD_ID = 0x645,
//   ENUM_HQ_MONTHLY_LEADERBOARD_ID = 0x646,
//   ENUM_DEM_MONTHLY_LEADERBOARD_ID = 0x647,
//   ENUM_HC_TDM_MONTHLY_LEADERBOARD_ID = 0x6A4,
//   ENUM_HC_FFA_MONTHLY_LEADERBOARD_ID = 0x6A5,
//   ENUM_HC_CTF_MONTHLY_LEADERBOARD_ID = 0x6A6,
//   ENUM_HC_DOM_MONTHLY_LEADERBOARD_ID = 0x6A7,
//   ENUM_HC_SAB_MONTHLY_LEADERBOARD_ID = 0x6A8,
//   ENUM_HC_SND_MONTHLY_LEADERBOARD_ID = 0x6A9,
//   ENUM_HC_HQ_MONTHLY_LEADERBOARD_ID = 0x6AA,
//   ENUM_HC_DEM_MONTHLY_LEADERBOARD_ID = 0x6AB,
//   ENUM_TDM_MONTHLY_HIDDEN_LEADERBOARD_ID = 0x708,
//   ENUM_FFA_MONTHLY_HIDDEN_LEADERBOARD_ID = 0x709,
//   ENUM_CTF_MONTHLY_HIDDEN_LEADERBOARD_ID = 0x70A,
//   ENUM_DOM_MONTHLY_HIDDEN_LEADERBOARD_ID = 0x70B,
//   ENUM_SAB_MONTHLY_HIDDEN_LEADERBOARD_ID = 0x70C,
//   ENUM_SND_MONTHLY_HIDDEN_LEADERBOARD_ID = 0x70D,
//   ENUM_HQ_MONTHLY_HIDDEN_LEADERBOARD_ID = 0x70E,
//   ENUM_DEM_MONTHLY_HIDDEN_LEADERBOARD_ID = 0x70F,
//   ENUM_HC_TDM_MONTHLY_HIDDEN_LEADERBOARD_ID = 0x76C,
//   ENUM_HC_FFA_MONTHLY_HIDDEN_LEADERBOARD_ID = 0x76D,
//   ENUM_HC_CTF_MONTHLY_HIDDEN_LEADERBOARD_ID = 0x76E,
//   ENUM_HC_DOM_MONTHLY_HIDDEN_LEADERBOARD_ID = 0x76F,
//   ENUM_HC_SAB_MONTHLY_HIDDEN_LEADERBOARD_ID = 0x770,
//   ENUM_HC_SND_MONTHLY_HIDDEN_LEADERBOARD_ID = 0x771,
//   ENUM_HC_HQ_MONTHLY_HIDDEN_LEADERBOARD_ID = 0x772,
//   ENUM_HC_DEM_MONTHLY_HIDDEN_LEADERBOARD_ID = 0x773,
//   ENUM_TDM_PRESTIGE_LEADERBOARD_ID = 0x7D0,
//   ENUM_FFA_PRESTIGE_LEADERBOARD_ID = 0x7D1,
//   ENUM_CTF_PRESTIGE_LEADERBOARD_ID = 0x7D2,
//   ENUM_DOM_PRESTIGE_LEADERBOARD_ID = 0x7D3,
//   ENUM_SAB_PRESTIGE_LEADERBOARD_ID = 0x7D4,
//   ENUM_SND_PRESTIGE_LEADERBOARD_ID = 0x7D5,
//   ENUM_HQ_PRESTIGE_LEADERBOARD_ID = 0x7D6,
//   ENUM_DEM_PRESTIGE_LEADERBOARD_ID = 0x7D7,
//   ENUM_HC_TDM_PRESTIGE_LEADERBOARD_ID = 0x834,
//   ENUM_HC_FFA_PRESTIGE_LEADERBOARD_ID = 0x835,
//   ENUM_HC_CTF_PRESTIGE_LEADERBOARD_ID = 0x836,
//   ENUM_HC_DOM_PRESTIGE_LEADERBOARD_ID = 0x837,
//   ENUM_HC_SAB_PRESTIGE_LEADERBOARD_ID = 0x838,
//   ENUM_HC_SND_PRESTIGE_LEADERBOARD_ID = 0x839,
//   ENUM_HC_HQ_PRESTIGE_LEADERBOARD_ID = 0x83A,
//   ENUM_HC_DEM_PRESTIGE_LEADERBOARD_ID = 0x83B,
//   ENUM_TDM_WEEKLY_PRESTIGE_LEADERBOARD_ID = 0x898,
//   ENUM_FFA_WEEKLY_PRESTIGE_LEADERBOARD_ID = 0x899,
//   ENUM_CTF_WEEKLY_PRESTIGE_LEADERBOARD_ID = 0x89A,
//   ENUM_DOM_WEEKLY_PRESTIGE_LEADERBOARD_ID = 0x89B,
//   ENUM_SAB_WEEKLY_PRESTIGE_LEADERBOARD_ID = 0x89C,
//   ENUM_SND_WEEKLY_PRESTIGE_LEADERBOARD_ID = 0x89D,
//   ENUM_HQ_WEEKLY_PRESTIGE_LEADERBOARD_ID = 0x89E,
//   ENUM_DEM_WEEKLY_PRESTIGE_LEADERBOARD_ID = 0x89F,
//   ENUM_HC_TDM_WEEKLY_PRESTIGE_LEADERBOARD_ID = 0x8FC,
//   ENUM_HC_FFA_WEEKLY_PRESTIGE_LEADERBOARD_ID = 0x8FD,
//   ENUM_HC_CTF_WEEKLY_PRESTIGE_LEADERBOARD_ID = 0x8FE,
//   ENUM_HC_DOM_WEEKLY_PRESTIGE_LEADERBOARD_ID = 0x8FF,
//   ENUM_HC_SAB_WEEKLY_PRESTIGE_LEADERBOARD_ID = 0x900,
//   ENUM_HC_SND_WEEKLY_PRESTIGE_LEADERBOARD_ID = 0x901,
//   ENUM_HC_HQ_WEEKLY_PRESTIGE_LEADERBOARD_ID = 0x902,
//   ENUM_HC_DEM_WEEKLY_PRESTIGE_LEADERBOARD_ID = 0x903,
//   ENUM_TDM_WEEKLY_HIDDEN_PRESTIGE_LEADERBOARD_ID = 0x960,
//   ENUM_FFA_WEEKLY_HIDDEN_PRESTIGE_LEADERBOARD_ID = 0x961,
//   ENUM_CTF_WEEKLY_HIDDEN_PRESTIGE_LEADERBOARD_ID = 0x962,
//   ENUM_DOM_WEEKLY_HIDDEN_PRESTIGE_LEADERBOARD_ID = 0x963,
//   ENUM_SAB_WEEKLY_HIDDEN_PRESTIGE_LEADERBOARD_ID = 0x964,
//   ENUM_SND_WEEKLY_HIDDEN_PRESTIGE_LEADERBOARD_ID = 0x965,
//   ENUM_HQ_WEEKLY_HIDDEN_PRESTIGE_LEADERBOARD_ID = 0x966,
//   ENUM_DEM_WEEKLY_HIDDEN_PRESTIGE_LEADERBOARD_ID = 0x967,
//   ENUM_HC_TDM_WEEKLY_HIDDEN_PRESTIGE_LEADERBOARD_ID = 0x9C4,
//   ENUM_HC_FFA_WEEKLY_HIDDEN_PRESTIGE_LEADERBOARD_ID = 0x9C5,
//   ENUM_HC_CTF_WEEKLY_HIDDEN_PRESTIGE_LEADERBOARD_ID = 0x9C6,
//   ENUM_HC_DOM_WEEKLY_HIDDEN_PRESTIGE_LEADERBOARD_ID = 0x9C7,
//   ENUM_HC_SAB_WEEKLY_HIDDEN_PRESTIGE_LEADERBOARD_ID = 0x9C8,
//   ENUM_HC_SND_WEEKLY_HIDDEN_PRESTIGE_LEADERBOARD_ID = 0x9C9,
//   ENUM_HC_HQ_WEEKLY_HIDDEN_PRESTIGE_LEADERBOARD_ID = 0x9CA,
//   ENUM_HC_DEM_WEEKLY_HIDDEN_PRESTIGE_LEADERBOARD_ID = 0x9CB,
//   ENUM_TDM_MONTHLY_PRESTIGE_LEADERBOARD_ID = 0xA28,
//   ENUM_FFA_MONTHLY_PRESTIGE_LEADERBOARD_ID = 0xA29,
//   ENUM_CTF_MONTHLY_PRESTIGE_LEADERBOARD_ID = 0xA2A,
//   ENUM_DOM_MONTHLY_PRESTIGE_LEADERBOARD_ID = 0xA2B,
//   ENUM_SAB_MONTHLY_PRESTIGE_LEADERBOARD_ID = 0xA2C,
//   ENUM_SND_MONTHLY_PRESTIGE_LEADERBOARD_ID = 0xA2D,
//   ENUM_HQ_MONTHLY_PRESTIGE_LEADERBOARD_ID = 0xA2E,
//   ENUM_DEM_MONTHLY_PRESTIGE_LEADERBOARD_ID = 0xA2F,
//   ENUM_HC_TDM_MONTHLY_PRESTIGE_LEADERBOARD_ID = 0xA8C,
//   ENUM_HC_FFA_MONTHLY_PRESTIGE_LEADERBOARD_ID = 0xA8D,
//   ENUM_HC_CTF_MONTHLY_PRESTIGE_LEADERBOARD_ID = 0xA8E,
//   ENUM_HC_DOM_MONTHLY_PRESTIGE_LEADERBOARD_ID = 0xA8F,
//   ENUM_HC_SAB_MONTHLY_PRESTIGE_LEADERBOARD_ID = 0xA90,
//   ENUM_HC_SND_MONTHLY_PRESTIGE_LEADERBOARD_ID = 0xA91,
//   ENUM_HC_HQ_MONTHLY_PRESTIGE_LEADERBOARD_ID = 0xA92,
//   ENUM_HC_DEM_MONTHLY_PRESTIGE_LEADERBOARD_ID = 0xA93,
//   ENUM_TDM_MONTHLY_HIDDEN_PRESTIGE_LEADERBOARD_ID = 0xAF0,
//   ENUM_FFA_MONTHLY_HIDDEN_PRESTIGE_LEADERBOARD_ID = 0xAF1,
//   ENUM_CTF_MONTHLY_HIDDEN_PRESTIGE_LEADERBOARD_ID = 0xAF2,
//   ENUM_DOM_MONTHLY_HIDDEN_PRESTIGE_LEADERBOARD_ID = 0xAF3,
//   ENUM_SAB_MONTHLY_HIDDEN_PRESTIGE_LEADERBOARD_ID = 0xAF4,
//   ENUM_SND_MONTHLY_HIDDEN_PRESTIGE_LEADERBOARD_ID = 0xAF5,
//   ENUM_HQ_MONTHLY_HIDDEN_PRESTIGE_LEADERBOARD_ID = 0xAF6,
//   ENUM_DEM_MONTHLY_HIDDEN_PRESTIGE_LEADERBOARD_ID = 0xAF7,
//   ENUM_HC_TDM_MONTHLY_HIDDEN_PRESTIGE_LEADERBOARD_ID = 0xB54,
//   ENUM_HC_FFA_MONTHLY_HIDDEN_PRESTIGE_LEADERBOARD_ID = 0xB55,
//   ENUM_HC_CTF_MONTHLY_HIDDEN_PRESTIGE_LEADERBOARD_ID = 0xB56,
//   ENUM_HC_DOM_MONTHLY_HIDDEN_PRESTIGE_LEADERBOARD_ID = 0xB57,
//   ENUM_HC_SAB_MONTHLY_HIDDEN_PRESTIGE_LEADERBOARD_ID = 0xB58,
//   ENUM_HC_SND_MONTHLY_HIDDEN_PRESTIGE_LEADERBOARD_ID = 0xB59,
//   ENUM_HC_HQ_MONTHLY_HIDDEN_PRESTIGE_LEADERBOARD_ID = 0xB5A,
//   ENUM_HC_DEM_MONTHLY_HIDDEN_PRESTIGE_LEADERBOARD_ID = 0xB5B,
//   ENUM_GLOBAL_SCORE_LEADERBOARD_ID = 0xBB8,
//   ENUM_GLOBAL_WINS_LEADERBOARD_ID = 0xBB9,
//   ENUM_GLOBAL_KILLS_LEADERBOARD_ID = 0xBBA,
//   ENUM_GLOBAL_CODPOINTS_LEADERBOARD_ID = 0xBBB,
//   ENUM_ZMTHEATERWAVES_LEADERBOARD_ID = 0xFA0,
//   ENUM_ZMTHEATERPOINTS_LEADERBOARD_ID = 0xFA1,
//   ENUM_ZMTHEATERKILLS_LEADERBOARD_ID = 0xFA2,
//   ENUM_ZOMBIETRONWAVES_LEADERBOARD_ID = 0xFA3,
//   ENUM_ZOMBIETRONPOINTS_LEADERBOARD_ID = 0xFA4,
//   ENUM_ZOMBIETRONKILLS_LEADERBOARD_ID = 0xFA5,
//   ENUM_ZMPENTAGONWAVES_LEADERBOARD_ID = 0xFA6,
//   ENUM_ZMPENTAGONPOINTS_LEADERBOARD_ID = 0xFA7,
//   ENUM_ZMPENTAGONKILLS_LEADERBOARD_ID = 0xFA8,
//   ENUM_LB00_TRACKER_LEADERBOARD_ID = 0x1388,
//   ENUM_LB01_TRACKER_LEADERBOARD_ID = 0x1389,
//   ENUM_LB02_TRACKER_LEADERBOARD_ID = 0x138A,
//   ENUM_LB03_TRACKER_LEADERBOARD_ID = 0x138B,
//   ENUM_LB04_TRACKER_LEADERBOARD_ID = 0x138C,
//   ENUM_LB05_TRACKER_LEADERBOARD_ID = 0x138D,
//   ENUM_LB06_TRACKER_LEADERBOARD_ID = 0x138E,
//   ENUM_LB07_TRACKER_LEADERBOARD_ID = 0x138F,
//   ENUM_LB08_TRACKER_LEADERBOARD_ID = 0x1390,
//   ENUM_LB09_TRACKER_LEADERBOARD_ID = 0x1391,
//   ENUM_LB10_TRACKER_LEADERBOARD_ID = 0x1392,
//   ENUM_LB11_TRACKER_LEADERBOARD_ID = 0x1393,
//   ENUM_LB12_TRACKER_LEADERBOARD_ID = 0x1394,
//   ENUM_LB13_TRACKER_LEADERBOARD_ID = 0x1395,
//   ENUM_ESCROW_BALANCE_LEADERBOARD_ID = 0x1395,
//   ENUM_LB14_TRACKER_LEADERBOARD_ID = 0x1396,
//   ENUM_ESCROW_UPDATETIME_LEADERBOARD_ID = 0x1396,
//   ENUM_LB15_TRACKER_LEADERBOARD_ID = 0x1397,
//   ENUM_BAN_LEADERBOARD_ID = 0x1397,
// };

// /* 465 */
// enum statsResetReason_t : __int32
// {
//   STATSRESET_FILE_NOT_FOUND = 0x0,
//   STATSRESET_CFG_VERSION_MISMATCH = 0x1,
//   STATSRESET_DDL_CONVERSION_FAILED = 0x2,
//   STATSRESET_EXEC_RESET_COMMAND = 0x3,
//   STATSRESET_CHEATER_DETECTED = 0x4,
//   STATSRESET_NEW_OFFLINE_USER = 0x5,
// };

// /* 466 */
// enum ddlPrimitiveTypes_e : __int32
// {
//   DDL_BYTE_TYPE = 0x0,
//   DDL_SHORT_TYPE = 0x1,
//   DDL_INT_TYPE = 0x2,
//   DDL_INT64_TYPE = 0x3,
//   DDL_FLOAT_TYPE = 0x4,
//   DDL_STRING_TYPE = 0x5,
//   DDL_STRUCT_TYPE = 0x6,
//   DDL_ENUM_TYPE = 0x7,
// };

// /* 467 */
// enum gamertagsTableColumns_t : __int32
// {
//   MP_GAMERTAGS_NAME = 0x0,
//   MP_GAMERTAGS_TIER = 0x1,
//   MP_GAMERTAGS_COUNT = 0x2,
// };

// /* 468 */
// enum ddlUserFlags_e : __int32
// {
//   DDL_USERFLAGS_VALUE_CHANGED = 0x0,
//   DDL_USERFLAGS_ONLINE_RANKED_STATS = 0x1,
//   DDL_USERFLAGS_BASIC_TRAINING_STATS = 0x2,
//   DDL_USERFLAGS_COUNT = 0x3,
// };

// /* 469 */
// enum combatRecordPersonalBestStatsIndex_t : __int32
// {
//   HIGHEST_STATS_START = 0x0,
//   CR_HIGHEST_KILLSTREAK = 0x0,
//   CR_HIGHEST_DEATHSTREAK = 0x1,
//   CR_HIGHEST_SCORE = 0x2,
//   HIGHEST_STATS_COUNT = 0x3,
//   CR_ASSISTS = 0x3,
//   CR_REVIVES = 0x4,
//   CR_PERSONAL_BEST_STAT_COUNT = 0x5,
// };

// /* 470 */
// enum $D2985462A6C40A331540A4BC5277FBD8 : __int32
// {
//   STATSBACKUP_NOREADWRITE = 0xFFFFFFFF,
//   STATSBACKUP_READ_NOWRITE = 0x0,
// };

// /* 471 */
// enum dwContentServerFileCategory : __int32
// {
//   FILE_CATEGORY_ALL = 0x0,
//   FILE_CATEGORY_HEATMAP = 0x1,
//   FILE_CATEGORY_DEMO = 0x2,
//   FILE_CATEGORY_CLIP = 0x3,
//   FILE_CATEGORY_SCREENSHOT = 0x4,
// };

// /* 472 */
// enum EUniverse : __int32
// {
//   k_EUniverseInvalid = 0x0,
//   k_EUniversePublic = 0x1,
//   k_EUniverseBeta = 0x2,
//   k_EUniverseInternal = 0x3,
//   k_EUniverseDev = 0x4,
//   k_EUniverseRC = 0x5,
//   k_EUniverseMax = 0x6,
// };

// /* 473 */
// enum EAccountType : __int32
// {
//   k_EAccountTypeInvalid = 0x0,
//   k_EAccountTypeIndividual = 0x1,
//   k_EAccountTypeMultiseat = 0x2,
//   k_EAccountTypeGameServer = 0x3,
//   k_EAccountTypeAnonGameServer = 0x4,
//   k_EAccountTypePending = 0x5,
//   k_EAccountTypeContentServer = 0x6,
//   k_EAccountTypeClan = 0x7,
//   k_EAccountTypeChat = 0x8,
//   k_EAccountTypeAnonUser = 0xA,
//   k_EAccountTypeMax = 0xB,
// };

// /* 474 */
// enum $CDD6A5183505116B35FC206920E63627 : __int32
// {
//   k_iSteamUserCallbacks = 0x64,
// };

// /* 475 */
// enum $2E5C13F35C066406414F12E84027D068 : __int32
// {
//   k_iSteamFriendsCallbacks = 0x12C,
// };

// /* 476 */
// enum $A4173BE86B52B0F505DB1B60B4606BC0 : __int32
// {
//   k_iSteamMatchmakingCallbacks = 0x1F4,
// };

// /* 477 */
// enum $0C8FDD38DED581DC5B3F30AEAED0B670 : __int32
// {
//   k_iSteamUtilsCallbacks = 0x2BC,
// };

// /* 478 */
// enum $393856A4535633B39CE7726304413102 : __int32
// {
//   k_iSteamAppsCallbacks = 0x3E8,
// };

// /* 479 */
// enum $3E871D75ADD7139950BE5FE80C2BA256 : __int32
// {
//   k_iSteamUserStatsCallbacks = 0x44C,
// };

// /* 480 */
// enum $C72C972B8B1A290F8A44CD486DAC64EE : __int32
// {
//   k_iSteamNetworkingCallbacks = 0x4B0,
// };

// /* 481 */
// enum $C62D1519FB2A6CD61FC1F0129284EE42 : __int32
// {
//   k_cchStatNameMax = 0x80,
// };

// /* 482 */
// enum EP2PSend : __int32
// {
//   k_EP2PSendUnreliable = 0x0,
//   k_EP2PSendUnreliableNoDelay = 0x1,
//   k_EP2PSendReliable = 0x2,
//   k_EP2PSendReliableWithBuffering = 0x3,
// };

// /* 483 */
// enum EChatSteamIDInstanceFlags : __int32
// {
//   k_EChatAccountInstanceMask = 0xFFF,
//   k_EChatInstanceFlagClan = 0x80000,
//   k_EChatInstanceFlagLobby = 0x40000,
//   k_EChatInstanceFlagMMSLobby = 0x20000,
// };

// /* 484 */
// enum ESNetSocketConnectionType : __int32
// {
//   k_ESNetSocketConnectionTypeNotConnected = 0x0,
//   k_ESNetSocketConnectionTypeUDP = 0x1,
//   k_ESNetSocketConnectionTypeUDPRelay = 0x2,
// };

// /* 485 */
// enum CCallbackBase::<unnamed_tag> : __int32
// {
//   k_ECallbackFlagsRegistered = 0x1,
//   k_ECallbackFlagsGameServer = 0x2,
// };

// /* 486 */
// enum EMarketingMessageFlags : __int32
// {
//   k_EMarketingMessageFlagsNone = 0x0,
//   k_EMarketingMessageFlagsHighPriority = 0x1,
//   k_EMarketingMessageFlagsPlatformWindows = 0x2,
//   k_EMarketingMessageFlagsPlatformMac = 0x4,
//   k_EMarketingMessageFlagsPlatformRestrictions = 0x6,
// };

// /* 487 */
// enum P2PSessionRequest_t::<unnamed_tag> : __int32
// {
//   k_iCallback = 0x4B2,
// };

// /* 488 */
// enum CGameID::EGameIDType : __int32
// {
//   k_EGameIDTypeApp = 0x0,
//   k_EGameIDTypeGameMod = 0x1,
//   k_EGameIDTypeShortcut = 0x2,
//   k_EGameIDTypeP2P = 0x3,
// };

// /* 489 */
// enum EServerMode : __int32
// {
//   eServerModeInvalid = 0x0,
//   eServerModeNoAuthentication = 0x1,
//   eServerModeAuthentication = 0x2,
//   eServerModeAuthenticationAndSecure = 0x3,
// };

// /* 490 */
// enum $C09254EEEFA8D6FF53FD016EA4835A8F : __int32
// {
//   k_iSteamGameServerCallbacks = 0xC8,
// };

// /* 491 */
// enum $049F1E54759ED4A87BCBC269683A0A84 : __int32
// {
//   k_iSteamGameServerStatsCallbacks = 0x708,
// };

// /* 492 */
// enum EDenyReason : __int32
// {
//   k_EDenyInvalid = 0x0,
//   k_EDenyInvalidVersion = 0x1,
//   k_EDenyGeneric = 0x2,
//   k_EDenyNotLoggedOn = 0x3,
//   k_EDenyNoLicense = 0x4,
//   k_EDenyCheater = 0x5,
//   k_EDenyLoggedInElseWhere = 0x6,
//   k_EDenyUnknownText = 0x7,
//   k_EDenyIncompatibleAnticheat = 0x8,
//   k_EDenyMemoryCorruption = 0x9,
//   k_EDenyIncompatibleSoftware = 0xA,
//   k_EDenySteamConnectionLost = 0xB,
//   k_EDenySteamConnectionError = 0xC,
//   k_EDenySteamResponseTimedOut = 0xD,
//   k_EDenySteamValidationStalled = 0xE,
//   k_EDenySteamOwnerLeftGuestUser = 0xF,
// };

// /* 493 */
// enum EUserHasLicenseForAppResult : __int32
// {
//   k_EUserHasLicenseResultHasLicense = 0x0,
//   k_EUserHasLicenseResultDoesNotHaveLicense = 0x1,
//   k_EUserHasLicenseResultNoAuth = 0x2,
// };

// /* 494 */
// typedef P2PSessionRequest_t::<unnamed_tag> GSClientApprove_t::<unnamed_tag>;

// /* 495 */
// typedef P2PSessionRequest_t::<unnamed_tag> GSPolicyResponse_t::<unnamed_tag>;

// /* 496 */
// typedef P2PSessionRequest_t::<unnamed_tag> SteamServersDisconnected_t::<unnamed_tag>;

// /* 497 */
// enum EResult : __int32
// {
//   k_EResultOK = 0x1,
//   k_EResultFail = 0x2,
//   k_EResultNoConnection = 0x3,
//   k_EResultInvalidPassword = 0x5,
//   k_EResultLoggedInElsewhere = 0x6,
//   k_EResultInvalidProtocolVer = 0x7,
//   k_EResultInvalidParam = 0x8,
//   k_EResultFileNotFound = 0x9,
//   k_EResultBusy = 0xA,
//   k_EResultInvalidState = 0xB,
//   k_EResultInvalidName = 0xC,
//   k_EResultInvalidEmail = 0xD,
//   k_EResultDuplicateName = 0xE,
//   k_EResultAccessDenied = 0xF,
//   k_EResultTimeout = 0x10,
//   k_EResultBanned = 0x11,
//   k_EResultAccountNotFound = 0x12,
//   k_EResultInvalidSteamID = 0x13,
//   k_EResultServiceUnavailable = 0x14,
//   k_EResultNotLoggedOn = 0x15,
//   k_EResultPending = 0x16,
//   k_EResultEncryptionFailure = 0x17,
//   k_EResultInsufficientPrivilege = 0x18,
//   k_EResultLimitExceeded = 0x19,
//   k_EResultRevoked = 0x1A,
//   k_EResultExpired = 0x1B,
//   k_EResultAlreadyRedeemed = 0x1C,
//   k_EResultDuplicateRequest = 0x1D,
//   k_EResultAlreadyOwned = 0x1E,
//   k_EResultIPNotFound = 0x1F,
//   k_EResultPersistFailed = 0x20,
//   k_EResultLockingFailed = 0x21,
//   k_EResultLogonSessionReplaced = 0x22,
//   k_EResultConnectFailed = 0x23,
//   k_EResultHandshakeFailed = 0x24,
//   k_EResultIOFailure = 0x25,
//   k_EResultRemoteDisconnect = 0x26,
//   k_EResultShoppingCartNotFound = 0x27,
//   k_EResultBlocked = 0x28,
//   k_EResultIgnored = 0x29,
//   k_EResultNoMatch = 0x2A,
//   k_EResultAccountDisabled = 0x2B,
//   k_EResultServiceReadOnly = 0x2C,
//   k_EResultAccountNotFeatured = 0x2D,
//   k_EResultAdministratorOK = 0x2E,
//   k_EResultContentVersion = 0x2F,
//   k_EResultTryAnotherCM = 0x30,
//   k_EResultPasswordRequiredToKickSession = 0x31,
//   k_EResultAlreadyLoggedInElsewhere = 0x32,
//   k_EResultSuspended = 0x33,
//   k_EResultCancelled = 0x34,
//   k_EResultDataCorruption = 0x35,
//   k_EResultDiskFull = 0x36,
//   k_EResultRemoteCallFailed = 0x37,
//   k_EResultPasswordUnset = 0x38,
// };

// /* 498 */
// typedef P2PSessionRequest_t::<unnamed_tag> GSClientDeny_t::<unnamed_tag>;

// /* 499 */
// typedef P2PSessionRequest_t::<unnamed_tag> GSClientKick_t::<unnamed_tag>;

// /* 500 */
// enum EPersonaState : __int32
// {
//   k_EPersonaStateOffline = 0x0,
//   k_EPersonaStateOnline = 0x1,
//   k_EPersonaStateBusy = 0x2,
//   k_EPersonaStateAway = 0x3,
//   k_EPersonaStateSnooze = 0x4,
//   k_EPersonaStateMax = 0x5,
// };

// /* 501 */
// enum EFriendRelationship : __int32
// {
//   k_EFriendRelationshipNone = 0x0,
//   k_EFriendRelationshipBlocked = 0x1,
//   k_EFriendRelationshipRequestRecipient = 0x2,
//   k_EFriendRelationshipFriend = 0x3,
//   k_EFriendRelationshipRequestInitiator = 0x4,
//   k_EFriendRelationshipIgnored = 0x5,
//   k_EFriendRelationshipIgnoredFriend = 0x6,
// };

// /* 502 */
// typedef P2PSessionRequest_t::<unnamed_tag> SteamServersConnected_t::<unnamed_tag>;

// /* 503 */
// enum EBeginAuthSessionResult : __int32
// {
//   k_EBeginAuthSessionResultOK = 0x0,
//   k_EBeginAuthSessionResultInvalidTicket = 0x1,
//   k_EBeginAuthSessionResultDuplicateRequest = 0x2,
//   k_EBeginAuthSessionResultInvalidVersion = 0x3,
//   k_EBeginAuthSessionResultGameMismatch = 0x4,
//   k_EBeginAuthSessionResultExpiredTicket = 0x5,
// };

// /* 504 */
// enum EVoiceResult : __int32
// {
//   k_EVoiceResultOK = 0x0,
//   k_EVoiceResultNotInitialized = 0x1,
//   k_EVoiceResultNotRecording = 0x2,
//   k_EVoiceResultNoData = 0x3,
//   k_EVoiceResultBufferTooSmall = 0x4,
//   k_EVoiceResultDataCorrupted = 0x5,
// };

// /* 505 */
// typedef P2PSessionRequest_t::<unnamed_tag> EncryptedAppTicketResponse_t::<unnamed_tag>;

// /* 506 */
// typedef P2PSessionRequest_t::<unnamed_tag> UserStatsReceived_t::<unnamed_tag>;

// /* 507 */
// enum EAchievements : __int32
// {
//   ACH_MP_FILM_CREATED = 0x0,
//   ACH_MP_WAGER_MATCH = 0x1,
//   ACH_MP_PLAY = 0x2,
// };

// /* 508 */
// enum ENotificationPosition : __int32
// {
//   k_EPositionTopLeft = 0x0,
//   k_EPositionTopRight = 0x1,
//   k_EPositionBottomLeft = 0x2,
//   k_EPositionBottomRight = 0x3,
// };

// /* 509 */
// enum ESteamAPICallFailure : __int32
// {
//   k_ESteamAPICallFailureNone = 0xFFFFFFFF,
//   k_ESteamAPICallFailureSteamGone = 0x0,
//   k_ESteamAPICallFailureNetworkFailure = 0x1,
//   k_ESteamAPICallFailureInvalidHandle = 0x2,
//   k_ESteamAPICallFailureMismatchedCallback = 0x3,
// };

// /* 510 */
// typedef P2PSessionRequest_t::<unnamed_tag> UserAchievementStored_t::<unnamed_tag>;

// /* 511 */
// typedef P2PSessionRequest_t::<unnamed_tag> UserStatsStored_t::<unnamed_tag>;

// /* 512 */
// enum ELeaderboardSortMethod : __int32
// {
//   k_ELeaderboardSortMethodNone = 0x0,
//   k_ELeaderboardSortMethodAscending = 0x1,
//   k_ELeaderboardSortMethodDescending = 0x2,
// };

// /* 513 */
// enum ELeaderboardDisplayType : __int32
// {
//   k_ELeaderboardDisplayTypeNone = 0x0,
//   k_ELeaderboardDisplayTypeNumeric = 0x1,
//   k_ELeaderboardDisplayTypeTimeSeconds = 0x2,
//   k_ELeaderboardDisplayTypeTimeMilliSeconds = 0x3,
// };

// /* 514 */
// enum ELeaderboardDataRequest : __int32
// {
//   k_ELeaderboardDataRequestGlobal = 0x0,
//   k_ELeaderboardDataRequestGlobalAroundUser = 0x1,
//   k_ELeaderboardDataRequestFriends = 0x2,
// };

// /* 515 */
// enum ELeaderboardUploadScoreMethod : __int32
// {
//   k_ELeaderboardUploadScoreMethodNone = 0x0,
//   k_ELeaderboardUploadScoreMethodKeepBest = 0x1,
//   k_ELeaderboardUploadScoreMethodForceUpdate = 0x2,
// };

// /* 516 */
// enum EMatchMakingServerResponse : __int32
// {
//   eServerResponded = 0x0,
//   eServerFailedToRespond = 0x1,
//   eNoServersListedOnMasterServer = 0x2,
// };

// /* 517 */
// enum ELobbyComparison : __int32
// {
//   k_ELobbyComparisonEqualToOrLessThan = 0xFFFFFFFE,
//   k_ELobbyComparisonLessThan = 0xFFFFFFFF,
//   k_ELobbyComparisonEqual = 0x0,
//   k_ELobbyComparisonGreaterThan = 0x1,
//   k_ELobbyComparisonEqualToOrGreaterThan = 0x2,
//   k_ELobbyComparisonNotEqual = 0x3,
// };

// /* 518 */
// enum ELobbyDistanceFilter : __int32
// {
//   k_ELobbyDistanceFilterClose = 0x0,
//   k_ELobbyDistanceFilterDefault = 0x1,
//   k_ELobbyDistanceFilterFar = 0x2,
//   k_ELobbyDistanceFilterWorldwide = 0x3,
// };

// /* 519 */
// enum ELobbyType : __int32
// {
//   k_ELobbyTypeFriendsOnly = 0x1,
//   k_ELobbyTypePublic = 0x2,
//   k_ELobbyTypeInvisible = 0x3,
// };

// /* 520 */
// enum EChatEntryType : __int32
// {
//   k_EChatEntryTypeInvalid = 0x0,
//   k_EChatEntryTypeChatMsg = 0x1,
//   k_EChatEntryTypeTyping = 0x2,
//   k_EChatEntryTypeInviteGame = 0x3,
//   k_EChatEntryTypeEmote = 0x4,
//   k_EChatEntryTypeLobbyGameStart = 0x5,
//   k_EChatEntryTypeLeftConversation = 0x6,
// };

// /* 521 */
// enum rankTableColumns_t : __int32
// {
//   MP_RANKTABLE_RANKID = 0x0,
//   MP_RANKTABLE_RANK = 0x1,
//   MP_RANKTABLE_MINXP = 0x2,
//   MP_RANKTABLE_XPTONEXT = 0x3,
//   MP_RANKTABLE_SHORTRANK = 0x4,
//   MP_RANKTABLE_FULLRANK = 0x5,
//   MP_RANKTABLE_ICON = 0x6,
//   MP_RANKTABLE_MAXXP = 0x7,
//   MP_RANKTABLE_WEAPUNLOCK = 0x8,
//   MP_RANKTABLE_PERKUNLOCK = 0x9,
//   MP_RANKTABLE_CHALLENGE = 0xA,
//   MP_RANKTABLE_CAMO = 0xB,
//   MP_RANKTABLE_ATTACHMENT = 0xC,
//   MP_RANKTABLE_LEVEL = 0xD,
//   MP_RANKTABLE_DISPLAYLEVEL = 0xE,
//   MP_RANKTABLE_FEATURE = 0xF,
//   MP_RANKTABLE_INGAMERANK = 0x10,
//   MP_RANKTABLE_CP = 0x11,
//   MP_RANKTABLE_COUNT = 0x12,
// };

// /* 522 */
// enum statsMilestoneTypes_t : __int32
// {
//   MILESTONE_GLOBAL = 0x0,
//   MILESTONE_WEAPON = 0x1,
//   MILESTONE_MAP = 0x2,
//   MILESTONE_GAMEMODE = 0x3,
//   MILESTONE_GROUP = 0x4,
//   MILESTONE_ATTACHMENTS = 0x5,
//   MILESTONE_KILLSTREAKS = 0x6,
//   MILESTONE_GRENADES = 0x7,
//   MILESTONE_COUNT = 0x8,
//   MILESTONE_INVALID = 0xFFFFFFFF,
// };

// /* 523 */
// enum sortedChallengeParams_t : __int32
// {
//   CHALLENGE_PARAM_TYPE = 0x0,
//   CHALLENGE_PARAM_TIER = 0x1,
//   CHALLENGE_PARAM_NAME = 0x2,
//   CHALLENGE_PARAM_ITEM_INDEX = 0x3,
//   CHALLENGE_PARAM_IS_ITEM_CLASSIFIED = 0x4,
//   CHALLENGE_PARAM_NUM_TO_TARGET_VALUE = 0x5,
//   CHALLENGE_PARAM_TARGETVALUE = 0x6,
//   CHALLENGE_PARAM_CURRENTVALUE = 0x7,
//   CHALLENGE_PARAM_PREVTARGET = 0x8,
//   CHALLENGE_PARAM_XP_REWARD = 0x9,
//   CHALLENGE_PARAM_CP_REWARD = 0xA,
//   CHALLENGE_PARAM_INVALID = 0xFFFFFFFF,
// };

// /* 524 */
// enum $0941693E42A7540186447D06D350A50B : __int32
// {
//   PERSONALBEST_STATNAME = 0x0,
//   PERSONALBEST_MINDELTA = 0x1,
//   PERSONALBEST_MULTIPLIER = 0x2,
// };

 /* 525 */
enum DvarSetSource : __int32
{
  DVAR_SOURCE_INTERNAL = 0x0,
  DVAR_SOURCE_EXTERNAL = 0x1,
  DVAR_SOURCE_SCRIPT = 0x2,
  DVAR_SOURCE_DEVGUI = 0x3,
};

// /* 526 */
// enum milestoneTableColumns_t : __int32
// {
//   MILESTONE_COLUMN_INDEX = 0x0,
//   MILESTONE_COLUMN_TIERID = 0x1,
//   MILESTONE_COLUMN_TARGETVALUE = 0x2,
//   MILESTONE_COLUMN_STATTYPE = 0x3,
//   MILESTONE_COLUMN_STATNAME = 0x4,
//   MILESTONE_COLUMN_STRING = 0x5,
//   MILESTONE_COLUMN_XPEARNED = 0x6,
//   MILESTONE_COLUMN_CPEARNED = 0x7,
//   MILESTONE_COLUMN_EXCLUDE = 0x8,
//   MILESTONE_COLUMN_UNLOCKITEM = 0x9,
//   MILESTONE_COLUMN_PERKNAME = 0xA,
// };

// /* 527 */
// enum challengeSortOrder_e : __int32
// {
//   SORTORDER_FIRST = 0x0,
//   SORTORDER_NEAREST = 0x0,
//   SORTORDER_REWARD = 0x1,
//   SORTORDER_PERCENTAGECOMPLETED = 0x2,
//   SORTORDER_DEFAULT = 0x3,
//   SORTORDER_COUNT = 0x4,
//   SORTORDER_INVALID = 0xFFFFFFFF,
// };

// /* 528 */
// enum $9153C48B62D2F1567F72E5097CDC8EF5 : __int32
// {
//   DDL_PERMISSIONS_CLIENTONLY = 0x1,
//   DDL_PERMISSIONS_SERVERONLY = 0x2,
//   DDL_PERMISSIONS_BOTH = 0x3,
// };

// /* 529 */
// enum ContractStatus_t : __int32
// {
//   CONTRACT_EMPTY = 0x0,
//   CONTRACT_IN_PROGRESS = 0x1,
//   CONTRACT_COMPLETE = 0x2,
//   CONTRACT_EXPIRED = 0x3,
// };

// /* 530 */
// enum pointsSpent_t : __int32
// {
//   POINTSSPENT_IGNORE = 0x0,
//   POINTSSPENT_EMBLEM_LAYER = 0x1,
//   POINTSSPENT_EMBLEM_ICON = 0x2,
//   POINTSSPENT_CONTRACT = 0x3,
//   POINTSSPENT_UNLOCKABLE_CLANTAG = 0x4,
//   POINTSSPENT_UNLOCKABLE_ITEM = 0x5,
//   POINTSSPENT_UNLOCKABLE_SELL = 0x6,
//   POINTSSPENT_UNLOCKABLE_ATTACHMENT = 0x7,
//   POINTSSPENT_UNLOCKABLE_ATTACHMENT_POINT = 0x8,
//   POINTSSPENT_UNLOCKABLE_ATTACHMENT_OPTION = 0x9,
//   POINTSSPENT_ESCROW = 0xA,
//   POINTSSPENT_GUEST_SIGNIN = 0xB,
// };

// /* 531 */
// enum sessionTaskEnum : __int32
// {
//   TASK_JOININGSESSION = 0x1,
//   TASK_CREATINGHOSTSESSION = 0x2,
//   TASK_DELETINGHOSTSESSION = 0x3,
//   TASK_FINDINGSESSIONNOPARAMS = 0x4,
//   TASK_STARTINGGAMESESSION = 0x5,
//   TASK_MODIFYINGSESSION = 0x6,
//   TASK_LEAVINGSESSION = 0x7,
//   NUM_SESSION_TASKS = 0x8,
// };

// /* 532 */
// enum DWNetStatus : __int32
// {
//   DW_NET_ERROR_START_FAILED = 0x0,
//   DW_NET_ERROR_NO_LOCAL_IP = 0x1,
//   DW_NET_NOT_STARTED = 0x2,
//   DW_NET_STARTING_LAN = 0x3,
//   DW_NET_STARTED_LAN = 0x4,
//   DW_NET_STARTING_ONLINE = 0x5,
//   DW_NET_STARTED_ONLINE = 0x6,
// };

// /* 533 */
// enum $304476477BC488599F71EBD3D34EB3CC : __int32
// {
//   PCACHE_COMPONENT_PUBLIC_PROFILE = 0x0,
//   PCACHE_COMPONENT_PLAYER_EMBLEM = 0x1,
//   PCACHE_NUM_COMPONENTS = 0x2,
// };

// /* 534 */
// enum TickerMessageTokenType : __int32
// {
//   TOKEN_TYPE_LOC_STRING = 0x0,
//   TOKEN_TYPE_NUMBER = 0x1,
//   TOKEN_TYPE_CONTRACT_INDEX = 0x2,
// };

// /* 535 */
// enum $878ED27362DF96AA8A7FECA7C3B7F3F6 : __int32
// {
//   GCOUNTERS_COL_ID = 0x0,
//   GCOUNTERS_COL_WEIGHT = 0x1,
//   GCOUNTERS_COL_STRINGREF = 0x2,
//   GCOUNTERS_COL_EXPRESSION = 0x3,
// };

// /* 536 */
// enum LbUICol : __int32
// {
//   LB_UICOL_RANK = 0x0,
//   LB_UICOL_RANKICON = 0x1,
//   LB_UICOL_RANKLEVEL = 0x2,
//   LB_UICOL_GAMERTAG = 0x3,
//   LB_UICOL_SCORE_PER_MINUTE = 0x4,
//   LB_UICOL_LBTYPE_SPECIFIC_STAT_START = 0x5,
// };

// /* 537 */
// enum LbTaskEnum : __int32
// {
//   LB_TASK_READLB = 0x0,
//   LB_TASK_READ_WEEKLY_HIDDEN_LB = 0x1,
//   LB_TASK_READ_PRESTIGE_WEEKLY_HIDDEN_LB = 0x2,
//   LB_TASK_READ_MONTHLY_HIDDEN_LB = 0x3,
//   LB_TASK_READ_PRESTIGE_MONTHLY_HIDDEN_LB = 0x4,
//   LB_TASK_GETFRIENDS = 0x5,
//   LB_TASK_AM_UPLOADSTATS = 0x6,
//   LB_TASK_UPLOADSTATS = 0x7,
//   LB_TASK_UPLOADSTATS_WEEKLY_LB = 0x8,
//   LB_TASK_UPLOADSTATS_PRESTIGE_WEEKLY_LB = 0x9,
//   LB_TASK_UPLOADSTATS_MONTHLY_LB = 0xA,
//   LB_TASK_UPLOADSTATS_PRESTIGE_MONTHLY_LB = 0xB,
//   LB_TASK_RESOLVEESCROW = 0xC,
//   LB_TASK_RETRIEVEESCROWBALANCE = 0xD,
//   LB_TASK_CLEARESCROW = 0xE,
//   LB_TASK_INCREMENTESCROW = 0xF,
//   LB_TASK_READLB_FOR_MATCHES_PLAYED = 0x10,
//   LB_TASK_COUNT = 0x11,
// };

// /* 538 */
// enum servertype_t : __int32
// {
//   SERVER_GROUP_RANKED = 0x1EA,
//   SERVER_GROUP_UNRANKED = 0x1EB,
//   SERVER_GROUP_WAGER = 0x1EC,
// };

// /* 539 */
// enum EFriendFlags : __int32
// {
//   k_EFriendFlagNone = 0x0,
//   k_EFriendFlagBlocked = 0x1,
//   k_EFriendFlagFriendshipRequested = 0x2,
//   k_EFriendFlagImmediate = 0x4,
//   k_EFriendFlagClanMember = 0x8,
//   k_EFriendFlagOnGameServer = 0x10,
//   k_EFriendFlagRequestingFriendship = 0x80,
//   k_EFriendFlagRequestingInfo = 0x100,
//   k_EFriendFlagIgnored = 0x200,
//   k_EFriendFlagIgnoredFriend = 0x400,
//   k_EFriendFlagAll = 0xFFFF,
// };

// /* 540 */
// enum LiveSteam_PersonaState : __int32
// {
//   LIVE_STEAM_PERSONA_STATE_OFFLINE = 0x0,
//   LIVE_STEAM_PERSONA_STATE_ONLINE = 0x1,
//   LIVE_STEAM_PERSONA_STATE_BUSY = 0x2,
//   LIVE_STEAM_PERSONA_STATE_SNOOZE = 0x3,
// };

// /* 541 */
// enum combatRecordRecentGamesFeederColumns_t : __int32
// {
//   CR_RECENT_GAMES_COLUMN_MAP = 0x0,
//   CR_RECENT_GAMES_COLUMN_GAMEMODE = 0x1,
//   CR_RECENT_GAMES_COLUMN_DATE = 0x2,
//   CR_RECENT_GAMES_COLUMN_TIME = 0x3,
//   CR_RECENT_GAMES_COLUMN_COUNT = 0x4,
// };

// /* 542 */
// enum $0AD694D79AE1ED2E6490132FCE2C94E1 : __int32
// {
//   FILESHARE_SEARCH_ROW_INVALID = 0x0,
//   FILESHARE_SEARCH_ROW_SORTBY = 0x1,
//   FILESHARE_SEARCH_ROW_MAP = 0x2,
//   FILESHARE_SEARCH_ROW_GAMETYPE = 0x3,
//   FILESHARE_SEARCH_ROW_AGE = 0x4,
//   FILESHARE_SEARCH_ROW_TAG = 0x5,
//   FILESHARE_SEARCH_ROW_PLAYER = 0x6,
//   FILESHARE_SEARCH_ROW_MAX = 0x7,
// };

// /* 543 */
// enum $30724E671664AE8FAA02080EB495839F : __int32
// {
//   FILESHARE_SLOT_A_BG = 0x0,
//   FILESHARE_SLOT_B_BG = 0x1,
//   FILESHARE_SLOT_C_BG = 0x2,
//   FILESHARE_SLOT_A_MAINIMAGE = 0x3,
//   FILESHARE_SLOT_B_MAINIMAGE = 0x4,
//   FILESHARE_SLOT_C_MAINIMAGE = 0x5,
//   FILESHARE_SLOT_A_TYPEOVERLAY = 0x6,
//   FILESHARE_SLOT_B_TYPEOVERLAY = 0x7,
//   FILESHARE_SLOT_C_TYPEOVERLAY = 0x8,
//   FILESHARE_SLOT_A_SLOTNUMBER = 0x9,
//   FILESHARE_SLOT_B_SLOTNUMBER = 0xA,
//   FILESHARE_SLOT_C_SLOTNUMBER = 0xB,
// };

// /* 544 */
// enum $015D5F2D22291B323561D937382C32E1 : __int32
// {
//   FILESHARE_SLOT_INGAME_SLOTNUM = 0x0,
//   FILESHARE_SLOT_INGAME_ICON = 0x1,
//   FILESHARE_SLOT_INGAME_TEXT = 0x2,
// };

// /* 545 */
// enum fileSharePooledFileContext_t : __int32
// {
//   FILESHARE_POOLEDFILEDETAILS_INVALID = 0x0,
//   FILESHARE_POOLEDFILEDETAILS_SELF = 0x1,
//   FILESHARE_POOLEDFILEDETAILS_FRIEND = 0x2,
// };

// /* 546 */
// enum fileShareInfoLocation : __int32
// {
//   FILESHARE_INFOLOCATION_INVALID = 0x0,
//   FILESHARE_INFOLOCATION_SEARCHRESULTS = 0x1,
//   FILESHARE_INFOLOCATION_MYFILESHARE = 0x2,
//   FILESHARE_INFOLOCATION_MYFILESHARE_INGAME = 0x3,
//   FILESHARE_INFOLOCATION_OTHERFILESHARE = 0x4,
// };

// /* 547 */
// enum fileShareKeyIndex : __int32
// {
//   FILESHARE_KEY_SLOT = 0x0,
//   FILESHARE_KEY_INGAMESLOT = 0x1,
//   FILESHARE_KEY_SLOTOCCUPIED = 0x2,
//   FILESHARE_KEY_DATETIME = 0x3,
//   FILESHARE_KEY_LENGTH = 0x4,
//   FILESHARE_KEY_SIZE = 0x5,
//   FILESHARE_KEY_AUTHOR = 0x6,
//   FILESHARE_KEY_MAP = 0x7,
//   FILESHARE_KEY_MAPNAME = 0x8,
//   FILESHARE_KEY_GAMETYPE = 0x9,
//   FILESHARE_KEY_GAMETYPENAME = 0xA,
//   FILESHARE_KEY_FILEID = 0xB,
//   FILESHARE_KEY_FILESIZE = 0xC,
//   FILESHARE_KEY_FILETYPE = 0xD,
//   FILESHARE_KEY_FILENAME = 0xE,
//   FILESHARE_KEY_HASSUMMARY = 0xF,
//   FILESHARE_KEY_GAMETYPEANDMAPNAME = 0x10,
//   FILESHARE_KEY_RATING = 0x11,
//   FILESHARE_KEY_TYPEICONNAME = 0x12,
//   FILESHARE_KEY_SELECTEDIMAGENAME = 0x13,
//   FILESHARE_KEY_NAME = 0x14,
//   FILESHARE_KEY_ISMODIFIEDNAME = 0x15,
//   FILESHARE_KEY_DESCRIPTION = 0x16,
//   FILESHARE_KEY_ISMODIFIEDDESCRIPTION = 0x17,
//   FILESHARE_KEY_USERTAG = 0x18,
//   FILESHARE_KEY_USERTAGINDEX = 0x19,
//   FILESHARE_KEY_GAMETYPEIMAGE = 0x1A,
//   FILESHARE_KEY_TOTALVOTES = 0x1B,
//   FILESHARE_KEY_ISSUMMARYCACHED = 0x1C,
//   FILESHARE_KEY_COUNT = 0x1D,
// };

// /* 548 */
// enum fileShareMetaFields : __int32
// {
//   FILESHARE_META_AUTHORNAME = 0x0,
//   FILESHARE_META_AUTHORXUID = 0x1,
//   FILESHARE_META_CREATETIME = 0x2,
//   FILESHARE_META_LENGTH = 0x3,
//   FILESHARE_META_NAME = 0x4,
//   FILESHARE_META_DESCRIPTION = 0x5,
//   FILESHARE_META_ISMODIFIEDNAME = 0x6,
//   FILESHARE_META_ISMODIFIEDDESCRIPTION = 0x7,
// };

// /* 549 */
// enum expirationType : __int32
// {
//   EXPIRATION_TYPE_PLAYTIME = 0x0,
// };

// /* 550 */
// enum parseBlockTypes : __int32
// {
//   PARSE_UNKNOWN = 0x0,
//   PARSE_CONTRACT = 0x1,
// };

 /* 551 */
enum hitLocation_t : __int32
{
  HITLOC_NONE = 0x0,
  HITLOC_HELMET = 0x1,
  HITLOC_HEAD = 0x2,
  HITLOC_NECK = 0x3,
  HITLOC_TORSO_UPR = 0x4,
  HITLOC_TORSO_LWR = 0x5,
  HITLOC_R_ARM_UPR = 0x6,
  HITLOC_L_ARM_UPR = 0x7,
  HITLOC_R_ARM_LWR = 0x8,
  HITLOC_L_ARM_LWR = 0x9,
  HITLOC_R_HAND = 0xA,
  HITLOC_L_HAND = 0xB,
  HITLOC_R_LEG_UPR = 0xC,
  HITLOC_L_LEG_UPR = 0xD,
  HITLOC_R_LEG_LWR = 0xE,
  HITLOC_L_LEG_LWR = 0xF,
  HITLOC_R_FOOT = 0x10,
  HITLOC_L_FOOT = 0x11,
  HITLOC_GUN = 0x12,
  HITLOC_NUM = 0x13,
};

// /* 552 */
// enum sortedItemParams_t : __int32
// {
//   ITEM_INDEX = 0x0,
//   PARAM1 = 0x1,
//   PARAM2 = 0x2,
//   PARAM3 = 0x3,
//   SORT_KEY = 0x4,
//   SORTEDITEM_PARAM_COUNT = 0x5,
//   SORTEDITEM_PARAM_INVALID = 0xFFFFFFFF,
// };

// /* 553 */
// enum itemSortingCriteria_t : __int32
// {
//   CRITERION_NULL = 0xFFFFFFFF,
//   PERSONAL_BESTS = 0x0,
//   RECENT_PERFORMANCE = 0x1,
//   FAVORITE_WEAPON = 0x2,
//   WEAPON_STATS = 0x3,
//   WEAPON_ACCURACY = 0x4,
//   WEAPON_HEADSHOTS = 0x5,
//   WEAPON_HITLOCATION_HEATMAP = 0x6,
//   EQUIPMENT_KILLS = 0x7,
//   EQUIPMENT_USAGE = 0x8,
//   TIME_SPENT_USING_ITEM = 0x9,
//   MATCH_TYPES = 0xA,
//   WAGER_MATCH_TYPES = 0xB,
//   MATCH_PERFORMANCE = 0xC,
//   RECENT_EARNINGS = 0xD,
//   KILLSTREAKS_FAVORITES = 0xE,
//   KILLSTREAKS_CALLED = 0xF,
//   KILLSTREAKS_KILLS = 0x10,
// };

// /* 554 */
// enum sortedStatLoadoutSlots_t : __int32
// {
//   SLOT_NULL = 0xFFFFFFFF,
//   PRIMARY_WEAPON = 0x0,
//   SECONDARY_WEAPON = 0x1,
//   PRIMARY_GRENADE = 0x2,
//   SPECIAL_GRENADE = 0x3,
//   EQUIPMENT = 0x4,
//   FACEPAINT_PATTERN = 0x5,
//   BODY = 0x6,
//   SPECIALTY1 = 0x7,
//   SPECIALTY2 = 0x8,
//   SORTEDSTAT_LOADOUTSLOT_COUNT = 0x9,
// };

// /* 555 */
// enum combatRecordViews_t : __int32
// {
//   CR_VIEW_CAREER_SUMMARY = 0x0,
//   CR_VIEW_CAREER_RECENT_PERFORMANCE = 0x1,
//   CR_VIEW_CAREER_PERSONAL_BESTS = 0x2,
//   CR_VIEW_WEAPONS_FAV_WEAPON = 0x3,
//   CR_VIEW_WEAPONS_HIT_LOCATION_HEATMAP = 0x4,
//   CR_VIEW_WEAPONS_KDR = 0x5,
//   CR_VIEW_WEAPONS_ACCURACY = 0x6,
//   CR_VIEW_WEAPONS_KILLS = 0x7,
//   CR_VIEW_WEAPONS_DEATHS = 0x8,
//   CR_VIEW_WEAPONS_HEADSHOTS = 0x9,
//   CR_VIEW_WEAPONS_TIMES_KILLED_BY = 0xA,
//   CR_VIEW_WEAPONS_EQUIPMENT_KILLS = 0xB,
//   CR_VIEW_WEAPONS_EQUIPMENT_TIMES_KILLED_BY = 0xC,
//   CR_VIEW_WEAPONS_EQUIPMENT_USAGE = 0xD,
//   CR_VIEW_MATCHES_PERFORMANCE = 0xE,
//   CR_VIEW_MATCHES_HEAT_MAP = 0xF,
//   CR_VIEW_MATCHES_RECENT_EARNINGS = 0x10,
//   CR_VIEW_CONTRACTS_INFO = 0x11,
//   CR_VIEW_KILLSTREAKS_FAVORITES = 0x12,
//   CR_VIEW_KILLSTREAKS_CALLED = 0x13,
//   CR_VIEW_KILLSTREAKS_KILLS = 0x14,
//   CR_VIEW_KILLSTREAKS_TIMES_KILLED_BY = 0x15,
//   CR_VIEW_COUNT = 0x16,
// };

// /* 556 */
// enum snd_speaker_flag : __int32
// {
//   SND_SPEAKER_FLAG_LEFT = 0x1,
//   SND_SPEAKER_FLAG_RIGHT = 0x2,
//   SND_SPEAKER_FLAG_CENTER = 0x4,
//   SND_SPEAKER_FLAG_LFE = 0x8,
//   SND_SPEAKER_FLAG_LEFT_SURROUND = 0x10,
//   SND_SPEAKER_FLAG_RIGHT_SURROUND = 0x20,
//   SND_SPEAKER_FLAG_LEFT_REAR_SURROUND = 0x40,
//   SND_SPEAKER_FLAG_RIGHT_REAR_SURROUND = 0x80,
// };

 /* 557 */
enum snd_asset_format : __int32
{
  SND_ASSET_FORMAT_PCMS16 = 0x0,
  SND_ASSET_FORMAT_PCMS24 = 0x1,
  SND_ASSET_FORMAT_PCMS32 = 0x2,
  SND_ASSET_FORMAT_IEEE = 0x3,
  SND_ASSET_FORMAT_XMA4 = 0x4,
  SND_ASSET_FORMAT_MP3 = 0x5,
  SND_ASSET_FORMAT_MSADPCM = 0x6,
  SND_ASSET_FORMAT_WMA = 0x7,
};

/* 558 */
enum snd_asset_flags : __int32
{
  SND_ASSET_FLAG_DEFAULT = 0x0,
  SND_ASSET_FLAG_LOOPING = 0x1,
  SND_ASSET_FLAG_PAD_LOOP_BUFFER = 0x2,
};

// /* 559 */
// enum snd_alias_type_t : __int32
// {
//   SAT_UNKNOWN = 0x0,
//   SAT_LOADED = 0x1,
//   SAT_STREAMED = 0x2,
//   SAT_PRIMED = 0x3,
//   SAT_COUNT = 0x4,
// };

// /* 560 */
// enum snd_flux_type_t : __int32
// {
//   SND_FLUX_TYPE_NONE = 0x0,
//   SND_FLUX_TYPE_LEFT_OF_PLAYER = 0x1,
//   SND_FLUX_TYPE_CENTER_OF_PLAYER = 0x2,
//   SND_FLUX_TYPE_RIGHT_OF_PLAYER = 0x3,
//   SND_FLUX_TYPE_RANDOM_PLAYER = 0x4,
//   SND_FLUX_TYPE_LEFT_OF_SHOT = 0x5,
//   SND_FLUX_TYPE_CENTER_OF_SHOT = 0x6,
//   SND_FLUX_TYPE_RIGHT_OF_SHOT = 0x7,
//   SND_FLUX_TYPE_COUNT = 0x8,
// };

 /* 561 */
enum snd_limit_type_t : __int32
{
  SND_LIMIT_NONE = 0x0,
  SND_LIMIT_OLDEST = 0x1,
  SND_LIMIT_REJECT = 0x2,
  SND_LIMIT_PRIORITY = 0x3,
  SND_LIMIT_COUNT = 0x4,
};

// /* 562 */
// enum snd_speaker : __int32
// {
//   SND_SPEAKER_LEFT = 0x0,
//   SND_SPEAKER_RIGHT = 0x1,
//   SND_SPEAKER_CENTER = 0x2,
//   SND_SPEAKER_LFE = 0x3,
//   SND_SPEAKER_LEFT_SURROUND = 0x4,
//   SND_SPEAKER_RIGHT_SURROUND = 0x5,
//   SND_SPEAKER_LEFT_REAR_SURROUND = 0x6,
//   SND_SPEAKER_RIGHT_REAR_SURROUND = 0x7,
//   SND_SPEAKER_COUNT = 0x8,
// };

 /* 563 */
enum snd_category_t : __int32
{
  SND_CATEGORY_SFX = 0x0,
  SND_CATEGORY_MUSIC = 0x1,
  SND_CATEGORY_VOICE = 0x2,
  SND_CATEGORY_UI = 0x3,
  SND_CATEGORY_COUNT = 0x4,
};

/* 564 */
enum snd_asset_channel : __int32
{
  SND_ASSET_CHANNEL_L = 0x1,
  SND_ASSET_CHANNEL_R = 0x2,
  SND_ASSET_CHANNEL_C = 0x4,
  SND_ASSET_CHANNEL_LFE = 0x8,
  SND_ASSET_CHANNEL_LS = 0x10,
  SND_ASSET_CHANNEL_RS = 0x20,
  SND_ASSET_CHANNEL_LB = 0x40,
  SND_ASSET_CHANNEL_RB = 0x80,
};

// /* 565 */
// enum $0FEF2AE19F63F5AC2B5BA33E1174B5C1 : __int32
// {
//   PHYS_ALLOC_LOW = 0x0,
//   PHYS_ALLOC_HIGH = 0x1,
//   PHYS_ALLOC_COUNT = 0x2,
// };

 /* 566 */
enum snd_stream_status : __int32
{
  SND_STREAM_UNUSED = 0x0,
  SND_STREAM_LOADING = 0x1,
  SND_STREAM_OK = 0x2,
  SND_STREAM_STARVING = 0x3,
  SND_STREAM_EOF = 0x4,
  SND_STREAM_ERROR = 0x5,
};

/* 567 */
enum snd_snapshot_type : __int32
{
  SND_SNAPSHOT_ALIAS = 0x0,
  SND_SNAPSHOT_AMBIENT = 0x1,
  SND_SNAPSHOT_SCRIPT = 0x2,
  SND_SNAPSHOT_SHELLSHOCK = 0x3,
  SND_SNAPSHOT_BREATH = 0x4,
  SND_SNAPSHOT_ADS = 0x5,
  SND_SNAPSHOT_MENU = 0x6,
  SND_SNAPSHOT_ENEMIES = 0x7,
  SND_SNAPSHOT_HEALTH = 0x8,
  SND_SNAPSHOT_DEBUG = 0x9,
  SND_SNAPSHOT_LEVELFADE = 0xA,
  SND_SNAPSHOT_COUNT = 0xB,
};

/* 568 */
enum snd_length_type : __int32
{
  SND_LENGTH_NOTIFY_NONE = 0x0,
  SND_LENGTH_NOTIFY_SCRIPT = 0x1,
  SND_LENGTH_NOTIFY_SUBTITLE = 0x2,
  SND_LENGTH_NOTIFY_COUNT = 0x3,
};

/* 569 */
enum SndFileLoadingState : __int32
{
  SFLS_UNLOADED = 0x0,
  SFLS_LOADING = 0x1,
  SFLS_LOADED = 0x2,
};

// /* 570 */
// enum snd_entity_update : __int32
// {
//   SND_ENTITY_UPDATE_ALWAYS = 0x0,
//   SND_ENTITY_UPDATE_NEVER = 0x1,
// };

// /* 571 */
// enum SND_ENVEFFECTPRIO : __int32
// {
//   SND_ENVEFFECTPRIO_NONE = 0x0,
//   SND_ENVEFFECTPRIO_LEVEL = 0x1,
//   SND_ENVEFFECTPRIO_SHELLSHOCK = 0x2,
//   SND_ENVEFFECTPRIO_COUNT = 0x3,
// };

// /* 572 */
// enum snd_notify_type : __int32
// {
//   SND_NOTIFY_NOP = 0x0,
//   SND_NOTIFY_ENT_UPDATE = 0x1,
//   SND_NOTIFY_SUBTITLE = 0x2,
//   SND_NOTIFY_LENGTH = 0x3,
//   SND_NOTIFY_PLAYBACK_UPDATE = 0x4,
//   SND_NOTIFY_PLAYBACK_FREE = 0x5,
// };

// /* 573 */
// enum snd_command_type : __int32
// {
//   SND_COMMAND_NOP = 0x0,
//   SND_COMMAND_ALIAS_NAME = 0x1,
//   SND_COMMAND_PLAY = 0x2,
//   SND_COMMAND_STOP_ALIAS = 0x3,
//   SND_COMMAND_STOP_ENT = 0x4,
//   SND_COMMAND_CINEMATIC_START = 0x5,
//   SND_COMMAND_CINEMATIC_END = 0x6,
//   SND_COMMAND_DISCONNECT_LISTENER = 0x7,
//   SND_COMMAND_SET_LISTENER = 0x8,
//   SND_COMMAND_STOP_SOUNDS = 0x9,
//   SND_COMMAND_FADE_IN = 0xA,
//   SND_COMMAND_FADE_OUT = 0xB,
//   SND_COMMAND_SET_ENVIRONMENT_EFFECTS = 0xC,
//   SND_COMMAND_DEACTIVATE_ENVIRONMENT_EFFECTS = 0xD,
//   SND_COMMAND_SET_PLAYBACK_ATTENUATION = 0xE,
//   SND_COMMAND_SET_PLAYBACK_ATTENUATION_RATE = 0xF,
//   SND_COMMAND_SET_PLAYBACK_PITCH = 0x10,
//   SND_COMMAND_SET_PLAYBACK_PITCH_RATE = 0x11,
//   SND_COMMAND_STOP_PLAYBACK = 0x12,
//   SND_COMMAND_SNAPSHOT = 0x13,
//   SND_COMMAND_SET_ENT_STATE = 0x14,
//   SND_COMMAND_SET_GAME_STATE = 0x15,
//   SND_COMMAND_PLAY_LOOP_AT = 0x16,
//   SND_COMMAND_STOP_LOOP_AT = 0x17,
//   SND_COMMAND_PLAY_LINE_AT = 0x18,
//   SND_COMMAND_STOP_LINE_AT = 0x19,
//   SND_COMMAND_GAME_RESET = 0x1A,
//   SND_COMMAND_SET_CONTEXT = 0x1B,
//   SND_COMMAND_SCRIPT_TIMESCALE = 0x1C,
//   SND_COMMAND_UPDATE_LOOPS = 0x1D,
//   SND_COMMAND_COUNT = 0x1E,
// };

// /* 574 */
// enum XAPO_BUFFER_FLAGS : __int32
// {
//   XAPO_BUFFER_SILENT = 0x0,
//   XAPO_BUFFER_VALID = 0x1,
// };

// /* 575 */
// enum XAUDIO2_WINDOWS_PROCESSOR_SPECIFIER : __int32
// {
//   Processor1 = 0x1,
//   Processor2 = 0x2,
//   Processor3 = 0x4,
//   Processor4 = 0x8,
//   Processor5 = 0x10,
//   Processor6 = 0x20,
//   Processor7 = 0x40,
//   Processor8 = 0x80,
//   Processor9 = 0x100,
//   Processor10 = 0x200,
//   Processor11 = 0x400,
//   Processor12 = 0x800,
//   Processor13 = 0x1000,
//   Processor14 = 0x2000,
//   Processor15 = 0x4000,
//   Processor16 = 0x8000,
//   Processor17 = 0x10000,
//   Processor18 = 0x20000,
//   Processor19 = 0x40000,
//   Processor20 = 0x80000,
//   Processor21 = 0x100000,
//   Processor22 = 0x200000,
//   Processor23 = 0x400000,
//   Processor24 = 0x800000,
//   Processor25 = 0x1000000,
//   Processor26 = 0x2000000,
//   Processor27 = 0x4000000,
//   Processor28 = 0x8000000,
//   Processor29 = 0x10000000,
//   Processor30 = 0x20000000,
//   Processor31 = 0x40000000,
//   Processor32 = 0x80000000,
//   XAUDIO2_ANY_PROCESSOR = 0xFFFFFFFF,
//   XAUDIO2_DEFAULT_PROCESSOR = 0xFFFFFFFF,
// };

// /* 576 */
// enum tagCLSCTX : __int32
// {
//   CLSCTX_INPROC_SERVER = 0x1,
//   CLSCTX_INPROC_HANDLER = 0x2,
//   CLSCTX_LOCAL_SERVER = 0x4,
//   CLSCTX_INPROC_SERVER16 = 0x8,
//   CLSCTX_REMOTE_SERVER = 0x10,
//   CLSCTX_INPROC_HANDLER16 = 0x20,
//   CLSCTX_RESERVED1 = 0x40,
//   CLSCTX_RESERVED2 = 0x80,
//   CLSCTX_RESERVED3 = 0x100,
//   CLSCTX_RESERVED4 = 0x200,
//   CLSCTX_NO_CODE_DOWNLOAD = 0x400,
//   CLSCTX_RESERVED5 = 0x800,
//   CLSCTX_NO_CUSTOM_MARSHAL = 0x1000,
//   CLSCTX_ENABLE_CODE_DOWNLOAD = 0x2000,
//   CLSCTX_NO_FAILURE_LOG = 0x4000,
//   CLSCTX_DISABLE_AAA = 0x8000,
//   CLSCTX_ENABLE_AAA = 0x10000,
//   CLSCTX_FROM_DEFAULT_CONTEXT = 0x20000,
//   CLSCTX_ACTIVATE_32_BIT_SERVER = 0x40000,
//   CLSCTX_ACTIVATE_64_BIT_SERVER = 0x80000,
//   CLSCTX_ENABLE_CLOAKING = 0x100000,
//   CLSCTX_PS_DLL = 0x80000000,
// };

// /* 577 */
// enum XAUDIO2_DEVICE_ROLE : __int32
// {
//   NotDefaultDevice = 0x0,
//   DefaultConsoleDevice = 0x1,
//   DefaultMultimediaDevice = 0x2,
//   DefaultCommunicationsDevice = 0x4,
//   DefaultGameDevice = 0x8,
//   GlobalDefaultDevice = 0xF,
//   InvalidDeviceRole = 0xFFFFFFF0,
// };

// /* 578 */
// enum XAUDIO2_FILTER_TYPE : __int32
// {
//   LowPassFilter = 0x0,
//   BandPassFilter = 0x1,
//   HighPassFilter = 0x2,
//   NotchFilter = 0x3,
// };

// /* 579 */
// enum tagCOINIT : __int32
// {
//   COINIT_APARTMENTTHREADED = 0x2,
//   COINIT_MULTITHREADED = 0x0,
//   COINIT_DISABLE_OLE1DDE = 0x4,
//   COINIT_SPEED_OVER_MEMORY = 0x8,
// };

// /* 580 */
// enum snd_bus_t : __int32
// {
//   SND_BUS_WORLD = 0x0,
//   SND_BUS_GAME = 0x1,
//   SND_BUS_VOICE = 0x2,
//   SND_BUS_COUNT = 0x3,
// };

// /* 581 */
// enum StreamVoice::<unnamed_tag> : __int32
// {
//   BUFFER_COUNT = 0x2,
// };

 /* 582 */
enum snd_overlay_type : __int32
{
  SND_OVERLAY_NONE = 0x0,
  SND_OVERLAY_3D = 0x1,
  SND_OVERLAY_STREAM = 0x2,
  SND_OVERLAY_2D = 0x3,
};

// /* 583 */
// enum snd_csv_entry_type : __int32
// {
//   SND_CSV_STRING = 0x0,
//   SND_CSV_FLOAT = 0x1,
//   SND_CSV_INT = 0x2,
//   SND_CSV_ENUM = 0x3,
//   SND_CSV_FLAG = 0x4,
//   SND_CSV_DBSPL = 0x5,
//   SND_CSV_CENTS = 0x6,
//   SND_CSV_HASH = 0x7,
//   SND_CSV_ENUM_BITS = 0x8,
//   SND_CSV_FLAG_BITS = 0x9,
//   SND_CSV_BYTE = 0xA,
//   SND_CSV_ENUM_BYTE = 0xB,
//   SND_CSV_SHORT = 0xC,
//   SND_CSV_USHORT = 0xD,
//   SND_CSV_NORM_BYTE = 0xE,
// };

// /* 584 */
// enum $7295F8128352C48AB9E649CE6675F6DA : __int32
// {
//   XFILE_BLOCK_TEMP = 0x0,
//   XFILE_BLOCK_RUNTIME_BEGIN = 0x1,
//   XFILE_BLOCK_RUNTIME = 0x1,
//   XFILE_BLOCK_LARGE_RUNTIME = 0x2,
//   XFILE_BLOCK_PHYSICAL_RUNTIME = 0x3,
//   XFILE_BLOCK_RUNTIME_END = 0x4,
//   XFILE_BLOCK_VIRTUAL = 0x4,
//   XFILE_BLOCK_LARGE = 0x5,
//   XFILE_BLOCK_PHYSICAL = 0x6,
//   MAX_XFILE_COUNT = 0x7,
// };

// /* 585 */
// enum snd_data_table : __int32
// {
//   SND_TABLE_ALIAS = 0x0,
//   SND_TABLE_GROUP = 0x1,
//   SND_TABLE_CURVE = 0x2,
//   SND_TABLE_PAN = 0x3,
//   SND_TABLE_SNAPSHOT_GROUP = 0x4,
//   SND_TABLE_SNAPSHOT = 0x5,
//   SND_TABLE_CONTEXT = 0x6,
//   SND_TABLE_RADVERB = 0x7,
//   SND_TABLE_MASTER = 0x8,
//   SND_TABLE_COUNT = 0x9,
// };

// /* 586 */
// enum snd_randomize_type_t : __int32
// {
//   SND_RANDOMIZE_INSTANCE = 0x0,
//   SND_RANDOMIZE_ENTITY_VOLUME = 0x1,
//   SND_RANDOMIZE_ENTITY_PITCH = 0x2,
//   SND_RANDOMIZE_ENTITY_VARIANT = 0x4,
// };

// /* 587 */
// enum $854C867908149C343981C8BAF4C9A230 : __int32
// {
//   ENTFIELD_ENTITY = 0x0,
//   ENTFIELD_SENTIENT = 0x4000,
//   ENTFIELD_ACTOR = 0x8000,
//   ENTFIELD_CLIENT = 0xC000,
//   ENTFIELD_MASK = 0xC000,
// };

// /* 588 */
// enum fieldtype_t : __int32
// {
//   F_INT = 0x0,
//   F_SHORT = 0x1,
//   F_BYTE = 0x2,
//   F_FLOAT = 0x3,
//   F_LSTRING = 0x4,
//   F_STRING = 0x5,
//   F_VECTOR = 0x6,
//   F_ENTITY = 0x7,
//   F_ENTHANDLE = 0x8,
//   F_ACTOR = 0x9,
//   F_SENTIENT = 0xA,
//   F_SENTIENTHANDLE = 0xB,
//   F_CLIENT = 0xC,
//   F_PATHNODE = 0xD,
//   F_ACTORGROUP = 0xE,
//   F_VECTORHACK = 0xF,
//   F_OBJECT = 0x10,
//   F_MODEL = 0x11,
//   F_BITFLAG = 0x12,
// };

// /* 589 */
// enum $3FAD84344DD9017EDEA6C2E0F6A382A4 : __int32
// {
//   SCR_SYS_GAME = 0x1,
// };

// /* 590 */
// enum ai_event_t : __int32
// {
//   AI_EV_BAD = 0x0,
//   AI_EV_FIRST_POINT_EVENT = 0x1,
//   AI_EV_FOOTSTEP = 0x2,
//   AI_EV_FOOTSTEP_LITE = 0x3,
//   AI_EV_NEW_ENEMY = 0x4,
//   AI_EV_PAIN = 0x5,
//   AI_EV_REACT = 0x6,
//   AI_EV_DEATH = 0x7,
//   AI_EV_EXPLOSION = 0x8,
//   AI_EV_GRENADE_PING = 0x9,
//   AI_EV_PROJECTILE_PING = 0xA,
//   AI_EV_GUNSHOT = 0xB,
//   AI_EV_SILENCED_SHOT = 0xC,
//   AI_EV_LAST_POINT_EVENT = 0xD,
//   AI_EV_FIRST_LINE_EVENT = 0xE,
//   AI_EV_BULLET = 0xF,
//   AI_EV_BLOCK_FRIENDLIES = 0x10,
//   AI_EV_BULLET_REACT = 0x11,
//   AI_EV_PROJECTILE_IMPACT = 0x12,
//   AI_EV_LAST_LINE_EVENT = 0x13,
//   AI_EV_FIRST_ARC_EVENT = 0x14,
//   AI_EV_BADPLACE_ARC = 0x15,
//   AI_EV_BADPLACE_LIMITED_ARC = 0x16,
//   AI_EV_REALLY_BADPLACE_ARC = 0x17,
//   AI_EV_LAST_ARC_EVENT = 0x18,
//   AI_EV_FIRST_VOLUME_EVENT = 0x19,
//   AI_EV_BADPLACE_VOLUME = 0x1A,
//   AI_EV_LAST_VOLUME_EVENT = 0x1B,
//   AI_EV_NUM_EVENTS = 0x1C,
// };

// /* 591 */
// enum LumpType : __int32
// {
//   LUMP_MATERIALS = 0x0,
//   LUMP_LIGHTBYTES = 0x1,
//   LUMP_LIGHTGRIDENTRIES = 0x2,
//   LUMP_LIGHTGRIDCOLORS = 0x3,
//   LUMP_PLANES = 0x4,
//   LUMP_BRUSHSIDES = 0x5,
//   LUMP_BRUSHSIDEEDGECOUNTS = 0x6,
//   LUMP_BRUSHEDGES = 0x7,
//   LUMP_BRUSHES = 0x8,
//   LUMP_TRIANGLES = 0x9,
//   LUMP_DRAWVERTS = 0xA,
//   LUMP_DRAWINDICES = 0xB,
//   LUMP_CULLGROUPS = 0xC,
//   LUMP_CULLGROUPINDICES = 0xD,
//   LUMP_OBSOLETE_1 = 0xE,
//   LUMP_OBSOLETE_2 = 0xF,
//   LUMP_OBSOLETE_3 = 0x10,
//   LUMP_OBSOLETE_4 = 0x11,
//   LUMP_OBSOLETE_5 = 0x12,
//   LUMP_PORTALVERTS = 0x13,
//   LUMP_OBSOLETE_6 = 0x14,
//   LUMP_UINDS = 0x15,
//   LUMP_BRUSHVERTSCOUNTS = 0x16,
//   LUMP_BRUSHVERTS = 0x17,
//   LUMP_AABBTREES = 0x18,
//   LUMP_CELLS = 0x19,
//   LUMP_PORTALS = 0x1A,
//   LUMP_NODES = 0x1B,
//   LUMP_LEAFS = 0x1C,
//   LUMP_LEAFBRUSHES = 0x1D,
//   LUMP_LEAFSURFACES = 0x1E,
//   LUMP_COLLISIONVERTS = 0x1F,
//   LUMP_COLLISIONTRIS = 0x20,
//   LUMP_COLLISIONEDGEWALKABLE = 0x21,
//   LUMP_COLLISIONBORDERS = 0x22,
//   LUMP_COLLISIONPARTITIONS = 0x23,
//   LUMP_COLLISIONAABBS = 0x24,
//   LUMP_MODELS = 0x25,
//   LUMP_VISIBILITY = 0x26,
//   LUMP_ENTITIES = 0x27,
//   LUMP_PATHCONNECTIONS = 0x28,
//   LUMP_REFLECTION_PROBES = 0x29,
//   LUMP_VERTEX_LAYER_DATA = 0x2A,
//   LUMP_PRIMARY_LIGHTS = 0x2B,
//   LUMP_LIGHTGRIDHEADER = 0x2C,
//   LUMP_LIGHTGRIDROWS = 0x2D,
//   LUMP_OBSOLETE_10 = 0x2E,
//   LUMP_OBSOLETE_11 = 0x2F,
//   LUMP_OBSOLETE_12 = 0x30,
//   LUMP_OBSOLETE_13 = 0x31,
//   LUMP_OBSOLETE_14 = 0x32,
//   LUMP_OBSOLETE_15 = 0x33,
//   LUMP_WATERHEADER = 0x34,
//   LUMP_WATERCELLS = 0x35,
//   LUMP_WATERCELLDATA = 0x36,
//   LUMP_BURNABLEHEADER = 0x37,
//   LUMP_BURNABLECELLS = 0x38,
//   LUMP_BURNABLECELLDATA = 0x39,
//   LUMP_SIMPLELIGHTMAPBYTES = 0x3A,
//   LUMP_LODCHAINS = 0x3B,
//   LUMP_LODINFOS = 0x3C,
//   LUMP_LODSURFACES = 0x3D,
//   LUMP_LIGHTREGIONS = 0x3E,
//   LUMP_LIGHTREGION_HULLS = 0x3F,
//   LUMP_LIGHTREGION_AXES = 0x40,
//   LUMP_WIILIGHTGRID = 0x41,
//   LUMP_LIGHTGRID2D_LIGHTS = 0x42,
//   LUMP_LIGHTGRID2D_INDICES = 0x43,
//   LUMP_LIGHTGRID2D_POINTS = 0x44,
//   LUMP_LIGHTGRID2D_CELLS = 0x45,
//   LUMP_LIGHT_CORONAS = 0x46,
//   LUMP_SHADOWMAP_VOLUMES = 0x47,
//   LUMP_SHADOWMAP_VOLUME_PLANES = 0x48,
//   LUMP_EXPOSURE_VOLUMES = 0x49,
//   LUMP_EXPOSURE_VOLUME_PLANES = 0x4A,
//   LUMP_OCCLUDERS = 0x4B,
//   LUMP_OUTDOORBOUNDS = 0x4C,
//   LUMP_HERO_ONLY_LIGHTS = 0x4D,
// };

// /* 592 */
// enum gjk_query_flags_e : __int32
// {
//   GJK_QUERY_FLAG_TERRAIN = 0x1,
//   GJK_QUERY_FLAG_ENTS = 0x2,
//   GJK_QUERY_FLAG_DENTS = 0x4,
// };

// /* 593 */
// enum $E02F86DF661B70747453867A72DA739A : __int32
// {
//   FL_GODMODE = 0x1,
//   FL_DEMI_GODMODE = 0x2,
//   FL_NOTARGET = 0x4,
//   FL_NO_KNOCKBACK = 0x8,
//   FL_DROPPED_ITEM = 0x10,
//   FL_NO_BOTS = 0x20,
//   FL_NO_HUMANS = 0x40,
//   FL_TOGGLE = 0x80,
//   FL_SOFTACTIVATE = 0x100,
//   FL_LOW_PRIORITY_USEABLE = 0x200,
//   FL_NO_HEADCHECK = 0x400,
//   FL_DYNAMICPATH = 0x800,
//   FL_SUPPORTS_LINKTO = 0x1000,
//   FL_NO_AUTO_ANIM_UPDATE = 0x2000,
//   FL_GRENADE_TOUCH_DAMAGE = 0x4000,
//   FL_GRENADE_MARTYRDOM = 0x8000,
//   FL_MISSILE_DESTABILIZED = 0x10000,
//   FL_STABLE_MISSILES = 0x20000,
//   FL_REPEAT_ANIM_UPDATE = 0x40000,
//   FL_VEHICLE_TARGET = 0x80000,
//   FL_GROUND_ENT = 0x100000,
//   FL_CURSOR_HINT = 0x200000,
//   FL_USE_TURRET = 0x400000,
//   FL_MISSILE_ATTRACTOR = 0x800000,
//   FL_TARGET = 0x1000000,
//   FL_WEAPON_BEING_GRABBED = 0x2000000,
//   FL_OBSTACLE = 0x4000000,
//   FL_DODGE_LEFT = 0x8000000,
//   FL_DODGE_RIGHT = 0x10000000,
//   FL_BADPLACE_VOLUME = 0x20000000,
//   FL_AUTO_BLOCKPATHS = 0x40000000,
// };

// /* 594 */
// enum $9807A90B4BBD672CF36B885786E18D6A : __int32
// {
//   FILEDATA_AITYPE = 0x0,
//   FILEDATA_ANIMSCRIPTS_TRAVERSE = 0x1,
//   FILEDATA_XANIMLIST = 0x2,
//   FILEDATA_XMODELSURFS = 0x3,
//   FILEDATA_XMODELPARTS = 0x4,
//   FILEDATA_XMODEL = 0x5,
//   FILEDATA_XANIM = 0x6,
//   FILEDATA_PHYSPRESET = 0x7,
//   FILEDATA_PHYSCONSTRAINTS = 0x8,
//   FILEDATA_DESTRUCTIBLEDEF = 0x9,
//   FILEDATA_VEHICLEPHYSPARAMS = 0xA,
//   FILEDATA_XMODELPIECES = 0xB,
//   FILEDATA_STRINGTABLE = 0xC,
// };

// /* 595 */
// enum $E2C4A72AF674157DC07227CFCED3F1B3 : __int32
// {
//   SL_USER_GAME = 0x1,
//   SL_USER_TEMP = 0x2,
//   SL_USER_XZONE = 0x4,
//   SL_USER_XZONE_TEMP = 0x8,
// };

// /* 596 */
// enum RadiantCommandType : __int32
// {
//   RADIANT_COMMAND_SELECT = 0x0,
//   RADIANT_COMMAND_DESELECT = 0x1,
//   RADIANT_COMMAND_UPDATE_SELECTED = 0x2,
//   RADIANT_COMMAND_UPDATE = 0x3,
//   RADIANT_COMMAND_CREATE = 0x4,
//   RADIANT_COMMAND_DELETE = 0x5,
//   RADIANT_COMMAND_CAMERA = 0x6,
// };

// /* 597 */
// enum gjk_entity_info_t::ENTITY_TYPE : __int32
// {
//   ET_GENT = 0x0,
//   ET_CENT = 0x1,
//   ET_DENT = 0x2,
//   ET_GLASS = 0x3,
//   ET_NONE = 0x4,
// };

// /* 598 */
// enum proneCheckType_t : __int32
// {
//   PCT_CLIENT = 0x0,
//   PCT_ACTOR = 0x1,
// };

// /* 599 */
// enum $1C8F8D8F9DAF288AC6C72DD8C5683042 : __int32
// {
//   PMOVE_HANDLER_CLIENT = 0x0,
//   PMOVE_HANDLER_SERVER = 0x1,
//   PMOVE_HANDLER_COUNT = 0x2,
// };

// /* 600 */
// enum ThreatDebugStringCategory : __int32
// {
//   TDS_TOTAL_THREAT = 0x0,
//   TDS_FLASHED = 0x1,
//   TDS_SUPPRESSED = 0x2,
//   TDS_THREATBIAS = 0x3,
//   TDS_THREATBIAS_GROUP = 0x4,
//   TDS_ATTACKER_COUNT = 0x5,
//   TDS_CUR_ENEMY_BONUS = 0x6,
//   TDS_AWARENESS = 0x7,
//   TDS_DIST_THREAT = 0x8,
//   TDS_SCARINESS_THREAT = 0x9,
//   NUM_TDS = 0xA,
// };

// /* 601 */
// enum $D416C61A81CE0211A2B0E6C3C6220A84 : __int32
// {
//   AI_MOVE_STOP = 0x0,
//   AI_MOVE_STOP_SOON = 0x1,
//   AI_MOVE_WALK = 0x2,
//   AI_MOVE_RUN = 0x3,
// };

// /* 602 */
// enum ai_teammove_t : __int32
// {
//   AI_TEAMMOVE_TRAVEL = 0x0,
//   AI_TEAMMOVE_WAIT = 0x1,
//   AI_TEAMMOVE_SLOW_DOWN = 0x2,
// };

// /* 603 */
// enum actor_think_result_t : __int32
// {
//   ACTOR_THINK_DONE = 0x0,
//   ACTOR_THINK_REPEAT = 0x1,
//   ACTOR_THINK_MOVE_TO_BODY_QUEUE = 0x2,
// };

// /* 604 */
// enum enumForceSpawn : __int32
// {
//   CHECK_SPAWN = 0x0,
//   FORCE_SPAWN = 0x1,
// };

// /* 605 */
// enum $28B5CDFEA2B32C48F4FFBE780DBFD526 : __int32
// {
//   AISF_SPAWNER = 0x1,
//   AISF_FORCESPAWN = 0x2,
//   AISF_UNDELETABLE = 0x4,
//   AISF_ENEMYINFO = 0x8,
// };

// /* 606 */
// enum DEBUGMAYMOVE_LIFT_ENUM : __int32
// {
//   DEBUGMAYMOVE_NOT_LIFTED = 0x0,
//   DEBUGMAYMOVE_LIFTED = 0x1,
// };

// /* 607 */
// enum $98B680CFC31DF8903350C237BBA57AFA : __int32
// {
//   IMPACTEFFECT_HEADSHOT = 0x1,
//   IMPACTEFFECT_FATAL = 0x2,
//   IMPACTEFFECT_EXIT = 0x4,
//   IMPACTEFFECT_UNDERWATER = 0x8,
//   IMPACTEFFECT_VEH_ARMOR = 0x10,
//   IMPACTEFFECT_VEH_LOCOMOTION = 0x20,
// };

// /* 608 */
// enum ActorAnimStates : __int32
// {
//   ACTOR_ANIMATION_IDLE = 0x0,
//   ACTOR_ANIMATION_MOVE_RUN = 0x1,
//   ACTOR_ANIMATION_MOVE_START = 0x2,
//   ACTOR_ANIMATION_MOVE_STOP = 0x3,
//   ACTOR_ANIMATION_MOVE_WALK = 0x4,
//   ACTOR_ANIMATION_MOVE_TURN_LEFT = 0x5,
//   ACTOR_ANIMATION_MOVE_TURN_RIGHT = 0x6,
//   ACTOR_ANIMATION_MOVE_RUN_TURN_LEFT = 0x7,
//   ACTOR_ANIMATION_MOVE_RUN_TURN_RIGHT = 0x8,
//   ACTOR_ANIMATION_MOVE_TURN_AROUND_LEFT = 0x9,
//   ACTOR_ANIMATION_MOVE_TURN_AROUND_RIGHT = 0xA,
//   ACTOR_ANIMATION_MOVE_RUN_TURN_AROUND_LEFT = 0xB,
//   ACTOR_ANIMATION_MOVE_RUN_TURN_AROUND_RIGHT = 0xC,
//   ACTOR_ANIMATION_ATTACK = 0xD,
//   ACTOR_ANIMATION_STOP_IDLE = 0xE,
//   ACTOR_ANIMATION_STOP_ATTACKIDLE = 0xF,
//   ACTOR_ANIMATION_STOP_ATTACKIDLE_BARK = 0x10,
//   ACTOR_ANIMATION_STOP_ATTACKIDLE_GROWL = 0x11,
//   ACTOR_ANIMATION_PAIN_MAIN = 0x12,
//   ACTOR_ANIMATION_PAIN_FRONT = 0x13,
//   ACTOR_ANIMATION_PAIN_BACK = 0x14,
//   ACTOR_ANIMATION_PAIN_LEFT = 0x15,
//   ACTOR_ANIMATION_PAIN_RIGHT = 0x16,
//   ACTOR_ANIMATION_RUN_PAIN_FRONT = 0x17,
//   ACTOR_ANIMATION_RUN_PAIN_BACK = 0x18,
//   ACTOR_ANIMATION_RUN_PAIN_LEFT = 0x19,
//   ACTOR_ANIMATION_RUN_PAIN_RIGHT = 0x1A,
//   ACTOR_ANIMATION_DEATH_FRONT = 0x1B,
//   ACTOR_ANIMATION_DEATH_BACK = 0x1C,
//   ACTOR_ANIMATION_DEATH_LEFT = 0x1D,
//   ACTOR_ANIMATION_DEATH_RIGHT = 0x1E,
//   ACTOR_ANIMATION_FLASHED = 0x1F,
//   ACTOR_ANIMATION_ATTACK_ATTACKIDLE = 0x20,
//   ACTOR_ANIMATION_ATTACK_ATTACKIDLE_BARK = 0x21,
//   ACTOR_ANIMATION_ATTACK_ATTACKIDLE_GROWL = 0x22,
//   ACTOR_ANIMATION_ATTACK_RUN = 0x23,
//   ACTOR_ANIMATION_ATTACK_PLAYER_CLOSE_RANGE = 0x24,
//   ACTOR_ANIMATION_ATTACK_MISS = 0x25,
//   ACTOR_ANIMATION_ATTACK_MISS_LEFT = 0x26,
//   ACTOR_ANIMATION_ATTACK_MISS_RIGHT = 0x27,
//   ACTOR_ANIMATION_TRAVERSE_JUMP_UP_40 = 0x28,
//   ACTOR_ANIMATION_TRAVERSE_JUMP_UP_80 = 0x29,
//   ACTOR_ANIMATION_TRAVERSE_JUMP_DOWN_40 = 0x2A,
//   ACTOR_ANIMATION_TRAVERSE_JUMP_DOWN_80 = 0x2B,
//   ACTOR_ANIMATION_TRAVERSE_WALLHOP = 0x2C,
//   ACTOR_ANIMATION_TRAVERSE_WINDOW = 0x2D,
//   ACTOR_ANIMATION_TRAVERSE_THROUGH_HOLE_42 = 0x2E,
//   ACTOR_ANIMATION_COUNT = 0x2F,
// };

// /* 609 */
// enum SlideMoveResult : __int32
// {
//   SLIDEMOVE_COMPLETE = 0x0,
//   SLIDEMOVE_CLIPPED = 0x1,
//   SLIDEMOVE_FAIL = 0x2,
// };

// /* 610 */
// enum PredictionTraceResult : __int32
// {
//   PTR_SUCCESS = 0x0,
//   PTR_HIT_WORLD = 0x1,
//   PTR_HIT_ENTITY = 0x2,
// };

// /* 611 */
// enum actorFieldtype_t : __int32
// {
//   AF_NONE = 0x0,
//   AF_STRING = 0x1,
// };

// /* 612 */
// enum $98A714CE55D38E537D879567E2170A15 : __int32
// {
//   FIXED_LINK_ANGLES = 0x0,
//   FIXED_LINK_ANGLES_YAW_ONLY = 0x1,
//   FIXED_LINK_ANGLES_NONE = 0x2,
// };

// /* 613 */
// enum $5313C8230143BA0EE39E1AA1829F5562 : __int32
// {
//   ENT_HANDLER_NULL = 0x0,
//   ENT_HANDLER_ACTOR_INIT = 0x1,
//   ENT_HANDLER_ACTOR = 0x2,
//   ENT_HANDLER_ACTOR_CORPSE = 0x3,
//   ENT_HANDLER_TRIGGER_MULTIPLE = 0x4,
//   ENT_HANDLER_TRIGGER_HURT = 0x5,
//   ENT_HANDLER_TRIGGER_HURT_TOUCH = 0x6,
//   ENT_HANDLER_TRIGGER_DAMAGE = 0x7,
//   ENT_HANDLER_SCRIPT_MOVER = 0x8,
//   ENT_HANDLER_SCRIPT_MODEL = 0x9,
//   ENT_HANDLER_GRENADE = 0xA,
//   ENT_HANDLER_TIMED_OBJECT = 0xB,
//   ENT_HANDLER_ROCKET = 0xC,
//   ENT_HANDLER_CLIENT = 0xD,
//   ENT_HANDLER_CLIENT_SPECTATOR = 0xE,
//   ENT_HANDLER_CLIENT_DEAD = 0xF,
//   ENT_HANDLER_PLAYER_CLONE = 0x10,
//   ENT_HANDLER_TURRET_INIT = 0x11,
//   ENT_HANDLER_TURRET = 0x12,
//   ENT_HANDLER_DROPPED_ITEM = 0x13,
//   ENT_HANDLER_ITEM_INIT = 0x14,
//   ENT_HANDLER_ITEM = 0x15,
//   ENT_HANDLER_TRIGGER_USE = 0x16,
//   ENT_HANDLER_PRIMARY_LIGHT = 0x17,
//   ENT_HANDLER_PLAYER_BLOCK = 0x18,
//   ENT_HANDLER_VEHICLE_INIT = 0x19,
//   ENT_HANDLER_VEHICLE = 0x1A,
//   ENT_HANDLER_VEHICLE_FREE = 0x1B,
//   ENT_HANDLER_HELICOPTER = 0x1C,
//   ENT_HANDLER_IK_PLAYERCLIP_TERRAIN = 0x1D,
//   ENT_HANDLER_IK_DISABLE_TERRAIN_MAPPING = 0x1E,
//   ENT_HANDLER_COUNT = 0x1F,
// };

// /* 614 */
// enum EntInfo_AITextMode : __int32
// {
//   AI_TEXT_ALL = 0x0,
//   AI_TEXT_BRIEF = 0x1,
//   AI_TEXT_COMBAT = 0x2,
//   AI_TEXT_MOVEMENT = 0x3,
//   AI_TEXT_STATE = 0x4,
//   NUM_AI_TEXT_TYPE = 0x5,
// };

// /* 615 */
// enum scriptAnimAIFunctionTypes_t : __int32
// {
//   AI_ANIM_FUNCTION_STOP = 0x0,
//   AI_ANIM_FUNCTION_MOVE = 0x1,
//   AI_ANIM_FUNCTION_COMBAT = 0x2,
//   AI_ANIM_FUNCTION_PAIN = 0x3,
//   AI_ANIM_FUNCTION_REACT = 0x4,
//   AI_ANIM_FUNCTION_DEATH = 0x5,
// };

// /* 616 */
// enum PARM_SUPPRESSION : __int32
// {
//   DO_SUPPRESSION = 0x0,
//   DONT_SUPPRESS = 0x1,
// };

// /* 617 */
// enum $36A49B7E828D83F00D67C3A6CA643A76 : __int32
// {
//   BADPLACE_INVALID = 0x0,
//   BADPLACE_ARC = 0x1,
//   BADPLACE_BRUSH = 0x2,
//   BADPLACE_REALLY_BAD = 0x3,
//   BADPLACE_LIMITED_DEPTH = 0x4,
// };

/* 618 */
enum ddlIntValueChanged_e
{
  DDL_INTVALUE_SAME = 0x0,
  DDL_INTVALUE_CHANGED = 0x1,
  DDL_INTVALUE_ERROR = 0xFFFFFFFF,
};

// /* 619 */
// enum $2F76E4A0B33E3CADEECF86B1BA14D159 : __int32
// {
//   MAX_VM_STACK_DEPTH = 0x20,
//   MAX_VM_OPERAND_STACK = 0x800,
// };

// /* 620 */
// enum $4595A41124E79A03522668AB0CFC531F : __int32
// {
//   ENUM_NOP = 0x0,
//   ENUM_program = 0x1,
//   ENUM_assignment = 0x2,
//   ENUM_unknown_variable = 0x3,
//   ENUM_duplicate_variable = 0x4,
//   ENUM_local_variable = 0x5,
//   ENUM_local_variable_frozen = 0x6,
//   ENUM_duplicate_expression = 0x7,
//   ENUM_primitive_expression = 0x8,
//   ENUM_integer = 0x9,
//   ENUM_float = 0xA,
//   ENUM_minus_integer = 0xB,
//   ENUM_minus_float = 0xC,
//   ENUM_string = 0xD,
//   ENUM_istring = 0xE,
//   ENUM_array_variable = 0xF,
//   ENUM_unknown_field = 0x10,
//   ENUM_field_variable = 0x11,
//   ENUM_field_variable_frozen = 0x12,
//   ENUM_variable = 0x13,
//   ENUM_function = 0x14,
//   ENUM_call_expression = 0x15,
//   ENUM_local_function = 0x16,
//   ENUM_far_function = 0x17,
//   ENUM_function_pointer = 0x18,
//   ENUM_call = 0x19,
//   ENUM_method = 0x1A,
//   ENUM_call_expression_statement = 0x1B,
//   ENUM_script_call = 0x1C,
//   ENUM_return = 0x1D,
//   ENUM_return2 = 0x1E,
//   ENUM_wait = 0x1F,
//   ENUM_script_thread_call = 0x20,
//   ENUM_undefined = 0x21,
//   ENUM_self = 0x22,
//   ENUM_self_frozen = 0x23,
//   ENUM_level = 0x24,
//   ENUM_game = 0x25,
//   ENUM_anim = 0x26,
//   ENUM_if = 0x27,
//   ENUM_if_else = 0x28,
//   ENUM_while = 0x29,
//   ENUM_for = 0x2A,
//   ENUM_inc = 0x2B,
//   ENUM_dec = 0x2C,
//   ENUM_binary_equals = 0x2D,
//   ENUM_statement_list = 0x2E,
//   ENUM_developer_statement_list = 0x2F,
//   ENUM_expression_list = 0x30,
//   ENUM_bool_or = 0x31,
//   ENUM_bool_and = 0x32,
//   ENUM_binary = 0x33,
//   ENUM_bool_not = 0x34,
//   ENUM_bool_complement = 0x35,
//   ENUM_size_field = 0x36,
//   ENUM_self_field = 0x37,
//   ENUM_precachetree = 0x38,
//   ENUM_waittill = 0x39,
//   ENUM_waittillmatch = 0x3A,
//   ENUM_waittillFrameEnd = 0x3B,
//   ENUM_notify = 0x3C,
//   ENUM_endon = 0x3D,
//   ENUM_switch = 0x3E,
//   ENUM_case = 0x3F,
//   ENUM_default = 0x40,
//   ENUM_break = 0x41,
//   ENUM_continue = 0x42,
//   ENUM_expression = 0x43,
//   ENUM_empty_array = 0x44,
//   ENUM_animation = 0x45,
//   ENUM_thread = 0x46,
//   ENUM_begin_developer_thread = 0x47,
//   ENUM_end_developer_thread = 0x48,
//   ENUM_usingtree = 0x49,
//   ENUM_false = 0x4A,
//   ENUM_true = 0x4B,
//   ENUM_animtree = 0x4C,
//   ENUM_breakon = 0x4D,
//   ENUM_breakpoint = 0x4E,
//   ENUM_prof_begin = 0x4F,
//   ENUM_prof_end = 0x50,
//   ENUM_vector = 0x51,
//   ENUM_object = 0x52,
//   ENUM_thread_object = 0x53,
//   ENUM_local = 0x54,
//   ENUM_statement = 0x55,
//   ENUM_bad_expression = 0x56,
//   ENUM_bad_statement = 0x57,
//   ENUM_include = 0x58,
//   ENUM_argument = 0x59,
// };

// /* 621 */
// enum $9D454B4FF036F3302969255676F4A675 : __int32
// {
//   LOCAL_VAR_STACK_SIZE = 0x40,
// };

// /* 622 */
// enum $6D51E4D9581472729AE3FDE62615AD51 : __int32
// {
//   OP_End = 0x0,
//   OP_Return = 0x1,
//   OP_GetUndefined = 0x2,
//   OP_GetZero = 0x3,
//   OP_GetByte = 0x4,
//   OP_GetNegByte = 0x5,
//   OP_GetUnsignedShort = 0x6,
//   OP_GetNegUnsignedShort = 0x7,
//   OP_GetInteger = 0x8,
//   OP_GetFloat = 0x9,
//   OP_GetString = 0xA,
//   OP_GetIString = 0xB,
//   OP_GetVector = 0xC,
//   OP_GetLevelObject = 0xD,
//   OP_GetAnimObject = 0xE,
//   OP_GetSelf = 0xF,
//   OP_GetLevel = 0x10,
//   OP_GetGame = 0x11,
//   OP_GetAnim = 0x12,
//   OP_GetAnimation = 0x13,
//   OP_GetGameRef = 0x14,
//   OP_GetFunction = 0x15,
//   OP_CreateLocalVariable = 0x16,
//   OP_RemoveLocalVariables = 0x17,
//   OP_EvalLocalVariableCached0 = 0x18,
//   OP_EvalLocalVariableCached1 = 0x19,
//   OP_EvalLocalVariableCached2 = 0x1A,
//   OP_EvalLocalVariableCached3 = 0x1B,
//   OP_EvalLocalVariableCached4 = 0x1C,
//   OP_EvalLocalVariableCached5 = 0x1D,
//   OP_EvalLocalVariableCached = 0x1E,
//   OP_EvalLocalArrayCached = 0x1F,
//   OP_EvalArray = 0x20,
//   OP_EvalLocalArrayRefCached0 = 0x21,
//   OP_EvalLocalArrayRefCached = 0x22,
//   OP_EvalArrayRef = 0x23,
//   OP_ClearArray = 0x24,
//   OP_EmptyArray = 0x25,
//   OP_GetSelfObject = 0x26,
//   OP_EvalLevelFieldVariable = 0x27,
//   OP_EvalAnimFieldVariable = 0x28,
//   OP_EvalSelfFieldVariable = 0x29,
//   OP_EvalFieldVariable = 0x2A,
//   OP_EvalLevelFieldVariableRef = 0x2B,
//   OP_EvalAnimFieldVariableRef = 0x2C,
//   OP_EvalSelfFieldVariableRef = 0x2D,
//   OP_EvalFieldVariableRef = 0x2E,
//   OP_ClearFieldVariable = 0x2F,
//   OP_SafeCreateVariableFieldCached = 0x30,
//   OP_SafeSetVariableFieldCached0 = 0x31,
//   OP_SafeSetVariableFieldCached = 0x32,
//   OP_SafeSetWaittillVariableFieldCached = 0x33,
//   OP_clearparams = 0x34,
//   OP_checkclearparams = 0x35,
//   OP_EvalLocalVariableRefCached0 = 0x36,
//   OP_EvalLocalVariableRefCached = 0x37,
//   OP_SetLevelFieldVariableField = 0x38,
//   OP_SetVariableField = 0x39,
//   OP_SetAnimFieldVariableField = 0x3A,
//   OP_SetSelfFieldVariableField = 0x3B,
//   OP_SetLocalVariableFieldCached0 = 0x3C,
//   OP_SetLocalVariableFieldCached = 0x3D,
//   OP_CallBuiltin0 = 0x3E,
//   OP_CallBuiltin1 = 0x3F,
//   OP_CallBuiltin2 = 0x40,
//   OP_CallBuiltin3 = 0x41,
//   OP_CallBuiltin4 = 0x42,
//   OP_CallBuiltin5 = 0x43,
//   OP_CallBuiltin = 0x44,
//   OP_CallBuiltinMethod0 = 0x45,
//   OP_CallBuiltinMethod1 = 0x46,
//   OP_CallBuiltinMethod2 = 0x47,
//   OP_CallBuiltinMethod3 = 0x48,
//   OP_CallBuiltinMethod4 = 0x49,
//   OP_CallBuiltinMethod5 = 0x4A,
//   OP_CallBuiltinMethod = 0x4B,
//   OP_wait = 0x4C,
//   OP_waittillFrameEnd = 0x4D,
//   OP_PreScriptCall = 0x4E,
//   OP_ScriptFunctionCall2 = 0x4F,
//   OP_ScriptFunctionCall = 0x50,
//   OP_ScriptFunctionCallPointer = 0x51,
//   OP_ScriptMethodCall = 0x52,
//   OP_ScriptMethodCallPointer = 0x53,
//   OP_ScriptThreadCall = 0x54,
//   OP_ScriptThreadCallPointer = 0x55,
//   OP_ScriptMethodThreadCall = 0x56,
//   OP_ScriptMethodThreadCallPointer = 0x57,
//   OP_DecTop = 0x58,
//   OP_CastFieldObject = 0x59,
//   OP_EvalLocalVariableObjectCached = 0x5A,
//   OP_CastBool = 0x5B,
//   OP_BoolNot = 0x5C,
//   OP_BoolComplement = 0x5D,
//   OP_JumpOnFalse = 0x5E,
//   OP_JumpOnTrue = 0x5F,
//   OP_JumpOnFalseExpr = 0x60,
//   OP_JumpOnTrueExpr = 0x61,
//   OP_jump = 0x62,
//   OP_jumpback = 0x63,
//   OP_inc = 0x64,
//   OP_dec = 0x65,
//   OP_bit_or = 0x66,
//   OP_bit_ex_or = 0x67,
//   OP_bit_and = 0x68,
//   OP_equality = 0x69,
//   OP_inequality = 0x6A,
//   OP_less = 0x6B,
//   OP_greater = 0x6C,
//   OP_less_equal = 0x6D,
//   OP_greater_equal = 0x6E,
//   OP_shift_left = 0x6F,
//   OP_shift_right = 0x70,
//   OP_plus = 0x71,
//   OP_minus = 0x72,
//   OP_multiply = 0x73,
//   OP_divide = 0x74,
//   OP_mod = 0x75,
//   OP_size = 0x76,
//   OP_waittillmatch = 0x77,
//   OP_waittill = 0x78,
//   OP_notify = 0x79,
//   OP_endon = 0x7A,
//   OP_voidCodepos = 0x7B,
//   OP_switch = 0x7C,
//   OP_endswitch = 0x7D,
//   OP_vector = 0x7E,
//   OP_NOP = 0x7F,
//   OP_abort = 0x80,
//   OP_object = 0x81,
//   OP_thread_object = 0x82,
//   OP_EvalLocalVariable = 0x83,
//   OP_EvalLocalVariableRef = 0x84,
//   OP_prof_begin = 0x85,
//   OP_prof_end = 0x86,
//   OP_breakpoint = 0x87,
//   OP_assignmentBreakpoint = 0x88,
//   OP_manualAndAssignmentBreakpoint = 0x89,
//   OP_count = 0x8A,
// };

// /* 623 */
// enum $163B9C0612FD4ACE1362B609A50B207A : __int32
// {
//   MT_TYPE_EMPTY = 0x0,
//   MT_TYPE_THREAD = 0x1,
//   MT_TYPE_VECTOR = 0x2,
//   MT_TYPE_ANIM_NOTETRACK = 0x3,
//   MT_TYPE_ANIM_TREE = 0x4,
//   MT_TYPE_SMALL_ANIM_TREE = 0x5,
//   MT_TYPE_EXTERNAL = 0x6,
//   MT_TYPE_TEMP = 0x7,
//   MT_TYPE_SURFACE = 0x8,
//   MT_TYPE_ANIM_PART = 0x9,
//   MT_TYPE_MODEL_PART = 0xA,
//   MT_TYPE_MODEL_PART_MAP = 0xB,
//   MT_TYPE_MODEL_DUPLICATE_PARTS = 0xC,
//   MT_TYPE_MODEL_LIST = 0xD,
//   MT_TYPE_SCRIPT_PARSE = 0xE,
//   MT_TYPE_SCRIPT_STRING = 0xF,
//   MT_TYPE_CLASS = 0x10,
//   MT_TYPE_TAG_INFO = 0x11,
//   MT_TYPE_ANIMSCRIPTED = 0x12,
//   MT_TYPE_CONFIG_STRING = 0x13,
//   MT_TYPE_DEBUGGER_STRING = 0x14,
//   MT_TYPE_VEHICLE = 0x15,
//   MT_TYPE_GENERIC = 0x16,
//   MT_TYPE_COUNT = 0x17,
// };

// /* 624 */
// enum printParm_t : __int32
// {
//   PRINT_ALL = 0x0,
//   PRINT_DEVELOPER = 0x1,
//   PRINT_WARNING = 0x2,
//   PRINT_ERROR = 0x3,
// };

// /* 625 */
// enum $58F52E26B27655EC9A5E0AD682A1F43F : __int32
// {
//   STEP_CONTINUE = 0x0,
//   STEP_OVER = 0x1,
//   STEP_INTO = 0x2,
//   STEP_OUT = 0x3,
//   STEP_AUTO = 0x4,
// };

 /* 626 */
enum FsListBehavior_e : __int32
{
  FS_LIST_PURE_ONLY = 0x0,
  FS_LIST_ALL = 0x1,
};

// /* 627 */
// enum $4ED498BBBB7609BF2C0277D690FCD989 : __int32
// {
//   HASH_STAT_FREE = 0x0,
//   HASH_STAT_MOVABLE = 0x10000,
//   HASH_STAT_HEAD = 0x20000,
//   HASH_STAT_MASK = 0x30000,
// };

// /* 628 */
// enum $CEAB46625C953059CD23D6CC88D02635 : __int32
// {
//   HASH_NEXT_MASK = 0xFFFF,
// };

// /* 629 */
// enum $502B0C7BD8EA39A2665349C92DF15C50 : __int32
// {
//   SAVE_OBJECT_DEFAULT = 0x0,
//   SAVE_OBJECT_THREAD = 0x1,
//   SAVE_OBJECT_NOTIFY_THREAD = 0x2,
//   SAVE_OBJECT_TIME_THREAD = 0x3,
//   SAVE_OBJECT_CHILD_THREAD = 0x4,
//   SAVE_OBJECT_DEAD_ENTITY = 0x5,
// };

// /* 630 */
// enum $689E3F8954B9CD60DF21AA6907596934 : __int32
// {
//   SCR_DEV_NO = 0x0,
//   SCR_DEV_YES = 0x1,
//   SCR_DEV_IGNORE = 0x2,
//   SCR_DEV_EVALUATE = 0x3,
// };

// /* 631 */
// enum $8E5CCC555C45FBF450946C2CEB12D847 : __int32
// {
//   INITIAL_OPCODE_LOOKUP_LEN = 0x40000,
//   INITIAL_CLIENT_OPCODE_LOOKUP_LEN = 0x4000,
//   INITIAL_SOURCEPOS_LOOKUP_LEN = 0x60000,
//   INITIAL_CLIENT_SOURCEPOS_LOOKUP_LEN = 0x6000,
//   INITIAL_SOURCEBUFFER_LOOKUP_LEN = 0x100,
//   INITIAL_CLIENT_SOURCEBUFFER_LOOKUP_LEN = 0x10,
// };

// /* 632 */
// enum $82B1EE505F6D7AECF79BE08F2A6FCFF8 : __int32
// {
//   SOURCE_TYPE_BREAKPOINT = 0x1,
//   SOURCE_TYPE_CALL = 0x2,
//   SOURCE_TYPE_THREAD_START = 0x4,
//   SOURCE_TYPE_BUILTIN_CALL = 0x8,
//   SOURCE_TYPE_NOTIFY = 0x10,
// };

// /* 633 */
// enum $0372D9E8900E844FF1DA721F78B81D8D : __int32
// {
//   DEBUG_MSG_VOID = 0x0,
//   DEBUG_MSG_SCR_READ_FILE = 0x1,
//   DEBUG_MSG_SCR_BEGIN_LOAD_SCRIPTS = 0x2,
//   DEBUG_MSG_SCR_END_LOAD_SCRIPTS = 0x3,
//   DEBUG_MSG_SCR_ADD_TEXT = 0x4,
//   DEBUG_MSG_SCR_ADD_TEXT_REPLY = 0x5,
//   DEBUG_MSG_SCR_PASTE_ELEMENT = 0x6,
//   DEBUG_MSG_SCR_PASTE_ELEMENT_REPLY = 0x7,
//   DEBUG_MSG_SCR_INSERT_ELEMENT = 0x8,
//   DEBUG_MSG_SCR_INSERT_ELEMENT_REPLY = 0x9,
//   DEBUG_MSG_SCR_DELETE_ELEMENT = 0xA,
//   DEBUG_MSG_SCR_DELETE_ELEMENT_REPLY = 0xB,
//   DEBUG_MSG_SCR_BACKSPACE_ELEMENT = 0xC,
//   DEBUG_MSG_SCR_BACKSPACE_ELEMENT_REPLY = 0xD,
//   DEBUG_MSG_SCR_CLONE_ELEMENT = 0xE,
//   DEBUG_MSG_SCR_CLONE_ELEMENT_REPLY = 0xF,
//   DEBUG_MSG_SCR_EXPAND_ELEMENT = 0x10,
//   DEBUG_MSG_SCR_SELECT_ELEMENT = 0x11,
//   DEBUG_MSG_SCR_TOGGLE_EXPAND_ELEMENT = 0x12,
//   DEBUG_MSG_SCR_EVALUATE = 0x13,
//   DEBUG_MSG_SCR_TOGGLE_BREAKPOINT = 0x14,
//   DEBUG_MSG_SCR_TOGGLE_BREAKPOINT_REPLY = 0x15,
//   DEBUG_MSG_SCR_HIT_BREAKPOINT = 0x16,
//   DEBUG_MSG_SCR_SORT_HIT_BREAKPOINTS_TOP = 0x17,
//   DEBUG_MSG_SCR_STEP = 0x18,
//   DEBUG_MSG_SCR_RUN_TO_CURSOR = 0x19,
//   DEBUG_MSG_SCR_TOGGLE_WATCH_BREAKPOINT = 0x1A,
//   DEBUG_MSG_SCR_TOGGLE_WATCH_BREAKPOINT_REPLY = 0x1B,
//   DEBUG_MSG_SCR_WATCH_ELEMENT_HIT_BREAKPOINT = 0x1C,
//   DEBUG_MSG_SCR_FREE_WATCH_ELEMENT_CHILDREN = 0x1D,
//   DEBUG_MSG_SCR_SET_ELEMENT_OBJECT_TYPE = 0x1E,
//   DEBUG_MSG_SCR_SET_ELEMENT_THREAD_START = 0x1F,
//   DEBUG_MSG_SCR_SET_ELEMENT_VALUE_TEXT = 0x20,
//   DEBUG_MSG_SCR_SET_NON_FIELD_REF_TEXT = 0x21,
//   DEBUG_MSG_SCR_SET_ELEMENT_REF_TEXT = 0x22,
//   DEBUG_MSG_SCR_SET_CHILD_COUNT = 0x23,
//   DEBUG_MSG_SCR_UPDATE = 0x24,
//   DEBUG_MSG_SCR_UPDATE_WATCH_HEIGHT = 0x25,
//   DEBUG_MSG_SCR_KEEP_ALIVE = 0x26,
//   DEBUG_MSG_SCR_DISPLAY_THREAD_POS = 0x27,
//   DEBUG_MSG_SCR_SELECT_SCRIPT_LINE = 0x28,
//   DEBUG_MSG_SCR_SORT_ELEMENT_CHILDREN = 0x29,
//   DEBUG_MSG_PRINT_MESSAGE = 0x2A,
//   DEBUG_MSG_CONSOLE_FIX_POS = 0x2B,
//   DEBUG_MSG_PAUSE = 0x2C,
//   DEBUG_MSG_SCR_ENTER_CALL = 0x2D,
//   DEBUG_MSG_COUNT = 0x2E,
// };

// /* 634 */
// enum $D1294A89E6A9ED9241E170FD33144FB1 : __int32
// {
//   BUILTIN_ANY = 0x0,
//   BUILTIN_DEVELOPER_ONLY = 0x1,
// };

// /* 635 */
// enum $710690B3316F52083F64DFA9948A35C4 : __int32
// {
//   SCR_BREAKPOINT_NONE = 0x0,
//   SCR_BREAKPOINT_NORMAL = 0x1,
//   SCR_BREAKPOINT_CONDITIONAL = 0x2,
//   SCR_BREAKPOINT_DISABLED = 0x3,
//   SCR_BREAKPOINT_LINE_DISABLED = 0x4,
//   SCR_BREAKPOINT_LINE_NORMAL = 0x5,
//   SCR_BREAKPOINT_BUILTIN_NORMAL = 0x6,
//   SCR_BREAKPOINT_BUILTIN_DISABLED = 0x7,
// };

// /* 636 */
// enum $4374AA28AEDC7C5E5529F124946950D8 : __int32
// {
//   WATCH_NAME_SIZE = 0x0,
//   WATCH_NAME_OBJECT = 0x1,
//   WATCH_NAME_ENDONS = 0x2,
//   WATCH_NAME_SELF = 0x3,
//   WATCH_NAME_THREADS = 0x4,
//   WATCH_NAME_COUNT = 0x5,
// };

// /* 637 */
// enum $EDD06E5CBBD869D4216A6D95FFB551B3 : __int32
// {
//   THREAD_COUNT = 0x0,
//   THREAD_INDICES = 0x1,
// };

// /* 638 */
// enum $11C64C00F3ABDB80799A2860E5481167 : __int32
// {
//   CALL_NONE = 0x0,
//   CALL_BUILTIN = 0x1,
//   CALL_THREAD = 0x2,
//   CALL_FUNCTION = 0x3,
// };

// /* 639 */
// enum $BB7F4801BC8A3FB836B39ECFF8B5BEFB : __int32
// {
//   FUNC_SCOPE_LOCAL = 0x0,
//   FUNC_SCOPE_FAR = 0x1,
// };

// /* 640 */
// enum $F70A79649926715426B3C355C6FD927A : __int32
// {
//   SCR_ABORT_NONE = 0x0,
//   SCR_ABORT_CONTINUE = 0x1,
//   SCR_ABORT_BREAK = 0x2,
//   SCR_ABORT_RETURN = 0x3,
//   SCR_ABORT_MAX = 0x3,
// };

// /* 641 */
// enum $001F8121AA8E2EDF3972862560FB3F73 : __int32
// {
//   ANIMPROP_LOOPSYNC = 0x0,
//   ANIMPROP_NONLOOPSYNC = 0x1,
//   ANIMPROP_COMPLETE = 0x2,
//   ANIMPROP_ADDITIVE = 0x3,
//   ANIMPROP_CLIENT = 0x4,
//   ANIMPROP_SEPARATE = 0x5,
//   ANIMPROP_FORCELOAD = 0x6,
//   ANIMPROP_COUNT = 0x7,
// };

// /* 642 */
// enum ValueType : __int32
// {
//   VALT_NUMBER = 0x0,
//   VALT_IDENTIFIER = 0x1,
//   VALT_BAD = 0x2,
// };

// /* 643 */
// enum XExpr::MathTypes : __int32
// {
//   NUMBER = 0x0,
//   VECTOR_2D = 0x1,
//   VECTOR_3D = 0x2,
//   MAX_MATH_TYPES = 0x3,
// };

// /* 644 */
// enum XExpr::MathOpcodes : __int32
// {
//   OP_PUSH_VALUE = 0x0,
//   OP_PUSH_PARAM = 0x1,
//   OP_PUSH_STD_PARAM = 0x2,
//   OP_ADD_VALUES = 0x3,
//   OP_SUBTRACT_2_FROM_1 = 0x4,
//   OP_MULTIPLY_VALUES = 0x5,
//   OP_DIVIDE_2_FROM_1 = 0x6,
//   OP_CONSTRUCT_VEC2 = 0x7,
//   OP_CONSTRUCT_VEC3 = 0x8,
//   OP_DOT_PRODUCT = 0x9,
//   OP_CROSS_PRODUCT = 0xA,
//   MAX_NUM_OPCODES = 0xB,
// };

// /* 645 */
// enum XExpr::ParamTypes : __int32
// {
//   PT_FLOAT = 0x0,
//   PT_NORM_FLOAT = 0x1,
//   PT_VEC2 = 0x2,
//   PT_NORM_VEC2 = 0x3,
//   PT_UNIT_VEC2 = 0x4,
//   PT_VEC3 = 0x5,
//   PT_NORM_VEC3 = 0x6,
//   PT_UNIT_VEC3 = 0x7,
//   PT_MAX_PARAM_TYPES = 0x8,
// };

// /* 646 */
// enum $4261C902CEEB0B31C1E1EA50445DAD10 : __int32
// {
//   ANIMTREE_NAMES = 0x0,
//   ANIMTREE_XANIM = 0x1,
// };

// /* 647 */
// enum $831D26F65ACA5D893288ED65A80C00F7 : __int32
// {
//   ANIMTREE_PROPERTIES = 0x0,
//   ANIMTREE_HAS_CHILDREN = 0x1,
//   NUM_NON_COMPONENT_ANIMTREE_VALUES = 0x2,
//   ANIMTREE_COMPONENT_TIME = 0x2,
//   ANIMTREE_COMPONENT_BLEND = 0x3,
//   NUM_ANIMTREE_VALUES = 0x4,
// };

// /* 648 */
// enum ExpressionParseTypes : __int32
// {
//   ET_PLUS = 0x0,
//   ET_MINUS = 0x1,
//   END_OF_RANK1 = 0x2,
//   ET_MULTIPLY = 0x2,
//   ET_DIVIDE = 0x3,
//   END_OF_RANK2 = 0x4,
//   ET_LEFT_PAREN = 0x4,
//   ET_RIGHT_PAREN = 0x5,
//   ET_VEC2_CONST = 0x6,
//   ET_VEC3_CONST = 0x7,
//   ET_DOT_PROD_FUNC = 0x8,
//   ET_CROSS_PROD_FUNC = 0x9,
//   ET_SINGLE_VALUE = 0xA,
//   ET_GET_PARAMETER = 0xB,
//   ET_GET_STD_PARAM = 0xC,
//   END_OF_RANK3 = 0xD,
//   ETS_COMMA = 0xD,
//   NUM_EXPR_TYPES = 0xE,
// };

// /* 649 */
// enum ScriptTokenizer::TokenType : __int32
// {
//   TOK_IDENTIFIER = 0x0,
//   TOK_SYMBOL = 0x1,
//   TOK_NUMBER = 0x2,
//   TOK_UNKNOWN = 0x3,
// };

// /* 650 */
// enum XExpr::ParamAccessClasses : __int32
// {
//   PAC_EXTERNAL = 0x0,
//   PAC_INTERNAL = 0x1,
//   PAC_CLIENT = 0x2,
//   PAC_MAX_ACCESS_CLASSES = 0x3,
// };

// /* 651 */
// enum $463BEF047D29C8C80271E48A05C26EF2 : __int32
// {
//   PM_WATER_LEVEL_NONE = 0x0,
//   PM_WATER_LEVEL_SHALLOW = 0x1,
//   PM_WATER_LEVEL_WAIST = 0x2,
//   PM_WATER_LEVEL_SWIM = 0x3,
//   PM_WATER_LEVEL_DEEP = 0x4,
//   PM_WATER_LEVEL_UNDER_WATER = 0x5,
//   PM_WATER_LEVEL_COUNT = 0x6,
// };

// /* 652 */
// enum snd_flame_source_flags : __int32
// {
//   SND_FLAME_SOURCE_NONE = 0x0,
//   SND_FLAME_SOURCE_TURN_ON = 0x1,
//   SND_FLAME_SOURCE_TURN_OFF = 0x2,
//   SND_FLAME_SOURCE_IS_FIRING = 0x4,
// };

// /* 653 */
// enum TerrainFireSource : __int32
// {
//   TFS_DEFAULT = 0x0,
//   TFS_FLAMETHROWER = 0x1,
// };

// /* 654 */
// enum FLAME_TYPE : __int32
// {
//   FLAME_TYPE_STREAM = 0x0,
//   FLAME_TYPE_CHUNK = 0x1,
//   FLAME_TYPE_FIRE = 0x2,
//   FLAME_TYPE_SMOKE = 0x3,
//   FLAME_TYPE_DRIP = 0x4,
// };

// /* 655 */
// enum cCurve::eCurveType : __int32
// {
//   CURVE_RNS = 0x0,
//   CURVE_SNS = 0x1,
//   CURVE_TNS = 0x2,
//   CURVE_BSPLINE = 0x3,
// };

// /* 656 */
// enum IKBoneNames : __int32
// {
//   IKBONE_NONE = 0xFFFFFFFF,
//   IKBONE_FIRST = 0x0,
//   IKBONE_ORIGIN = 0x0,
//   IKBONE_PELVIS = 0x1,
//   IKBONE_SPINE = 0x2,
//   IKBONE_SPINE1 = 0x3,
//   IKBONE_SPINE2 = 0x4,
//   IKBONE_NECK = 0x5,
//   IKBONE_HEAD = 0x6,
//   IKBONE_LCLAVICLE = 0x7,
//   IKBONE_LUPPERARM = 0x8,
//   IKBONE_LFOREARM = 0x9,
//   IKBONE_LHAND = 0xA,
//   IKBONE_LWRIST_TWIST = 0xB,
//   IKBONE_RCLAVICLE = 0xC,
//   IKBONE_RUPPERARM = 0xD,
//   IKBONE_RFOREARM = 0xE,
//   IKBONE_RHAND = 0xF,
//   IKBONE_LTHIGH = 0x10,
//   IKBONE_LCALF = 0x11,
//   IKBONE_LFOOT = 0x12,
//   IKBONE_RTHIGH = 0x13,
//   IKBONE_RCALF = 0x14,
//   IKBONE_RFOOT = 0x15,
//   IKBONE_RWEAPON = 0x16,
//   IKBONE_COUNT = 0x17,
// };

// /* 657 */
// enum IKEntityStatusFunctions : __int32
// {
//   IKSTATUS_SPECTATING = 0x0,
//   IKSTATUS_PRONE = 0x1,
//   IKSTATUS_CROUCHING = 0x2,
//   IKSTATUS_FIRING = 0x3,
//   IKSTATUS_MOUNTED_TURRET = 0x4,
//   IKSTATUS_APPLY_TERRAIN_MAPPING = 0x5,
//   IKSTATUS_BYPASS_TERRAIN_MAPPING = 0x6,
//   IKSTATUS_APPLY_LEFT_HAND_IK = 0x7,
//   IKSTATUS_APPLY_RIGHT_HAND_IK = 0x8,
//   IKSTATUS_MOVING = 0x9,
//   IKSTATUS_COUNT = 0xA,
// };

// /* 658 */
// enum IKLayerNames : __int32
// {
//   IKLAYER_CROUCH_ACTIVE = 0x0,
//   IKLAYER_PRONE_ACTIVE = 0x1,
//   IKLAYER_PRONE_SLOW_FADE_ACTIVE = 0x2,
//   IKLAYER_NOT_MOVING = 0x3,
//   IKLAYER_NOT_MOVING_MED = 0x4,
//   IKLAYER_NOT_MOVING_FAST = 0x5,
//   IKLAYER_MINIGUN_ACTIVE = 0x6,
//   IKLAYER_SHOTGUN_ACTIVE = 0x7,
//   IKLAYER_PELVIS_TEST = 0x8,
//   IKLAYER_TERRAIN_MAPPING = 0x9,
//   IKLAYER_HAND_TEST = 0xA,
//   IKLAYER_LEFT_HAND_ON_GUN = 0xB,
//   IKLAYER_RIGHT_HAND_ON_GUN = 0xC,
//   IKLAYER_PLAYER_PITCH = 0xD,
//   IKLAYER_WII_HANDS = 0xE,
//   IKLAYER_VEHICLE_GUNNER_OFFSET = 0xF,
//   IKLAYER_TURRET_FIRING = 0x10,
//   IKLAYER_TURRET_OFFSET = 0x11,
//   IKLAYER_PLAYER_CONTROLLERS = 0x12,
//   IKLAYER_LOOK_AT_ENTITY = 0x13,
//   IKLAYER_PREVENT_HEAD_CLIP = 0x14,
//   IKLAYER_COUNT = 0x15,
// };

// /* 659 */
// enum IKDvarNames : __int32
// {
//   IK_DVAR_ENABLE = 0x0,
//   IK_DVAR_DEBUG = 0x1,
//   IK_DVAR_PELVIS_TEST = 0x2,
//   IK_DVAR_FOOT_TEST = 0x3,
//   IK_DVAR_HAND_TEST = 0x4,
//   IK_DVAR_LEFT_HAND_LERP_TEST = 0x5,
//   IK_DVAR_RIGHT_HAND_LERP_TEST = 0x6,
//   IK_DVAR_ENABLE_PLAYER_HAND = 0x7,
//   IK_DVAR_ENABLE_PLAYER_TERRAIN = 0x8,
//   IK_DVAR_ENABLE_AI_HAND = 0x9,
//   IK_DVAR_ENABLE_AI_TERRAIN = 0xA,
//   IK_DVAR_HAND_TUNING = 0xB,
//   IK_DVAR_HAND_OFFSET_VEC = 0xC,
//   IK_DVAR_HAND_ROTATION_VEC = 0xD,
//   IK_DVAR_PARANOID_MATRIX_CHECKS = 0xE,
//   IK_DVAR_ACTOR_TRACKING_SCALE = 0xF,
//   IK_DVAR_PITCH_LIMIT_THRESH = 0x10,
//   IK_DVAR_PITCH_LIMIT_MAX = 0x11,
//   IK_DVAR_ROLL_LIMIT_THRESH = 0x12,
//   IK_DVAR_ROLL_LIMIT_MAX = 0x13,
//   IK_DVAR_YAW_LIMIT_THRESH = 0x14,
//   IK_DVAR_YAW_LIMIT_MAX = 0x15,
//   IK_DVAR_LOOKATENTITY_NOTORSO = 0x16,
//   IK_DVAR_COUNT = 0x17,
// };

// /* 660 */
// enum IKDebug : __int32
// {
//   IK_DEBUG_OFF = 0x0,
//   IK_DEBUG_FOOT_TRACE = 0x1,
//   IK_DEBUG_SHOW_SKELETON = 0x2,
//   IK_DEBUG_COUNT = 0x3,
// };

// /* 661 */
// enum IKFootNames : __int32
// {
//   IKFOOT_LEFT = 0x0,
//   IKFOOT_RIGHT = 0x1,
//   IKFOOT_COUNT = 0x2,
// };

// /* 662 */
// enum IKJoints : __int32
// {
//   IKJOINT_LEFT_ARM = 0x0,
//   IKJOINT_RIGHT_ARM = 0x1,
//   IKJOINT_LEFT_LEG = 0x2,
//   IKJOINT_RIGHT_LEG = 0x3,
//   IKJOINT_COUNT = 0x4,
// };

// /* 663 */
// enum IKHandNames : __int32
// {
//   IKHAND_LEFT = 0x0,
//   IKHAND_RIGHT = 0x1,
//   IKHAND_COUNT = 0x2,
// };

// /* 664 */
// enum IKWeaponOffsetType : __int32
// {
//   IKWEAPOFS_DEFAULT = 0x0,
//   IKWEAPOFS_PISTOL = 0x1,
//   IKWEAPOFS_SHOULDER = 0x2,
//   IKWEAPOFS_MINIGUN = 0x3,
//   IKWEAPOFS_GRENADE = 0x4,
//   IKWEAPOFS_COUNT = 0x5,
// };

// /* 665 */
// enum IKWeaponClass : __int32
// {
//   IKWEAPCLASS_DEFAULT = 0x0,
//   IKWEAPCLASS_SHOTGUN = 0x1,
//   IKWEAPCLASS_COUNT = 0x2,
// };

// /* 666 */
// enum IKDebugColor : __int32
// {
//   IK_DEBUG_COLOR_RED = 0x0,
//   IK_DEBUG_COLOR_GREEN = 0x1,
//   IK_DEBUG_COLOR_BLUE = 0x2,
//   IK_DEBUG_COLOR_LIGHT_CYAN = 0x3,
// };

// /* 667 */
// enum $621CCC1FA0C4C6834FE71BE1F8271262 : __int32
// {
//   DOBJ_IS_SERVER = 0x1,
//   DOBJ_IS_LOCAL_PLAYER = 0x2,
//   DOBJ_IS_RECORDED = 0x4,
//   DOBJ_IS_IK_ACTIVE = 0x8,
//   DOBJ_IS_IK_LEFT_HAND_GRIP_ACTIVE = 0x10,
//   DOBJ_IS_PLAYER_SHADOW = 0x20,
//   DOBJ_MAX_FLAGS = 0x80,
// };

// /* 668 */
// enum $69AF8E44C9D6025F282D494F15F1F016 : __int32
// {
//   PART_TYPE_NO_QUAT = 0x0,
//   PART_TYPE_HALF_QUAT = 0x1,
//   PART_TYPE_FULL_QUAT = 0x2,
//   PART_TYPE_HALF_QUAT_NO_SIZE = 0x3,
//   PART_TYPE_FULL_QUAT_NO_SIZE = 0x4,
//   PART_TYPE_SMALL_TRANS = 0x5,
//   PART_TYPE_TRANS = 0x6,
//   PART_TYPE_TRANS_NO_SIZE = 0x7,
//   PART_TYPE_NO_TRANS = 0x8,
//   PART_TYPE_ALL = 0x9,
//   PART_TYPE_COUNT = 0xA,
// };

// /* 669 */
// enum IKMiscBoneNames : __int32
// {
//   IKMISC_WEAPON_LEFT_HAND_IK = 0x0,
//   IKMISC_WEAPON_RIGHT_HAND_IK = 0x1,
//   IKMISC_TAG_HEAD = 0x2,
//   IKMISC_COUNT = 0x3,
// };

// /* 670 */
// enum _D3DXCLEANTYPE : __int32
// {
//   D3DXCLEAN_BACKFACING = 0x1,
//   D3DXCLEAN_BOWTIES = 0x2,
//   D3DXCLEAN_SKINNING = 0x1,
//   D3DXCLEAN_OPTIMIZATION = 0x1,
//   D3DXCLEAN_SIMPLIFICATION = 0x3,
// };

// /* 671 */
// enum _MAX_FVF_DECL_SIZE : __int32
// {
//   MAX_FVF_DECL_SIZE = 0x41,
// };

// /* 672 */
// enum _D3DXREGISTER_SET : __int32
// {
//   D3DXRS_BOOL = 0x0,
//   D3DXRS_INT4 = 0x1,
//   D3DXRS_FLOAT4 = 0x2,
//   D3DXRS_SAMPLER = 0x3,
//   D3DXRS_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 673 */
// enum _D3DXPARAMETER_CLASS : __int32
// {
//   D3DXPC_SCALAR = 0x0,
//   D3DXPC_VECTOR = 0x1,
//   D3DXPC_MATRIX_ROWS = 0x2,
//   D3DXPC_MATRIX_COLUMNS = 0x3,
//   D3DXPC_OBJECT = 0x4,
//   D3DXPC_STRUCT = 0x5,
//   D3DXPC_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 674 */
// enum _D3DXPARAMETER_TYPE : __int32
// {
//   D3DXPT_VOID = 0x0,
//   D3DXPT_BOOL = 0x1,
//   D3DXPT_INT = 0x2,
//   D3DXPT_FLOAT = 0x3,
//   D3DXPT_STRING = 0x4,
//   D3DXPT_TEXTURE = 0x5,
//   D3DXPT_TEXTURE1D = 0x6,
//   D3DXPT_TEXTURE2D = 0x7,
//   D3DXPT_TEXTURE3D = 0x8,
//   D3DXPT_TEXTURECUBE = 0x9,
//   D3DXPT_SAMPLER = 0xA,
//   D3DXPT_SAMPLER1D = 0xB,
//   D3DXPT_SAMPLER2D = 0xC,
//   D3DXPT_SAMPLER3D = 0xD,
//   D3DXPT_SAMPLERCUBE = 0xE,
//   D3DXPT_PIXELSHADER = 0xF,
//   D3DXPT_VERTEXSHADER = 0x10,
//   D3DXPT_PIXELFRAGMENT = 0x11,
//   D3DXPT_VERTEXFRAGMENT = 0x12,
//   D3DXPT_UNSUPPORTED = 0x13,
//   D3DXPT_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 675 */
// enum _D3DXINCLUDE_TYPE : __int32
// {
//   D3DXINC_LOCAL = 0x0,
//   D3DXINC_SYSTEM = 0x1,
//   D3DXINC_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 676 */
// enum Phys_ObjFlags : __int32
// {
//   PHYS_OBJ_FLAG_ENABLE_EFFECTS = 0x1,
//   PHYS_OBJ_FLAG_BUOYANT_IN_MITTON_WATER = 0x2,
//   PHYS_OBJ_FLAG_FLOAT_LONGER = 0x4,
//   PHYS_OBJ_DISABLE_DEPTH_BUOYANCY_ADJUSTMENTS = 0x8,
//   PHYS_OBJ_FLAG_FORCE_BUOYANCY = 0x10,
//   PHYS_OBJ_FLAG_RAGDOLL_BONE = 0x20,
// };

// /* 677 */
// enum JointType : __int32
// {
//   RAGDOLL_JOINT_NONE = 0x0,
//   RAGDOLL_JOINT_HINGE = 0x1,
//   RAGDOLL_JOINT_SWIVEL = 0x2,
// };

 /* 678 */
enum RagdollBodyState : __int32
{
  BS_DEAD = 0x0,
  BS_DOBJ_WAIT = 0x1,
  BS_VELOCITY_CAPTURE = 0x2,
  BS_TUNNEL_TEST = 0x3,
  BS_RUNNING = 0x4,
  BS_IDLE = 0x5,
  RAGDOLL_NUM_STATES = 0x6,
};

// /* 679 */
// typedef phys_free_list<broad_phase_collision_pair>::<unnamed_tag> phys_free_list<RagdollBody>::<unnamed_tag>;

// /* 680 */
// typedef phys_free_list<broad_phase_collision_pair>::<unnamed_tag> phys_free_list<PhysObjUserData>::<unnamed_tag>;

// /* 681 */
// enum PhysicsGeomType : __int32
// {
//   PHYS_GEOM_NONE = 0x0,
//   PHYS_GEOM_BOX = 0x1,
//   PHYS_GEOM_BRUSH = 0x2,
//   PHYS_GEOM_CYLINDER = 0x3,
//   PHYS_GEOM_CYLINDER_LARGE = 0x4,
//   PHYS_GEOM_CAPSULE = 0x5,
//   PHYS_GEOM_POINT = 0x6,
//   PHYS_GEOM_COUNT = 0x7,
// };

// /* 682 */
// enum pmoveVehAnimState_t : __int32
// {
//   PMOVE_VEH_ANIM_STATE_PLAYING = 0x0,
//   PMOVE_VEH_ANIM_STATE_END_STAGE = 0x1,
//   PMOVE_VEH_ANIM_STATE_COMPLETE = 0x2,
// };

// /* 683 */
// enum $F80C8ACBCD3A24FCA4AC8E28125D49A3 : __int32
// {
//   CFT_TYPE = 0xF,
//   CFT_NUM = 0x10,
// };

// /* 684 */
// typedef phys_free_list<broad_phase_collision_pair>::<unnamed_tag> phys_free_list<user_rigid_body>::<unnamed_tag>;

// /* 685 */
// typedef phys_free_list<broad_phase_collision_pair>::<unnamed_tag> phys_free_list<rigid_body_constraint_distance>::<unnamed_tag>;

// /* 686 */
// typedef phys_free_list<broad_phase_collision_pair>::<unnamed_tag> phys_free_list<rigid_body_constraint_wheel>::<unnamed_tag>;

// /* 687 */
// typedef phys_free_list<broad_phase_collision_pair>::<unnamed_tag> phys_free_list<rigid_body_constraint_angular_actuator>::<unnamed_tag>;

// /* 688 */
// typedef phys_free_list<broad_phase_collision_pair>::<unnamed_tag> phys_free_list<rigid_body_constraint_custom_orientation>::<unnamed_tag>;

// /* 689 */
// typedef phys_free_list<broad_phase_collision_pair>::<unnamed_tag> phys_free_list<rigid_body_constraint_hinge>::<unnamed_tag>;

// /* 690 */
// enum phys_convex_hull::<unnamed_tag> : __int32
// {
//   MAX_INPUT_VERTICES = 0x1800,
// };

// /* 691 */
// typedef phys_free_list<broad_phase_collision_pair>::<unnamed_tag> phys_free_list<rigid_body_constraint_upright>::<unnamed_tag>;

// /* 692 */
// typedef phys_free_list<broad_phase_collision_pair>::<unnamed_tag> phys_free_list<rigid_body_constraint_point>::<unnamed_tag>;

// /* 693 */
// typedef phys_free_list<broad_phase_collision_pair>::<unnamed_tag> phys_free_list<rigid_body_constraint_contact>::<unnamed_tag>;

// /* 694 */
// typedef phys_free_list<broad_phase_collision_pair>::<unnamed_tag> phys_free_list<rigid_body_constraint_custom_path>::<unnamed_tag>;

// /* 695 */
// enum pulse_sum_angular::flags_e : __int32
// {
//   APPLY_MIN_FACTOR = 0x1,
// };

// /* 696 */
// enum physics_system::physics_system_flags_e : __int32
// {
//   FLAG_IN_COLLISION_CALLBACK = 0x1,
// };

// /* 697 */
// typedef phys_free_list<broad_phase_collision_pair>::<unnamed_tag> phys_free_list<rigid_body>::<unnamed_tag>;

// /* 698 */
// typedef phys_free_list<broad_phase_collision_pair>::<unnamed_tag> phys_free_list<rigid_body_constraint_ragdoll>::<unnamed_tag>;

// /* 699 */
// enum GjkTraceGeom::<unnamed_tag> : __int32
// {
//   MAX_GEOMS = 0x32,
// };

// /* 700 */
// typedef pulse_sum_angular::flags_e pulse_sum_normal::flags_e;

// /* 701 */
// typedef phys_free_list<broad_phase_collision_pair>::<unnamed_tag> phys_free_list<VehicleParameter>::<unnamed_tag>;

// /* 702 */
// typedef phys_free_list<broad_phase_collision_pair>::<unnamed_tag> phys_free_list<NitrousVehicle>::<unnamed_tag>;

// /* 703 */
// enum surface_types_e : __int32
// {
//   SURFACE_TYPE_PROP = 0x1F,
//   SURFACE_TYPE_RAGDOLL = 0x20,
//   SURFACE_TYPE_TERRAIN = 0x21,
// };

// /* 704 */
// enum $5B2FCDCAD029325A4078FE8CC1D2FD25 : __int32
// {
//   FX_TYPE_BULLET_HIT_SMALL_NORMAL = 0x0,
//   FX_TYPE_BULLET_HIT_SMALL_EXIT = 0x1,
//   FX_TYPE_BULLET_HIT_SMALL_UNDERWATER = 0x2,
//   FX_TYPE_BULLET_HIT_LARGE_NORMAL = 0x3,
//   FX_TYPE_BULLET_HIT_LARGE_EXIT = 0x4,
//   FX_TYPE_SHOTGUN_HIT_NORMAL = 0x5,
//   FX_TYPE_SHOTGUN_HIT_EXIT = 0x6,
//   FX_TYPE_BULLET_HIT_AP_NORMAL = 0x7,
//   FX_TYPE_BULLET_HIT_AP_EXIT = 0x8,
//   FX_TYPE_BULLET_HIT_XTREME_NORMAL = 0x9,
//   FX_TYPE_BULLET_HIT_XTREME_EXIT = 0xA,
//   FX_TYPE_GRENADE_BOUNCE = 0xB,
//   FX_TYPE_GRENADE_EXPLODE = 0xC,
//   FX_TYPE_ROCKET_EXPLODE = 0xD,
//   FX_TYPE_ROCKET_EXPLODE_XTREME = 0xE,
//   FX_TYPE_PROJECTILE_DUD = 0xF,
//   FX_TYPE_MORTAR_SHELL = 0x10,
//   FX_TYPE_TANK_SHELL = 0x11,
//   FX_TYPE_PHYSICS_IMPACT = 0x12,
//   FX_TYPE_BOLT = 0x13,
//   FX_TYPE_BLADE = 0x14,
//   FX_TYPE_COUNT = 0x15,
// };

// /* 705 */
// enum Phys_SurfaceType : __int32
// {
//   EFFECT_SURF_TYPE_HARD = 0x0,
//   EFFECT_SURF_TYPE_SOFT = 0x1,
//   EFFECT_SURF_TYPE_METAL = 0x2,
//   EFFECT_SURF_TYPE_GLASS = 0x3,
//   EFFECT_SURF_TYPE_WATER = 0x4,
//   EFFECT_SURF_TYPE_WOOD = 0x5,
//   EFFECT_SURF_TYPE_FOLIAGE = 0x6,
//   EFFECT_SURF_TYPE_FLESH = 0x7,
//   EFFECT_SURF_TYPE_COUNT = 0x8,
// };

// /* 706 */
// enum Wheel : __int32
// {
//   WHEEL_FL = 0x0,
//   WHEEL_FR = 0x1,
//   WHEEL_BL = 0x2,
//   WHEEL_BR = 0x3,
//   WHEEL_ML = 0x4,
//   WHEEL_MR = 0x5,
// };

// /* 707 */
// enum EVehicleCameraMode : __int32
// {
//   VEH_MODE_FIRSTPERSON = 0x0,
//   VEH_MODE_CHASECAM = 0x1,
//   VEH_MODE_HLO = 0x2,
//   VEH_MODE_STRAFE = 0x3,
//   VEH_MODE_HORSE = 0x4,
//   VEH_MODE_OLDTANK = 0x5,
//   VEH_MODE_MAX = 0x6,
// };

 /* 708 */
enum DevEventType : __int32
{
  EVENT_ACTIVATE = 0x0,
  EVENT_DEACTIVATE = 0x1,
  EVENT_ACCEPT = 0x2,
  EVENT_UPDATE = 0x3,
  EVENT_DRAW = 0x4,
  EVENT_SAVE = 0x5,
};

// /* 709 */
// enum VehicleManualMode : __int32
// {
//   VEH_MANUAL_OFF = 0x0,
//   VEH_MANUAL_ON = 0x1,
//   VEH_MANUAL_TRANS = 0x2,
// };

// /* 710 */
// enum EVehicleBoostMode : __int32
// {
//   VEH_MODE_BOOST_BURST = 0x0,
//   VEH_MODE_BOOST_CONTINUOUS = 0x1,
//   VEH_MODE_BOOST_MAX = 0x2,
// };

// /* 711 */
// enum destructibleFieldType_t : __int32
// {
//   DFT_PIECE0 = 0xF,
//   DFT_PIECE1 = 0x10,
//   DFT_PIECE2 = 0x11,
//   DFT_PIECE3 = 0x12,
//   DFT_PIECE4 = 0x13,
//   DFT_PIECE5 = 0x14,
//   DFT_PIECE6 = 0x15,
//   DFT_PIECE7 = 0x16,
//   DFT_PIECE8 = 0x17,
//   DFT_PIECE9 = 0x18,
//   DFT_PIECE10 = 0x19,
//   DFT_PIECE11 = 0x1A,
//   DFT_PIECE12 = 0x1B,
//   DFT_PIECE13 = 0x1C,
//   DFT_PIECE14 = 0x1D,
//   DFT_PIECE15 = 0x1E,
//   DFT_PIECE16 = 0x1F,
//   DFT_PIECE17 = 0x20,
//   DFT_PIECE18 = 0x21,
//   DFT_PIECE19 = 0x22,
//   DFT_PIECE20 = 0x23,
//   DFT_PIECE21 = 0x24,
//   DFT_PIECE22 = 0x25,
//   DFT_PIECE23 = 0x26,
//   DFT_PIECE24 = 0x27,
//   DFT_PIECE25 = 0x28,
//   DFT_PIECE26 = 0x29,
//   DFT_PIECE27 = 0x2A,
//   DFT_PIECE28 = 0x2B,
//   DFT_PIECE29 = 0x2C,
//   DFT_PIECE30 = 0x2D,
//   DFT_PIECE31 = 0x2E,
//   DFT_PIECE_HEALTH0 = 0x2F,
//   DFT_PIECE_HEALTH1 = 0x30,
//   DFT_PIECE_HEALTH2 = 0x31,
//   DFT_PIECE_HEALTH3 = 0x32,
//   DFT_PIECE_HEALTH4 = 0x33,
//   DFT_PIECE_HEALTH5 = 0x34,
//   DFT_PIECE_HEALTH6 = 0x35,
//   DFT_PIECE_HEALTH7 = 0x36,
//   DFT_PIECE_HEALTH8 = 0x37,
//   DFT_PIECE_HEALTH9 = 0x38,
//   DFT_PIECE_HEALTH10 = 0x39,
//   DFT_PIECE_HEALTH11 = 0x3A,
//   DFT_PIECE_HEALTH12 = 0x3B,
//   DFT_PIECE_HEALTH13 = 0x3C,
//   DFT_PIECE_HEALTH14 = 0x3D,
//   DFT_PIECE_HEALTH15 = 0x3E,
//   DFT_PIECE_HEALTH16 = 0x3F,
//   DFT_PIECE_HEALTH17 = 0x40,
//   DFT_PIECE_HEALTH18 = 0x41,
//   DFT_PIECE_HEALTH19 = 0x42,
//   DFT_PIECE_HEALTH20 = 0x43,
//   DFT_PIECE_HEALTH21 = 0x44,
//   DFT_PIECE_HEALTH22 = 0x45,
//   DFT_PIECE_HEALTH23 = 0x46,
//   DFT_PIECE_HEALTH24 = 0x47,
//   DFT_PIECE_HEALTH25 = 0x48,
//   DFT_PIECE_HEALTH26 = 0x49,
//   DFT_PIECE_HEALTH27 = 0x4A,
//   DFT_PIECE_HEALTH28 = 0x4B,
//   DFT_PIECE_HEALTH29 = 0x4C,
//   DFT_PIECE_HEALTH30 = 0x4D,
//   DFT_PIECE_HEALTH31 = 0x4E,
//   DFT_PARENT_PIECE0 = 0x4F,
//   DFT_PARENT_PIECE1 = 0x50,
//   DFT_PARENT_PIECE2 = 0x51,
//   DFT_PARENT_PIECE3 = 0x52,
//   DFT_PARENT_PIECE4 = 0x53,
//   DFT_PARENT_PIECE5 = 0x54,
//   DFT_PARENT_PIECE6 = 0x55,
//   DFT_PARENT_PIECE7 = 0x56,
//   DFT_PARENT_PIECE8 = 0x57,
//   DFT_PARENT_PIECE9 = 0x58,
//   DFT_PARENT_PIECE10 = 0x59,
//   DFT_PARENT_PIECE11 = 0x5A,
//   DFT_PARENT_PIECE12 = 0x5B,
//   DFT_PARENT_PIECE13 = 0x5C,
//   DFT_PARENT_PIECE14 = 0x5D,
//   DFT_PARENT_PIECE15 = 0x5E,
//   DFT_PARENT_PIECE16 = 0x5F,
//   DFT_PARENT_PIECE17 = 0x60,
//   DFT_PARENT_PIECE18 = 0x61,
//   DFT_PARENT_PIECE19 = 0x62,
//   DFT_PARENT_PIECE20 = 0x63,
//   DFT_PARENT_PIECE21 = 0x64,
//   DFT_PARENT_PIECE22 = 0x65,
//   DFT_PARENT_PIECE23 = 0x66,
//   DFT_PARENT_PIECE24 = 0x67,
//   DFT_PARENT_PIECE25 = 0x68,
//   DFT_PARENT_PIECE26 = 0x69,
//   DFT_PARENT_PIECE27 = 0x6A,
//   DFT_PARENT_PIECE28 = 0x6B,
//   DFT_PARENT_PIECE29 = 0x6C,
//   DFT_PARENT_PIECE30 = 0x6D,
//   DFT_PARENT_PIECE31 = 0x6E,
//   DFT_PARENT_DAMAGE_PERCENT0 = 0x6F,
//   DFT_PARENT_DAMAGE_PERCENT1 = 0x70,
//   DFT_PARENT_DAMAGE_PERCENT2 = 0x71,
//   DFT_PARENT_DAMAGE_PERCENT3 = 0x72,
//   DFT_PARENT_DAMAGE_PERCENT4 = 0x73,
//   DFT_PARENT_DAMAGE_PERCENT5 = 0x74,
//   DFT_PARENT_DAMAGE_PERCENT6 = 0x75,
//   DFT_PARENT_DAMAGE_PERCENT7 = 0x76,
//   DFT_PARENT_DAMAGE_PERCENT8 = 0x77,
//   DFT_PARENT_DAMAGE_PERCENT9 = 0x78,
//   DFT_PARENT_DAMAGE_PERCENT10 = 0x79,
//   DFT_PARENT_DAMAGE_PERCENT11 = 0x7A,
//   DFT_PARENT_DAMAGE_PERCENT12 = 0x7B,
//   DFT_PARENT_DAMAGE_PERCENT13 = 0x7C,
//   DFT_PARENT_DAMAGE_PERCENT14 = 0x7D,
//   DFT_PARENT_DAMAGE_PERCENT15 = 0x7E,
//   DFT_PARENT_DAMAGE_PERCENT16 = 0x7F,
//   DFT_PARENT_DAMAGE_PERCENT17 = 0x80,
//   DFT_PARENT_DAMAGE_PERCENT18 = 0x81,
//   DFT_PARENT_DAMAGE_PERCENT19 = 0x82,
//   DFT_PARENT_DAMAGE_PERCENT20 = 0x83,
//   DFT_PARENT_DAMAGE_PERCENT21 = 0x84,
//   DFT_PARENT_DAMAGE_PERCENT22 = 0x85,
//   DFT_PARENT_DAMAGE_PERCENT23 = 0x86,
//   DFT_PARENT_DAMAGE_PERCENT24 = 0x87,
//   DFT_PARENT_DAMAGE_PERCENT25 = 0x88,
//   DFT_PARENT_DAMAGE_PERCENT26 = 0x89,
//   DFT_PARENT_DAMAGE_PERCENT27 = 0x8A,
//   DFT_PARENT_DAMAGE_PERCENT28 = 0x8B,
//   DFT_PARENT_DAMAGE_PERCENT29 = 0x8C,
//   DFT_PARENT_DAMAGE_PERCENT30 = 0x8D,
//   DFT_PARENT_DAMAGE_PERCENT31 = 0x8E,
//   DFT_BULLET_DAMAGE_SCALE0 = 0x8F,
//   DFT_BULLET_DAMAGE_SCALE1 = 0x90,
//   DFT_BULLET_DAMAGE_SCALE2 = 0x91,
//   DFT_BULLET_DAMAGE_SCALE3 = 0x92,
//   DFT_BULLET_DAMAGE_SCALE4 = 0x93,
//   DFT_BULLET_DAMAGE_SCALE5 = 0x94,
//   DFT_BULLET_DAMAGE_SCALE6 = 0x95,
//   DFT_BULLET_DAMAGE_SCALE7 = 0x96,
//   DFT_BULLET_DAMAGE_SCALE8 = 0x97,
//   DFT_BULLET_DAMAGE_SCALE9 = 0x98,
//   DFT_BULLET_DAMAGE_SCALE10 = 0x99,
//   DFT_BULLET_DAMAGE_SCALE11 = 0x9A,
//   DFT_BULLET_DAMAGE_SCALE12 = 0x9B,
//   DFT_BULLET_DAMAGE_SCALE13 = 0x9C,
//   DFT_BULLET_DAMAGE_SCALE14 = 0x9D,
//   DFT_BULLET_DAMAGE_SCALE15 = 0x9E,
//   DFT_BULLET_DAMAGE_SCALE16 = 0x9F,
//   DFT_BULLET_DAMAGE_SCALE17 = 0xA0,
//   DFT_BULLET_DAMAGE_SCALE18 = 0xA1,
//   DFT_BULLET_DAMAGE_SCALE19 = 0xA2,
//   DFT_BULLET_DAMAGE_SCALE20 = 0xA3,
//   DFT_BULLET_DAMAGE_SCALE21 = 0xA4,
//   DFT_BULLET_DAMAGE_SCALE22 = 0xA5,
//   DFT_BULLET_DAMAGE_SCALE23 = 0xA6,
//   DFT_BULLET_DAMAGE_SCALE24 = 0xA7,
//   DFT_BULLET_DAMAGE_SCALE25 = 0xA8,
//   DFT_BULLET_DAMAGE_SCALE26 = 0xA9,
//   DFT_BULLET_DAMAGE_SCALE27 = 0xAA,
//   DFT_BULLET_DAMAGE_SCALE28 = 0xAB,
//   DFT_BULLET_DAMAGE_SCALE29 = 0xAC,
//   DFT_BULLET_DAMAGE_SCALE30 = 0xAD,
//   DFT_BULLET_DAMAGE_SCALE31 = 0xAE,
//   DFT_EXPLOSIVE_DAMAGE_SCALE0 = 0xAF,
//   DFT_EXPLOSIVE_DAMAGE_SCALE1 = 0xB0,
//   DFT_EXPLOSIVE_DAMAGE_SCALE2 = 0xB1,
//   DFT_EXPLOSIVE_DAMAGE_SCALE3 = 0xB2,
//   DFT_EXPLOSIVE_DAMAGE_SCALE4 = 0xB3,
//   DFT_EXPLOSIVE_DAMAGE_SCALE5 = 0xB4,
//   DFT_EXPLOSIVE_DAMAGE_SCALE6 = 0xB5,
//   DFT_EXPLOSIVE_DAMAGE_SCALE7 = 0xB6,
//   DFT_EXPLOSIVE_DAMAGE_SCALE8 = 0xB7,
//   DFT_EXPLOSIVE_DAMAGE_SCALE9 = 0xB8,
//   DFT_EXPLOSIVE_DAMAGE_SCALE10 = 0xB9,
//   DFT_EXPLOSIVE_DAMAGE_SCALE11 = 0xBA,
//   DFT_EXPLOSIVE_DAMAGE_SCALE12 = 0xBB,
//   DFT_EXPLOSIVE_DAMAGE_SCALE13 = 0xBC,
//   DFT_EXPLOSIVE_DAMAGE_SCALE14 = 0xBD,
//   DFT_EXPLOSIVE_DAMAGE_SCALE15 = 0xBE,
//   DFT_EXPLOSIVE_DAMAGE_SCALE16 = 0xBF,
//   DFT_EXPLOSIVE_DAMAGE_SCALE17 = 0xC0,
//   DFT_EXPLOSIVE_DAMAGE_SCALE18 = 0xC1,
//   DFT_EXPLOSIVE_DAMAGE_SCALE19 = 0xC2,
//   DFT_EXPLOSIVE_DAMAGE_SCALE20 = 0xC3,
//   DFT_EXPLOSIVE_DAMAGE_SCALE21 = 0xC4,
//   DFT_EXPLOSIVE_DAMAGE_SCALE22 = 0xC5,
//   DFT_EXPLOSIVE_DAMAGE_SCALE23 = 0xC6,
//   DFT_EXPLOSIVE_DAMAGE_SCALE24 = 0xC7,
//   DFT_EXPLOSIVE_DAMAGE_SCALE25 = 0xC8,
//   DFT_EXPLOSIVE_DAMAGE_SCALE26 = 0xC9,
//   DFT_EXPLOSIVE_DAMAGE_SCALE27 = 0xCA,
//   DFT_EXPLOSIVE_DAMAGE_SCALE28 = 0xCB,
//   DFT_EXPLOSIVE_DAMAGE_SCALE29 = 0xCC,
//   DFT_EXPLOSIVE_DAMAGE_SCALE30 = 0xCD,
//   DFT_EXPLOSIVE_DAMAGE_SCALE31 = 0xCE,
//   DFT_MELEE_DAMAGE_SCALE0 = 0xCF,
//   DFT_MELEE_DAMAGE_SCALE1 = 0xD0,
//   DFT_MELEE_DAMAGE_SCALE2 = 0xD1,
//   DFT_MELEE_DAMAGE_SCALE3 = 0xD2,
//   DFT_MELEE_DAMAGE_SCALE4 = 0xD3,
//   DFT_MELEE_DAMAGE_SCALE5 = 0xD4,
//   DFT_MELEE_DAMAGE_SCALE6 = 0xD5,
//   DFT_MELEE_DAMAGE_SCALE7 = 0xD6,
//   DFT_MELEE_DAMAGE_SCALE8 = 0xD7,
//   DFT_MELEE_DAMAGE_SCALE9 = 0xD8,
//   DFT_MELEE_DAMAGE_SCALE10 = 0xD9,
//   DFT_MELEE_DAMAGE_SCALE11 = 0xDA,
//   DFT_MELEE_DAMAGE_SCALE12 = 0xDB,
//   DFT_MELEE_DAMAGE_SCALE13 = 0xDC,
//   DFT_MELEE_DAMAGE_SCALE14 = 0xDD,
//   DFT_MELEE_DAMAGE_SCALE15 = 0xDE,
//   DFT_MELEE_DAMAGE_SCALE16 = 0xDF,
//   DFT_MELEE_DAMAGE_SCALE17 = 0xE0,
//   DFT_MELEE_DAMAGE_SCALE18 = 0xE1,
//   DFT_MELEE_DAMAGE_SCALE19 = 0xE2,
//   DFT_MELEE_DAMAGE_SCALE20 = 0xE3,
//   DFT_MELEE_DAMAGE_SCALE21 = 0xE4,
//   DFT_MELEE_DAMAGE_SCALE22 = 0xE5,
//   DFT_MELEE_DAMAGE_SCALE23 = 0xE6,
//   DFT_MELEE_DAMAGE_SCALE24 = 0xE7,
//   DFT_MELEE_DAMAGE_SCALE25 = 0xE8,
//   DFT_MELEE_DAMAGE_SCALE26 = 0xE9,
//   DFT_MELEE_DAMAGE_SCALE27 = 0xEA,
//   DFT_MELEE_DAMAGE_SCALE28 = 0xEB,
//   DFT_MELEE_DAMAGE_SCALE29 = 0xEC,
//   DFT_MELEE_DAMAGE_SCALE30 = 0xED,
//   DFT_MELEE_DAMAGE_SCALE31 = 0xEE,
//   DFT_IMPACT_DAMAGE_SCALE0 = 0xEF,
//   DFT_IMPACT_DAMAGE_SCALE1 = 0xF0,
//   DFT_IMPACT_DAMAGE_SCALE2 = 0xF1,
//   DFT_IMPACT_DAMAGE_SCALE3 = 0xF2,
//   DFT_IMPACT_DAMAGE_SCALE4 = 0xF3,
//   DFT_IMPACT_DAMAGE_SCALE5 = 0xF4,
//   DFT_IMPACT_DAMAGE_SCALE6 = 0xF5,
//   DFT_IMPACT_DAMAGE_SCALE7 = 0xF6,
//   DFT_IMPACT_DAMAGE_SCALE8 = 0xF7,
//   DFT_IMPACT_DAMAGE_SCALE9 = 0xF8,
//   DFT_IMPACT_DAMAGE_SCALE10 = 0xF9,
//   DFT_IMPACT_DAMAGE_SCALE11 = 0xFA,
//   DFT_IMPACT_DAMAGE_SCALE12 = 0xFB,
//   DFT_IMPACT_DAMAGE_SCALE13 = 0xFC,
//   DFT_IMPACT_DAMAGE_SCALE14 = 0xFD,
//   DFT_IMPACT_DAMAGE_SCALE15 = 0xFE,
//   DFT_IMPACT_DAMAGE_SCALE16 = 0xFF,
//   DFT_IMPACT_DAMAGE_SCALE17 = 0x100,
//   DFT_IMPACT_DAMAGE_SCALE18 = 0x101,
//   DFT_IMPACT_DAMAGE_SCALE19 = 0x102,
//   DFT_IMPACT_DAMAGE_SCALE20 = 0x103,
//   DFT_IMPACT_DAMAGE_SCALE21 = 0x104,
//   DFT_IMPACT_DAMAGE_SCALE22 = 0x105,
//   DFT_IMPACT_DAMAGE_SCALE23 = 0x106,
//   DFT_IMPACT_DAMAGE_SCALE24 = 0x107,
//   DFT_IMPACT_DAMAGE_SCALE25 = 0x108,
//   DFT_IMPACT_DAMAGE_SCALE26 = 0x109,
//   DFT_IMPACT_DAMAGE_SCALE27 = 0x10A,
//   DFT_IMPACT_DAMAGE_SCALE28 = 0x10B,
//   DFT_IMPACT_DAMAGE_SCALE29 = 0x10C,
//   DFT_IMPACT_DAMAGE_SCALE30 = 0x10D,
//   DFT_IMPACT_DAMAGE_SCALE31 = 0x10E,
//   DFT_PHYS_CONSTRAINT0 = 0x10F,
//   DFT_PHYS_CONSTRAINT1 = 0x110,
//   DFT_PHYS_CONSTRAINT2 = 0x111,
//   DFT_PHYS_CONSTRAINT3 = 0x112,
//   DFT_PHYS_CONSTRAINT4 = 0x113,
//   DFT_PHYS_CONSTRAINT5 = 0x114,
//   DFT_PHYS_CONSTRAINT6 = 0x115,
//   DFT_PHYS_CONSTRAINT7 = 0x116,
//   DFT_PHYS_CONSTRAINT8 = 0x117,
//   DFT_PHYS_CONSTRAINT9 = 0x118,
//   DFT_PHYS_CONSTRAINT10 = 0x119,
//   DFT_PHYS_CONSTRAINT11 = 0x11A,
//   DFT_PHYS_CONSTRAINT12 = 0x11B,
//   DFT_PHYS_CONSTRAINT13 = 0x11C,
//   DFT_PHYS_CONSTRAINT14 = 0x11D,
//   DFT_PHYS_CONSTRAINT15 = 0x11E,
//   DFT_PHYS_CONSTRAINT16 = 0x11F,
//   DFT_PHYS_CONSTRAINT17 = 0x120,
//   DFT_PHYS_CONSTRAINT18 = 0x121,
//   DFT_PHYS_CONSTRAINT19 = 0x122,
//   DFT_PHYS_CONSTRAINT20 = 0x123,
//   DFT_PHYS_CONSTRAINT21 = 0x124,
//   DFT_PHYS_CONSTRAINT22 = 0x125,
//   DFT_PHYS_CONSTRAINT23 = 0x126,
//   DFT_PHYS_CONSTRAINT24 = 0x127,
//   DFT_PHYS_CONSTRAINT25 = 0x128,
//   DFT_PHYS_CONSTRAINT26 = 0x129,
//   DFT_PHYS_CONSTRAINT27 = 0x12A,
//   DFT_PHYS_CONSTRAINT28 = 0x12B,
//   DFT_PHYS_CONSTRAINT29 = 0x12C,
//   DFT_PHYS_CONSTRAINT30 = 0x12D,
//   DFT_PHYS_CONSTRAINT31 = 0x12E,
//   DFT_DAMAGE_SOUND0 = 0x12F,
//   DFT_DAMAGE_SOUND1 = 0x130,
//   DFT_DAMAGE_SOUND2 = 0x131,
//   DFT_DAMAGE_SOUND3 = 0x132,
//   DFT_DAMAGE_SOUND4 = 0x133,
//   DFT_DAMAGE_SOUND5 = 0x134,
//   DFT_DAMAGE_SOUND6 = 0x135,
//   DFT_DAMAGE_SOUND7 = 0x136,
//   DFT_DAMAGE_SOUND8 = 0x137,
//   DFT_DAMAGE_SOUND9 = 0x138,
//   DFT_DAMAGE_SOUND10 = 0x139,
//   DFT_DAMAGE_SOUND11 = 0x13A,
//   DFT_DAMAGE_SOUND12 = 0x13B,
//   DFT_DAMAGE_SOUND13 = 0x13C,
//   DFT_DAMAGE_SOUND14 = 0x13D,
//   DFT_DAMAGE_SOUND15 = 0x13E,
//   DFT_DAMAGE_SOUND16 = 0x13F,
//   DFT_DAMAGE_SOUND17 = 0x140,
//   DFT_DAMAGE_SOUND18 = 0x141,
//   DFT_DAMAGE_SOUND19 = 0x142,
//   DFT_DAMAGE_SOUND20 = 0x143,
//   DFT_DAMAGE_SOUND21 = 0x144,
//   DFT_DAMAGE_SOUND22 = 0x145,
//   DFT_DAMAGE_SOUND23 = 0x146,
//   DFT_DAMAGE_SOUND24 = 0x147,
//   DFT_DAMAGE_SOUND25 = 0x148,
//   DFT_DAMAGE_SOUND26 = 0x149,
//   DFT_DAMAGE_SOUND27 = 0x14A,
//   DFT_DAMAGE_SOUND28 = 0x14B,
//   DFT_DAMAGE_SOUND29 = 0x14C,
//   DFT_DAMAGE_SOUND30 = 0x14D,
//   DFT_DAMAGE_SOUND31 = 0x14E,
//   DFT_BURN_EFFECT0 = 0x14F,
//   DFT_BURN_EFFECT1 = 0x150,
//   DFT_BURN_EFFECT2 = 0x151,
//   DFT_BURN_EFFECT3 = 0x152,
//   DFT_BURN_EFFECT4 = 0x153,
//   DFT_BURN_EFFECT5 = 0x154,
//   DFT_BURN_EFFECT6 = 0x155,
//   DFT_BURN_EFFECT7 = 0x156,
//   DFT_BURN_EFFECT8 = 0x157,
//   DFT_BURN_EFFECT9 = 0x158,
//   DFT_BURN_EFFECT10 = 0x159,
//   DFT_BURN_EFFECT11 = 0x15A,
//   DFT_BURN_EFFECT12 = 0x15B,
//   DFT_BURN_EFFECT13 = 0x15C,
//   DFT_BURN_EFFECT14 = 0x15D,
//   DFT_BURN_EFFECT15 = 0x15E,
//   DFT_BURN_EFFECT16 = 0x15F,
//   DFT_BURN_EFFECT17 = 0x160,
//   DFT_BURN_EFFECT18 = 0x161,
//   DFT_BURN_EFFECT19 = 0x162,
//   DFT_BURN_EFFECT20 = 0x163,
//   DFT_BURN_EFFECT21 = 0x164,
//   DFT_BURN_EFFECT22 = 0x165,
//   DFT_BURN_EFFECT23 = 0x166,
//   DFT_BURN_EFFECT24 = 0x167,
//   DFT_BURN_EFFECT25 = 0x168,
//   DFT_BURN_EFFECT26 = 0x169,
//   DFT_BURN_EFFECT27 = 0x16A,
//   DFT_BURN_EFFECT28 = 0x16B,
//   DFT_BURN_EFFECT29 = 0x16C,
//   DFT_BURN_EFFECT30 = 0x16D,
//   DFT_BURN_EFFECT31 = 0x16E,
//   DFT_BURN_SOUND0 = 0x16F,
//   DFT_BURN_SOUND1 = 0x170,
//   DFT_BURN_SOUND2 = 0x171,
//   DFT_BURN_SOUND3 = 0x172,
//   DFT_BURN_SOUND4 = 0x173,
//   DFT_BURN_SOUND5 = 0x174,
//   DFT_BURN_SOUND6 = 0x175,
//   DFT_BURN_SOUND7 = 0x176,
//   DFT_BURN_SOUND8 = 0x177,
//   DFT_BURN_SOUND9 = 0x178,
//   DFT_BURN_SOUND10 = 0x179,
//   DFT_BURN_SOUND11 = 0x17A,
//   DFT_BURN_SOUND12 = 0x17B,
//   DFT_BURN_SOUND13 = 0x17C,
//   DFT_BURN_SOUND14 = 0x17D,
//   DFT_BURN_SOUND15 = 0x17E,
//   DFT_BURN_SOUND16 = 0x17F,
//   DFT_BURN_SOUND17 = 0x180,
//   DFT_BURN_SOUND18 = 0x181,
//   DFT_BURN_SOUND19 = 0x182,
//   DFT_BURN_SOUND20 = 0x183,
//   DFT_BURN_SOUND21 = 0x184,
//   DFT_BURN_SOUND22 = 0x185,
//   DFT_BURN_SOUND23 = 0x186,
//   DFT_BURN_SOUND24 = 0x187,
//   DFT_BURN_SOUND25 = 0x188,
//   DFT_BURN_SOUND26 = 0x189,
//   DFT_BURN_SOUND27 = 0x18A,
//   DFT_BURN_SOUND28 = 0x18B,
//   DFT_BURN_SOUND29 = 0x18C,
//   DFT_BURN_SOUND30 = 0x18D,
//   DFT_BURN_SOUND31 = 0x18E,
//   DFT_DAMAGE_ENTITY0 = 0x18F,
//   DFT_DAMAGE_ENTITY1 = 0x190,
//   DFT_DAMAGE_ENTITY2 = 0x191,
//   DFT_DAMAGE_ENTITY3 = 0x192,
//   DFT_DAMAGE_ENTITY4 = 0x193,
//   DFT_DAMAGE_ENTITY5 = 0x194,
//   DFT_DAMAGE_ENTITY6 = 0x195,
//   DFT_DAMAGE_ENTITY7 = 0x196,
//   DFT_DAMAGE_ENTITY8 = 0x197,
//   DFT_DAMAGE_ENTITY9 = 0x198,
//   DFT_DAMAGE_ENTITY10 = 0x199,
//   DFT_DAMAGE_ENTITY11 = 0x19A,
//   DFT_DAMAGE_ENTITY12 = 0x19B,
//   DFT_DAMAGE_ENTITY13 = 0x19C,
//   DFT_DAMAGE_ENTITY14 = 0x19D,
//   DFT_DAMAGE_ENTITY15 = 0x19E,
//   DFT_DAMAGE_ENTITY16 = 0x19F,
//   DFT_DAMAGE_ENTITY17 = 0x1A0,
//   DFT_DAMAGE_ENTITY18 = 0x1A1,
//   DFT_DAMAGE_ENTITY19 = 0x1A2,
//   DFT_DAMAGE_ENTITY20 = 0x1A3,
//   DFT_DAMAGE_ENTITY21 = 0x1A4,
//   DFT_DAMAGE_ENTITY22 = 0x1A5,
//   DFT_DAMAGE_ENTITY23 = 0x1A6,
//   DFT_DAMAGE_ENTITY24 = 0x1A7,
//   DFT_DAMAGE_ENTITY25 = 0x1A8,
//   DFT_DAMAGE_ENTITY26 = 0x1A9,
//   DFT_DAMAGE_ENTITY27 = 0x1AA,
//   DFT_DAMAGE_ENTITY28 = 0x1AB,
//   DFT_DAMAGE_ENTITY29 = 0x1AC,
//   DFT_DAMAGE_ENTITY30 = 0x1AD,
//   DFT_DAMAGE_ENTITY31 = 0x1AE,
//   DFT_PIECE_LABEL0 = 0x1AF,
//   DFT_PIECE_LABEL1 = 0x1B0,
//   DFT_PIECE_LABEL2 = 0x1B1,
//   DFT_PIECE_LABEL3 = 0x1B2,
//   DFT_PIECE_LABEL4 = 0x1B3,
//   DFT_PIECE_LABEL5 = 0x1B4,
//   DFT_PIECE_LABEL6 = 0x1B5,
//   DFT_PIECE_LABEL7 = 0x1B6,
//   DFT_PIECE_LABEL8 = 0x1B7,
//   DFT_PIECE_LABEL9 = 0x1B8,
//   DFT_PIECE_LABEL10 = 0x1B9,
//   DFT_PIECE_LABEL11 = 0x1BA,
//   DFT_PIECE_LABEL12 = 0x1BB,
//   DFT_PIECE_LABEL13 = 0x1BC,
//   DFT_PIECE_LABEL14 = 0x1BD,
//   DFT_PIECE_LABEL15 = 0x1BE,
//   DFT_PIECE_LABEL16 = 0x1BF,
//   DFT_PIECE_LABEL17 = 0x1C0,
//   DFT_PIECE_LABEL18 = 0x1C1,
//   DFT_PIECE_LABEL19 = 0x1C2,
//   DFT_PIECE_LABEL20 = 0x1C3,
//   DFT_PIECE_LABEL21 = 0x1C4,
//   DFT_PIECE_LABEL22 = 0x1C5,
//   DFT_PIECE_LABEL23 = 0x1C6,
//   DFT_PIECE_LABEL24 = 0x1C7,
//   DFT_PIECE_LABEL25 = 0x1C8,
//   DFT_PIECE_LABEL26 = 0x1C9,
//   DFT_PIECE_LABEL27 = 0x1CA,
//   DFT_PIECE_LABEL28 = 0x1CB,
//   DFT_PIECE_LABEL29 = 0x1CC,
//   DFT_PIECE_LABEL30 = 0x1CD,
//   DFT_PIECE_LABEL31 = 0x1CE,
//   DFT_MAX_FIELDS = 0x1CF,
// };

// /* 712 */
// enum destructiblePieceFieldType_t : __int32
// {
//   DPFT_EXPLOSIVEDAMAGEONLY = 0xF,
//   DPFT_EXPLOSIVEDAMAGEONLYD1 = 0x10,
//   DPFT_EXPLOSIVEDAMAGEONLYD2 = 0x11,
//   DPFT_EXPLOSIVEDAMAGEONLYD3 = 0x12,
//   DPFT_EXPLOSIVEDAMAGEONLYD4 = 0x13,
//   DPFT_MELEEDAMAGE = 0x14,
//   DPFT_MELEEDAMAGED1 = 0x15,
//   DPFT_MELEEDAMAGED2 = 0x16,
//   DPFT_MELEEDAMAGED3 = 0x17,
//   DPFT_MELEEDAMAGED4 = 0x18,
//   DPFT_PARENTDAMAGE = 0x19,
//   DPFT_PARENTDAMAGED1 = 0x1A,
//   DPFT_PARENTDAMAGED2 = 0x1B,
//   DPFT_PARENTDAMAGED3 = 0x1C,
//   DPFT_PARENTDAMAGED4 = 0x1D,
//   DPFT_PHYSICSONPARENTDEATH = 0x1E,
//   DPFT_PHYSICSONPARENTDEATHD1 = 0x1F,
//   DPFT_PHYSICSONPARENTDEATHD2 = 0x20,
//   DPFT_PHYSICSONPARENTDEATHD3 = 0x21,
//   DPFT_PHYSICSONPARENTDEATHD4 = 0x22,
//   DPFT_MAX_FIELD_TYPES = 0x23,
// };

// /* 713 */
// enum destructible_event_t::<unnamed_tag> : __int32
// {
//   DE_DAMAGE = 0x0,
//   DE_RADIUS_DAMAGE = 0x1,
//   DE_HITEVENT = 0x2,
// };

// /* 714 */
// enum codetype : __int32
// {
//   CODES = 0x0,
//   LENS = 0x1,
//   DISTS = 0x2,
// };

// /* 715 */
// typedef bdContentStreamingBase::bdStatus inflate_mode;

// /* 716 */
// enum block_state : __int32
// {
//   need_more = 0x0,
//   block_done = 0x1,
//   finish_started = 0x2,
//   finish_done = 0x3,
// };

// /* 717 */
// enum $9D35CFB3C8C63ACCDC99DB158FB4BE6C : __int32
// {
//   DOBJ_CREATE_SIZE = 0x7C,
//   XSURFACE_SIZE = 0x44,
// };

// /* 718 */
// enum $B18A169AA6ABCF8DA9AD2AE0FABAC255 : __int32
// {
//   XANIM_VERSION = 0x13,
//   XMODEL_VERSION = 0x3E,
//   XMODEL_PIECES_VERSION = 0x1,
// };

// /* 719 */
// enum $EF1368BD3885D6BD4C897EDA9760E659 : __int32
// {
//   ANIM_LOOP = 0x1,
//   ANIM_DELTA = 0x2,
//   ANIM_LEFT_HAND_GRIP_IK = 0x4,
//   ANIM_STREAM = 0x8,
// };

// /* 720 */
// typedef bitarray<51>::<unnamed_tag> bitarray<160>::<unnamed_tag>;

// /* 721 */
// enum $1BF0D9E267EBE4F705F118FBCA9CC701 : __int32
// {
//   XANIM_ERROR_NONE = 0x0,
//   XANIM_ERROR_BAD_ROOT_ANIM = 0x1,
//   XANIM_ERROR_BAD_NOTIFY = 0x2,
// };

 /* 722 */
enum sysEventType_t : __int32
{
  SE_NONE = 0x0,
  SE_KEY = 0x1,
  SE_CHAR = 0x2,
  SE_CONSOLE = 0x3,
};

// /* 723 */
// enum stream_type_index : __int32
// {
//   STREAM_INDEX_SOUND = 0x0,
//   STREAM_INDEX_END = 0x1,
//   STREAM_INDEX_GENERIC = 0x0,
// };

// /* 724 */
// enum $EDF15545C0CEEB7CAB3B4F469958D73A : __int32
// {
//   NET_SOCKET_BIND = 0x0,
//   NET_SOCKET_CONNECT = 0x1,
// };

// /* 725 */
// enum _MINIDUMP_TYPE : __int32
// {
//   MiniDumpNormal = 0x0,
//   MiniDumpWithDataSegs = 0x1,
//   MiniDumpWithFullMemory = 0x2,
//   MiniDumpWithHandleData = 0x4,
//   MiniDumpFilterMemory = 0x8,
//   MiniDumpScanMemory = 0x10,
//   MiniDumpWithUnloadedModules = 0x20,
//   MiniDumpWithIndirectlyReferencedMemory = 0x40,
//   MiniDumpFilterModulePaths = 0x80,
//   MiniDumpWithProcessThreadData = 0x100,
//   MiniDumpWithPrivateReadWriteMemory = 0x200,
//   MiniDumpWithoutOptionalData = 0x400,
//   MiniDumpWithFullMemoryInfo = 0x800,
//   MiniDumpWithThreadInfo = 0x1000,
//   MiniDumpWithCodeSegs = 0x2000,
//   MiniDumpWithoutAuxiliaryState = 0x4000,
//   MiniDumpWithFullAuxiliaryState = 0x8000,
//   MiniDumpValidTypeFlags = 0xFFFF,
// };

// /* 726 */
// enum ADDRESS_MODE : __int32
// {
//   AddrMode1616 = 0x0,
//   AddrMode1632 = 0x1,
//   AddrModeReal = 0x2,
//   AddrModeFlat = 0x3,
// };

// /* 727 */
// enum tagMARKUPSIZE : __int32
// {
//   MARKUPSIZE_CALCWIDTH = 0x0,
//   MARKUPSIZE_CALCHEIGHT = 0x1,
// };

// /* 728 */
// enum tagMARKUPLINKTEXT : __int32
// {
//   MARKUPLINKTEXT_URL = 0x0,
//   MARKUPLINKTEXT_ID = 0x1,
//   MARKUPLINKTEXT_TEXT = 0x2,
// };

// /* 729 */
// enum $E0F033F08EE5F4988292F1D8F4F80363 : __int32
// {
//   TRACK_EXE_PROJ = 0x0,
//   TRACK_CG_PROJ = 0x1,
//   TRACK_G_PROJ = 0x2,
//   TRACK_R_PROJ = 0x3,
//   TRACK_COUNT_PROJ = 0x4,
// };

// /* 730 */
// enum tagMARKUPMESSAGE : __int32
// {
//   MARKUPMESSAGE_KEYEXECUTE = 0x0,
//   MARKUPMESSAGE_CLICKEXECUTE = 0x1,
//   MARKUPMESSAGE_WANTFOCUS = 0x2,
// };

// /* 731 */
// enum tagCONDITION_TYPE : __int32
// {
//   CT_AND_CONDITION = 0x0,
//   CT_OR_CONDITION = 0x1,
//   CT_NOT_CONDITION = 0x2,
//   CT_LEAF_CONDITION = 0x3,
// };

// /* 732 */
// enum tagCONDITION_OPERATION : __int32
// {
//   COP_IMPLICIT = 0x0,
//   COP_EQUAL = 0x1,
//   COP_NOTEQUAL = 0x2,
//   COP_LESSTHAN = 0x3,
//   COP_GREATERTHAN = 0x4,
//   COP_LESSTHANOREQUAL = 0x5,
//   COP_GREATERTHANOREQUAL = 0x6,
//   COP_VALUE_STARTSWITH = 0x7,
//   COP_VALUE_ENDSWITH = 0x8,
//   COP_VALUE_CONTAINS = 0x9,
//   COP_VALUE_NOTCONTAINS = 0xA,
//   COP_DOSWILDCARDS = 0xB,
//   COP_WORD_EQUAL = 0xC,
//   COP_WORD_STARTSWITH = 0xD,
//   COP_APPLICATION_SPECIFIC = 0xE,
// };

// /* 733 */
// enum tagMENUPOPUPSELECT : __int32
// {
//   MPOS_EXECUTE = 0x0,
//   MPOS_FULLCANCEL = 0x1,
//   MPOS_CANCELLEVEL = 0x2,
//   MPOS_SELECTLEFT = 0x3,
//   MPOS_SELECTRIGHT = 0x4,
//   MPOS_CHILDTRACKING = 0x5,
// };

// /* 734 */
// enum tagSTRUCTURED_QUERY_PARSE_ERROR : __int32
// {
//   SQPE_NONE = 0x0,
//   SQPE_EXTRA_OPENING_PARENTHESIS = 0x1,
//   SQPE_EXTRA_CLOSING_PARENTHESIS = 0x2,
//   SQPE_IGNORED_MODIFIER = 0x3,
//   SQPE_IGNORED_CONNECTOR = 0x4,
//   SQPE_IGNORED_KEYWORD = 0x5,
//   SQPE_UNHANDLED = 0x6,
// };

// /* 735 */
// enum tagINTERVAL_LIMIT_KIND : __int32
// {
//   ILK_EXPLICIT_INCLUDED = 0x0,
//   ILK_EXPLICIT_EXCLUDED = 0x1,
//   ILK_NEGATIVE_INFINITY = 0x2,
//   ILK_POSITIVE_INFINITY = 0x3,
// };

// /* 736 */
// enum tagQUERY_PARSER_MANAGER_OPTION : __int32
// {
//   QPMO_SCHEMA_BINARY_NAME = 0x0,
//   QPMO_PRELOCALIZED_SCHEMA_BINARY_PATH = 0x1,
//   QPMO_UNLOCALIZED_SCHEMA_BINARY_PATH = 0x2,
//   QPMO_LOCALIZED_SCHEMA_BINARY_PATH = 0x3,
//   QPMO_APPEND_LCID_TO_LOCALIZED_PATH = 0x4,
//   QPMO_LOCALIZER_SUPPORT = 0x5,
// };

// /* 737 */
// enum OfflineFolderStatus : __int32
// {
//   OFS_INACTIVE = 0xFFFFFFFF,
//   OFS_ONLINE = 0x0,
//   OFS_OFFLINE = 0x1,
//   OFS_SERVERBACK = 0x2,
//   OFS_DIRTYCACHE = 0x3,
// };

// /* 738 */
// enum tagExtentMode : __int32
// {
//   DVEXTENT_CONTENT = 0x0,
//   DVEXTENT_INTEGRAL = 0x1,
// };

// /* 739 */
// enum _SPACTION : __int32
// {
//   SPACTION_NONE = 0x0,
//   SPACTION_MOVING = 0x1,
//   SPACTION_COPYING = 0x2,
//   SPACTION_RECYCLING = 0x3,
//   SPACTION_APPLYINGATTRIBS = 0x4,
//   SPACTION_DOWNLOADING = 0x5,
//   SPACTION_SEARCHING_INTERNET = 0x6,
//   SPACTION_CALCULATING = 0x7,
//   SPACTION_UPLOADING = 0x8,
//   SPACTION_SEARCHING_FILES = 0x9,
//   SPACTION_DELETING = 0xA,
//   SPACTION_RENAMING = 0xB,
//   SPACTION_FORMATTING = 0xC,
// };

// /* 740 */
// enum WinQuitBehavior : __int32
// {
//   WIN_IGNORE_QUIT = 0x0,
//   WIN_HANDLE_QUIT = 0x1,
// };

// /* 741 */
// enum __MIDL___MIDL_itf_structuredquery_0000_0013_0001 : __int32
// {
//   NEC_LOW = 0x0,
//   NEC_MEDIUM = 0x1,
//   NEC_HIGH = 0x2,
// };

// /* 742 */
// enum tagBANDSITECID : __int32
// {
//   BSID_BANDADDED = 0x0,
//   BSID_BANDREMOVED = 0x1,
// };

 /* 743 */
enum language_t : __int32
{
  LANGUAGE_ENGLISH = 0x0,
  LANGUAGE_FRENCH = 0x1,
  LANGUAGE_FRENCHCANADIAN = 0x2,
  LANGUAGE_GERMAN = 0x3,
  LANGUAGE_AUSTRIAN = 0x4,
  LANGUAGE_ITALIAN = 0x5,
  LANGUAGE_SPANISH = 0x6,
  LANGUAGE_BRITISH = 0x7,
  LANGUAGE_RUSSIAN = 0x8,
  LANGUAGE_POLISH = 0x9,
  LANGUAGE_KOREAN = 0xA,
  LANGUAGE_JAPANESE = 0xB,
  LANGUAGE_CZECH = 0xC,
  MAX_LANGUAGES = 0xD,
};

// /* 744 */
// enum tagSTRUCTURED_QUERY_SINGLE_OPTION : __int32
// {
//   SQSO_SCHEMA = 0x0,
//   SQSO_LOCALE_WORD_BREAKING = 0x1,
//   SQSO_WORD_BREAKER = 0x2,
//   SQSO_NATURAL_SYNTAX = 0x3,
//   SQSO_AUTOMATIC_WILDCARD = 0x4,
//   SQSO_TRACE_LEVEL = 0x5,
//   SQSO_LANGUAGE_KEYWORDS = 0x6,
// };

// /* 745 */
// enum tagPKA_FLAGS : __int32
// {
//   PKA_SET = 0x0,
//   PKA_APPEND = 0x1,
//   PKA_DELETE = 0x2,
// };

// /* 746 */
// enum tagSTRUCTURED_QUERY_MULTIOPTION : __int32
// {
//   SQMO_VIRTUAL_PROPERTY = 0x0,
//   SQMO_DEFAULT_PROPERTY = 0x1,
//   SQMO_GENERATOR_FOR_TYPE = 0x2,
// };

// /* 747 */
// enum _SPTEXT : __int32
// {
//   SPTEXT_ACTIONDESCRIPTION = 0x1,
//   SPTEXT_ACTIONDETAIL = 0x2,
// };

// /* 748 */
// enum GamepadPhysicalAxis : __int32
// {
//   GPAD_PHYSAXIS_RSTICK_X = 0x0,
//   GPAD_PHYSAXIS_RSTICK_Y = 0x1,
//   GPAD_PHYSAXIS_LSTICK_X = 0x2,
//   GPAD_PHYSAXIS_LSTICK_Y = 0x3,
//   GPAD_PHYSAXIS_RTRIGGER = 0x4,
//   GPAD_PHYSAXIS_LTRIGGER = 0x5,
//   GPAD_PHYSAXIS_COUNT = 0x6,
//   GPAD_PHYSAXIS_NONE = 0xFFFFFFFF,
// };

// /* 749 */
// enum GamePadStickDir : __int32
// {
//   GPAD_STICK_POS = 0x0,
//   GPAD_STICK_NEG = 0x1,
//   GPAD_STICK_DIRCOUNT = 0x2,
// };

// /* 750 */
// enum GamePadButtonEvent : __int32
// {
//   GPAD_BUTTON_RELEASED = 0x0,
//   GPAD_BUTTON_PRESSED = 0x1,
//   GPAD_BUTTON_UPDATE = 0x2,
// };

// /* 751 */
// enum $7E9E60F2A1191F0ADD49A6918BB55F76 : __int32
// {
//   LEFT = 0x0,
//   RIGHT = 0x1,
// };

// /* 752 */
// enum $723D4C507CBAE13E1C090A0F4B925142 : __int32
// {
//   RED = 0x0,
//   BLACK = 0x1,
// };

// /* 753 */
// enum ParseTokenType : __int32
// {
//   PARSE_TOKEN_UNKNOWN = 0x0,
//   PARSE_TOKEN_NUMBER = 0x1,
//   PARSE_TOKEN_STRING = 0x2,
//   PARSE_TOKEN_NAME = 0x3,
//   PARSE_TOKEN_HASH = 0x4,
//   PARSE_TOKEN_PUNCTUATION = 0x5,
// };

// /* 754 */
// enum ParseThreadContext : __int32
// {
//   PARSE_THREAD_MAIN = 0x0,
//   PARSE_THREAD_BACKEND = 0x1,
//   PARSE_THREAD_SERVER = 0x2,
//   PARSE_THREAD_FASTFILE = 0x3,
//   PARSE_THREAD_COUNT = 0x4,
// };

// /* 755 */
// enum tlFixedString::<unnamed_tag> : __int32
// {
//   Size = 0x20,
// };

// /* 756 */
// enum $F34A4BBDE281AC40571CAA148C5FBE8D : __int32
// {
//   SAVE_SEGMENT_START = 0x0,
//   SAVE_SEGMENT_MAIN = 0x1,
//   SAVE_SEGMENT_NORMAL = 0x2,
//   SAVE_SEGMENT_SCRIPT = 0x3,
//   SAVE_SEGMENT_LEVEL = 0x4,
//   SAVE_SEGMENT_END = 0x5,
//   SAVE_SEGMENT_COUNT = 0x6,
//   SAVE_SEGMENT_NONE = 0xFFFFFFFF,
// };

// /* 757 */
// enum VP_FindPath::__l4::pathNodeTransientFlags : __int32
// {
//   FLAG_OPEN = 0x1,
//   FLAG_CLOSED = 0x2,
// };

 /* 758 */
enum EvalValueType : __int32
{
  EVAL_VALUE_DOUBLE = 0x0,
  EVAL_VALUE_INT = 0x1,
  EVAL_VALUE_STRING = 0x2,
};

// /* 759 */
// enum EvalOperatorType : __int32
// {
//   EVAL_OP_LPAREN = 0x0,
//   EVAL_OP_RPAREN = 0x1,
//   EVAL_OP_COLON = 0x2,
//   EVAL_OP_QUESTION = 0x3,
//   EVAL_OP_PLUS = 0x4,
//   EVAL_OP_MINUS = 0x5,
//   EVAL_OP_UNARY_PLUS = 0x6,
//   EVAL_OP_UNARY_MINUS = 0x7,
//   EVAL_OP_MULTIPLY = 0x8,
//   EVAL_OP_DIVIDE = 0x9,
//   EVAL_OP_MODULUS = 0xA,
//   EVAL_OP_LSHIFT = 0xB,
//   EVAL_OP_RSHIFT = 0xC,
//   EVAL_OP_BITWISE_NOT = 0xD,
//   EVAL_OP_BITWISE_AND = 0xE,
//   EVAL_OP_BITWISE_OR = 0xF,
//   EVAL_OP_BITWISE_XOR = 0x10,
//   EVAL_OP_LOGICAL_NOT = 0x11,
//   EVAL_OP_LOGICAL_AND = 0x12,
//   EVAL_OP_LOGICAL_OR = 0x13,
//   EVAL_OP_EQUALS = 0x14,
//   EVAL_OP_NOT_EQUAL = 0x15,
//   EVAL_OP_LESS = 0x16,
//   EVAL_OP_LESS_EQUAL = 0x17,
//   EVAL_OP_GREATER = 0x18,
//   EVAL_OP_GREATER_EQUAL = 0x19,
//   EVAL_OP_COUNT = 0x1A,
// };

// /* 760 */
// enum e_prefetch : __int32
// {
//   PRE_READ = 0x0,
//   PRE_WRITE = 0x1,
//   PRE_READ_WRITE = 0x2,
// };

// /* 761 */
// enum SHGFP_TYPE : __int32
// {
//   SHGFP_TYPE_CURRENT = 0x0,
//   SHGFP_TYPE_DEFAULT = 0x1,
// };

// /* 762 */
// enum FS_ErrorCodes : __int32
// {
//   FS_OPEN_FAILURE = 0xFFFFFFFF,
//   FS_OPEN_NOT_IN_IWD_OR_LOCALIZED_DIR = 0xFFFFFFFE,
// };

 /* 763 */
enum FsThread : __int32
{
  FS_THREAD_MAIN = 0x0,
  FS_THREAD_STREAM = 0x1,
  FS_THREAD_DATABASE = 0x2,
  FS_THREAD_BACKEND = 0x3,
  FS_THREAD_SERVER = 0x4,
  FS_THREAD_COUNT = 0x5,
  FS_THREAD_INVALID = 0x6,
};

// /* 764 */
// enum combatRecordGraphTypes_t : __int32
// {
//   RECENT_PERFORMANCE_HISTOGRAM = 0x0,
//   MATCH_PERFORMANCE_HISTOGRAM = 0x1,
//   RECENT_EARNINGS_BAR_GRAPH = 0x2,
//   CR_GRAPH_TYPES_COUNT = 0x3,
// };

// /* 765 */
// enum combatRecordPieChartTypes_t : __int32
// {
//   NON_WAGER_GAMETYPE_PIE_CHART = 0x0,
//   WAGER_GAMETYPE_PIE_CHART = 0x1,
//   FAVORITE_KILLSTREAKS_PIE_CHART = 0x2,
//   CR_PIE_CHART_TYPES_COUNT = 0x3,
// };

// /* 766 */
// enum combatRecordPieChartTextPositions_t : __int32
// {
//   TOP = 0x0,
//   MIDDLE = 0x1,
//   BOTTOM = 0x2,
//   PIE_CHART_TEXT_POSITIONS_COUNT = 0x3,
// };

// /* 767 */
// enum e_mapSelectionColumns : __int32
// {
//   FEEDER_MAPSELECTION_COLUMN_BACKGROUND = 0x0,
//   FEEDER_MAPSELECTION_COLUMN_NAME = 0x1,
//   FEEDER_MAPSELECTION_COLUMN_A_BUTTON = 0x2,
// };

// /* 768 */
// enum e_gametypesBaseColumns : __int32
// {
//   GAMETYPES_BASE_COLUMN_BACKGROUND = 0x0,
//   GAMETYPES_BASE_COLUMN_NAME = 0x1,
//   GAMETYPES_BASE_COLUMN_A_BUTTON = 0x2,
//   GAMETYPES_BASE_COLUMN_ICON = 0x3,
// };

// /* 769 */
// enum statsTableColumns_t : __int32
// {
//   STATSTABLE_NUMBER = 0x0,
//   STATSTABLE_PASSIVE = 0x1,
//   STATSTABLE_GROUP = 0x2,
//   STATSTABLE_NAME = 0x3,
//   STATSTABLE_REFERENCE = 0x4,
//   STATSTABLE_ITEMCOUNT = 0x5,
//   STATSTABLE_IMAGE = 0x6,
//   STATSTABLE_DESCRIPTION = 0x7,
//   STATSTABLE_ATTACHMENTS_DATA = 0x8,
//   STATSTABLE_SORTKEY = 0x9,
//   STATSTABLE_UNLOCK_LVL = 0xA,
//   STATSTABLE_DEFAULT_CLASS = 0xB,
//   STATSTABLE_COST = 0xC,
//   STATSTABLE_LOADOUT_SLOT = 0xD,
//   STATSTABLE_UNLOCK_PLVL = 0xE,
//   STATSTABLE_UNCLASSIFY_AT = 0xF,
//   STATSTABLE_COUNT = 0x10,
// };

// /* 770 */
// enum expOperationEnum : __int32
// {
//   OP_NOOP = 0x0,
//   OP_RIGHTPAREN = 0x1,
//   OP_MULTIPLY = 0x2,
//   OP_DIVIDE = 0x3,
//   OP_MODULUS = 0x4,
//   OP_ADD = 0x5,
//   OP_SUBTRACT = 0x6,
//   OP_NEGATE = 0x7,
//   OP_NOT = 0x8,
//   OP_LESSTHAN = 0x9,
//   OP_LESSTHANEQUALTO = 0xA,
//   OP_GREATERTHAN = 0xB,
//   OP_GREATERTHANEQUALTO = 0xC,
//   OP_EQUALS = 0xD,
//   OP_NOTEQUAL = 0xE,
//   OP_AND = 0xF,
//   OP_OR = 0x10,
//   OP_LEFTPAREN = 0x11,
//   OP_COMMA = 0x12,
//   OP_BITWISEAND = 0x13,
//   OP_BITWISEOR = 0x14,
//   OP_BITWISENOT = 0x15,
//   OP_BITSHIFTLEFT = 0x16,
//   OP_BITSHIFTRIGHT = 0x17,
//   NUM_EXPRESSION_OPERATORS = 0x18,
//   MAX_OPERATOR_VALUE = 0x4000,
// };

// /* 771 */
// enum expressionRpnEnum : __int32
// {
//   RPN_CONSTANT = 0x0,
//   RPN_CMD_IDX = 0x1,
//   RPN_CMD = 0x2,
//   RPN_END = 0x3,
// };

// /* 772 */
// enum afterActionReportAwards_t : __int32
// {
//   AAR_AWARDS_PERSONAL_BESTS = 0x0,
//   AAR_AWARDS_STATS_MILESTONES = 0x1,
//   AAR_AWARDS_CONTRACTS = 0x2,
//   AAR_AWARDS_COUNT = 0x3,
//   AAR_MAX_AWARDS = 0x3,
// };

// /* 773 */
// enum $3BE6DD63049AD5C83B6A8150F07B5819 : __int32
// {
//   OPERATOR = 0x0,
//   OPERAND = 0x1,
//   INVALID_ENTRY_TYPE = 0x2,
// };

// /* 774 */
// enum AssertOccurance : __int32
// {
//   FIRST_TIME = 0x0,
//   RECURSIVE = 0x1,
// };

// /* 775 */
// enum UIViewer::Mode : __int32
// {
//   MODE_PLAYER_FIRST = 0x0,
//   MODE_PLAYER = 0x0,
//   MODE_EDIT_PLAYER_HEAD = 0x1,
//   MODE_EDIT_PLAYER_BODY = 0x2,
//   MODE_EDIT_PLAYER_FACE_PATTERN = 0x3,
//   MODE_EDIT_PLAYER_FACE_PATTERN_COLOR = 0x4,
//   MODE_CHOOSE_CLASS_PLAYER = 0x5,
//   MODE_COMBAT_RECORD = 0x6,
//   MODE_WEAPON_FIRST = 0x7,
//   MODE_WEAPON = 0x7,
//   MODE_EDIT_WEAPON = 0x8,
//   MODE_EDIT_RETICLE = 0x9,
//   MODE_EDIT_RETICLE_COLOR = 0xA,
//   MODE_EDIT_LENS = 0xB,
//   MODE_EDIT_CAMO = 0xC,
//   MODE_EDIT_ATTACHMENT_TOP = 0xD,
//   MODE_EDIT_ATTACHMENT_BOTTOM = 0xE,
//   MODE_EDIT_ATTACHMENT_TRIGGER = 0xF,
//   MODE_EDIT_ATTACHMENT_MUZZLE = 0x10,
//   MODE_EDIT_TAG = 0x11,
//   MODE_EDIT_EMBLEM = 0x12,
//   MODE_AAR_WEAPON = 0x13,
//   MODE_CHOOSE_CLASS_WEAPON = 0x14,
//   MODE_WEAPON_LAST = 0x14,
//   MODE_MAX = 0x15,
// };

// /* 776 */
// enum UIViewer::WeaponSlot : __int32
// {
//   WEAPON_PRIMARY = 0x0,
//   WEAPON_SECONDARY = 0x1,
//   WEAPON_SLOT_MAX = 0x2,
// };

// /* 777 */
// enum UIViewer::<unnamed_tag> : __int32
// {
//   MAX_DOBJ_DRAW = 0x1,
//   DOBJ_POOL_SIZE = 0x1,
//   NUM_CAMERA_OVERRIDES = 0x100,
// };

// /* 778 */
// enum weaponAltModel_t : __int32
// {
//   WEAP_ALT_MODEL0 = 0x0,
//   WEAP_ALT_MODEL1 = 0x1,
//   WEAP_ALT_MODEL2 = 0x2,
//   WEAP_ALT_MODEL3 = 0x3,
//   WEAP_ALT_MODEL4 = 0x4,
//   WEAP_ALT_MODEL5 = 0x5,
//   WEAP_ALT_MODEL6 = 0x6,
//   WEAP_ALT_MODEL7 = 0x7,
//   WEAP_ALT_MODEL8 = 0x8,
//   WEAP_ALT_MODEL9 = 0x9,
//   WEAP_ALT_MODEL10 = 0xA,
//   WEAP_ALT_MODEL11 = 0xB,
//   WEAP_ALT_MODEL12 = 0xC,
//   WEAP_ALT_MODEL13 = 0xD,
//   WEAP_ALT_MODEL14 = 0xE,
//   WEAP_ALT_MODEL15 = 0xF,
//   NUM_WEAP_ALTMODELS = 0x10,
// };

// /* 779 */
// enum UIViewer::DrawDobj::<unnamed_tag> : __int32
// {
//   SHADER_CONST_CLAN_NAME_1 = 0x0,
//   SHADER_CONST_CLAN_NAME_2 = 0x1,
//   SHADER_CONST_CLAN_NAME_3 = 0x2,
//   SHADER_CONST_FACEPAINT = 0x3,
//   SHADER_CONST_HERO_R = 0x4,
//   SHADER_CONST_HERO_G = 0x5,
//   SHADER_CONST_HERO_B = 0x6,
//   SHADER_CONST_MAX = 0x7,
// };

// /* 780 */
// enum $A3DFF96204E207F68E0E8BD1BDEA75BE : __int32
// {
//   CONDITION_TYPE_NONE = 0x0,
//   CONDITION_TYPE_IF = 0x1,
//   CONDITION_TYPE_ELSEIF = 0x2,
//   CONDITION_TYPE_ELSE = 0x3,
// };

// /* 781 */
// enum msgwnd_mode_t : __int32
// {
//   MWM_BOTTOMUP_ALIGN_TOP = 0x0,
//   MWM_BOTTOMUP_ALIGN_BOTTOM = 0x1,
//   MWM_TOPDOWN_ALIGN_TOP = 0x2,
//   MWM_TOPDOWN_ALIGN_BOTTOM = 0x3,
// };

// /* 782 */
// enum ScreenPlacementStack::<unnamed_tag> : __int32
// {
//   MAX_STACK_SIZE = 0x2,
// };

// /* 783 */
// enum ScreenshotState : __int32
// {
//   SCREENSHOT_IDLE = 0x0,
//   SCREENSHOT_DOWNLOADING = 0x1,
//   SCREENSHOT_DOWNLOADED = 0x2,
//   SCREENSHOT_CREATED = 0x3,
//   SCREENSHOT_ERROR = 0x4,
// };

 /* 784 */
enum PlaylistLockState : __int32
{
  PLS_UNLOCKED = 0x0,
  PLS_FETCHING = 0x1,
  PLS_XP = 0x2,
  PLS_PLEVEL = 0x3,
  PLS_MAXPARTY = 0x4,
  PLS_MINPARTY = 0x5,
  PLS_GAMETYPEBAN = 0x6,
  PLS_COLLECTORS = 0x7,
  PLS_FINISHEDSOLO = 0x8,
  PLS_REQUIRED_DLC_DISABLED = 0x9,
  PLS_REQUIRED_DLC_NOT_AVAILABLE = 0xA,
  PLS_CODPOINTS = 0xB,
  PLS_VISDVAR = 0xC,
  PLS_LOCALPLAYERS = 0xD,
  PLS_NOGUESTS = 0xE,
  PLS_COUNT = 0xF,
};

// /* 785 */
// enum sscType_t : __int32
// {
//   SSC_STRING = 0x0,
//   SSC_YESNO = 0x1,
//   SSC_GAMETYPE = 0x2,
//   SSC_MAPNAME = 0x3,
// };

// /* 786 */
// enum $9478F350EF8C523E9DA6C6BE833C3293 : __int32
// {
//   TS_2D = 0x0,
//   TS_FUNCTION = 0x1,
//   TS_COLOR_MAP = 0x2,
//   TS_UNUSED_1 = 0x3,
//   TS_UNUSED_2 = 0x4,
//   TS_NORMAL_MAP = 0x5,
//   TS_UNUSED_3 = 0x6,
//   TS_UNUSED_4 = 0x7,
//   TS_SPECULAR_MAP = 0x8,
//   TS_UNUSED_5 = 0x9,
//   TS_UNUSED_6 = 0xA,
//   TS_WATER_MAP = 0xB,
//   TS_COLOR0_MAP = 0xC,
//   TS_COLOR1_MAP = 0xD,
//   TS_COLOR2_MAP = 0xE,
//   TS_COLOR3_MAP = 0xF,
//   TS_COLOR4_MAP = 0x10,
//   TS_COLOR5_MAP = 0x11,
//   TS_COLOR6_MAP = 0x12,
//   TS_COLOR7_MAP = 0x13,
//   TS_COLOR8_MAP = 0x14,
//   TS_COLOR9_MAP = 0x15,
//   TS_COLOR10_MAP = 0x16,
//   TS_COLOR11_MAP = 0x17,
//   TS_COLOR12_MAP = 0x18,
//   TS_COLOR13_MAP = 0x19,
//   TS_COLOR14_MAP = 0x1A,
//   TS_COLOR15_MAP = 0x1B,
//   TS_THROW_MAP = 0x1C,
// };

// /* 787 */
// enum GVTargetTypeMask : __int32
// {
//   GV_MASK_GENERAL = 0x1,
//   GV_MASK_ATTACK = 0x2,
//   GV_MASK_PLAYER = 0x4,
//   GV_MASK_PLAYER_TEAMS = 0x8,
//   GV_MASK_ATTACK_TEAMS = 0x10,
//   GV_MASK_KILL = 0x20,
//   GV_MASK_TEAM_MASKS = 0x18,
//   GV_MASK_GENERAL_ATTACK = 0x13,
//   GV_MASK_GENERAL_PLAYER = 0xD,
// };

// /* 788 */
// enum GVConditionalLhsTypeMask : __int32
// {
//   GV_COND_MASK_GENERAL = 0x1,
//   GV_COND_MASK_HIT_BY = 0x2,
//   GV_COND_MASK_PLAYER = 0x4,
//   GV_COND_MASK_ATTACK = 0x8,
//   GV_COND_MASK_ATTACK_CLASS = 0x10,
//   GV_COND_MASK_PLAYER_CLASS = 0x20,
//   GV_COND_MASK_GENERAL_PLAYER = 0x25,
//   GV_COND_MASK_GENERAL_ATTACK = 0x19,
//   GV_COND_MASK_ALL_CLASS = 0x30,
// };

// /* 789 */
// enum GVType : __int32
// {
//   GVTYPE_BOOL = 0x0,
//   GVTYPE_INT = 0x1,
//   GVTYPE_FLOAT = 0x2,
//   GVTYPE_STRING = 0x3,
//   GVTYPE_NUM = 0x4,
// };

// /* 790 */
// enum UIGametypeFileChunkType : __int32
// {
//   GAMETYPE_CHUNK_DVAR_SET = 0x0,
//   GAMETYPE_CHUNK_CUSTOM_CLASS = 0x1,
//   GAMETYPE_CHUNK_GAME_VARIANT_RULE = 0x2,
//   GAMETYPE_CHUNK_CUSTOM_CLASS_DESCRIPTION = 0x3,
// };

// /* 791 */
// enum GVParamType : __int32
// {
//   GVPARAM_NONE = 0x0,
//   GVPARAM_INTEGER = 0x1,
//   GVPARAM_FLOAT = 0x2,
//   GVPARAM_STRING = 0x3,
//   GVPARAM_USER_ENTERED_STRING = 0x4,
//   GVPARAM_CUSTOM_CLASS = 0x5,
//   GVPARAM_PERK = 0x6,
//   GVPARAM_KILLSTREAK = 0x7,
// };

// /* 792 */
// enum RuleColumn : __int32
// {
//   GV_COL_EVENT = 0x0,
//   GV_COL_ACTION = 0x1,
//   GV_COL_PARAMS = 0x2,
//   GV_COL_TARGETS = 0x3,
//   GV_COL_CONDITIONALS = 0x4,
//   GV_NUM_COLUMNS = 0x5,
// };

// /* 793 */
// enum $0318834871BC4E70A422C3E14C3257B9 : __int32
// {
//   CUSTOM_PERKS_LIGHTWEIGHT = 0x0,
//   CUSTOM_PERKS_LIGHTWEIGHT_PRO = 0x1,
//   CUSTOM_PERKS_SCAVENGER = 0x2,
//   CUSTOM_PERKS_SCAVENGER_PRO = 0x3,
//   CUSTOM_PERKS_GHOST = 0x4,
//   CUSTOM_PERKS_GHOST_PRO = 0x5,
//   CUSTOM_PERKS_FLAK_JACKET = 0x6,
//   CUSTOM_PERKS_FLAK_JACKET_PRO = 0x7,
//   CUSTOM_PERKS_HARDLINE = 0x8,
//   CUSTOM_PERKS_HARDLINE_PRO = 0x9,
//   CUSTOM_PERKS_STEADY_AIM = 0xA,
//   CUSTOM_PERKS_STEADY_AIM_PRO = 0xB,
//   CUSTOM_PERKS_SCOUT = 0xC,
//   CUSTOM_PERKS_SCOUT_PRO = 0xD,
//   CUSTOM_PERKS_DEEP_IMPACT = 0xE,
//   CUSTOM_PERKS_DEEP_IMPACT_PRO = 0xF,
//   CUSTOM_PERKS_SLEIGHT_OF_HAND = 0x10,
//   CUSTOM_PERKS_SLEIGHT_OF_HAND_PRO = 0x11,
//   CUSTOM_PERKS_PROFESSIONAL = 0x12,
//   CUSTOM_PERKS_PROFESSIONAL_PRO = 0x13,
//   CUSTOM_PERKS_MARATHON = 0x14,
//   CUSTOM_PERKS_MARATHON_PRO = 0x15,
//   CUSTOM_PERKS_NINJA = 0x16,
//   CUSTOM_PERKS_NINJA_PRO = 0x17,
//   CUSTOM_PERKS_SECOND_CHANCE = 0x18,
//   CUSTOM_PERKS_SECOND_CHANCE_PRO = 0x19,
//   CUSTOM_PERKS_HACKER = 0x1A,
//   CUSTOM_PERKS_HACKER_PRO = 0x1B,
//   CUSTOM_PERKS_TACTICAL_MASK = 0x1C,
//   CUSTOM_PERKS_TACTICAL_MASK_PRO = 0x1D,
//   CUSTOM_PERKS_COUNT = 0x1E,
// };

 /* 794 */
enum FF_DIR : __int32
{
  FFD_DEFAULT = 0x0,
  FFD_MOD_DIR = 0x1,
  FFD_USER_MAP = 0x2,
};

// /* 795 */
// enum scoreBoardColumns_e : __int32
// {
//   SCOREBOARD_COLUMN_NEMESIS_BG = 0x0,
//   SCOREBOARD_COLUMN_RANK_BG = 0x1,
//   SCOREBOARD_COLUMN_RANK = 0x2,
//   SCOREBOARD_COLUMN_RANK_ICON = 0x3,
//   SCOREBOARD_COLUMN_NAME = 0x4,
//   SCOREBOARD_COLUMN_SCORE = 0x5,
//   SCOREBOARD_COLUMN_1 = 0x6,
//   SCOREBOARD_COLUMN_2 = 0x7,
//   SCOREBOARD_COLUMN_3 = 0x8,
//   SCOREBOARD_COLUMN_4 = 0x9,
// };

// /* 796 */
// enum e_inGamePlayerListColumns : __int32
// {
//   INGAME_LIST_COLUMN_TALKING = 0x0,
//   INGAME_LIST_COLUMN_BACKGROUND = 0x1,
//   INGAME_LIST_COLUMN_ALT_BG = 0x2,
//   INGAME_LIST_COLUMN_RANK_BG = 0x3,
//   INGAME_LIST_COLUMN_RANK = 0x4,
//   INGAME_LIST_COLUMN_RANK_ICON = 0x5,
//   INGAME_LIST_COLUMN_NAME = 0x6,
//   INGAME_LIST_COLUMN_SCORE = 0x7,
// };

// /* 797 */
// enum e_inGamePlayersColumns : __int32
// {
//   INGAME_PLAYERS_COLUMN_BACKGROUND = 0x0,
//   INGAME_PLAYERS_ALT_BG = 0x1,
//   INGAME_PLAYERS_RANK_BG = 0x2,
//   INGAME_PLAYERS_RANK = 0x3,
//   INGAME_PLAYERS_RANK_ICON = 0x4,
//   INGAME_PLAYERS_NAME = 0x5,
//   INGAME_PLAYERS_MUTE_ICON = 0x6,
//   INGAME_PLAYERS_FRIEND_ICON = 0x7,
// };

// /* 798 */
// enum e_itemListColumns : __int32
// {
//   ITEM_LIST_COLUMN_BACKGROUND = 0x0,
//   ITEM_LIST_COLUMN_NAME = 0x1,
//   ITEM_LIST_COLUMN_IMAGE = 0x2,
//   ITEM_LIST_COLUMN_COST = 0x3,
//   ITEM_LIST_COLUMN_LOCK = 0x4,
//   ITEM_LIST_COLUMN_COUNT = 0x5,
//   ITEM_LIST_COLUMN_EXTRA_IMAGE = 0x6,
//   ITEM_LIST_COLUMN_NEWICON = 0x7,
// };

// /* 799 */
// enum e_challengesPerksColumns : __int32
// {
//   PERKS_LIST_COLUMN_NAME = 0x0,
//   PERKS_LIST_COLUMN_LOCK = 0x1,
//   PERKS_LIST_COLUMN_COUNT = 0x2,
// };

// /* 800 */
// enum e_killstreakListColumns : __int32
// {
//   KILLSTREAK_LIST_COLUMN_NAME = 0x0,
//   KILLSTREAK_LIST_COLUMN_IMAGE = 0x1,
//   KILLSTREAK_LIST_COLUMN_COST = 0x2,
//   KILLSTREAK_LIST_COLUMN_LOCK = 0x3,
//   KILLSTREAK_LIST_COLUMN_COUNT = 0x4,
// };

// /* 801 */
// enum e_challengesKillstreakListColumns : __int32
// {
//   CHALLENGES_KILLSTREAK_LIST_COLUMN_NAME = 0x0,
//   CHALLENGES_KILLSTREAK_LIST_COLUMN_LOCK = 0x1,
// };

// /* 802 */
// enum e_attachmentListColumns : __int32
// {
//   ATTACHMENT_LIST_COLUMN_NAME = 0x0,
//   ATTACHMENT_LIST_COLUMN_IMAGE = 0x1,
//   ATTACHMENT_LIST_COLUMN_COST = 0x2,
//   ATTACHMENT_LIST_COLUMN_LOCK = 0x3,
// };

// /* 803 */
// enum e_clanTagFeatureColumns : __int32
// {
//   CLANTAGFEATURE_COLUMN_NAME = 0x0,
//   CLANTAGFEATURE_COLUMN_IMAGE = 0x1,
//   CLANTAGFEATURE_COLUMN_COST = 0x2,
//   CLANTAGFEATURE_COLUMN_LOCK = 0x3,
// };

// /* 804 */
// enum e_contractColumns : __int32
// {
//   FEEDER_CONTRACTS_COLUMN_BACKGROUND = 0x0,
//   FEEDER_CONTRACTS_COLUMN_NAME = 0x1,
//   FEEDER_CONTRACTS_COLUMN_COST = 0x2,
//   FEEDER_CONTRACTS_COLUMN_LOCK = 0x3,
//   FEEDER_CONTRACTS_COLUMN_A_BUTTON = 0x4,
// };

// /* 805 */
// enum e_personalBestColumns : __int32
// {
//   FEEDER_PERSONALBEST_NAME = 0x0,
//   FEEDER_PERSONALBEST_VALUE = 0x1,
//   FEEDER_PERSONALBEST_DELTA = 0x2,
// };

// /* 806 */
// enum e_statsMilestonesListColumns : __int32
// {
//   STATS_MILESTONES_COLUMN_MILESTONE_NAME = 0x0,
//   STATS_MILESTONES_COLUMN_PROGRESS_BAR = 0x1,
//   STATS_MILESTONES_COLUMN_COMPLETED_TEXT = 0x2,
//   STATS_MILESTONES_COLUMN_MILESTONE_LOCKED = 0x3,
// };

// /* 807 */
// enum e_lobbyMemberListColumns : __int32
// {
//   LOBBY_MEMBER_LIST_COLUMN_CONTROLLER = 0x0,
//   LOBBY_MEMBER_LIST_COLUMN_TALKING = 0x1,
//   LOBBY_MEMBER_LIST_COLUMN_BACKGROUND = 0x2,
//   LOBBY_MEMBER_LIST_COLUMN_ALT_BG = 0x3,
//   LOBBY_MEMBER_LIST_COLUMN_RANK_BG = 0x4,
//   LOBBY_MEMBER_LIST_COLUMN_RANK = 0x5,
//   LOBBY_MEMBER_LIST_COLUMN_RANK_ICON = 0x6,
//   LOBBY_MEMBER_LIST_COLUMN_NAME = 0x7,
//   LOBBY_MEMBER_LIST_COLUMN_SCORE = 0x8,
//   LOBBY_MEMBER_LIST_COLUMN_READYUP = 0x9,
// };

// /* 808 */
// enum e_playlistsColumns : __int32
// {
//   FEEDER_NEW_PLAYLISTS_COLUMN_BACKGROUND = 0x0,
//   FEEDER_NEW_PLAYLISTS_COLUMN_NAME = 0x1,
//   FEEDER_NEW_PLAYLISTS_COLUMN_A_BUTTON = 0x2,
// };

// /* 809 */
// enum e_friendsListColumns : __int32
// {
//   FRIENDS_LIST_COLUMN_BG = 0x0,
//   FRIENDS_LIST_COLUMN_EMBLEM_BG = 0x1,
//   FRIENDS_LIST_COLUMN_EMBLEM = 0x2,
//   FRIENDS_LIST_COLUMN_RANK = 0x3,
//   FRIENDS_LIST_COLUMN_RANK_ICON = 0x4,
//   FRIENDS_LIST_COLUMN_NAME = 0x5,
//   FRIENDS_LIST_COLUMN_CODPOINTS = 0x6,
//   FRIENDS_LIST_COLUMN_STATUS = 0x7,
//   FRIENDS_LIST_COLUMN_AUTO_JOIN_TEXT = 0x8,
// };

// /* 810 */
// enum $D813DEC811ED0BF5F0FD5CE757BB17BE : __int32
// {
//   BG_EMBLEM_LOCKED = 0x0,
//   BG_EMBLEM_PURCHASED = 0x1,
//   BG_EMBLEM_AFFORDABLE = 0x2,
//   BG_EMBLEM_CATEGORY_CUSTOM_START = 0x3,
//   BG_EMBLEM_CATEGORY_CUSTOM_END = 0x1F,
//   BG_EMBLEM_CATEGORY_COUNT = 0x20,
// };

// /* 811 */
// enum std::_Uninitialized : __int32
// {
//   _Noinit = 0x0,
// };

// /* 812 */
// enum std::codecvt_base::<unnamed_tag> : __int32
// {
//   ok = 0x0,
//   partial = 0x1,
//   error = 0x2,
//   noconv = 0x3,
// };

// /* 813 */
// enum std::_Iosb<int>::_Dummy_enum : __int32
// {
//   _Dummy_enum_val = 0x1,
// };

// /* 814 */
// enum std::_Iosb<int>::_Fmtflags : __int32
// {
//   _Fmtmask = 0xFFFF,
//   _Fmtzero = 0x0,
// };

// /* 815 */
// enum std::_Iosb<int>::_Iostate : __int32
// {
//   _Statmask = 0x17,
// };

// /* 816 */
// enum std::_Iosb<int>::_Openmode : __int32
// {
//   _Openmask = 0xFF,
// };

// /* 817 */
// enum std::_Iosb<int>::_Seekdir : __int32
// {
//   _Seekmask = 0x3,
// };

// /* 818 */
// enum std::_Iosb<int>::<unnamed_tag> : __int32
// {
//   _Openprot = 0x40,
// };

// /* 819 */
// typedef std::wstring::<unnamed_tag> std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >::<unnamed_tag>;

// /* 820 */
// enum std::ctype_base::<unnamed_tag> : __int32
// {
//   alnum = 0x107,
//   alpha = 0x103,
//   cntrl = 0x20,
//   digit = 0x4,
//   graph = 0x117,
//   lower = 0x2,
//   print = 0x1D7,
//   punct = 0x10,
//   space = 0x48,
//   upper = 0x1,
//   xdigit = 0x80,
// };

// /* 821 */
// enum std::ios_base::event : __int32
// {
//   erase_event = 0x0,
//   imbue_event = 0x1,
//   copyfmt_event = 0x2,
// };

// /* 822 */
// enum std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0>::<unnamed_tag> : __int32
// {
//   _Multi = 0x0,
// };

// /* 823 */
// enum std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >::_Redbl : __int32
// {
//   _Red = 0x0,
//   _Black = 0x1,
// };

// /* 824 */
// enum EXT_INSERTTYPE : __int32
// {
//   EXT_INSERTTYPE_BEFORE = 0x0,
//   EXT_INSERTTYPE_AFTER = 0x1,
// };

// /* 825 */
// enum PacketDataType : __int32
// {
//   ANALYZE_SNAPSHOT_DELTAENTITY = 0x0,
//   ANALYZE_SNAPSHOT_NEWENTITY = 0x1,
//   ANALYZE_SNAPSHOT_REMOVEDENTITY = 0x2,
//   ANALYZE_SNAPSHOT_ALLENTITIES = 0x3,
//   ANALYZE_SNAPSHOT_TEMPENTITY = 0x4,
//   ANALYZE_SNAPSHOT_ALLTEMPENTITIES = 0x5,
//   ANALYZE_SNAPSHOT_DELTACLIENT = 0x6,
//   ANALYZE_SNAPSHOT_NEWCLIENT = 0x7,
//   ANALYZE_SNAPSHOT_REMOVEDCLIENT = 0x8,
//   ANALYZE_SNAPSHOT_ALLCLIENTS = 0x9,
//   ANALYZE_SNAPSHOT_DELTAPLAYERSTATE = 0xA,
//   ANALYZE_SNAPSHOT_NODELTAPLAYERSTATE = 0xB,
//   ANALYZE_SNAPSHOT_SERVERCMDS = 0xC,
//   ANALYZE_SNAPSHOT_DATATYPE_COUNT = 0xD,
// };

/* 826 */
enum svscmd_type : __int32
{
  SV_CMD_CAN_IGNORE = 0x0,
  SV_CMD_RELIABLE = 0x1,
};

// /* 827 */
// enum sv_dedicatedauthState : __int32
// {
//   SV_DWNOTAUTHORIZED = 0x0,
//   SV_DWAUTHORIZING = 0x1,
//   SV_DWAUTHORIZED = 0x2,
//   SV_DWAUTHORIZEFAIL = 0x3,
// };

// /* 828 */
// enum ComSaveLumpBehavior : __int32
// {
//   COM_SAVE_LUMP_AND_CLOSE = 0x0,
//   COM_SAVE_LUMP_AND_REOPEN = 0x1,
// };

// /* 829 */
// enum dlFlags_t : __int32
// {
//   DL_FLAG_DISCON = 0x0,
//   DL_FLAG_URL = 0x1,
// };

// /* 830 */
// enum $4D3AD445C93D33C17617DE0B08BB4C2A : __int32
// {
//   PA_UNVALIDATED = 0x0,
//   PA_VALID = 0x1,
//   PA_INVALID = 0x2,
// };

// /* 831 */
// enum eExtraCamResolution : __int32
// {
//   EXTRACAM_RES_OFF = 0x0,
//   EXTRACAM_RES_NORMAL = 0x1,
//   EXTRACAM_RES_HIGH = 0x2,
//   EXTRACAM_RES_DEFAULT = 0x1,
// };

// /* 832 */
// enum ThreadOwner : __int32
// {
//   THREAD_OWNER_NONE = 0x0,
//   THREAD_OWNER_DATABASE = 0x1,
//   THREAD_OWNER_CINEMATICS = 0x2,
//   THREAD_OWNER_SHUTDOWN = 0x3,
// };

// /* 833 */
// enum $C0188971FD43DEB8E91731A66ECD7D9E : __int32
// {
//   BACKEND_EVENT_WORKER_CMD = 0x0,
//   BACKEND_EVENT_GENERIC = 0x1,
//   BACKEND_EVENT_COUNT = 0x2,
// };

// /* 834 */
// enum $8C93BDAF687CE8C692132D000F171003 : __int32
// {
//   WPLF_LOCK_STARTED = 0x1,
//   WPLF_LOCK_SET = 0x2,
//   WPLF_LOCK_ATTACK_TOP = 0x4,
//   WPLF_LOCK_ATTACK_DIRECT = 0x8,
//   WPLF_LOCK_TARGET_TOO_CLOSE = 0x10,
//   WPLF_LOCK_NOT_ENOUGH_CLEARANCE = 0x20,
//   WEAPONLOCKFLAG_BITS = 0x6,
// };

// /* 835 */
// enum CommandProcessorType : __int32
// {
//   COMMAND_SERVER = 0x0,
//   COMMAND_CLIENT = 0x1,
//   COMMAND_BOTH = 0x2,
// };

// /* 836 */
// enum $CF3BBA7A6E8F0E98C9CF75147894CB40 : __int32
// {
//   COMPRESS_NONE = 0x0,
//   COMPRESS_HUFFMAN = 0x1,
//   COMPRESS_ZLIB = 0x2,
// };

// /* 837 */
// enum $DE1ADEAA3B3B39EA25F6918514CA34B4 : __int32
// {
//   UT_STATIC = 0x0,
//   UT_VSTATIC = 0x1,
//   UT_MALLOC = 0x2,
//   UT_HUNK = 0x3,
//   UT_VOID = 0x4,
//   UT_IMAGE = 0x5,
//   UT_TEMP = 0x6,
//   UT_PHYSICAL = 0x7,
//   UT_USERHUNK = 0x8,
//   UT_COUNT = 0x9,
// };

// /* 838 */
// typedef bitarray<51>::<unnamed_tag> bitarray<54>::<unnamed_tag>;

// /* 839 */
// enum FS_SERVER_COMPARE_RESULT : __int32
// {
//   FILES_MATCH = 0x0,
//   NEED_DOWNLOAD = 0x1,
//   NOT_DOWNLOADABLE = 0x2,
// };

// /* 840 */
// enum _HTFilterOrder : __int32
// {
//   HT_FILTER_FIRST = 0x0,
//   HT_FILTER_EARLY = 0x3FFF,
//   HT_FILTER_MIDDLE = 0x7FFF,
//   HT_FILTER_LATE = 0xBFFE,
//   HT_FILTER_LAST = 0xFFFF,
// };

// /* 841 */
// enum dlStatus_t : __int32
// {
//   DL_CONTINUE = 0x0,
//   DL_DONE = 0x1,
//   DL_FAILED = 0x2,
// };

// /* 842 */
// enum HTEventType : __int32
// {
//   HTEvent_READ = 0x1,
//   HTEvent_ACCEPT = 0x2,
//   HTEvent_CLOSE = 0x4,
//   HTEvent_WRITE = 0x10008,
//   HTEvent_CONNECT = 0x10010,
//   HTEvent_OOB = 0x20020,
//   HTEvent_TYPES = 0x3,
//   HTEvent_TIMEOUT = 0x30040,
//   HTEvent_BEGIN = 0x30000,
//   HTEvent_END = 0x30080,
//   HTEvent_FLUSH = 0x30100,
//   HTEvent_RESET = 0x30200,
//   HTEvent_ALL = 0xFFFF,
// };

// /* 843 */
// enum _HTAlertOpcode : __int32
// {
//   HT_PROG_DNS = 0x1,
//   HT_PROG_CONNECT = 0x2,
//   HT_PROG_ACCEPT = 0x4,
//   HT_PROG_READ = 0x8,
//   HT_PROG_WRITE = 0x10,
//   HT_PROG_DONE = 0x20,
//   HT_PROG_INTERRUPT = 0x40,
//   HT_PROG_OTHER = 0x80,
//   HT_PROG_TIMEOUT = 0x100,
//   HT_PROG_LOGIN = 0x200,
//   HT_A_PROGRESS = 0xFFFF,
//   HT_A_MESSAGE = 0x10000,
//   HT_A_CONFIRM = 0x20000,
//   HT_A_PROMPT = 0x40000,
//   HT_A_SECRET = 0x80000,
//   HT_A_USER_PW = 0x100000,
// };

// /* 844 */
// enum _HTPriority : __int32
// {
//   HT_PRIORITY_INV = 0xFFFFFFFF,
//   HT_PRIORITY_OFF = 0x0,
//   HT_PRIORITY_MIN = 0x1,
//   HT_PRIORITY_MAX = 0x14,
// };

// /* 845 */
// enum _HTAlertMsg : __int32
// {
//   HT_MSG_NULL = 0xFFFFFFFF,
//   HT_MSG_UID = 0x0,
//   HT_MSG_PROXY_UID = 0x1,
//   HT_MSG_FTP_UID = 0x2,
//   HT_MSG_PW = 0x3,
//   HT_MSG_FILENAME = 0x4,
//   HT_MSG_ACCOUNT = 0x5,
//   HT_MSG_METHOD = 0x6,
//   HT_MSG_MOVED = 0x7,
//   HT_MSG_RULES = 0x8,
//   HT_MSG_FILE_REPLACE = 0x9,
//   HT_MSG_RETRY_AUTHENTICATION = 0xA,
//   HT_MSG_RETRY_PROXY_AUTH = 0xB,
//   HT_MSG_REDO = 0xC,
//   HT_MSG_BIG_PUT = 0xD,
//   HT_MSG_SOURCE_MOVED = 0xE,
//   HT_MSG_DESTINATION_MOVED = 0xF,
//   HT_MSG_REDIRECTION = 0x10,
//   HT_MSG_PROXY = 0x11,
//   HT_MSG_CACHE_LOCK = 0x12,
//   HT_MSG_ACCEPT_COOKIE = 0x13,
//   HT_MSG_ELEMENTS = 0x14,
// };

// /* 846 */
// enum _HTRqHd : __int32
// {
//   HT_C_ACCEPT_TYPE = 0x1,
//   HT_C_ACCEPT_CHAR = 0x2,
//   HT_C_ACCEPT_ENC = 0x4,
//   HT_C_ACCEPT_TE = 0x8,
//   HT_C_ACCEPT_LAN = 0x10,
//   HT_C_AUTH = 0x20,
//   HT_C_EXPECT = 0x40,
//   HT_C_FROM = 0x80,
//   HT_C_HOST = 0x100,
//   HT_C_IMS = 0x200,
//   HT_C_IF_MATCH = 0x400,
//   HT_C_IF_MATCH_ANY = 0x800,
//   HT_C_IF_NONE_MATCH = 0x1000,
//   HT_C_IF_NONE_MATCH_ANY = 0x2000,
//   HT_C_IF_RANGE = 0x4000,
//   HT_C_IF_UNMOD_SINCE = 0x8000,
//   HT_C_MAX_FORWARDS = 0x10000,
//   HT_C_RANGE = 0x20000,
//   HT_C_REFERER = 0x40000,
//   HT_C_USER_AGENT = 0x80000,
// };

// /* 847 */
// enum HTMethod : __int32
// {
//   METHOD_INVALID = 0x0,
//   METHOD_GET = 0x1,
//   METHOD_HEAD = 0x2,
//   METHOD_POST = 0x4,
//   METHOD_PUT = 0x8,
//   METHOD_PATCH = 0x10,
//   METHOD_DELETE = 0x20,
//   METHOD_TRACE = 0x40,
//   METHOD_OPTIONS = 0x80,
//   METHOD_LINK = 0x100,
//   METHOD_UNLINK = 0x200,
// };

// /* 848 */
// enum _HTPreconditions : __int32
// {
//   HT_NO_MATCH = 0x0,
//   HT_MATCH_THIS = 0x1,
//   HT_MATCH_ANY = 0x2,
//   HT_DONT_MATCH_THIS = 0x3,
//   HT_DONT_MATCH_ANY = 0x4,
// };

// /* 849 */
// enum _HTGnHd : __int32
// {
//   HT_G_CC = 0x1,
//   HT_G_CONNECTION = 0x2,
//   HT_G_DATE = 0x4,
//   HT_G_PRAGMA_NO_CACHE = 0x8,
//   HT_G_FORWARDED = 0x10,
//   HT_G_MESSAGE_ID = 0x20,
//   HT_G_MIME = 0x40,
//   HT_G_TRAILER = 0x80,
//   HT_G_TRANSFER = 0x100,
//   HT_G_EXTRA_HEADERS = 0x200,
// };

// /* 850 */
// enum _HTRsHd : __int32
// {
//   HT_S_AGE = 0x1,
//   HT_S_LOCATION = 0x2,
//   HT_S_PROXY_AUTH = 0x4,
//   HT_S_PUBLIC = 0x8,
//   HT_S_RETRY_AFTER = 0x10,
//   HT_S_SERVER = 0x20,
//   HT_S_VARY = 0x40,
//   HT_S_WARNING = 0x80,
//   HT_S_WWW_AUTH = 0x100,
//   HT_S_TRAILER = 0x200,
// };

// /* 851 */
// enum _HTEnHd : __int32
// {
//   HT_E_ALLOW = 0x1,
//   HT_E_CONTENT_BASE = 0x2,
//   HT_E_CONTENT_ENCODING = 0x4,
//   HT_E_CONTENT_LANGUAGE = 0x8,
//   HT_E_CONTENT_LENGTH = 0x10,
//   HT_E_CONTENT_LOCATION = 0x20,
//   HT_E_CONTENT_MD5 = 0x40,
//   HT_E_CONTENT_RANGE = 0x80,
//   HT_E_CTE = 0x100,
//   HT_E_CONTENT_TYPE = 0x200,
//   HT_E_DERIVED_FROM = 0x400,
//   HT_E_ETAG = 0x800,
//   HT_E_EXPIRES = 0x1000,
//   HT_E_LAST_MODIFIED = 0x2000,
//   HT_E_LINK = 0x4000,
//   HT_E_TITLE = 0x8000,
//   HT_E_URI = 0x10000,
//   HT_E_VERSION = 0x20000,
// };

// /* 852 */
// enum _HTReload : __int32
// {
//   HT_CACHE_OK = 0x0,
//   HT_CACHE_FLUSH_MEM = 0x1,
//   HT_CACHE_VALIDATE = 0x2,
//   HT_CACHE_END_VALIDATE = 0x4,
//   HT_CACHE_RANGE_VALIDATE = 0x8,
//   HT_CACHE_FLUSH = 0x10,
//   HT_CACHE_ERROR = 0x20,
// };

// /* 853 */
// enum $641AF900EEDDDE9F2178DBC50AEAF45B : __int32
// {
//   DB_ZONE_CODE = 0x1,
//   DB_ZONE_CODE_LOC = 0x2,
//   DB_ZONE_DEV = 0x4,
//   DB_ZONE_DEV_LOC = 0x8,
//   DB_ZONE_PATCH = 0x10,
//   DB_ZONE_PATCH_LOC = 0x20,
//   DB_ZONE_MOD = 0x40,
//   DB_ZONE_MOD_LOC = 0x80,
//   DB_ZONE_COMMON = 0x100,
//   DB_ZONE_COMMON_LOC = 0x200,
//   DB_ZONE_FFOTD = 0x400,
//   DB_ZONE_FFOTD_LOC = 0x800,
//   DB_ZONE_LEVELCOMMON = 0x1000,
//   DB_ZONE_LEVELCOMMON_LOC = 0x2000,
//   DB_ZONE_LEVEL = 0x4000,
//   DB_ZONE_LEVEL_LOC = 0x8000,
//   DB_ZONE_LEVELOVERLAY = 0x10000,
//   DB_ZONE_LEVELOVERLAY_LOC = 0x20000,
//   DB_ZONE_GUMP = 0x40000,
//   DB_ZONE_GUMP_LOC = 0x80000,
//   DB_ZONE_LOW_MARKER = 0x100000,
//   DB_ZONE_MYCHANGES_LOC = 0x200000,
//   DB_ZONE_MYCHANGES = 0x400000,
//   DB_ZONE_UI_VIEWER_LOC = 0x800000,
//   DB_ZONE_UI_VIEWER = 0x1000000,
//   DB_ZONE_FRONTEND_LOC = 0x2000000,
//   DB_ZONE_FRONTEND = 0x4000000,
//   DB_ZONE_HIGH_MARKER = 0x8000000,
//   DB_ZONE_LOAD = 0x10000000,
//   DB_FLAG_RSTREAM = 0x40000000,
//   DB_FLAG_STRICTFREE = 0x80000000,
// };

// /* 854 */
// enum MapProfileTrackedValue : __int32
// {
//   MAP_PROFILE_FILE_OPEN = 0x0,
//   MAP_PROFILE_FILE_SEEK = 0x1,
//   MAP_PROFILE_FILE_READ = 0x2,
//   MAP_PROFILE_VALUE_MAX = 0x3,
// };

// /* 855 */
// enum SideClassification : __int32
// {
//   SIDE_FRONT = 0x0,
//   SIDE_BACK = 0x1,
//   SIDE_ON = 0x2,
//   SIDE_CROSS = 0x3,
//   SIDE_COUNT = 0x4,
// };

// /* 856 */
// enum SphereEdgeTraceResult : __int32
// {
//   SPHERE_HITS_EDGE = 0x0,
//   SPHERE_MISSES_EDGE = 0x1,
//   SPHERE_MAY_HIT_V0 = 0x2,
//   SPHERE_MAY_HIT_V1 = 0x3,
// };

// /* 857 */
// enum $15F727204CFF2A120845C1ABCA9EFF6F : __int32
// {
//   PLAY_MODE_FAST = 0x0,
//   PLAY_MODE_SLOW = 0x1,
//   PLAY_MODE_NORMAL = 0x2,
// };

// /* 858 */
// enum bandwidth_enum : __int32
// {
//   BANDWIDTH_NARROW = 0x0,
//   BANDWIDTH_WIDE = 0x1,
//   BANDWIDTH_ULTRAWIDE = 0x2,
//   NUM_BANDWIDTH_MODES = 0x3,
// };

// /* 859 */
// enum $86225B139086A1126E86282EBC5B63FF : __int32
// {
//   TARGETFLAG_ATTACKPROFILETOP = 0x1,
//   TARGETFLAG_JAVELINONLY = 0x2,
//   TARGETFLAG_TURRETS_NO_AQUIRE = 0x4,
// };

// /* 860 */
// enum $DB39EA8E11238C04807CA6FF527B389E : __int32
// {
//   TS_IDLE = 0x0,
//   TS_FIRING_HEAD = 0x1,
//   TS_FIRING_FEET = 0x2,
// };

// /* 861 */
// enum $B16F69867E8346741322A6F42C51977B : __int32
// {
//   TURRET_REQUIRES_AI = 0x1,
//   TURRET_AUTO = 0x2,
//   TURRET_FIRING = 0x4,
//   TURRET_HAS_MISS_TARGET = 0x8,
//   TURRET_TAKEN_PAIN = 0x10,
//   TURRET_ERROR_INITED = 0x20,
//   TURRET_HAS_TARGET = 0x40,
//   TURRET_BAD_TARGET = 0x80,
//   TURRET_FIRST_PITCH_CAP = 0x100,
//   TURRET_PITCH_CAP = 0x200,
//   TURRET_PITCH_MIN = 0x400,
//   TURRET_INIT_VIEW = 0x800,
//   TURRET_USABLE = 0x1000,
//   TURRET_IGNOREGOAL = 0x2000,
//   TURRET_FIRING_DISABLED = 0x4000,
//   TURRET_DUAL_BARREL = 0x8000,
//   TURRET_TARGET_SENTIENT = 0x10000,
//   TURRET_TARGET_KILLSTREAK = 0x20000,
//   TURRET_SCANNING = 0x40000,
//   TURRET_SCANNING_TOGGLE = 0x80000,
//   TURRET_OFFLINE = 0x100000,
// };

// /* 862 */
// enum $F3BCC0001EA0B8E51E4CC6AFFC3D286A : __int32
// {
//   ACTIVE_STATE_INACTIVE = 0x0,
//   ACTIVE_STATE_ACTIVE = 0x1,
//   ACTIVE_STATE_WANTS_TURRET_DISMOUNT = 0x2,
// };

// /* 863 */
// enum SaveType : __int32
// {
//   SAVE_TYPE_INTERNAL = 0x0,
//   SAVE_TYPE_AUTOSAVE = 0x1,
//   SAVE_TYPE_CONSOLE = 0x2,
// };

// /* 864 */
// enum eSpawnSystemDebugMode : __int32
// {
//   SS_DEBUG_OFF = 0x0,
//   SS_DEBUG_LIVE = 0x1,
//   SS_DEBUG_ARCHIVE_LOADING = 0x2,
//   SS_DEBUG_ARCHIVE_VIEW = 0x3,
//   SS_DEBUG_ARCHIVE_SIMULATE = 0x4,
//   SS_DEBUG_ARCHIVE_SIMULATE_LIVE = 0x5,
//   SS_DEBUG_ARCHIVE_MAX = 0x5,
//   SS_DEBUG_COUNT = 0x6,
// };

// /* 865 */
// enum eInfluencerType : __int32
// {
//   INFLUENCER_TYPE_NORMAL = 0x0,
//   INFLUENCER_TYPE_PLAYER = 0x1,
//   INFLUENCER_TYPE_WEAPON = 0x2,
//   INFLUENCER_TYPE_DOG = 0x3,
//   INFLUENCER_TYPE_VEHICLE = 0x4,
//   INFLUENCER_TYPE_SQUAD = 0x5,
//   INFLUENCER_TYPE_GAME_MODE = 0x6,
//   INFLUENCER_TYPE_UNUSED = 0x7,
//   MAX_INFLUENCER_TYPE = 0x8,
// };

// /* 866 */
// enum eInfluencerShape : __int32
// {
//   INFLUENCER_SHAPE_SPHERE = 0x0,
//   INFLUENCER_SHAPE_CYLINDER = 0x1,
//   INFLUENCER_SHAPE_BOX = 0x2,
//   MAX_INFLUENCER_SHAPE = 0x3,
// };

// /* 867 */
// enum eInfluencerScoreCurve : __int32
// {
//   INFLUENCER_SC_CONSTANT = 0x0,
//   INFLUENCER_SC_LINEAR = 0x1,
//   INFLUENCER_SC_STEEP = 0x2,
//   INFLUENCER_SC_INVERSE_LINEAR = 0x3,
//   INFLUENCER_SC_NEGATIVE_TO_POSITIVE = 0x4,
//   MAX_INFLUENCER_SCORE_CURVE = 0x5,
// };

// /* 868 */
// enum DAMAGE_FLAGS : __int32
// {
//   DAMAGE_NOFLAG = 0x0,
//   DAMAGE_RADIUS = 0x1,
//   DAMAGE_NO_ARMOR = 0x2,
//   DAMAGE_NO_KNOCKBACK = 0x4,
//   DAMAGE_PENETRATION = 0x8,
//   DAMAGE_DESTRUCTIBLE_ENTITY = 0x10,
// };

// /* 869 */
// enum $C1C70DF5952D15DFF678CCFF538AEB41 : __int32
// {
//   FL_WHEEL = 0x0,
//   FR_WHEEL = 0x1,
//   BL_WHEEL = 0x2,
//   BR_WHEEL = 0x3,
//   ML_WHEEL = 0x4,
//   MR_WHEEL = 0x5,
// };

// /* 870 */
// enum $B1BBE5A85BB2F36DF1971668ECA0F50C : __int32
// {
//   VFT_TYPE = 0xF,
//   VFT_CAMERAMODE = 0x10,
//   VFT_BOOSTMODE = 0x11,
//   VFT_TRACTION_TYPE = 0x12,
//   VFT_MPH_TO_INCHES_PER_SECOND = 0x13,
//   VFT_POUNDS_TO_GAME_MASS = 0x14,
//   VFT_SCR_STRING = 0x15,
//   VFT_TEAM = 0x16,
//   VFT_KEY_BINDING = 0x17,
//   VFT_GRAPH = 0x18,
//   VFT_NUM = 0x19,
// };

// /* 871 */
// enum $D7F086B0A3A1DA3380D0792B1943F13B : __int32
// {
//   TALKFLAG_EVERYONE_HEARS_EVERYONE = 0x1,
//   TALKFLAG_DEAD_CHAT_WITH_DEAD = 0x2,
//   TALKFLAG_DEAD_CHAT_WITH_TEAM = 0x4,
//   TALKFLAG_DEAD_HEAR_TEAM_LIVING = 0x8,
//   TALKFLAG_DEAD_HEAR_ALL_LIVING = 0x10,
// };

// /* 872 */
// enum XAnimFaceEvents : __int32
// {
//   XANIM_FACE_CASUAL = 0x0,
//   XANIM_FACE_ALERT = 0x1,
//   XANIM_FACE_CQB = 0x2,
//   XANIM_FACE_RUNNING = 0x3,
//   XANIM_FACE_SHOOT = 0x4,
//   XANIM_FACE_SHOOT_BURST = 0x5,
//   XANIM_FACE_MELEE = 0x6,
//   XANIM_FACE_REACT = 0x7,
//   XANIM_FACE_TALK = 0x8,
//   XANIM_FACE_TALK_LONG = 0x9,
//   XANIM_FACE_PAIN = 0xA,
//   XANIM_FACE_DEATH = 0xB,
//   XANIM_FACE_NUM_EVENTS = 0xC,
// };

// /* 873 */
// enum scriptAnimNoteType_t : __int32
// {
//   ANIM_NOTE_RELOAD = 0x1,
//   ANIM_NOTE_FOOTPRINT = 0x2,
//   ANIM_NOTE_MODEL_PREVIEWER = 0x4,
// };

// /* 874 */
// enum $F90C4BB1092B48528BFB76505F931A55 : __int32
// {
//   LF_NONE = 0x0,
//   LF_MAP_RESTART = 0x1,
//   LF_MAP_CHANGE = 0x2,
//   LF_EXITLEVEL = 0x3,
// };

// /* 875 */
// enum SaveErrorType : __int32
// {
//   SAVE_ERROR_MISSING_DEVICE = 0x0,
//   SAVE_ERROR_CORRUPT_SAVE = 0x1,
// };

// /* 876 */
// enum saveFieldtype_t : __int32
// {
//   SF_NONE = 0x0,
//   SF_STRING = 0x1,
//   SF_ENTITY = 0x2,
//   SF_ENTHANDLE = 0x3,
//   SF_CLIENT = 0x4,
//   SF_ACTOR = 0x5,
//   SF_SENTIENT = 0x6,
//   SF_SENTIENTHANDLE = 0x7,
//   SF_VEHICLE = 0x8,
//   SF_TURRETINFO = 0x9,
//   SF_DESTRUCTIBLE = 0xA,
//   SF_THREAD = 0xB,
//   SF_ANIMSCRIPT = 0xC,
//   SF_PATHNODE = 0xD,
//   SF_ANIMTREE = 0xE,
//   SF_TYPE_TAG_INFO = 0xF,
//   SF_TYPE_SCRIPTED = 0x10,
//   SF_MODELUSHORT = 0x11,
//   SF_MODELINT = 0x12,
// };

// /* 877 */
// enum $688B2D03DF32AE37E21F7F38E3D2634B : __int32
// {
//   MF_BOOST_ENABLED = 0x1,
//   MF_DETONATION_ENABLED = 0x2,
//   MF_MISSILE_BOOSTING = 0x4,
// };

// /* 878 */
// enum EntInfoType : __int32
// {
//   ENTINFO_TYPE_ALL = 0x0,
//   ENTINFO_TYPE_AI = 0x1,
//   ENTINFO_TYPE_VEHICLE = 0x2,
//   NUM_ENTINFO_TYPE = 0x3,
// };

// /* 879 */
// enum $3933CA48877D8D904323DB7D1DDC885D : __int32
// {
//   HE_FONT_DEFAULT = 0x0,
//   HE_FONT_BIGFIXED = 0x1,
//   HE_FONT_SMALLFIXED = 0x2,
//   HE_FONT_OBJECTIVE = 0x3,
//   HE_FONT_BIG = 0x4,
//   HE_FONT_SMALL = 0x5,
//   HE_FONT_EXTRABIG = 0x6,
//   HE_FONT_COUNT = 0x7,
// };

// /* 880 */
// enum PlayerSpreadOverrideState : __int32
// {
//   PSOS_DISABLED = 0x0,
//   PSOS_RESETTING = 0x1,
//   PSOS_ENABLED = 0x2,
// };

// /* 881 */
// enum weapAnimNumber_t : __int32
// {
//   WEAP_IDLE = 0x0,
//   WEAP_FORCE_IDLE = 0x1,
//   WEAP_ATTACK = 0x2,
//   WEAP_ATTACK_LEFT = 0x3,
//   WEAP_ATTACK_LASTSHOT = 0x4,
//   WEAP_ATTACK_LASTSHOT_LEFT = 0x5,
//   WEAP_RECHAMBER = 0x6,
//   WEAP_ADS_ATTACK = 0x7,
//   WEAP_ADS_ATTACK_LASTSHOT = 0x8,
//   WEAP_ADS_RECHAMBER = 0x9,
//   WEAP_MELEE_ATTACK = 0xA,
//   WEAP_MELEE_CHARGE = 0xB,
//   WEAP_DROP = 0xC,
//   WEAP_RAISE = 0xD,
//   WEAP_FIRST_RAISE = 0xE,
//   WEAP_RELOAD = 0xF,
//   WEAP_RELOAD_EMPTY = 0x10,
//   WEAP_RELOAD_START = 0x11,
//   WEAP_RELOAD_END = 0x12,
//   WEAP_RELOAD_QUICK = 0x13,
//   WEAP_RELOAD_QUICK_EMPTY = 0x14,
//   WEAP_ALTSWITCHFROM = 0x15,
//   WEAP_ALTSWITCHTO = 0x16,
//   WEAP_QUICK_DROP = 0x17,
//   WEAP_QUICK_RAISE = 0x18,
//   WEAP_EMPTY_DROP = 0x19,
//   WEAP_EMPTY_RAISE = 0x1A,
//   WEAP_SPRINT_IN = 0x1B,
//   WEAP_SPRINT_LOOP = 0x1C,
//   WEAP_SPRINT_OUT = 0x1D,
//   WEAP_SPRINT_EMPTY_IN = 0x1E,
//   WEAP_SPRINT_EMPTY_LOOP = 0x1F,
//   WEAP_SPRINT_EMPTY_OUT = 0x20,
//   WEAP_LOWREADY_IN = 0x21,
//   WEAP_LOWREADY_LOOP = 0x22,
//   WEAP_LOWREADY_OUT = 0x23,
//   WEAP_CONT_FIRE_IN = 0x24,
//   WEAP_CONT_FIRE_LOOP = 0x25,
//   WEAP_CONT_FIRE_OUT = 0x26,
//   WEAP_HOLD_FIRE = 0x27,
//   WEAP_DETONATE = 0x28,
//   WEAP_NIGHTVISION_WEAR = 0x29,
//   WEAP_NIGHTVISION_REMOVE = 0x2A,
//   WEAP_DEPLOYING = 0x2B,
//   WEAP_BREAKING_DOWN = 0x2C,
//   WEAP_DTP_IN = 0x2D,
//   WEAP_DTP_LOOP = 0x2E,
//   WEAP_DTP_OUT = 0x2F,
//   WEAP_DTP_EMPTY_IN = 0x30,
//   WEAP_DTP_EMPTY_LOOP = 0x31,
//   WEAP_DTP_EMPTY_OUT = 0x32,
//   WEAP_SLIDE_IN = 0x33,
//   WEAP_MANTLE = 0x34,
//   WEAP_JAM = 0x35,
//   MAX_WP_ANIMATIONS = 0x36,
// };

// /* 882 */
// enum eWeaponComponentType : __int32
// {
//   WEAPON_COMPONENT_UNKNOWN = 0x0,
//   WEAPON_COMPONENT_ATTACHMENT = 0x1,
//   WEAPON_COMPONENT_BASE = 0x2,
// };

// /* 883 */
// enum $D069B535085F437BA41AFCCB66DC3D72 : __int32
// {
//   FX_STATUS_REF_COUNT_MASK = 0x3FFF,
//   FX_STATUS_IS_STALE_ATTACHED_FX = 0x4000,
//   FX_STATUS_BASE_REF_REMOVED = 0x8000,
//   FX_STATUS_HAS_PENDING_LOOP_ELEMS = 0x10000,
//   FX_STATUS_OWNED_EFFECTS_SHIFT = 0x11,
//   FX_STATUS_OWNED_EFFECTS_MASK = 0x7FE0000,
//   FX_STATUS_IS_LOCKED = 0x20000000,
//   FX_STATUS_IS_LOCKED_MASK = 0x60000000,
// };

// /* 884 */
// enum $8340209549BE697D1F033EFBE5B42EDF : __int32
// {
//   FX_ELEM_CLASS_SPRITE = 0x0,
//   FX_ELEM_CLASS_NONSPRITE = 0x1,
//   FX_ELEM_CLASS_CLOUD = 0x2,
//   FX_ELEM_CLASS_COUNT = 0x3,
// };

// /* 885 */
// enum FxRandKey : __int32
// {
//   FXRAND_VELOCITY_X = 0x0,
//   FXRAND_VELOCITY_Y = 0x1,
//   FXRAND_VELOCITY_Z = 0x2,
//   FXRAND_ANGULAR_VELOCITY_PITCH = 0x3,
//   FXRAND_ANGULAR_VELOCITY_YAW = 0x4,
//   FXRAND_ANGULAR_VELOCITY_ROLL = 0x5,
//   FXRAND_ORIGIN_X = 0x6,
//   FXRAND_ORIGIN_Y = 0x7,
//   FXRAND_ORIGIN_Z = 0x8,
//   FXRAND_OFFSET_YAW = 0x9,
//   FXRAND_OFFSET_HEIGHT = 0xA,
//   FXRAND_OFFSET_RADIUS = 0xB,
//   FXRAND_ANGLES_PITCH = 0xC,
//   FXRAND_ANGLES_YAW = 0xD,
//   FXRAND_ANGLES_ROLL = 0xE,
//   FXRAND_GRAVITY = 0xF,
//   FXRAND_REFLECTION_FACTOR = 0x10,
//   FXRAND_LIFE_SPAN = 0x11,
//   FXRAND_SPAWN_DELAY = 0x12,
//   FXRAND_SPAWN_COUNT = 0x13,
//   FXRAND_EMIT_DIST = 0x14,
//   FXRAND_VISUAL = 0x15,
//   FXRAND_TILE_START = 0x16,
//   FXRAND_COLOR = 0x17,
//   FXRAND_ROTATION = 0x18,
//   FXRAND_ROTATION_DELTA = 0x19,
//   FXRAND_SIZE_0 = 0x1A,
//   FXRAND_SIZE_1 = 0x1B,
//   FXRAND_SCALE = 0x1C,
//   FXRAND_CLOUD_DENSITY = 0x1D,
//   FXRAND_COUNT = 0x1E,
// };

// /* 886 */
// enum FxUniqueHandleDb::<unnamed_tag> : __int32
// {
//   INVALID_NODE = 0xFFFFFFFF,
// };

// /* 887 */
// enum $2449A9DA941D9E7559BE48C481CDE51B : __int32
// {
//   FX_CMD_CAMERA_REGUAR = 0x0,
//   FX_CMD_CAMERA_EXTRA = 0x1,
// };

// /* 888 */
// enum FxBoltType : __int32
// {
//   FX_BOLT_TYPE_NONE = 0x0,
//   FX_BOLT_TYPE_BOLTED = 0x1,
//   FX_BOLT_TYPE_DYNENT = 0x2,
//   FX_BOLT_TYPE_MARKENT = 0x3,
// };

// /* 889 */
// enum FxUpdateResult : __int32
// {
//   FX_UPDATE_REMOVE = 0x0,
//   FX_UPDATE_KEEP = 0x1,
// };

// /* 890 */
// enum GfxWarningType : __int32
// {
//   R_WARN_FRONTEND_ENT_LIMIT = 0x0,
//   R_WARN_KNOWN_MODELS = 0x1,
//   R_WARN_KNOWN_SPECIAL_MODELS = 0x2,
//   R_WARN_TEXTURE_OVERRIDES = 0x3,
//   R_WARN_MODEL_LIGHT_CACHE = 0x4,
//   R_WARN_SCENE_ENTITIES = 0x5,
//   R_WARN_TEMP_SKIN_BUF_SIZE = 0x6,
//   R_WARN_MAX_SKINNED_CACHE_VERTICES = 0x7,
//   R_WARN_MAX_SCENE_SURFS_SIZE = 0x8,
//   R_WARN_PORTAL_PLANES = 0x9,
//   R_WARN_MAX_CLOUDS = 0xA,
//   R_WARN_MAX_DLIGHTS = 0xB,
//   R_WARN_SMODEL_LIGHTING = 0xC,
//   R_WARN_MAX_DRAWSURFS = 0xD,
//   R_WARN_GFX_CODE_MESH_LIMIT = 0xE,
//   R_WARN_GFX_MARK_MESH_LIMIT = 0xF,
//   R_WARN_MAX_SCENE_DRAWSURFS = 0x10,
//   R_WARN_MAX_FX_DRAWSURFS = 0x11,
//   R_WARN_NONEMISSIVE_FX_MATERIAL = 0x12,
//   R_WARN_NONLIGHTMAP_MARK_MATERIAL = 0x13,
//   R_WARN_PRIM_DRAW_SURF_BUFFER_SIZE = 0x14,
//   R_WARN_CMDBUF_OVERFLOW = 0x15,
//   R_WARN_MISSING_DECL_NONDEBUG = 0x16,
//   R_WARN_MAX_DYNENT_REFS = 0x17,
//   R_WARN_MAX_SCENE_DOBJ_REFS = 0x18,
//   R_WARN_MAX_SCENE_MODEL_REFS = 0x19,
//   R_WARN_MAX_SCENE_BRUSH_REFS = 0x1A,
//   R_WARN_MAX_CODE_INDS = 0x1B,
//   R_WARN_MAX_CODE_VERTS = 0x1C,
//   R_WARN_MAX_CODE_ARGS = 0x1D,
//   R_WARN_MAX_MARK_INDS = 0x1E,
//   R_WARN_MAX_MARK_VERTS = 0x1F,
//   R_WARN_DEBUG_ALLOC = 0x20,
//   R_WARN_SPOT_LIGHT_LIMIT = 0x21,
//   R_WARN_FX_ELEM_LIMIT = 0x22,
//   R_WARN_VTX_DATA_OVERFLOW = 0x23,
//   R_WARN_WORKER_CMD_SIZE = 0x24,
//   R_WARN_UNKNOWN_STATICMODEL_SHADER = 0x25,
//   R_WARN_UNKNOWN_XMODEL_SHADER = 0x26,
//   R_WARN_DYNAMIC_INDEX_BUFFER_SIZE = 0x27,
//   R_WARN_MICROCODE_BUFFER_SIZE = 0x28,
//   R_WARN_TOO_MANY_LIGHT_GRID_POINTS = 0x29,
//   R_WARN_MAX_FOLIAGE_MODELINFO = 0x2A,
//   R_WARN_MAX_TRANSFER_REQUESTS = 0x2B,
//   R_WARN_MAX_SHADER_CONSTANT_SETS = 0x2C,
//   R_WARN_DYN_SMODEL_MAX_DRAWSTATES = 0x2D,
//   R_WARN_MISSING_TECHNIQUE = 0x2E,
//   R_WARN_MARKS_ERR_PROBE_MISMATCH = 0x2F,
//   R_WARN_MARKS_ERR_LMAP_MISMATCH = 0x30,
//   R_WARN_COUNT = 0x31,
// };

// /* 891 */
// enum $78411A75CB84B750115CFB22FEE45356 : __int32
// {
//   FX_EFFECT_NEEDS_LIGHTING = 0x1,
//   FX_EFFECT_IS_SEE_THRU_DECAL = 0x2,
//   FX_EFFECT_USE_BOUNDING_BOX = 0x4,
//   FX_EFFECT_LOCAL_BOUNDING_BOX = 0x8,
// };

// /* 892 */
// enum MarkFragmentsAgainstEnum : __int32
// {
//   MARK_FRAGMENTS_AGAINST_BRUSHES = 0x0,
//   MARK_FRAGMENTS_AGAINST_MODELS = 0x1,
// };

// /* 893 */
// enum $CDCCCC1E9CE6D9488E164868BB05C641 : __int32
// {
//   FXMARK_FLAG_IS_SEETHRU_DECAL = 0x1,
// };

// /* 894 */
// enum $4372C269726758D958E15D84990A1476 : __int32
// {
//   FX_ED_FLAG_LOOPING = 0x1,
//   FX_ED_FLAG_USE_RANDOM_COLOR = 0x2,
//   FX_ED_FLAG_USE_RANDOM_ALPHA = 0x4,
//   FX_ED_FLAG_USE_RANDOM_SIZE_0 = 0x8,
//   FX_ED_FLAG_USE_RANDOM_SIZE_1 = 0x10,
//   FX_ED_FLAG_USE_RANDOM_SCALE = 0x20,
//   FX_ED_FLAG_USE_RANDOM_ROTATION_DELTA = 0x40,
//   FX_ED_FLAG_MODULATE_COLOR_BY_ALPHA = 0x80,
//   FX_ED_FLAG_USE_RANDOM_VELOCITY_0 = 0x100,
//   FX_ED_FLAG_USE_RANDOM_VELOCITY_1 = 0x200,
//   FX_ED_FLAG_BACKCOMPAT_VELOCITY = 0x400,
//   FX_ED_FLAG_ABSOLUTE_VELOCITY_0 = 0x800,
//   FX_ED_FLAG_ABSOLUTE_VELOCITY_1 = 0x1000,
//   FX_ED_FLAG_PLAY_ON_TOUCH = 0x2000,
//   FX_ED_FLAG_PLAY_ON_DEATH = 0x4000,
//   FX_ED_FLAG_PLAY_ON_RUN = 0x8000,
//   FX_ED_FLAG_BOUNDING_SPHERE = 0x10000,
//   FX_ED_FLAG_PLAY_ATTACHED = 0x40000,
//   FX_ED_FLAG_DISABLED = 0x80000000,
// };

// /* 895 */
// enum $B1F137A237D69CB5545EAAA180BF3D80 : __int32
// {
//   FX_FLAG_TYPE_EDITOR = 0x0,
//   FX_FLAG_TYPE_NATIVE = 0x1,
//   FX_FLAG_TYPE_ATLAS = 0x2,
//   FX_FLAG_TYPE_EFFECT = 0x3,
//   FX_FLAG_TYPE_COUNT = 0x4,
// };

// /* 896 */
// enum SpuDebugCmd : __int32
// {
//   SPU_DEBUG_PRINTF = 0x0,
//   SPU_DEBUG_ASSERT = 0x1,
//   SPU_DEBUG_ASSERT_CLASSIC = 0x2,
// };

// /* 897 */
// enum FX_DrawElement_Setup_Handle_Overtime_Enum : __int32
// {
//   FX_DRAWELEMENT_SETUP_DO_NOT_HANDLE_OVERTIME = 0x0,
//   FX_DRAWELEMENT_SETUP_CLAMP_OVERTIME = 0x1,
// };

// /* 898 */
// enum FxSampleChannel : __int32
// {
//   FX_CHAN_RGBA = 0x0,
//   FX_CHAN_SIZE_0 = 0x1,
//   FX_CHAN_SIZE_1 = 0x2,
//   FX_CHAN_SCALE = 0x3,
//   FX_CHAN_ROTATION = 0x4,
//   FX_CHAN_COUNT = 0x5,
//   FX_CHAN_NONE = 0x6,
// };

// /* 899 */
// typedef $FE7BE661958762EA7238145D886DC9CE $591CEB7A338D199E4E6F82AA328BE983;

// /* 900 */
// enum DWLogonStatus : __int32
// {
//   DW_COULD_NOT_CONNECT = 0x0,
//   DW_LOGON_ERROR = 0x1,
//   DW_DNS_NOT_RESOLVED = 0x2,
//   DW_DNS_RESOLVING = 0x3,
//   DW_REQUESTED_STEAM_TICKET = 0x4,
//   DW_ACQUIRED_STEAM_TICKET = 0x5,
//   DW_NEED_USERNAME = 0x6,
//   DW_GETUSERNAMES = 0x7,
//   DW_GETTINGUSERNAMES = 0x8,
//   DW_LOGON_CHECKPROFILEEXISTS = 0x9,
//   DW_LOGON_CREATEPROFILE = 0xA,
//   DW_CREATE_ACCOUNT = 0xB,
//   DW_CREATING = 0xC,
//   DW_LOGIN = 0xD,
//   DW_AUTHORIZING = 0xE,
//   DW_LOBBY_CONNECTING = 0xF,
//   DW_LOGON_GETFRIENDS = 0x10,
//   DW_LOGON_CHECKMESSAGES = 0x11,
//   DW_LOGON_GETFFOTD = 0x12,
//   DW_LOGON_COMPLETE = 0x13,
// };

// /* 901 */
// enum QueryId : __int32
// {
//   ENUM_PC_MP = 0x1,
//   ENUM_PC_ZOMBIE = 0x2,
//   ENUM_PC_QUICKMATCH = 0x3,
//   ENUM_PARAM_FAVOURITE = 0x4,
//   ENUM_PC_WAGER = 0x5,
// };

// /* 902 */
// typedef bdHTTPWrapperBase::bdOperation bdLANDiscoveryServer::bdStatus;

// /* 903 */
// typedef bdHTTPWrapperBase::bdOperation bdLANDiscoveryClient::bdStatus;

// /* 904 */
// enum bdPagingToken::bdStatus : __int32
// {
//   BD_NOT_STARTED = 0x0,
//   BD_IN_PROGRESS = 0x1,
//   BD_FINISHED = 0x2,
// };

// /* 905 */
// typedef bdLobbyErrorCode bdConnection::Status;

// /* 906 */
// enum DevGuiInputButton : __int32
// {
//   INPUT_UP = 0x0,
//   INPUT_DOWN = 0x1,
//   INPUT_LEFT = 0x2,
//   INPUT_RIGHT = 0x3,
//   INPUT_ACCEPT = 0x4,
//   INPUT_REJECT = 0x5,
//   INPUT_BIND = 0x6,
//   INPUT_GRAPH_EDIT = 0x7,
//   INPUT_GRAPH_ADD = 0x8,
//   INPUT_GRAPH_REMOVE = 0x9,
//   INPUT_GRAPH_SAVE = 0xA,
//   INPUT_LINK = 0xB,
//   INPUT_RESET = 0xC,
//   INPUT_COUNT = 0xD,
// };

// /* 907 */
// enum DevGuiInputAxis : __int32
// {
//   SCROLL_XAXIS = 0x0,
//   SCROLL_YAXIS = 0x1,
//   SCROLL_AXIS_COUNT = 0x2,
// };

// /* 908 */
// enum DevGuiInputState : __int32
// {
//   SCROLL_NONE = 0x0,
//   SCROLL_PRESSED = 0x1,
//   SCROLL_STALLED = 0x2,
//   SCROLL_HELD = 0x3,
// };

// /* 909 */
// enum DevGuiTokenResult : __int32
// {
//   DEVGUI_TOKEN_ERROR = 0x0,
//   DEVGUI_TOKEN_MORE = 0x1,
//   DEVGUI_TOKEN_LAST = 0x2,
// };

// /* 910 */
// enum $4F2A0E90FE52E2ED541E463F68A28621 : __int32
// {
//   DEV_CHILD_MENU = 0x0,
//   DEV_CHILD_DVAR = 0x1,
//   DEV_CHILD_COMMAND = 0x2,
//   DEV_CHILD_GRAPH = 0x3,
//   DEV_CHILD_TYPECOUNT = 0x4,
// };

// /* 911 */
// enum DBCloneMethod : __int32
// {
//   DB_CLONE_NORMAL = 0x0,
//   DB_CLONE_FROM_DEFAULT = 0x1,
//   DB_CLONE_SWAP = 0x2,
// };

// /* 912 */
// enum $7120019B9A1916C34435C5EBBD66517C : __int32
// {
//   GFX_NOT_STREAMING = 0x0,
//   GFX_STREAMING = 0x1,
//   GFX_MANUAL_STREAMING = 0x2,
//   GFX_TEMP_STREAMING = 0x3,
// };

// /* 913 */
// enum $D93A52C218787A3ED865FD745137F4B3 : __int32
// {
//   DM_MEMORY_TEMP = 0x0,
//   DM_MEMORY_VIRTUAL = 0x1,
//   DM_MEMORY_PHYSICAL = 0x2,
// };

// /* 914 */
// enum MaterialWorldVertexFormat : __int32
// {
//   MTL_WORLDVERT_TEX_1_NRM_1 = 0x0,
//   MTL_WORLDVERT_TEX_2_NRM_1 = 0x1,
//   MTL_WORLDVERT_TEX_2_NRM_2 = 0x2,
//   MTL_WORLDVERT_TEX_3_NRM_1 = 0x3,
//   MTL_WORLDVERT_TEX_3_NRM_2 = 0x4,
//   MTL_WORLDVERT_TEX_3_NRM_3 = 0x5,
//   MTL_WORLDVERT_TEX_4_NRM_1 = 0x6,
//   MTL_WORLDVERT_TEX_4_NRM_2 = 0x7,
//   MTL_WORLDVERT_TEX_4_NRM_3 = 0x8,
// };

// /* 915 */
// enum $22C9215173DED7361D2E6319B53F5E79 : __int32
// {
//   MAX_WEAP_NOTETRACK_TO_SOUND_MAPPINGS = 0x14,
// };

// /* 916 */
// enum $82FE27F13E2804A2BFF43495E4DE60C8 : __int32
// {
//   ENT_DRAW_DOBJ = 0x0,
//   ENT_DRAW_BRUSH = 0x1,
//   ENT_DRAW_COUNT = 0x2,
// };

// /* 917 */
// enum $554B50AEBEDD751B0320B9055BC51383 : __int32
// {
//   RENDERCMD_BEGINFRAME = 0x1,
//   RENDERCMD_ENDFRAME = 0x2,
//   RENDERCMD_LEFTEYE = 0x4,
//   RENDERCMD_RIGHTEYE = 0x8,
//   RENDERCMD_ENDEYE = 0x10,
// };

// /* 918 */
// enum medalTableColumns_t : __int32
// {
//   MEDAL_COLUMN_INDEX = 0x0,
//   MEDAL_COLUMN_STAT_NAME = 0x1,
//   MEDAL_COLUMN_NAME = 0x2,
//   MEDAL_COLUMN_DESC = 0x3,
//   MEDAL_COLUMN_XP_TEAMBASED = 0x4,
//   MEDAL_COLUMN_XP_FFA = 0x5,
//   MEDAL_COLUMN_HARDCORE_ENABLED = 0x6,
// };

// /* 919 */
// enum wagerMedalTableColumns_t : __int32
// {
//   WAGER_MEDAL_COLUMN_INDEX = 0x0,
//   WAGER_MEDAL_COLUMN_STAT_NAME = 0x1,
//   WAGER_MEDAL_COLUMN_NAME = 0x2,
//   WAGER_MEDAL_COLUMN_DESC = 0x3,
//   WAGER_MEDAL_COLUMN_CP_TEAMBASED = 0x4,
//   WAGER_MEDAL_COLUMN_CP_FFA = 0x5,
// };

// /* 920 */
// enum cacvalidatestate_t : __int32
// {
//   CAC_DORMANT = 0x0,
//   CAC_DONE = 0x1,
//   CAC_NOTVALIDATED = 0x2,
//   CAC_FINDING = 0x3,
//   CAC_FAILED = 0x4,
//   CAC_FOUND = 0x5,
//   CAC_REQUESTSENT = 0x6,
//   CAC_VALIDATED = 0x7,
//   CAC_REJECTED = 0x8,
// };

// /* 921 */
// enum quickmatchstate_t : __int32
// {
//   QM_DORMANT = 0x0,
//   QM_FINDING = 0x1,
//   QM_PINGING = 0x2,
//   QM_CHOOSE = 0x3,
//   QM_FAILED = 0x4,
// };

// /* 922 */
// enum $CEBB7499E972CFF9DF81352FF5E08427 : __int32
// {
//   CLIENT_DEMO_START_STOP = 0x0,
//   CLIENT_DEMO_AUTO_STOP = 0x1,
//   CLIENT_DEMO_CENTER_PIVOT = 0x2,
//   CLIENT_DEMO_TYPE_COUNT = 0x3,
// };

// /* 923 */
// enum LocSelInputState : __int32
// {
//   LOC_SEL_INPUT_NONE = 0x0,
//   LOC_SEL_INPUT_CONFIRM = 0x1,
//   LOC_SEL_INPUT_YAW = 0x2,
//   LOC_SEL_INPUT_REGROUP = 0x3,
//   LOC_SEL_INPUT_DEFEND = 0x4,
//   LOC_SEL_INPUT_SQUAD_CANCEL = 0x5,
//   LOC_SEL_INPUT_CANCEL = 0x6,
// };

// /* 924 */
// enum $889BDFD573EF65A8169C43FA64FBB7C2 : __int32
// {
//   KEYS_ALL = 0x0,
//   KEYS_GAMEPAD_ONLY = 0x1,
// };

// /* 925 */
// enum GamepadVirtualAxis : __int32
// {
//   GPAD_VIRTAXIS_SIDE = 0x0,
//   GPAD_VIRTAXIS_FORWARD = 0x1,
//   GPAD_VIRTAXIS_UP = 0x2,
//   GPAD_VIRTAXIS_YAW = 0x3,
//   GPAD_VIRTAXIS_PITCH = 0x4,
//   GPAD_VIRTAXIS_ATTACK = 0x5,
//   GPAD_VIRTAXIS_COUNT = 0x6,
//   GPAD_VIRTAXIS_NONE = 0xFFFFFFFF,
// };

// /* 926 */
// enum $E73F4D5E40210A2851F956A075585D03 : __int32
// {
//   KB_LEFT = 0x0,
//   KB_RIGHT = 0x1,
//   KB_FORWARD = 0x2,
//   KB_BACK = 0x3,
//   KB_LOOKUP = 0x4,
//   KB_LOOKDOWN = 0x5,
//   KB_MOVELEFT = 0x6,
//   KB_MOVERIGHT = 0x7,
//   KB_STRAFE = 0x8,
//   KB_SPEED = 0x9,
//   KB_UP = 0xA,
//   KB_DOWN = 0xB,
//   KB_ANYUP = 0xC,
//   KB_MLOOK = 0xD,
//   KB_SPECTATE = 0xE,
//   KB_SPECNEXT = 0xF,
//   KB_SPECPREV = 0x10,
//   KB_ATTACK = 0x11,
//   KB_BREATH = 0x12,
//   KB_FRAG = 0x13,
//   KB_OFFHANDSECONDARY = 0x14,
//   KB_MELEE = 0x15,
//   KB_ACTIVATE = 0x16,
//   KB_RELOAD = 0x17,
//   KB_USE_RELOAD = 0x18,
//   KB_LEANLEFT = 0x19,
//   KB_LEANRIGHT = 0x1A,
//   KB_PRONE = 0x1B,
//   KB_CROUCH = 0x1C,
//   KB_THROW = 0x1D,
//   KB_SPRINT = 0x1E,
//   KB_NIGHTVISION = 0x1F,
//   KB_GAS = 0x20,
//   KB_REVERSE = 0x21,
//   KB_HANDBRAKE = 0x22,
//   KB_SWITCHSEAT = 0x23,
//   KB_VEHICLEATTACK = 0x24,
//   KB_VEHICLEATTACKSECOND = 0x25,
//   KB_VEHICLEMOVEUP = 0x26,
//   KB_VEHICLEMOVEDOWN = 0x27,
//   KB_VEHICLESPECIALABILITY = 0x28,
//   KB_VEHICLEFIREPICKUP = 0x29,
//   KB_VEHICLESWAPPICKUP = 0x2A,
//   KB_VEHICLEDROPDEPLOYABLE = 0x2B,
//   KB_VEHICLEBOOST = 0x2C,
//   KB_JAM = 0x2D,
//   KB_TALK = 0x2E,
//   NUM_BUTTONS = 0x2F,
// };

// /* 927 */
// enum CL_RandomMove::__l6::<unnamed_tag> : __int32
// {
//   FREQUENTLY = 0xC8,
// };

// /* 928 */
// enum GamepadMapping : __int32
// {
//   GPAD_MAP_LINEAR = 0x0,
//   GPAD_MAP_SQUARED = 0x1,
//   GPAD_MAP_COUNT = 0x2,
//   GPAD_MAP_NONE = 0xFFFFFFFF,
// };

// /* 929 */
// enum CompositeType : __int32
// {
//   COMPOSITE_NONE = 0x0,
//   COMPOSITE_EMBLEM = 0x1,
// };

// /* 930 */
// enum CompositeState : __int32
// {
//   COMPOSITE_STATE_IDLE = 0x0,
//   COMPOSITE_STATE_PRE = 0x1,
//   COMPOSITE_STATE_RENDERING = 0x2,
//   COMPOSITE_STATE_POST = 0x3,
//   COMPOSITE_STATE_POST_ALLOCED = 0x4,
//   COMPOSITE_STATE_PC_WAITING_FOR_GPU = 0x5,
//   COMPOSITE_STATE_COMPLETE = 0x6,
// };

// /* 931 */
// enum $F4389AC1071EBBF795C6E3F8F5E9727D : __int32
// {
//   Z_MAX_OPERANDS = 0x8,
// };

// /* 932 */
// enum LaserOwnerEnum : __int32
// {
//   LASER_OWNER_NON_PLAYER = 0x0,
//   LASER_OWNER_PLAYER = 0x1,
// };

// /* 933 */
// enum $D50D3811A41F7295310ABCC0A1751C86 : __int32
// {
//   WEAP_ANIM_VIEWMODEL_START = 0x0,
//   WEAP_ANIM_VIEWMODEL_END = 0x40,
// };

// /* 934 */
// enum $72DCB5F618F49C6DC204AC0B08F630FB : __int32
// {
//   WEAP_ANIM_CAMERA_START = 0x35,
//   WEAP_ANIM_CAMERA_END = 0x39,
// };

// /* 935 */
// enum leType_t : __int32
// {
//   LE_MOVING_TRACER_RED = 0x0,
//   LE_MOVING_TRACER_GREEN = 0x1,
//   LE_MOVING_BULLET = 0x2,
// };

// /* 936 */
// enum ActionSlotIndex : __int32
// {
//   ACTIONSLOTINDEX_0 = 0x0,
//   ACTIONSLOTINDEX_1 = 0x1,
//   ACTIONSLOTINDEX_2 = 0x2,
//   ACTIONSLOTINDEX_3 = 0x3,
// };

// /* 937 */
// enum tagColorIndexs : __int32
// {
//   TAG_WEAPON_LEFT_COLOR = 0x0,
//   TAG_WEAPON_RIGHT_COLOR = 0x1,
//   TAG_INHAND_COLOR = 0x2,
//   TAG_STOWED_BACK_COLOR = 0x3,
//   TAG_WEAPON_CHEST_COLOR = 0x4,
//   TAG_EYE_COLOR = 0x5,
// };

// /* 938 */
// enum $37B57E272067D854458255BC93C2A8A9 : __int32
// {
//   DTYPE_BOOL = 0x0,
//   DTYPE_FLOAT = 0x1,
//   DTYPE_VEC3 = 0x2,
//   DTYPE_VEC4 = 0x3,
//   DTYPE_STEPFLOAT = 0x4,
//   DTYPE_INTEGER = 0x5,
//   DTYPE_MATERIAL = 0x6,
// };

// /* 939 */
// enum ClientViewViewportSize : __int32
// {
//   VIEWPORT_LARGE = 0x0,
//   VIEWPORT_SMALL = 0x1,
// };

// /* 940 */
// enum SurfaceGroupEnum : __int32
// {
//   SURF_GROUP_SOFT = 0x0,
//   SURF_GROUP_HARD = 0x1,
//   NUM_SURF_GROUPS = 0x2,
// };

// /* 941 */
// enum $4B4088CFD7D3A6DA3D623EBFCC5A92EB : __int32
// {
//   CULL_OUT = 0x0,
//   CULL_CALC_POSE = 0x1,
//   CULL_CALC_SKIN = 0x2,
// };

// /* 942 */
// enum $758BF9D2FB93AB928CF05E55F9B7860F : __int32
// {
//   MAX_TREADMARK_VEHICLES = 0x40,
// };

// /* 943 */
// enum $01657303E81FC471DDC2200120826075 : __int32
// {
//   FEF_NONE = 0x0,
//   FEF_MOVING = 0x1,
//   FEF_TURNING = 0x2,
//   FEF_REMOVED = 0x4,
// };

// /* 944 */
// enum eFoot : __int32
// {
//   FOOTSTEP_FRONTRIGHT = 0x0,
//   FOOTSTEP_FRONTLEFT = 0x1,
//   FOOTSTEP_REARRIGHT = 0x2,
//   FOOTSTEP_REARLEFT = 0x3,
//   FOOTSTEP_COUNT = 0x4,
// };

// /* 945 */
// enum listColumnTypes_t : __int32
// {
//   LCT_RANK_ICON = 0x0,
//   LCT_STATUS_ICON = 0x1,
//   LCT_NAME = 0x2,
//   LCT_TALKING_ICON = 0x3,
//   LCT_SCORE = 0x4,
//   LCT_SB_COLUMN = 0x5,
//   LCT_PING = 0x6,
//   LCT_NUM = 0x7,
// };

// /* 946 */
// enum CG_InterpolatePlayerStateViewAngles::__l10::<unnamed_tag> : __int32
// {
//   VEHICLE_TYPE_T34 = 0x0,
//   VEHICLE_TYPE_PANZER = 0x1,
//   VEHICLE_TYPE_COUNT = 0x2,
// };

// /* 947 */
// enum e_tank_hud_component : __int32
// {
//   _tank_component_core = 0x0,
//   _tank_component_left_tread = 0x1,
//   _tank_component_right_tread = 0x2,
//   _tank_component_turret = 0x3,
//   _tank_component_driver_seat = 0x4,
//   _tank_component_gunner_seat = 0x5,
//   k_tank_hud_component_count = 0x6,
// };

// /* 948 */
// enum cgDrawTalkEnum : __int32
// {
//   CG_TALKER_NONE = 0x0,
//   CG_TALKER_ALL = 0x1,
//   CG_TALKER_FRIENDLY = 0x2,
//   CG_TALKER_ENEMY = 0x3,
//   CG_TALKER_COUNT = 0x4,
// };

// /* 949 */
// enum eGuidedMissileInfo : __int32
// {
//   GUIDED_MISSILE_VIEWPOS = 0x0,
//   GUIDED_MISSILE_DIST_TO_TARG = 0x1,
//   GUIDED_MISSILE_DIST_FROM_OWNER = 0x2,
// };

// /* 950 */
// enum CompassType : __int32
// {
//   COMPASS_TYPE_PARTIAL = 0x0,
//   COMPASS_TYPE_FULL = 0x1,
// };

// /* 951 */
// enum eBattleChatterPlayStates : __int32
// {
//   BCMP_NONE = 0x0,
//   BCMP_SOUND_ONE = 0x1,
//   BCMP_SOUND_TWO = 0x2,
// };

// /* 952 */
// enum BloodImpactFxType : __int32
// {
//   BLOOD_IMPACT_NONE = 0x0,
//   BLOOD_IMPACT_NORMAL = 0x1,
//   BLOOD_IMPACT_HERO = 0x2,
//   NUM_BLOOD_IMPACT_TYPES = 0x3,
// };

// /* 953 */
// enum mg42anims_t : __int32
// {
//   MG42ANIM_ROOT = 0x0,
//   MG42ANIM_IDLE = 0x1,
//   MG42ANIM_FIRE = 0x2,
//   MG42ANIM_NUM = 0x3,
// };

// /* 954 */
// enum $05853A32CE1D915AEC240F2F4107CAED : __int32
// {
//   OVERHEAD_DISPLAY_GAMERTAGONLY = 0x0,
//   OVERHEAD_DISPLAY_RANK_AND_CLAN = 0x1,
//   OVERHEAD_DISPLAY_GAMERTAG_CLAN_AND_RANK = 0x2,
//   OVERHEAD_DISPLAY_MARQUEE = 0x3,
//   OVERHEAD_REMOVE_MARQUEE = 0x4,
//   OVERHEAD_RANK_ONLY = 0x5,
//   NUM_OVERHEAD_DISPLAY_MODES = 0x6,
// };

// /* 955 */
// enum GridPointAlignType : __int32
// {
//   GRID_TOP_LEFT_ALIGN = 0x0,
//   GRID_TOP_CENTER_ALIGN = 0x1,
//   GRID_TOP_RIGHT_ALIGN = 0x2,
//   GRID_LEFT_ALIGN = 0x3,
//   GRID_CENTER_ALIGN = 0x4,
//   GRID_RIGHT_ALIGN = 0x5,
//   GRID_BOTTOM_LEFT_ALIGN = 0x6,
//   GRID_BOTTOM_CENTER_ALIGN = 0x7,
//   GRID_BOTTOM_RIGHT_ALIGN = 0x8,
// };

// /* 956 */
// enum compassPartialType_t : __int32
// {
//   COMPASS_PARTIAL_TYPE_2D = 0x0,
//   COMPASS_PARTIAL_TYPE_3D = 0x1,
// };

// /* 957 */
// enum $8351B9CBD1B94A75DE1D4D66F883528F : __int32
// {
//   CENT_ACTOR_PRONE_NONE = 0x0,
//   CENT_ACTOR_PRONE_NORMAL = 0x1,
//   CENT_ACTOR_PRONE_CORPSE = 0x2,
// };

// /* 958 */
// enum parseSkip_t : __int32
// {
//   SKIP_NO = 0x0,
//   SKIP_YES = 0x1,
//   SKIP_ALL_ELIFS = 0x2,
// };

// /* 959 */
// enum bobType_t : __int32
// {
//   HBOB = 0x0,
//   VBOB = 0x1,
// };

// /* 960 */
// enum weapFieldType_t : __int32
// {
//   WFT_WEAPONTYPE = 0xF,
//   WFT_WEAPONCLASS = 0x10,
//   WFT_OVERLAYRETICLE = 0x11,
//   WFT_PENETRATE_TYPE = 0x12,
//   WFT_IMPACT_TYPE = 0x13,
//   WFT_STANCE = 0x14,
//   WFT_PROJ_EXPLOSION = 0x15,
//   WFT_OFFHAND_CLASS = 0x16,
//   WFT_OFFHAND_SLOT = 0x17,
//   WFT_ANIMTYPE = 0x18,
//   WFT_ACTIVE_RETICLE_TYPE = 0x19,
//   WFT_GUIDED_MISSILE_TYPE = 0x1A,
//   WFT_BOUNCE_SOUND = 0x1B,
//   WFT_STICKINESS = 0x1C,
//   WFT_ROTATETYPE = 0x1D,
//   WFT_OVERLAYINTERFACE = 0x1E,
//   WFT_INVENTORYTYPE = 0x1F,
//   WFT_FIRETYPE = 0x20,
//   WFT_CLIPTYPE = 0x21,
//   WFT_AMMOCOUNTER_CLIPTYPE = 0x22,
//   WFT_ICONRATIO_HUD = 0x23,
//   WFT_ICONRATIO_AMMOCOUNTER = 0x24,
//   WFT_ICONRATIO_KILL = 0x25,
//   WFT_ICONRATIO_DPAD = 0x26,
//   WFT_ICONRATIO_INDICATOR = 0x27,
//   WFT_HIDETAGS = 0x28,
//   WFT_EXPLOSION_TAG = 0x29,
//   WFT_NOTETRACKSOUNDMAP = 0x2A,
//   WFT_NUM_FIELD_TYPES = 0x2B,
// };

// /* 961 */
// enum PlayerAnimType : __int32
// {
//   PLAYERANIMTYPE_REVIVEE = 0x0,
//   PLAYERANIMTYPE_SNIPER = 0x1,
//   PLAYERANIMTYPE_SNIPER_REARCLIP = 0x2,
//   PLAYERANIMTYPE_BRIEFCASE = 0x3,
// };

// /* 962 */
// enum eAttachmentTableColumns : __int32
// {
//   ATTACHMENTTABLE_NUMBER = 0x0,
//   ATTACHMENTTABLE_ATTACH_POINT = 0x1,
//   ATTACHMENTTABLE_GROUP = 0x2,
//   ATTACHMENTTABLE_NAME = 0x3,
//   ATTACHMENTTABLE_REFERENCE = 0x4,
//   ATTACHMENTTABLE_COUNT = 0x5,
//   ATTACHMENTTABLE_IMAGE = 0x6,
//   ATTACHMENTTABLE_DESCRIPTION = 0x7,
//   ATTACHMENTTABLE_DATA_STRING = 0x8,
//   ATTACHMENTTABLE_DATA_INT = 0x9,
//   ATTACHMENTTABLE_DATA_INT2 = 0xA,
//   ATTACHMENTTABLE_COMPATIBLE_ATTACHMENTS = 0xB,
//   ATTACHMENTTABLE_COST = 0xC,
//   ATTACHMENTTABLE_UNLOCK_LVL = 0xD,
//   ATTACHMENTTABLE_UNLOCK_PLEVEL = 0xE,
//   MAX_ATTACHMENTTABLE_COUNT = 0xF,
// };

 /* 963 */
enum DefaultClass_t
{
  CLASS_FIRST = 0x0,
  CLASS_SMG = 0x0,
  CLASS_CQB = 0x1,
  CLASS_ASSAULT = 0x2,
  CLASS_LMG = 0x3,
  CLASS_SNIPER = 0x4,
  CLASS_CUSTOM_SMG = 0x5,
  CLASS_CUSTOM_CQB = 0x6,
  CLASS_CUSTOM_ASSAULT = 0x7,
  CLASS_CUSTOM_LMG = 0x8,
  CLASS_CUSTOM_SNIPER = 0x9,
  CLASS_WAGER1 = 0xA,
  CLASS_WAGER2 = 0xB,
  CLASS_WAGER3 = 0xC,
  CLASS_WAGER4 = 0xD,
  CLASS_WAGER5 = 0xE,
  CLASS_WAGER6 = 0xF,
  CLASS_WAGER7 = 0x10,
  CLASS_WAGER8 = 0x11,
  CLASS_WAGER9 = 0x12,
  CLASS_WAGER10 = 0x13,
  CLASS_COUNT = 0x14,
  CLASS_NONE = 0xFFFFFFFF,
};

// /* 964 */
// enum animBodyPart_t : __int32
// {
//   ANIM_BP_UNUSED = 0x0,
//   ANIM_BP_LEGS = 0x1,
//   ANIM_BP_TORSO = 0x2,
//   ANIM_BP_BOTH = 0x3,
//   NUM_ANIM_BODYPARTS = 0x4,
// };

// /* 965 */
// enum PmStanceFrontBack : __int32
// {
//   PM_STANCE_STAND = 0x0,
//   PM_STANCE_PRONE = 0x1,
//   PM_STANCE_CROUCH = 0x2,
//   PM_STANCE_BACKWARD_FIRST = 0x3,
//   PM_STANCE_BACKWARD_RUN = 0x3,
//   PM_STANCE_BACKWARD_PRONE = 0x4,
//   PM_STANCE_BACKWARD_CROUCH = 0x5,
//   NUM_PM_STANCE_FRONTBACK = 0x6,
// };

// /* 966 */
// enum PmMoveSpeeds : __int32
// {
//   PM_MOVE_SPEED_RUN = 0x0,
//   PM_MOVE_SPEED_WALK = 0x1,
//   PM_MOVE_SPEED_SHUFFLE = 0x2,
//   NUM_PM_MOVE_SPEED = 0x3,
// };

// /* 967 */
// enum invalid_cmd_hint_t : __int32
// {
//   INVALID_CMD_NO_HINT = 0x0,
//   INVALID_CMD_STAND_HINT = 0x1,
//   INVALID_CMD_CROUCH_HINT = 0x2,
// };

// /* 968 */
// enum MantleAnims : __int32
// {
//   MANTLE_ROOT = 0x0,
//   MANTLE_UP_57 = 0x1,
//   MANTLE_UP_51 = 0x2,
//   MANTLE_UP_45 = 0x3,
//   MANTLE_UP_39 = 0x4,
//   MANTLE_UP_33 = 0x5,
//   MANTLE_UP_27 = 0x6,
//   MANTLE_UP_21 = 0x7,
//   MANTLE_OVER_HIGH = 0x8,
//   MANTLE_OVER_MID = 0x9,
//   MANTLE_OVER_LOW = 0xA,
//   MANTLE_ANIM_COUNT = 0xB,
//   MANTLE_UP_FIRST = 0x1,
//   MANTLE_UP_LAST = 0x7,
//   MANTLE_UP_COUNT = 0x7,
//   MANTLE_OVER_FIRST = 0x8,
//   MANTLE_OVER_LAST = 0xA,
//   MANTLE_OVER_COUNT = 0x3,
// };

// /* 969 */
// enum eDogMainAnims : __int32
// {
//   DOG_ANIMINDEX_MAIN_ROOT = 0x0,
//   DOG_ANIMINDEX_IDLE = 0x1,
//   DOG_ANIMINDEX_MOVE_WALK = 0x2,
//   DOG_ANIMINDEX_RUN_STOP = 0x3,
//   DOG_ANIMINDEX_RUN_PAIN = 0x4,
//   DOG_ANIMINDEX_RUN_ATTACK = 0x5,
//   DOG_ANIMINDEX_RUN_TURN_LEFT = 0x6,
//   DOG_ANIMINDEX_RUN_TURN_RIGHT = 0x7,
//   DOG_ANIMINDEX_TURN_LEFT = 0x8,
//   DOG_ANIMINDEX_TURN_RIGHT = 0x9,
//   DOG_ANIMINDEX_RUN_TURN_AROUND_LEFT = 0xA,
//   DOG_ANIMINDEX_RUN_TURN_AROUND_RIGHT = 0xB,
//   DOG_ANIMINDEX_TURN_AROUND_LEFT = 0xC,
//   DOG_ANIMINDEX_TURN_AROUND_RIGHT = 0xD,
//   DOG_ANIMINDEX_PAIN_RUN_FRONT = 0xE,
//   DOG_ANIMINDEX_PAIN_RUN_BACK = 0xF,
//   DOG_ANIMINDEX_PAIN_RUN_LEFT = 0x10,
//   DOG_ANIMINDEX_PAIN_RUN_RIGHT = 0x11,
//   DOG_ANIMINDEX_PAIN_FRONT = 0x12,
//   DOG_ANIMINDEX_PAIN_BACK = 0x13,
//   DOG_ANIMINDEX_PAIN_LEFT = 0x14,
//   DOG_ANIMINDEX_PAIN_RIGHT = 0x15,
//   DOG_ANIMINDEX_DEATH_FRONT = 0x16,
//   DOG_ANIMINDEX_DEATH_BACK = 0x17,
//   DOG_ANIMINDEX_DEATH_LEFT = 0x18,
//   DOG_ANIMINDEX_DEATH_RIGHT = 0x19,
//   DOG_ANIMINDEX_FLASHED_RUN = 0x1A,
//   DOG_ANIMINDEX_ATTACK_MISS = 0x1B,
//   DOG_ANIMINDEX_ATTACK_MISS_LEFT = 0x1C,
//   DOG_ANIMINDEX_ATTACK_MISS_RIGHT = 0x1D,
//   DOG_ANIMINDEX_ATTACK_CLOSE_RANGE = 0x1E,
//   DOG_ANIMINDEX_TRAVERSE_JUMP_UP_40 = 0x1F,
//   DOG_ANIMINDEX_TRAVERSE_JUMP_UP_80 = 0x20,
//   DOG_ANIMINDEX_TRAVERSE_JUMP_DOWN_40 = 0x21,
//   DOG_ANIMINDEX_TRAVERSE_JUMP_DOWN_80 = 0x22,
//   DOG_ANIMINDEX_TRAVERSE_WALLHOP = 0x23,
//   DOG_ANIMINDEX_TRAVERSE_WINDOW = 0x24,
//   DOG_ANIMINDEX_TRAVERSE_THROUGH_HOLE_42 = 0x25,
//   DOG_ANIMINDEX_MAIN_COUNT = 0x26,
// };

// /* 970 */
// enum eDogRunStartKnobAnims : __int32
// {
//   DOG_ANIMINDEX_RUN_START_KNOB_ROOT = 0x0,
//   DOG_ANIMINDEX_RUN_START = 0x1,
//   DOG_ANIMINDEX_RUN_START_COUNT = 0x2,
// };

// /* 971 */
// enum eDogRunKnobAnims : __int32
// {
//   DOG_ANIMINDEX_RUN_KNOB_ROOT = 0x0,
//   DOG_ANIMINDEX_RUN = 0x1,
//   DOG_ANIMINDEX_RUN_LEAN_L = 0x2,
//   DOG_ANIMINDEX_RUN_LEAN_R = 0x3,
//   DOG_ANIMINDEX_RUN_COUNT = 0x4,
// };

// /* 972 */
// enum eDogAttackIdleKnobAnims : __int32
// {
//   DOG_ANIMINDEX_ATTACKIDLE_KNOB_ROOT = 0x0,
//   DOG_ANIMINDEX_ATTACKIDLE = 0x1,
//   DOG_ANIMINDEX_ATTACKIDLE_BARK = 0x2,
//   DOG_ANIMINDEX_ATTACKIDLE_GROWL = 0x3,
//   DOG_ANIMINDEX_ATTACKIDLE_COUNT = 0x4,
// };

// /* 973 */
// enum eDogLookDown : __int32
// {
//   DOG_ANIMINDEX_LOOK_DOWN_ROOT = 0x0,
//   DOG_ANIMINDEX_LOOK_DOWN = 0x1,
//   DOG_ANIMINDEX_LOOK_DOWN_ATTACK = 0x2,
//   DOG_ANIMINDEX_LOOK_DOWN_COUNT = 0x3,
// };

// /* 974 */
// enum eDogLookUp : __int32
// {
//   DOG_ANIMINDEX_LOOK_UP_ROOT = 0x0,
//   DOG_ANIMINDEX_LOOK_UP = 0x1,
//   DOG_ANIMINDEX_LOOK_UP_ATTACK = 0x2,
//   DOG_ANIMINDEX_LOOK_UP_COUNT = 0x3,
// };

// /* 975 */
// enum eDogLookRight : __int32
// {
//   DOG_ANIMINDEX_LOOK_RIGHT_ROOT = 0x0,
//   DOG_ANIMINDEX_LOOK_RIGHT = 0x1,
//   DOG_ANIMINDEX_LOOK_RIGHT_ATTACK = 0x2,
//   DOG_ANIMINDEX_LOOK_RIGHT_COUNT = 0x3,
// };

// /* 976 */
// enum eDogLookLeft : __int32
// {
//   DOG_ANIMINDEX_LOOK_LEFT_ROOT = 0x0,
//   DOG_ANIMINDEX_LOOK_LEFT = 0x1,
//   DOG_ANIMINDEX_LOOK_LEFT_ATTACK = 0x2,
//   DOG_ANIMINDEX_LOOK_LEFT_COUNT = 0x3,
// };

// /* 977 */
// enum eDogAnimStateStart : __int32
// {
//   DOG_ANIMSTATE_INDEX_ROOT = 0x0,
//   DOG_ANIMSTATE_LAST_ROOT_ANIM = 0x26,
//   DOG_ANIMSTATE_INDEX_MOVE_START = 0x26,
//   DOG_ANIMSTATE_INDEX_MOVE = 0x27,
//   DOG_ANIMSTATE_INDEX_ATTACKIDLE_KNOB = 0x28,
//   DOG_ANIMSTATE_INDEX_LOOK_DOWN = 0x29,
//   DOG_ANIMSTATE_INDEX_LOOK_UP = 0x2A,
//   DOG_ANIMSTATE_INDEX_LOOK_RIGHT = 0x2B,
//   DOG_ANIMSTATE_INDEX_LOOK_LEFT = 0x2C,
//   DOG_ANIMSTATE_LAST_ROOT_ANIM_GROUP = 0x2D,
//   DOG_ANIMSTATE_CHILDINDEX_MOVE_START = 0x2D,
//   DOG_ANIMSTATE_CHILDINDEX_MOVE = 0x2E,
//   DOG_ANIMSTATE_CHILDINDEX_ATTACKIDLE = 0x31,
//   DOG_ANIMSTATE_CHILDINDEX_LOOK_DOWN = 0x34,
//   DOG_ANIMSTATE_CHILDINDEX_LOOK_UP = 0x36,
//   DOG_ANIMSTATE_CHILDINDEX_LOOK_RIGHT = 0x38,
//   DOG_ANIMSTATE_CHILDINDEX_LOOK_LEFT = 0x3A,
//   DOG_ANIMSTATE_INDEX_COUNT = 0x3C,
// };

// /* 978 */
// enum ActorAnimCategories : __int32
// {
//   ACTOR_ANIMATION_CATEGORY_INIT = 0x0,
//   ACTOR_ANIMATION_CATEGORY_STOP = 0x1,
//   ACTOR_ANIMATION_CATEGORY_MOVE = 0x2,
//   ACTOR_ANIMATION_CATEGORY_COMBAT = 0x3,
//   ACTOR_ANIMATION_CATEGORY_PAIN = 0x4,
//   ACTOR_ANIMATION_CATEGORY_DEATH = 0x5,
//   ACTOR_ANIMATION_CATEGORY_FLASHED = 0x6,
//   ACTOR_ANIMATION_CATEGORY_TRAVERSE = 0x7,
// };

// /* 979 */
// enum scriptAnimMoveStatusStates_t : __int32
// {
//   ANIM_MOVESTATUS_STATIONARY = 0x0,
//   ANIM_MOVESTATUS_WALK = 0x1,
//   ANIM_MOVESTATUS_RUN = 0x2,
//   NUM_ANIM_MOVESTATUSES = 0x3,
// };

// /* 980 */
// enum scriptAnimDirections_t : __int32
// {
//   ANIM_DIRECTION_NONE = 0x0,
//   ANIM_DIRECTION_FORWARD = 0x1,
//   ANIM_DIRECTION_BACKWARD = 0x2,
//   ANIM_DIRECTION_LEFT = 0x3,
//   ANIM_DIRECTION_RIGHT = 0x4,
//   NUM_ANIM_DIRECTIONS = 0x5,
// };

// /* 981 */
// enum scriptAnimDmgDirections_t : __int32
// {
//   ANIM_DMGDIRECTION_NONE = 0x0,
//   ANIM_DMGDIRECTION_FRONT = 0x1,
//   ANIM_DMGDIRECTION_BACK = 0x2,
//   ANIM_DMGDIRECTION_LEFT = 0x3,
//   ANIM_DMGDIRECTION_RIGHT = 0x4,
//   NUM_ANIM_DMGDIRECTIONS = 0x5,
// };

// /* 982 */
// enum scriptAnimDmgTypes_t : __int32
// {
//   ANIM_DMGTYPE_NORMAL = 0x0,
//   ANIM_DMGTYPE_EXPLOSIVE = 0x1,
//   ANIM_DMGTYPE_MELEE = 0x2,
//   ANIM_DMGTYPE_HEADSHOT = 0x3,
//   ANIM_DMGTYPE_BURNED = 0x4,
//   ANIM_DMGTYPE_SUICIDE = 0x5,
//   ANIM_DMGTYPE_GAS = 0x6,
//   NUM_ANIM_DMGTYPES = 0x7,
// };

// /* 983 */
// enum scriptAnimStances_t : __int32
// {
//   ANIM_STANCE_STAND = 0x0,
//   ANIM_STANCE_CROUCH = 0x1,
//   ANIM_STANCE_PRONE = 0x2,
//   NUM_ANIM_STANCES = 0x3,
// };

// /* 984 */
// enum scriptAnimWeaponPositions_t : __int32
// {
//   ANIM_WP_HIP = 0x0,
//   ANIM_WP_ADS = 0x1,
//   NUM_ANIM_WEAPONPOSITIONS = 0x2,
// };

// /* 985 */
// enum scriptAnimSlopeStates_t : __int32
// {
//   ANIM_SLOPE_NONE = 0x0,
//   ANIM_SLOPE_UP = 0x1,
//   ANIM_SLOPE_DOWN = 0x2,
//   NUM_ANIM_SLOPESTATES = 0x3,
// };

// /* 986 */
// enum scriptAnimPerkStates_t : __int32
// {
//   ANIM_PERK_UNUSED = 0x0,
//   ANIM_PERK_LASTSTAND = 0x1,
//   ANIM_PERK_GRENADEDEATH = 0x2,
//   NUM_ANIM_PERKSTATES = 0x3,
// };

// /* 987 */
// enum scriptAnimAttachmentStates_t : __int32
// {
//   ANIM_ATTACHMENT_UNUSED = 0x0,
//   ANIM_ATTACHMENT_BAYONET = 0x1,
//   NUM_ANIM_ATTACHMENTSTATES = 0x2,
// };

// /* 988 */
// enum animScriptMounted_t : __int32
// {
//   MOUNTED_UNUSED = 0x0,
//   MOUNTED_MG42 = 0x1,
//   NUM_ANIM_COND_MOUNTED = 0x2,
// };

// /* 989 */
// enum animScriptParseMode_t : __int32
// {
//   PARSEMODE_DEFINES = 0x0,
//   PARSEMODE_ANIMATION = 0x1,
//   PARSEMODE_CANNED_ANIMATIONS = 0x2,
//   PARSEMODE_STATECHANGES = 0x3,
//   PARSEMODE_EVENTS = 0x4,
//   PARSEMODE_FORCELOAD = 0x5,
//   NUM_PARSEMODES = 0x6,
// };

// /* 990 */
// enum scriptAnimStrafeStates_t : __int32
// {
//   ANIM_STRAFE_NOT = 0x0,
//   ANIM_STRAFE_LEFT = 0x1,
//   ANIM_STRAFE_RIGHT = 0x2,
//   NUM_ANIM_STRAFESTATES = 0x3,
// };

// /* 991 */
// enum scriptAnimVehicleEntryPos_t : __int32
// {
//   ANIM_VEHICLE_ENTRY_SIDE_LEFT = 0x0,
//   ANIM_VEHICLE_ENTRY_SIDE_RIGHT = 0x1,
//   ANIM_VEHICLE_ENTRY_REAR = 0x2,
//   NUM_ANIM_VEHICLE_ENTRY_POSITIONS = 0x3,
// };

// /* 992 */
// enum animScriptConditionTypes_t : __int32
// {
//   ANIM_CONDTYPE_BITFLAGS = 0x0,
//   ANIM_CONDTYPE_VALUE = 0x1,
//   ANIM_CONDTYPE_ENABLED = 0x2,
//   ANIM_CONDTYPE_STRINGHASH = 0x3,
//   NUM_ANIM_CONDTYPES = 0x4,
// };

// /* 993 */
// enum eAutoMeleeState : __int32
// {
//   AMS_NOT_ACTIVE = 0x0,
//   AMS_TARGET_AQUIRED = 0x1,
//   AMS_TARGETING = 0x2,
// };

// /* 994 */
// enum tagGLOBALOPT_EH_VALUES : __int32
// {
//   COMGLB_EXCEPTION_HANDLE = 0x0,
//   COMGLB_EXCEPTION_DONOT_HANDLE_FATAL = 0x1,
//   COMGLB_EXCEPTION_DONOT_HANDLE = 0x1,
//   COMGLB_EXCEPTION_DONOT_HANDLE_ANY = 0x2,
// };

// /* 995 */
// enum D2D1_ALPHA_MODE : __int32
// {
//   D2D1_ALPHA_MODE_UNKNOWN = 0x0,
//   D2D1_ALPHA_MODE_PREMULTIPLIED = 0x1,
//   D2D1_ALPHA_MODE_STRAIGHT = 0x2,
//   D2D1_ALPHA_MODE_IGNORE = 0x3,
//   D2D1_ALPHA_MODE_FORCE_DWORD = 0xFFFFFFFF,
// };

// /* 996 */
// enum D3D11_MESSAGE_CATEGORY : __int32
// {
//   D3D11_MESSAGE_CATEGORY_APPLICATION_DEFINED = 0x0,
//   D3D11_MESSAGE_CATEGORY_MISCELLANEOUS = 0x1,
//   D3D11_MESSAGE_CATEGORY_INITIALIZATION = 0x2,
//   D3D11_MESSAGE_CATEGORY_CLEANUP = 0x3,
//   D3D11_MESSAGE_CATEGORY_COMPILATION = 0x4,
//   D3D11_MESSAGE_CATEGORY_STATE_CREATION = 0x5,
//   D3D11_MESSAGE_CATEGORY_STATE_SETTING = 0x6,
//   D3D11_MESSAGE_CATEGORY_STATE_GETTING = 0x7,
//   D3D11_MESSAGE_CATEGORY_RESOURCE_MANIPULATION = 0x8,
//   D3D11_MESSAGE_CATEGORY_EXECUTION = 0x9,
// };

// /* 997 */
// enum D2D1_GAMMA : __int32
// {
//   D2D1_GAMMA_2_2 = 0x0,
//   D2D1_GAMMA_1_0 = 0x1,
//   D2D1_GAMMA_FORCE_DWORD = 0xFFFFFFFF,
// };

// /* 998 */
// enum D3D_SRV_DIMENSION : __int32
// {
//   D3D_SRV_DIMENSION_UNKNOWN = 0x0,
//   D3D_SRV_DIMENSION_BUFFER = 0x1,
//   D3D_SRV_DIMENSION_TEXTURE1D = 0x2,
//   D3D_SRV_DIMENSION_TEXTURE1DARRAY = 0x3,
//   D3D_SRV_DIMENSION_TEXTURE2D = 0x4,
//   D3D_SRV_DIMENSION_TEXTURE2DARRAY = 0x5,
//   D3D_SRV_DIMENSION_TEXTURE2DMS = 0x6,
//   D3D_SRV_DIMENSION_TEXTURE2DMSARRAY = 0x7,
//   D3D_SRV_DIMENSION_TEXTURE3D = 0x8,
//   D3D_SRV_DIMENSION_TEXTURECUBE = 0x9,
//   D3D_SRV_DIMENSION_TEXTURECUBEARRAY = 0xA,
//   D3D_SRV_DIMENSION_BUFFEREX = 0xB,
//   D3D10_SRV_DIMENSION_UNKNOWN = 0x0,
//   D3D10_SRV_DIMENSION_BUFFER = 0x1,
//   D3D10_SRV_DIMENSION_TEXTURE1D = 0x2,
//   D3D10_SRV_DIMENSION_TEXTURE1DARRAY = 0x3,
//   D3D10_SRV_DIMENSION_TEXTURE2D = 0x4,
//   D3D10_SRV_DIMENSION_TEXTURE2DARRAY = 0x5,
//   D3D10_SRV_DIMENSION_TEXTURE2DMS = 0x6,
//   D3D10_SRV_DIMENSION_TEXTURE2DMSARRAY = 0x7,
//   D3D10_SRV_DIMENSION_TEXTURE3D = 0x8,
//   D3D10_SRV_DIMENSION_TEXTURECUBE = 0x9,
//   D3D10_1_SRV_DIMENSION_UNKNOWN = 0x0,
//   D3D10_1_SRV_DIMENSION_BUFFER = 0x1,
//   D3D10_1_SRV_DIMENSION_TEXTURE1D = 0x2,
//   D3D10_1_SRV_DIMENSION_TEXTURE1DARRAY = 0x3,
//   D3D10_1_SRV_DIMENSION_TEXTURE2D = 0x4,
//   D3D10_1_SRV_DIMENSION_TEXTURE2DARRAY = 0x5,
//   D3D10_1_SRV_DIMENSION_TEXTURE2DMS = 0x6,
//   D3D10_1_SRV_DIMENSION_TEXTURE2DMSARRAY = 0x7,
//   D3D10_1_SRV_DIMENSION_TEXTURE3D = 0x8,
//   D3D10_1_SRV_DIMENSION_TEXTURECUBE = 0x9,
//   D3D10_1_SRV_DIMENSION_TEXTURECUBEARRAY = 0xA,
//   D3D11_SRV_DIMENSION_UNKNOWN = 0x0,
//   D3D11_SRV_DIMENSION_BUFFER = 0x1,
//   D3D11_SRV_DIMENSION_TEXTURE1D = 0x2,
//   D3D11_SRV_DIMENSION_TEXTURE1DARRAY = 0x3,
//   D3D11_SRV_DIMENSION_TEXTURE2D = 0x4,
//   D3D11_SRV_DIMENSION_TEXTURE2DARRAY = 0x5,
//   D3D11_SRV_DIMENSION_TEXTURE2DMS = 0x6,
//   D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY = 0x7,
//   D3D11_SRV_DIMENSION_TEXTURE3D = 0x8,
//   D3D11_SRV_DIMENSION_TEXTURECUBE = 0x9,
//   D3D11_SRV_DIMENSION_TEXTURECUBEARRAY = 0xA,
//   D3D11_SRV_DIMENSION_BUFFEREX = 0xB,
// };

// /* 999 */
// enum D3D11_MESSAGE_SEVERITY : __int32
// {
//   D3D11_MESSAGE_SEVERITY_CORRUPTION = 0x0,
//   D3D11_MESSAGE_SEVERITY_ERROR = 0x1,
//   D3D11_MESSAGE_SEVERITY_WARNING = 0x2,
//   D3D11_MESSAGE_SEVERITY_INFO = 0x3,
// };

// /* 1000 */
// enum D2D1_EXTEND_MODE : __int32
// {
//   D2D1_EXTEND_MODE_CLAMP = 0x0,
//   D2D1_EXTEND_MODE_WRAP = 0x1,
//   D2D1_EXTEND_MODE_MIRROR = 0x2,
//   D2D1_EXTEND_MODE_FORCE_DWORD = 0xFFFFFFFF,
// };

// /* 1001 */
// enum D2D1_ANTIALIAS_MODE : __int32
// {
//   D2D1_ANTIALIAS_MODE_PER_PRIMITIVE = 0x0,
//   D2D1_ANTIALIAS_MODE_ALIASED = 0x1,
//   D2D1_ANTIALIAS_MODE_FORCE_DWORD = 0xFFFFFFFF,
// };

// /* 1002 */
// enum D2D1_TEXT_ANTIALIAS_MODE : __int32
// {
//   D2D1_TEXT_ANTIALIAS_MODE_DEFAULT = 0x0,
//   D2D1_TEXT_ANTIALIAS_MODE_CLEARTYPE = 0x1,
//   D2D1_TEXT_ANTIALIAS_MODE_GRAYSCALE = 0x2,
//   D2D1_TEXT_ANTIALIAS_MODE_ALIASED = 0x3,
//   D2D1_TEXT_ANTIALIAS_MODE_FORCE_DWORD = 0xFFFFFFFF,
// };

// /* 1003 */
// enum D3D11_MESSAGE_ID : __int32
// {
//   D3D11_MESSAGE_ID_UNKNOWN = 0x0,
//   D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD = 0x1,
//   D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD = 0x2,
//   D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD = 0x3,
//   D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD = 0x4,
//   D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD = 0x5,
//   D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD = 0x6,
//   D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD = 0x7,
//   D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD = 0x8,
//   D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD = 0x9,
//   D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD = 0xA,
//   D3D11_MESSAGE_ID_STRING_FROM_APPLICATION = 0xB,
//   D3D11_MESSAGE_ID_CORRUPTED_THIS = 0xC,
//   D3D11_MESSAGE_ID_CORRUPTED_PARAMETER1 = 0xD,
//   D3D11_MESSAGE_ID_CORRUPTED_PARAMETER2 = 0xE,
//   D3D11_MESSAGE_ID_CORRUPTED_PARAMETER3 = 0xF,
//   D3D11_MESSAGE_ID_CORRUPTED_PARAMETER4 = 0x10,
//   D3D11_MESSAGE_ID_CORRUPTED_PARAMETER5 = 0x11,
//   D3D11_MESSAGE_ID_CORRUPTED_PARAMETER6 = 0x12,
//   D3D11_MESSAGE_ID_CORRUPTED_PARAMETER7 = 0x13,
//   D3D11_MESSAGE_ID_CORRUPTED_PARAMETER8 = 0x14,
//   D3D11_MESSAGE_ID_CORRUPTED_PARAMETER9 = 0x15,
//   D3D11_MESSAGE_ID_CORRUPTED_PARAMETER10 = 0x16,
//   D3D11_MESSAGE_ID_CORRUPTED_PARAMETER11 = 0x17,
//   D3D11_MESSAGE_ID_CORRUPTED_PARAMETER12 = 0x18,
//   D3D11_MESSAGE_ID_CORRUPTED_PARAMETER13 = 0x19,
//   D3D11_MESSAGE_ID_CORRUPTED_PARAMETER14 = 0x1A,
//   D3D11_MESSAGE_ID_CORRUPTED_PARAMETER15 = 0x1B,
//   D3D11_MESSAGE_ID_CORRUPTED_MULTITHREADING = 0x1C,
//   D3D11_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY = 0x1D,
//   D3D11_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT = 0x1E,
//   D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT = 0x1F,
//   D3D11_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT = 0x20,
//   D3D11_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT = 0x21,
//   D3D11_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x22,
//   D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x23,
//   D3D11_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT = 0x24,
//   D3D11_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT = 0x25,
//   D3D11_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x26,
//   D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x27,
//   D3D11_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT = 0x28,
//   D3D11_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT = 0x29,
//   D3D11_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT = 0x2A,
//   D3D11_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x2B,
//   D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x2C,
//   D3D11_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT = 0x2D,
//   D3D11_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT = 0x2E,
//   D3D11_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT = 0x2F,
//   D3D11_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT = 0x30,
//   D3D11_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT = 0x31,
//   D3D11_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT = 0x32,
//   D3D11_MESSAGE_ID_GETPRIVATEDATA_MOREDATA = 0x33,
//   D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA = 0x34,
//   D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN = 0x35,
//   D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS = 0x36,
//   D3D11_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS = 0x37,
//   D3D11_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY = 0x38,
//   D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT = 0x39,
//   D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES = 0x3A,
//   D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE = 0x3B,
//   D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS = 0x3C,
//   D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS = 0x3D,
//   D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS = 0x3E,
//   D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS = 0x3F,
//   D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS = 0x40,
//   D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA = 0x41,
//   D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS = 0x42,
//   D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS = 0x43,
//   D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS = 0x44,
//   D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN = 0x45,
//   D3D11_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN = 0x46,
//   D3D11_MESSAGE_ID_CREATEBUFFER_NULLDESC = 0x47,
//   D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS = 0x48,
//   D3D11_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION = 0x49,
//   D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT = 0x4A,
//   D3D11_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT = 0x4B,
//   D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES = 0x4C,
//   D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE = 0x4D,
//   D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS = 0x4E,
//   D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS = 0x4F,
//   D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS = 0x50,
//   D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS = 0x51,
//   D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS = 0x52,
//   D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA = 0x53,
//   D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS = 0x54,
//   D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS = 0x55,
//   D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS = 0x56,
//   D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN = 0x57,
//   D3D11_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN = 0x58,
//   D3D11_MESSAGE_ID_CREATETEXTURE1D_NULLDESC = 0x59,
//   D3D11_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION = 0x5A,
//   D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT = 0x5B,
//   D3D11_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT = 0x5C,
//   D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES = 0x5D,
//   D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE = 0x5E,
//   D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS = 0x5F,
//   D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS = 0x60,
//   D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS = 0x61,
//   D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS = 0x62,
//   D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS = 0x63,
//   D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA = 0x64,
//   D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS = 0x65,
//   D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS = 0x66,
//   D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS = 0x67,
//   D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN = 0x68,
//   D3D11_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN = 0x69,
//   D3D11_MESSAGE_ID_CREATETEXTURE2D_NULLDESC = 0x6A,
//   D3D11_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION = 0x6B,
//   D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT = 0x6C,
//   D3D11_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT = 0x6D,
//   D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES = 0x6E,
//   D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE = 0x6F,
//   D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS = 0x70,
//   D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS = 0x71,
//   D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS = 0x72,
//   D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS = 0x73,
//   D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS = 0x74,
//   D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA = 0x75,
//   D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS = 0x76,
//   D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS = 0x77,
//   D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS = 0x78,
//   D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN = 0x79,
//   D3D11_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN = 0x7A,
//   D3D11_MESSAGE_ID_CREATETEXTURE3D_NULLDESC = 0x7B,
//   D3D11_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION = 0x7C,
//   D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT = 0x7D,
//   D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC = 0x7E,
//   D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT = 0x7F,
//   D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS = 0x80,
//   D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE = 0x81,
//   D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS = 0x82,
//   D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN = 0x83,
//   D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN = 0x84,
//   D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT = 0x85,
//   D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT = 0x86,
//   D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC = 0x87,
//   D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT = 0x88,
//   D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS = 0x89,
//   D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE = 0x8A,
//   D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS = 0x8B,
//   D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN = 0x8C,
//   D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN = 0x8D,
//   D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT = 0x8E,
//   D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC = 0x8F,
//   D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT = 0x90,
//   D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS = 0x91,
//   D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE = 0x92,
//   D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS = 0x93,
//   D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN = 0x94,
//   D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN = 0x95,
//   D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY = 0x96,
//   D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS = 0x97,
//   D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT = 0x98,
//   D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT = 0x99,
//   D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT = 0x9A,
//   D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS = 0x9B,
//   D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH = 0x9C,
//   D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE = 0x9D,
//   D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE = 0x9E,
//   D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT = 0x9F,
//   D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC = 0xA0,
//   D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE = 0xA1,
//   D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC = 0xA2,
//   D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT = 0xA3,
//   D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC = 0xA4,
//   D3D11_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY = 0xA5,
//   D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE = 0xA6,
//   D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE = 0xA7,
//   D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY = 0xA8,
//   D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE = 0xA9,
//   D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE = 0xAA,
//   D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY = 0xAB,
//   D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE = 0xAC,
//   D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = 0xAD,
//   D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES = 0xAE,
//   D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED = 0xAF,
//   D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL = 0xB0,
//   D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL = 0xB1,
//   D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED = 0xB2,
//   D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT = 0xB3,
//   D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT = 0xB4,
//   D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT = 0xB5,
//   D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT = 0xB6,
//   D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION = 0xB7,
//   D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT = 0xB8,
//   D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE = 0xB9,
//   D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC = 0xBA,
//   D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH = 0xBB,
//   D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS = 0xBC,
//   D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX = 0xBD,
//   D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE = 0xBE,
//   D3D11_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY = 0xBF,
//   D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE = 0xC0,
//   D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE = 0xC1,
//   D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE = 0xC2,
//   D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE = 0xC3,
//   D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP = 0xC4,
//   D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS = 0xC5,
//   D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS = 0xC6,
//   D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC = 0xC7,
//   D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK = 0xC8,
//   D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC = 0xC9,
//   D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP = 0xCA,
//   D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP = 0xCB,
//   D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP = 0xCC,
//   D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC = 0xCD,
//   D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP = 0xCE,
//   D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP = 0xCF,
//   D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP = 0xD0,
//   D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC = 0xD1,
//   D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS = 0xD2,
//   D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC = 0xD3,
//   D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND = 0xD4,
//   D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND = 0xD5,
//   D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP = 0xD6,
//   D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA = 0xD7,
//   D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA = 0xD8,
//   D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA = 0xD9,
//   D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK = 0xDA,
//   D3D11_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS = 0xDB,
//   D3D11_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC = 0xDC,
//   D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER = 0xDD,
//   D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU = 0xDE,
//   D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV = 0xDF,
//   D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW = 0xE0,
//   D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS = 0xE1,
//   D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY = 0xE2,
//   D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC = 0xE3,
//   D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD = 0xE4,
//   D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD = 0xE5,
//   D3D11_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS = 0xE6,
//   D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC = 0xE7,
//   D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY = 0xE8,
//   D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS = 0xE9,
//   D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG = 0xEA,
//   D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC = 0xEB,
//   D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED = 0xEC,
//   D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED = 0xED,
//   D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER = 0xEE,
//   D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE = 0xEF,
//   D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY = 0xF0,
//   D3D11_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER = 0xF1,
//   D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID = 0xF2,
//   D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE = 0xF3,
//   D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED = 0xF4,
//   D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY = 0xF5,
//   D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER = 0xF6,
//   D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0xF7,
//   D3D11_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY = 0xF8,
//   D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY = 0xF9,
//   D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER = 0xFA,
//   D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0xFB,
//   D3D11_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY = 0xFC,
//   D3D11_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER = 0xFD,
//   D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED = 0xFE,
//   D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY = 0xFF,
//   D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER = 0x100,
//   D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x101,
//   D3D11_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY = 0x102,
//   D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT = 0x103,
//   D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR = 0x104,
//   D3D11_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH = 0x105,
//   D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH = 0x106,
//   D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID = 0x107,
//   D3D11_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY = 0x108,
//   D3D11_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY = 0x109,
//   D3D11_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x10A,
//   D3D11_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY = 0x10B,
//   D3D11_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY = 0x10C,
//   D3D11_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x10D,
//   D3D11_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY = 0x10E,
//   D3D11_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY = 0x10F,
//   D3D11_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY = 0x110,
//   D3D11_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x111,
//   D3D11_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY = 0x112,
//   D3D11_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY = 0x113,
//   D3D11_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY = 0x114,
//   D3D11_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID = 0x115,
//   D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE = 0x116,
//   D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE = 0x117,
//   D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX = 0x118,
//   D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE = 0x119,
//   D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE = 0x11A,
//   D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE = 0x11B,
//   D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE = 0x11C,
//   D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE = 0x11D,
//   D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE = 0x11E,
//   D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE = 0x11F,
//   D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX = 0x120,
//   D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE = 0x121,
//   D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID = 0x122,
//   D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID = 0x123,
//   D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID = 0x124,
//   D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID = 0x125,
//   D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID = 0x126,
//   D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE = 0x127,
//   D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS = 0x128,
//   D3D11_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED = 0x129,
//   D3D11_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN = 0x12A,
//   D3D11_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED = 0x12B,
//   D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE = 0x12C,
//   D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE = 0x12D,
//   D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS = 0x12E,
//   D3D11_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED = 0x12F,
//   D3D11_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN = 0x130,
//   D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE = 0x131,
//   D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED = 0x132,
//   D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE = 0x133,
//   D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE = 0x134,
//   D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS = 0x135,
//   D3D11_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED = 0x136,
//   D3D11_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN = 0x137,
//   D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE = 0x138,
//   D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED = 0x139,
//   D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE = 0x13A,
//   D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE = 0x13B,
//   D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS = 0x13C,
//   D3D11_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED = 0x13D,
//   D3D11_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN = 0x13E,
//   D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE = 0x13F,
//   D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED = 0x140,
//   D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED = 0x141,
//   D3D11_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED = 0x142,
//   D3D11_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS = 0x143,
//   D3D11_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN = 0x144,
//   D3D11_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN = 0x145,
//   D3D11_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE = 0x146,
//   D3D11_MESSAGE_ID_REF_THREADING_MODE = 0x147,
//   D3D11_MESSAGE_ID_REF_UMDRIVER_EXCEPTION = 0x148,
//   D3D11_MESSAGE_ID_REF_KMDRIVER_EXCEPTION = 0x149,
//   D3D11_MESSAGE_ID_REF_HARDWARE_EXCEPTION = 0x14A,
//   D3D11_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE = 0x14B,
//   D3D11_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER = 0x14C,
//   D3D11_MESSAGE_ID_REF_OUT_OF_MEMORY = 0x14D,
//   D3D11_MESSAGE_ID_REF_INFO = 0x14E,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW = 0x14F,
//   D3D11_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW = 0x150,
//   D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW = 0x151,
//   D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW = 0x152,
//   D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW = 0x153,
//   D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW = 0x154,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET = 0x155,
//   D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND = 0x156,
//   D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX = 0x157,
//   D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE = 0x158,
//   D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK = 0x159,
//   D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE = 0x15A,
//   D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS = 0x15B,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET = 0x15C,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET = 0x15D,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET = 0x15E,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL = 0x15F,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET = 0x160,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET = 0x161,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH = 0x162,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL = 0x163,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL = 0x164,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET = 0x165,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID = 0x166,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL = 0x167,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH = 0x168,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH = 0x169,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT = 0x16A,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET = 0x16B,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED = 0x16C,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY = 0x16D,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED = 0x16E,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED = 0x16F,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED = 0x170,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED = 0x171,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED = 0x172,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED = 0x173,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED = 0x174,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED = 0x175,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE = 0x176,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER = 0x177,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING = 0x178,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 = 0x179,
//   D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT = 0x17A,
//   D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT = 0x17B,
//   D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT = 0x17C,
//   D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN = 0x17D,
//   D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN = 0x17E,
//   D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN = 0x17F,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET = 0x180,
//   D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC = 0x181,
//   D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC = 0x182,
//   D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH = 0x183,
//   D3D11_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW = 0x184,
//   D3D11_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS = 0x185,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH = 0x186,
//   D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH = 0x187,
//   D3D11_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY = 0x188,
//   D3D11_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY = 0x189,
//   D3D11_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN = 0x18A,
//   D3D11_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN = 0x18B,
//   D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER = 0x18C,
//   D3D11_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED = 0x18D,
//   D3D11_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 0x18E,
//   D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN = 0x18F,
//   D3D11_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN = 0x190,
//   D3D11_MESSAGE_ID_CREATECOUNTER_NULLDESC = 0x191,
//   D3D11_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER = 0x192,
//   D3D11_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 0x193,
//   D3D11_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE = 0x194,
//   D3D11_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED = 0x195,
//   D3D11_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION = 0x196,
//   D3D11_MESSAGE_ID_QUERY_BEGIN_DUPLICATE = 0x197,
//   D3D11_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS = 0x198,
//   D3D11_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION = 0x199,
//   D3D11_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS = 0x19A,
//   D3D11_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN = 0x19B,
//   D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE = 0x19C,
//   D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS = 0x19D,
//   D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL = 0x19E,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH = 0x19F,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED = 0x1A0,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN = 0x1A1,
//   D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE = 0x1A2,
//   D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE = 0x1A3,
//   D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT = 0x1A4,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH = 0x1A5,
//   D3D11_MESSAGE_ID_D3D10_MESSAGES_END = 0x1A6,
//   D3D11_MESSAGE_ID_D3D10L9_MESSAGES_START = 0x100000,
//   D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED = 0x100001,
//   D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED = 0x100002,
//   D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT = 0x100003,
//   D3D11_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY = 0x100004,
//   D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE = 0x100005,
//   D3D11_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED = 0x100006,
//   D3D11_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS = 0x100007,
//   D3D11_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS = 0x100008,
//   D3D11_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS = 0x100009,
//   D3D11_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND = 0x10000A,
//   D3D11_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D = 0x10000B,
//   D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE = 0x10000C,
//   D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE = 0x10000D,
//   D3D11_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS = 0x10000E,
//   D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS = 0x10000F,
//   D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX = 0x100010,
//   D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS = 0x100011,
//   D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED = 0x100012,
//   D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS = 0x100013,
//   D3D11_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY = 0x100014,
//   D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK = 0x100015,
//   D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK = 0x100016,
//   D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT = 0x100017,
//   D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE = 0x100018,
//   D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE = 0x100019,
//   D3D11_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE = 0x10001A,
//   D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD = 0x10001B,
//   D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL = 0x10001C,
//   D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX = 0x10001D,
//   D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO = 0x10001E,
//   D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES = 0x10001F,
//   D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET = 0x100020,
//   D3D11_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER = 0x100021,
//   D3D11_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE = 0x100022,
//   D3D11_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE = 0x100023,
//   D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE = 0x100024,
//   D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS = 0x100025,
//   D3D11_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT = 0x100026,
//   D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS = 0x100027,
//   D3D11_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES = 0x100028,
//   D3D11_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED = 0x100029,
//   D3D11_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED = 0x10002A,
//   D3D11_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED = 0x10002B,
//   D3D11_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED = 0x10002C,
//   D3D11_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED = 0x10002D,
//   D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND = 0x10002E,
//   D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND = 0x10002F,
//   D3D11_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED = 0x100030,
//   D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE = 0x100031,
//   D3D11_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED = 0x100032,
//   D3D11_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 = 0x100033,
//   D3D11_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED = 0x100034,
//   D3D11_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO = 0x100035,
//   D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION = 0x100036,
//   D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED = 0x100037,
//   D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR = 0x100038,
//   D3D11_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA = 0x100039,
//   D3D11_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP = 0x10003A,
//   D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED = 0x10003B,
//   D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT = 0x10003C,
//   D3D11_MESSAGE_ID_D3D10L9_MESSAGES_END = 0x10003D,
//   D3D11_MESSAGE_ID_D3D11_MESSAGES_START = 0x200000,
//   D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFLAGS = 0x200001,
//   D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDCLASSLINKAGE = 0x200002,
//   D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE = 0x200003,
//   D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTREAMS = 0x200004,
//   D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER = 0x200005,
//   D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTREAMS = 0x200006,
//   D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCLASSLINKAGE = 0x200007,
//   D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDCLASSLINKAGE = 0x200008,
//   D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_COMMANDLISTFLAGS = 0x200009,
//   D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_SINGLETHREADED = 0x20000A,
//   D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALIDARG_RETURN = 0x20000B,
//   D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_CALL_RETURN = 0x20000C,
//   D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_OUTOFMEMORY_RETURN = 0x20000D,
//   D3D11_MESSAGE_ID_FINISHDISPLAYLIST_ONIMMEDIATECONTEXT = 0x20000E,
//   D3D11_MESSAGE_ID_FINISHDISPLAYLIST_OUTOFMEMORY_RETURN = 0x20000F,
//   D3D11_MESSAGE_ID_FINISHDISPLAYLIST_INVALID_CALL_RETURN = 0x200010,
//   D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM = 0x200011,
//   D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES = 0x200012,
//   D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES = 0x200013,
//   D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES = 0x200014,
//   D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_HAZARD = 0x200015,
//   D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_HAZARD = 0x200016,
//   D3D11_MESSAGE_ID_HSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x200017,
//   D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x200018,
//   D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCALL = 0x200019,
//   D3D11_MESSAGE_ID_CREATEHULLSHADER_OUTOFMEMORY = 0x20001A,
//   D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERBYTECODE = 0x20001B,
//   D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERTYPE = 0x20001C,
//   D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCLASSLINKAGE = 0x20001D,
//   D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_VIEWS_EMPTY = 0x20001E,
//   D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_INVALIDBUFFER = 0x20001F,
//   D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x200020,
//   D3D11_MESSAGE_ID_DEVICE_HSSETSAMPLERS_SAMPLERS_EMPTY = 0x200021,
//   D3D11_MESSAGE_ID_DEVICE_HSGETSHADERRESOURCES_VIEWS_EMPTY = 0x200022,
//   D3D11_MESSAGE_ID_DEVICE_HSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x200023,
//   D3D11_MESSAGE_ID_DEVICE_HSGETSAMPLERS_SAMPLERS_EMPTY = 0x200024,
//   D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_HAZARD = 0x200025,
//   D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_HAZARD = 0x200026,
//   D3D11_MESSAGE_ID_DSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x200027,
//   D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x200028,
//   D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCALL = 0x200029,
//   D3D11_MESSAGE_ID_CREATEDOMAINSHADER_OUTOFMEMORY = 0x20002A,
//   D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERBYTECODE = 0x20002B,
//   D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERTYPE = 0x20002C,
//   D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCLASSLINKAGE = 0x20002D,
//   D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_VIEWS_EMPTY = 0x20002E,
//   D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_INVALIDBUFFER = 0x20002F,
//   D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x200030,
//   D3D11_MESSAGE_ID_DEVICE_DSSETSAMPLERS_SAMPLERS_EMPTY = 0x200031,
//   D3D11_MESSAGE_ID_DEVICE_DSGETSHADERRESOURCES_VIEWS_EMPTY = 0x200032,
//   D3D11_MESSAGE_ID_DEVICE_DSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x200033,
//   D3D11_MESSAGE_ID_DEVICE_DSGETSAMPLERS_SAMPLERS_EMPTY = 0x200034,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_HS_XOR_DS_MISMATCH = 0x200035,
//   D3D11_MESSAGE_ID_DEFERRED_CONTEXT_REMOVAL_PROCESS_AT_FAULT = 0x200036,
//   D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_INVALID_ARG_BUFFER = 0x200037,
//   D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_UNALIGNED = 0x200038,
//   D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_OVERFLOW = 0x200039,
//   D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDMAPTYPE = 0x20003A,
//   D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDSUBRESOURCE = 0x20003B,
//   D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDFLAGS = 0x20003C,
//   D3D11_MESSAGE_ID_RESOURCE_MAP_ALREADYMAPPED = 0x20003D,
//   D3D11_MESSAGE_ID_RESOURCE_MAP_DEVICEREMOVED_RETURN = 0x20003E,
//   D3D11_MESSAGE_ID_RESOURCE_MAP_OUTOFMEMORY_RETURN = 0x20003F,
//   D3D11_MESSAGE_ID_RESOURCE_MAP_WITHOUT_INITIAL_DISCARD = 0x200040,
//   D3D11_MESSAGE_ID_RESOURCE_UNMAP_INVALIDSUBRESOURCE = 0x200041,
//   D3D11_MESSAGE_ID_RESOURCE_UNMAP_NOTMAPPED = 0x200042,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_RASTERIZING_CONTROL_POINTS = 0x200043,
//   D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNSUPPORTED = 0x200044,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_SIGNATURE_MISMATCH = 0x200045,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH = 0x200046,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_CONTROL_POINT_COUNT_MISMATCH = 0x200047,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_TESSELLATOR_DOMAIN_MISMATCH = 0x200048,
//   D3D11_MESSAGE_ID_CREATE_CONTEXT = 0x200049,
//   D3D11_MESSAGE_ID_LIVE_CONTEXT = 0x20004A,
//   D3D11_MESSAGE_ID_DESTROY_CONTEXT = 0x20004B,
//   D3D11_MESSAGE_ID_CREATE_BUFFER = 0x20004C,
//   D3D11_MESSAGE_ID_LIVE_BUFFER = 0x20004D,
//   D3D11_MESSAGE_ID_DESTROY_BUFFER = 0x20004E,
//   D3D11_MESSAGE_ID_CREATE_TEXTURE1D = 0x20004F,
//   D3D11_MESSAGE_ID_LIVE_TEXTURE1D = 0x200050,
//   D3D11_MESSAGE_ID_DESTROY_TEXTURE1D = 0x200051,
//   D3D11_MESSAGE_ID_CREATE_TEXTURE2D = 0x200052,
//   D3D11_MESSAGE_ID_LIVE_TEXTURE2D = 0x200053,
//   D3D11_MESSAGE_ID_DESTROY_TEXTURE2D = 0x200054,
//   D3D11_MESSAGE_ID_CREATE_TEXTURE3D = 0x200055,
//   D3D11_MESSAGE_ID_LIVE_TEXTURE3D = 0x200056,
//   D3D11_MESSAGE_ID_DESTROY_TEXTURE3D = 0x200057,
//   D3D11_MESSAGE_ID_CREATE_SHADERRESOURCEVIEW = 0x200058,
//   D3D11_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW = 0x200059,
//   D3D11_MESSAGE_ID_DESTROY_SHADERRESOURCEVIEW = 0x20005A,
//   D3D11_MESSAGE_ID_CREATE_RENDERTARGETVIEW = 0x20005B,
//   D3D11_MESSAGE_ID_LIVE_RENDERTARGETVIEW = 0x20005C,
//   D3D11_MESSAGE_ID_DESTROY_RENDERTARGETVIEW = 0x20005D,
//   D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILVIEW = 0x20005E,
//   D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW = 0x20005F,
//   D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILVIEW = 0x200060,
//   D3D11_MESSAGE_ID_CREATE_VERTEXSHADER = 0x200061,
//   D3D11_MESSAGE_ID_LIVE_VERTEXSHADER = 0x200062,
//   D3D11_MESSAGE_ID_DESTROY_VERTEXSHADER = 0x200063,
//   D3D11_MESSAGE_ID_CREATE_HULLSHADER = 0x200064,
//   D3D11_MESSAGE_ID_LIVE_HULLSHADER = 0x200065,
//   D3D11_MESSAGE_ID_DESTROY_HULLSHADER = 0x200066,
//   D3D11_MESSAGE_ID_CREATE_DOMAINSHADER = 0x200067,
//   D3D11_MESSAGE_ID_LIVE_DOMAINSHADER = 0x200068,
//   D3D11_MESSAGE_ID_DESTROY_DOMAINSHADER = 0x200069,
//   D3D11_MESSAGE_ID_CREATE_GEOMETRYSHADER = 0x20006A,
//   D3D11_MESSAGE_ID_LIVE_GEOMETRYSHADER = 0x20006B,
//   D3D11_MESSAGE_ID_DESTROY_GEOMETRYSHADER = 0x20006C,
//   D3D11_MESSAGE_ID_CREATE_PIXELSHADER = 0x20006D,
//   D3D11_MESSAGE_ID_LIVE_PIXELSHADER = 0x20006E,
//   D3D11_MESSAGE_ID_DESTROY_PIXELSHADER = 0x20006F,
//   D3D11_MESSAGE_ID_CREATE_INPUTLAYOUT = 0x200070,
//   D3D11_MESSAGE_ID_LIVE_INPUTLAYOUT = 0x200071,
//   D3D11_MESSAGE_ID_DESTROY_INPUTLAYOUT = 0x200072,
//   D3D11_MESSAGE_ID_CREATE_SAMPLER = 0x200073,
//   D3D11_MESSAGE_ID_LIVE_SAMPLER = 0x200074,
//   D3D11_MESSAGE_ID_DESTROY_SAMPLER = 0x200075,
//   D3D11_MESSAGE_ID_CREATE_BLENDSTATE = 0x200076,
//   D3D11_MESSAGE_ID_LIVE_BLENDSTATE = 0x200077,
//   D3D11_MESSAGE_ID_DESTROY_BLENDSTATE = 0x200078,
//   D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILSTATE = 0x200079,
//   D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE = 0x20007A,
//   D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILSTATE = 0x20007B,
//   D3D11_MESSAGE_ID_CREATE_RASTERIZERSTATE = 0x20007C,
//   D3D11_MESSAGE_ID_LIVE_RASTERIZERSTATE = 0x20007D,
//   D3D11_MESSAGE_ID_DESTROY_RASTERIZERSTATE = 0x20007E,
//   D3D11_MESSAGE_ID_CREATE_QUERY = 0x20007F,
//   D3D11_MESSAGE_ID_LIVE_QUERY = 0x200080,
//   D3D11_MESSAGE_ID_DESTROY_QUERY = 0x200081,
//   D3D11_MESSAGE_ID_CREATE_PREDICATE = 0x200082,
//   D3D11_MESSAGE_ID_LIVE_PREDICATE = 0x200083,
//   D3D11_MESSAGE_ID_DESTROY_PREDICATE = 0x200084,
//   D3D11_MESSAGE_ID_CREATE_COUNTER = 0x200085,
//   D3D11_MESSAGE_ID_LIVE_COUNTER = 0x200086,
//   D3D11_MESSAGE_ID_DESTROY_COUNTER = 0x200087,
//   D3D11_MESSAGE_ID_CREATE_COMMANDLIST = 0x200088,
//   D3D11_MESSAGE_ID_LIVE_COMMANDLIST = 0x200089,
//   D3D11_MESSAGE_ID_DESTROY_COMMANDLIST = 0x20008A,
//   D3D11_MESSAGE_ID_CREATE_CLASSINSTANCE = 0x20008B,
//   D3D11_MESSAGE_ID_LIVE_CLASSINSTANCE = 0x20008C,
//   D3D11_MESSAGE_ID_DESTROY_CLASSINSTANCE = 0x20008D,
//   D3D11_MESSAGE_ID_CREATE_CLASSLINKAGE = 0x20008E,
//   D3D11_MESSAGE_ID_LIVE_CLASSLINKAGE = 0x20008F,
//   D3D11_MESSAGE_ID_DESTROY_CLASSLINKAGE = 0x200090,
//   D3D11_MESSAGE_ID_LIVE_DEVICE = 0x200091,
//   D3D11_MESSAGE_ID_LIVE_OBJECT_SUMMARY = 0x200092,
//   D3D11_MESSAGE_ID_CREATE_COMPUTESHADER = 0x200093,
//   D3D11_MESSAGE_ID_LIVE_COMPUTESHADER = 0x200094,
//   D3D11_MESSAGE_ID_DESTROY_COMPUTESHADER = 0x200095,
//   D3D11_MESSAGE_ID_CREATE_UNORDEREDACCESSVIEW = 0x200096,
//   D3D11_MESSAGE_ID_LIVE_UNORDEREDACCESSVIEW = 0x200097,
//   D3D11_MESSAGE_ID_DESTROY_UNORDEREDACCESSVIEW = 0x200098,
//   D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACES_FEATURELEVEL = 0x200099,
//   D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACE_COUNT_MISMATCH = 0x20009A,
//   D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE = 0x20009B,
//   D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_INDEX = 0x20009C,
//   D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_TYPE = 0x20009D,
//   D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_DATA = 0x20009E,
//   D3D11_MESSAGE_ID_DEVICE_SETSHADER_UNBOUND_INSTANCE_DATA = 0x20009F,
//   D3D11_MESSAGE_ID_DEVICE_SETSHADER_INSTANCE_DATA_BINDINGS = 0x2000A0,
//   D3D11_MESSAGE_ID_DEVICE_CREATESHADER_CLASSLINKAGE_FULL = 0x2000A1,
//   D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_UNRECOGNIZED_FEATURE = 0x2000A2,
//   D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE = 0x2000A3,
//   D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_INVALIDARG_RETURN = 0x2000A4,
//   D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_HAZARD = 0x2000A5,
//   D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_HAZARD = 0x2000A6,
//   D3D11_MESSAGE_ID_CSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x2000A7,
//   D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x2000A8,
//   D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCALL = 0x2000A9,
//   D3D11_MESSAGE_ID_CREATECOMPUTESHADER_OUTOFMEMORY = 0x2000AA,
//   D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERBYTECODE = 0x2000AB,
//   D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERTYPE = 0x2000AC,
//   D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCLASSLINKAGE = 0x2000AD,
//   D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_VIEWS_EMPTY = 0x2000AE,
//   D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFER = 0x2000AF,
//   D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x2000B0,
//   D3D11_MESSAGE_ID_DEVICE_CSSETSAMPLERS_SAMPLERS_EMPTY = 0x2000B1,
//   D3D11_MESSAGE_ID_DEVICE_CSGETSHADERRESOURCES_VIEWS_EMPTY = 0x2000B2,
//   D3D11_MESSAGE_ID_DEVICE_CSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x2000B3,
//   D3D11_MESSAGE_ID_DEVICE_CSGETSAMPLERS_SAMPLERS_EMPTY = 0x2000B4,
//   D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000B5,
//   D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000B6,
//   D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000B7,
//   D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000B8,
//   D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000B9,
//   D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000BA,
//   D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000BB,
//   D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSTRUCTURESTRIDE = 0x2000BC,
//   D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFLAGS = 0x2000BD,
//   D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE = 0x2000BE,
//   D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDESC = 0x2000BF,
//   D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT = 0x2000C0,
//   D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS = 0x2000C1,
//   D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT = 0x2000C2,
//   D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_HAZARD = 0x2000C3,
//   D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_OVERLAPPING_OLD_SLOTS = 0x2000C4,
//   D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NO_OP = 0x2000C5,
//   D3D11_MESSAGE_ID_CSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT = 0x2000C6,
//   D3D11_MESSAGE_ID_PSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT = 0x2000C7,
//   D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDARG_RETURN = 0x2000C8,
//   D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_OUTOFMEMORY_RETURN = 0x2000C9,
//   D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_TOOMANYOBJECTS = 0x2000CA,
//   D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_HAZARD = 0x2000CB,
//   D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_DENORMFLUSH = 0x2000CC,
//   D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSS_VIEWS_EMPTY = 0x2000CD,
//   D3D11_MESSAGE_ID_DEVICE_CSGETUNORDEREDACCESSS_VIEWS_EMPTY = 0x2000CE,
//   D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS = 0x2000CF,
//   D3D11_MESSAGE_ID_CREATESHADERRESESOURCEVIEW_TOOMANYOBJECTS = 0x2000D0,
//   D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_INVALID_ARG_BUFFER = 0x2000D1,
//   D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_UNALIGNED = 0x2000D2,
//   D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_OVERFLOW = 0x2000D3,
//   D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDCONTEXT = 0x2000D4,
//   D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDRESOURCE = 0x2000D5,
//   D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDMINLOD = 0x2000D6,
//   D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDCONTEXT = 0x2000D7,
//   D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDRESOURCE = 0x2000D8,
//   D3D11_MESSAGE_ID_OMSETDEPTHSTENCIL_UNBINDDELETINGOBJECT = 0x2000D9,
//   D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DEPTH_READONLY = 0x2000DA,
//   D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_STENCIL_READONLY = 0x2000DB,
//   D3D11_MESSAGE_ID_CHECKFEATURESUPPORT_FORMAT_DEPRECATED = 0x2000DC,
//   D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RETURN_TYPE_MISMATCH = 0x2000DD,
//   D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET = 0x2000DE,
//   D3D11_MESSAGE_ID_DEVICE_DRAW_UNORDEREDACCESSVIEW_RENDERTARGETVIEW_OVERLAP = 0x2000DF,
//   D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_DIMENSION_MISMATCH = 0x2000E0,
//   D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_APPEND_UNSUPPORTED = 0x2000E1,
//   D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMICS_UNSUPPORTED = 0x2000E2,
//   D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_STRUCTURE_STRIDE_MISMATCH = 0x2000E3,
//   D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_BUFFER_TYPE_MISMATCH = 0x2000E4,
//   D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RAW_UNSUPPORTED = 0x2000E5,
//   D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_LD_UNSUPPORTED = 0x2000E6,
//   D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_STORE_UNSUPPORTED = 0x2000E7,
//   D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_ADD_UNSUPPORTED = 0x2000E8,
//   D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_BITWISE_OPS_UNSUPPORTED = 0x2000E9,
//   D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_CMPSTORE_CMPEXCHANGE_UNSUPPORTED = 0x2000EA,
//   D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_EXCHANGE_UNSUPPORTED = 0x2000EB,
//   D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_SIGNED_MINMAX_UNSUPPORTED = 0x2000EC,
//   D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_UNSIGNED_MINMAX_UNSUPPORTED = 0x2000ED,
//   D3D11_MESSAGE_ID_DEVICE_DISPATCH_BOUND_RESOURCE_MAPPED = 0x2000EE,
//   D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_OVERFLOW = 0x2000EF,
//   D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_ZERO = 0x2000F0,
//   D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_STRUCTURE_STRIDE_MISMATCH = 0x2000F1,
//   D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_BUFFER_TYPE_MISMATCH = 0x2000F2,
//   D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_RAW_UNSUPPORTED = 0x2000F3,
//   D3D11_MESSAGE_ID_DEVICE_DISPATCH_UNSUPPORTED = 0x2000F4,
//   D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_UNSUPPORTED = 0x2000F5,
//   D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDOFFSET = 0x2000F6,
//   D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_LARGEOFFSET = 0x2000F7,
//   D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDDESTINATIONSTATE = 0x2000F8,
//   D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDSOURCESTATE = 0x2000F9,
//   D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_NOT_SUPPORTED = 0x2000FA,
//   D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDVIEW = 0x2000FB,
//   D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDOFFSET = 0x2000FC,
//   D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_TOOMANYVIEWS = 0x2000FD,
//   D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_INVALIDFORMAT = 0x2000FE,
//   D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_COUNTER_UNSUPPORTED = 0x2000FF,
//   D3D11_MESSAGE_ID_REF_WARNING = 0x200100,
//   D3D11_MESSAGE_ID_D3D11_MESSAGES_END = 0x200101,
// };

// /* 1004 */
// enum D2D1_BITMAP_INTERPOLATION_MODE : __int32
// {
//   D2D1_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0x0,
//   D2D1_BITMAP_INTERPOLATION_MODE_LINEAR = 0x1,
//   D2D1_BITMAP_INTERPOLATION_MODE_FORCE_DWORD = 0xFFFFFFFF,
// };

// /* 1005 */
// enum WICNamedWhitePoint : __int32
// {
//   WICWhitePointDefault = 0x1,
//   WICWhitePointDaylight = 0x2,
//   WICWhitePointCloudy = 0x4,
//   WICWhitePointShade = 0x8,
//   WICWhitePointTungsten = 0x10,
//   WICWhitePointFluorescent = 0x20,
//   WICWhitePointFlash = 0x40,
//   WICWhitePointUnderwater = 0x80,
//   WICWhitePointCustom = 0x100,
//   WICWhitePointAutoWhiteBalance = 0x200,
//   WICWhitePointAsShot = 0x1,
//   WICNAMEDWHITEPOINT_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 1006 */
// enum D2D1_DRAW_TEXT_OPTIONS : __int32
// {
//   D2D1_DRAW_TEXT_OPTIONS_NO_SNAP = 0x1,
//   D2D1_DRAW_TEXT_OPTIONS_CLIP = 0x2,
//   D2D1_DRAW_TEXT_OPTIONS_NONE = 0x0,
//   D2D1_DRAW_TEXT_OPTIONS_FORCE_DWORD = 0xFFFFFFFF,
// };

// /* 1007 */
// enum D3D10_MESSAGE_CATEGORY : __int32
// {
//   D3D10_MESSAGE_CATEGORY_APPLICATION_DEFINED = 0x0,
//   D3D10_MESSAGE_CATEGORY_MISCELLANEOUS = 0x1,
//   D3D10_MESSAGE_CATEGORY_INITIALIZATION = 0x2,
//   D3D10_MESSAGE_CATEGORY_CLEANUP = 0x3,
//   D3D10_MESSAGE_CATEGORY_COMPILATION = 0x4,
//   D3D10_MESSAGE_CATEGORY_STATE_CREATION = 0x5,
//   D3D10_MESSAGE_CATEGORY_STATE_SETTING = 0x6,
//   D3D10_MESSAGE_CATEGORY_STATE_GETTING = 0x7,
//   D3D10_MESSAGE_CATEGORY_RESOURCE_MANIPULATION = 0x8,
//   D3D10_MESSAGE_CATEGORY_EXECUTION = 0x9,
// };

// /* 1008 */
// enum D3D11_QUERY : __int32
// {
//   D3D11_QUERY_EVENT = 0x0,
//   D3D11_QUERY_OCCLUSION = 0x1,
//   D3D11_QUERY_TIMESTAMP = 0x2,
//   D3D11_QUERY_TIMESTAMP_DISJOINT = 0x3,
//   D3D11_QUERY_PIPELINE_STATISTICS = 0x4,
//   D3D11_QUERY_OCCLUSION_PREDICATE = 0x5,
//   D3D11_QUERY_SO_STATISTICS = 0x6,
//   D3D11_QUERY_SO_OVERFLOW_PREDICATE = 0x7,
//   D3D11_QUERY_SO_STATISTICS_STREAM0 = 0x8,
//   D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0 = 0x9,
//   D3D11_QUERY_SO_STATISTICS_STREAM1 = 0xA,
//   D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1 = 0xB,
//   D3D11_QUERY_SO_STATISTICS_STREAM2 = 0xC,
//   D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2 = 0xD,
//   D3D11_QUERY_SO_STATISTICS_STREAM3 = 0xE,
//   D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM3 = 0xF,
// };

// /* 1009 */
// enum D3D11_FILL_MODE : __int32
// {
//   D3D11_FILL_WIREFRAME = 0x2,
//   D3D11_FILL_SOLID = 0x3,
// };

// /* 1010 */
// enum D3D11_CULL_MODE : __int32
// {
//   D3D11_CULL_NONE = 0x1,
//   D3D11_CULL_FRONT = 0x2,
//   D3D11_CULL_BACK = 0x3,
// };

// /* 1011 */
// enum D3D10_MESSAGE_ID : __int32
// {
//   D3D10_MESSAGE_ID_UNKNOWN = 0x0,
//   D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD = 0x1,
//   D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD = 0x2,
//   D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD = 0x3,
//   D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD = 0x4,
//   D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD = 0x5,
//   D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD = 0x6,
//   D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD = 0x7,
//   D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD = 0x8,
//   D3D10_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD = 0x9,
//   D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD = 0xA,
//   D3D10_MESSAGE_ID_STRING_FROM_APPLICATION = 0xB,
//   D3D10_MESSAGE_ID_CORRUPTED_THIS = 0xC,
//   D3D10_MESSAGE_ID_CORRUPTED_PARAMETER1 = 0xD,
//   D3D10_MESSAGE_ID_CORRUPTED_PARAMETER2 = 0xE,
//   D3D10_MESSAGE_ID_CORRUPTED_PARAMETER3 = 0xF,
//   D3D10_MESSAGE_ID_CORRUPTED_PARAMETER4 = 0x10,
//   D3D10_MESSAGE_ID_CORRUPTED_PARAMETER5 = 0x11,
//   D3D10_MESSAGE_ID_CORRUPTED_PARAMETER6 = 0x12,
//   D3D10_MESSAGE_ID_CORRUPTED_PARAMETER7 = 0x13,
//   D3D10_MESSAGE_ID_CORRUPTED_PARAMETER8 = 0x14,
//   D3D10_MESSAGE_ID_CORRUPTED_PARAMETER9 = 0x15,
//   D3D10_MESSAGE_ID_CORRUPTED_PARAMETER10 = 0x16,
//   D3D10_MESSAGE_ID_CORRUPTED_PARAMETER11 = 0x17,
//   D3D10_MESSAGE_ID_CORRUPTED_PARAMETER12 = 0x18,
//   D3D10_MESSAGE_ID_CORRUPTED_PARAMETER13 = 0x19,
//   D3D10_MESSAGE_ID_CORRUPTED_PARAMETER14 = 0x1A,
//   D3D10_MESSAGE_ID_CORRUPTED_PARAMETER15 = 0x1B,
//   D3D10_MESSAGE_ID_CORRUPTED_MULTITHREADING = 0x1C,
//   D3D10_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY = 0x1D,
//   D3D10_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT = 0x1E,
//   D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT = 0x1F,
//   D3D10_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT = 0x20,
//   D3D10_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT = 0x21,
//   D3D10_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x22,
//   D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x23,
//   D3D10_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT = 0x24,
//   D3D10_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT = 0x25,
//   D3D10_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x26,
//   D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x27,
//   D3D10_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT = 0x28,
//   D3D10_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT = 0x29,
//   D3D10_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT = 0x2A,
//   D3D10_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x2B,
//   D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x2C,
//   D3D10_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT = 0x2D,
//   D3D10_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT = 0x2E,
//   D3D10_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT = 0x2F,
//   D3D10_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT = 0x30,
//   D3D10_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT = 0x31,
//   D3D10_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT = 0x32,
//   D3D10_MESSAGE_ID_GETPRIVATEDATA_MOREDATA = 0x33,
//   D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA = 0x34,
//   D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN = 0x35,
//   D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS = 0x36,
//   D3D10_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS = 0x37,
//   D3D10_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY = 0x38,
//   D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT = 0x39,
//   D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES = 0x3A,
//   D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE = 0x3B,
//   D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS = 0x3C,
//   D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS = 0x3D,
//   D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS = 0x3E,
//   D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS = 0x3F,
//   D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS = 0x40,
//   D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA = 0x41,
//   D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS = 0x42,
//   D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS = 0x43,
//   D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS = 0x44,
//   D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN = 0x45,
//   D3D10_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN = 0x46,
//   D3D10_MESSAGE_ID_CREATEBUFFER_NULLDESC = 0x47,
//   D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS = 0x48,
//   D3D10_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION = 0x49,
//   D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT = 0x4A,
//   D3D10_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT = 0x4B,
//   D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES = 0x4C,
//   D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE = 0x4D,
//   D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS = 0x4E,
//   D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS = 0x4F,
//   D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS = 0x50,
//   D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS = 0x51,
//   D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS = 0x52,
//   D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA = 0x53,
//   D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS = 0x54,
//   D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS = 0x55,
//   D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS = 0x56,
//   D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN = 0x57,
//   D3D10_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN = 0x58,
//   D3D10_MESSAGE_ID_CREATETEXTURE1D_NULLDESC = 0x59,
//   D3D10_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION = 0x5A,
//   D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT = 0x5B,
//   D3D10_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT = 0x5C,
//   D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES = 0x5D,
//   D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE = 0x5E,
//   D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS = 0x5F,
//   D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS = 0x60,
//   D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS = 0x61,
//   D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS = 0x62,
//   D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS = 0x63,
//   D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA = 0x64,
//   D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS = 0x65,
//   D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS = 0x66,
//   D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS = 0x67,
//   D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN = 0x68,
//   D3D10_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN = 0x69,
//   D3D10_MESSAGE_ID_CREATETEXTURE2D_NULLDESC = 0x6A,
//   D3D10_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION = 0x6B,
//   D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT = 0x6C,
//   D3D10_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT = 0x6D,
//   D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES = 0x6E,
//   D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE = 0x6F,
//   D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS = 0x70,
//   D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS = 0x71,
//   D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS = 0x72,
//   D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS = 0x73,
//   D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS = 0x74,
//   D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA = 0x75,
//   D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS = 0x76,
//   D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS = 0x77,
//   D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS = 0x78,
//   D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN = 0x79,
//   D3D10_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN = 0x7A,
//   D3D10_MESSAGE_ID_CREATETEXTURE3D_NULLDESC = 0x7B,
//   D3D10_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION = 0x7C,
//   D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT = 0x7D,
//   D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC = 0x7E,
//   D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT = 0x7F,
//   D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS = 0x80,
//   D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE = 0x81,
//   D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS = 0x82,
//   D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN = 0x83,
//   D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN = 0x84,
//   D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT = 0x85,
//   D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT = 0x86,
//   D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC = 0x87,
//   D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT = 0x88,
//   D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS = 0x89,
//   D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE = 0x8A,
//   D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS = 0x8B,
//   D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN = 0x8C,
//   D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN = 0x8D,
//   D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT = 0x8E,
//   D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC = 0x8F,
//   D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT = 0x90,
//   D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS = 0x91,
//   D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE = 0x92,
//   D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS = 0x93,
//   D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN = 0x94,
//   D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN = 0x95,
//   D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY = 0x96,
//   D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS = 0x97,
//   D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT = 0x98,
//   D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT = 0x99,
//   D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT = 0x9A,
//   D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS = 0x9B,
//   D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH = 0x9C,
//   D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE = 0x9D,
//   D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE = 0x9E,
//   D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT = 0x9F,
//   D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC = 0xA0,
//   D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE = 0xA1,
//   D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC = 0xA2,
//   D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT = 0xA3,
//   D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC = 0xA4,
//   D3D10_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY = 0xA5,
//   D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE = 0xA6,
//   D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE = 0xA7,
//   D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY = 0xA8,
//   D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE = 0xA9,
//   D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE = 0xAA,
//   D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY = 0xAB,
//   D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE = 0xAC,
//   D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = 0xAD,
//   D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES = 0xAE,
//   D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED = 0xAF,
//   D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL = 0xB0,
//   D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL = 0xB1,
//   D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED = 0xB2,
//   D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT = 0xB3,
//   D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT = 0xB4,
//   D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT = 0xB5,
//   D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT = 0xB6,
//   D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION = 0xB7,
//   D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT = 0xB8,
//   D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE = 0xB9,
//   D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC = 0xBA,
//   D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH = 0xBB,
//   D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS = 0xBC,
//   D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX = 0xBD,
//   D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE = 0xBE,
//   D3D10_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY = 0xBF,
//   D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE = 0xC0,
//   D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE = 0xC1,
//   D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE = 0xC2,
//   D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE = 0xC3,
//   D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP = 0xC4,
//   D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS = 0xC5,
//   D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS = 0xC6,
//   D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC = 0xC7,
//   D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK = 0xC8,
//   D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC = 0xC9,
//   D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP = 0xCA,
//   D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP = 0xCB,
//   D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP = 0xCC,
//   D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC = 0xCD,
//   D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP = 0xCE,
//   D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP = 0xCF,
//   D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP = 0xD0,
//   D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC = 0xD1,
//   D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS = 0xD2,
//   D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC = 0xD3,
//   D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND = 0xD4,
//   D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND = 0xD5,
//   D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP = 0xD6,
//   D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA = 0xD7,
//   D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA = 0xD8,
//   D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA = 0xD9,
//   D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK = 0xDA,
//   D3D10_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS = 0xDB,
//   D3D10_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC = 0xDC,
//   D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER = 0xDD,
//   D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU = 0xDE,
//   D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV = 0xDF,
//   D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW = 0xE0,
//   D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS = 0xE1,
//   D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY = 0xE2,
//   D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC = 0xE3,
//   D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD = 0xE4,
//   D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD = 0xE5,
//   D3D10_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS = 0xE6,
//   D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC = 0xE7,
//   D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY = 0xE8,
//   D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS = 0xE9,
//   D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG = 0xEA,
//   D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC = 0xEB,
//   D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED = 0xEC,
//   D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED = 0xED,
//   D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER = 0xEE,
//   D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE = 0xEF,
//   D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY = 0xF0,
//   D3D10_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER = 0xF1,
//   D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID = 0xF2,
//   D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE = 0xF3,
//   D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED = 0xF4,
//   D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY = 0xF5,
//   D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER = 0xF6,
//   D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0xF7,
//   D3D10_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY = 0xF8,
//   D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY = 0xF9,
//   D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER = 0xFA,
//   D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0xFB,
//   D3D10_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY = 0xFC,
//   D3D10_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER = 0xFD,
//   D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED = 0xFE,
//   D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY = 0xFF,
//   D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER = 0x100,
//   D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x101,
//   D3D10_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY = 0x102,
//   D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT = 0x103,
//   D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR = 0x104,
//   D3D10_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH = 0x105,
//   D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH = 0x106,
//   D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID = 0x107,
//   D3D10_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY = 0x108,
//   D3D10_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY = 0x109,
//   D3D10_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x10A,
//   D3D10_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY = 0x10B,
//   D3D10_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY = 0x10C,
//   D3D10_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x10D,
//   D3D10_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY = 0x10E,
//   D3D10_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY = 0x10F,
//   D3D10_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY = 0x110,
//   D3D10_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x111,
//   D3D10_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY = 0x112,
//   D3D10_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY = 0x113,
//   D3D10_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY = 0x114,
//   D3D10_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID = 0x115,
//   D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE = 0x116,
//   D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE = 0x117,
//   D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX = 0x118,
//   D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE = 0x119,
//   D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE = 0x11A,
//   D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE = 0x11B,
//   D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE = 0x11C,
//   D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE = 0x11D,
//   D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE = 0x11E,
//   D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE = 0x11F,
//   D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX = 0x120,
//   D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE = 0x121,
//   D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID = 0x122,
//   D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID = 0x123,
//   D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID = 0x124,
//   D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID = 0x125,
//   D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID = 0x126,
//   D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE = 0x127,
//   D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS = 0x128,
//   D3D10_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED = 0x129,
//   D3D10_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN = 0x12A,
//   D3D10_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED = 0x12B,
//   D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE = 0x12C,
//   D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE = 0x12D,
//   D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS = 0x12E,
//   D3D10_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED = 0x12F,
//   D3D10_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN = 0x130,
//   D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE = 0x131,
//   D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED = 0x132,
//   D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE = 0x133,
//   D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE = 0x134,
//   D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS = 0x135,
//   D3D10_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED = 0x136,
//   D3D10_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN = 0x137,
//   D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE = 0x138,
//   D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED = 0x139,
//   D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE = 0x13A,
//   D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE = 0x13B,
//   D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS = 0x13C,
//   D3D10_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED = 0x13D,
//   D3D10_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN = 0x13E,
//   D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE = 0x13F,
//   D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED = 0x140,
//   D3D10_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED = 0x141,
//   D3D10_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED = 0x142,
//   D3D10_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS = 0x143,
//   D3D10_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN = 0x144,
//   D3D10_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN = 0x145,
//   D3D10_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE = 0x146,
//   D3D10_MESSAGE_ID_REF_THREADING_MODE = 0x147,
//   D3D10_MESSAGE_ID_REF_UMDRIVER_EXCEPTION = 0x148,
//   D3D10_MESSAGE_ID_REF_KMDRIVER_EXCEPTION = 0x149,
//   D3D10_MESSAGE_ID_REF_HARDWARE_EXCEPTION = 0x14A,
//   D3D10_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE = 0x14B,
//   D3D10_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER = 0x14C,
//   D3D10_MESSAGE_ID_REF_OUT_OF_MEMORY = 0x14D,
//   D3D10_MESSAGE_ID_REF_INFO = 0x14E,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW = 0x14F,
//   D3D10_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW = 0x150,
//   D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW = 0x151,
//   D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW = 0x152,
//   D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW = 0x153,
//   D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW = 0x154,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET = 0x155,
//   D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND = 0x156,
//   D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX = 0x157,
//   D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE = 0x158,
//   D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK = 0x159,
//   D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE = 0x15A,
//   D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS = 0x15B,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET = 0x15C,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET = 0x15D,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET = 0x15E,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL = 0x15F,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET = 0x160,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET = 0x161,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH = 0x162,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL = 0x163,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL = 0x164,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET = 0x165,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID = 0x166,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL = 0x167,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH = 0x168,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH = 0x169,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT = 0x16A,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET = 0x16B,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED = 0x16C,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY = 0x16D,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED = 0x16E,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED = 0x16F,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED = 0x170,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED = 0x171,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED = 0x172,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED = 0x173,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED = 0x174,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED = 0x175,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE = 0x176,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER = 0x177,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING = 0x178,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 = 0x179,
//   D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT = 0x17A,
//   D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT = 0x17B,
//   D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT = 0x17C,
//   D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN = 0x17D,
//   D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN = 0x17E,
//   D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN = 0x17F,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET = 0x180,
//   D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC = 0x181,
//   D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC = 0x182,
//   D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH = 0x183,
//   D3D10_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW = 0x184,
//   D3D10_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS = 0x185,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH = 0x186,
//   D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH = 0x187,
//   D3D10_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY = 0x188,
//   D3D10_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY = 0x189,
//   D3D10_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN = 0x18A,
//   D3D10_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN = 0x18B,
//   D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER = 0x18C,
//   D3D10_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED = 0x18D,
//   D3D10_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 0x18E,
//   D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN = 0x18F,
//   D3D10_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN = 0x190,
//   D3D10_MESSAGE_ID_CREATECOUNTER_NULLDESC = 0x191,
//   D3D10_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER = 0x192,
//   D3D10_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 0x193,
//   D3D10_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE = 0x194,
//   D3D10_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED = 0x195,
//   D3D10_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION = 0x196,
//   D3D10_MESSAGE_ID_QUERY_BEGIN_DUPLICATE = 0x197,
//   D3D10_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS = 0x198,
//   D3D10_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION = 0x199,
//   D3D10_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS = 0x19A,
//   D3D10_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN = 0x19B,
//   D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE = 0x19C,
//   D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS = 0x19D,
//   D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL = 0x19E,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH = 0x19F,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED = 0x1A0,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN = 0x1A1,
//   D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE = 0x1A2,
//   D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE = 0x1A3,
//   D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT = 0x1A4,
//   D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH = 0x1A5,
//   D3D10_MESSAGE_ID_D3D10_MESSAGES_END = 0x1A6,
//   D3D10_MESSAGE_ID_D3D10L9_MESSAGES_START = 0x100000,
//   D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED = 0x100001,
//   D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED = 0x100002,
//   D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT = 0x100003,
//   D3D10_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY = 0x100004,
//   D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE = 0x100005,
//   D3D10_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED = 0x100006,
//   D3D10_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS = 0x100007,
//   D3D10_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS = 0x100008,
//   D3D10_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS = 0x100009,
//   D3D10_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND = 0x10000A,
//   D3D10_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D = 0x10000B,
//   D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE = 0x10000C,
//   D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE = 0x10000D,
//   D3D10_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS = 0x10000E,
//   D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS = 0x10000F,
//   D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX = 0x100010,
//   D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS = 0x100011,
//   D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED = 0x100012,
//   D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS = 0x100013,
//   D3D10_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY = 0x100014,
//   D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK = 0x100015,
//   D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK = 0x100016,
//   D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT = 0x100017,
//   D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE = 0x100018,
//   D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE = 0x100019,
//   D3D10_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE = 0x10001A,
//   D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD = 0x10001B,
//   D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL = 0x10001C,
//   D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX = 0x10001D,
//   D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO = 0x10001E,
//   D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES = 0x10001F,
//   D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET = 0x100020,
//   D3D10_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER = 0x100021,
//   D3D10_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE = 0x100022,
//   D3D10_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE = 0x100023,
//   D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE = 0x100024,
//   D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS = 0x100025,
//   D3D10_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT = 0x100026,
//   D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS = 0x100027,
//   D3D10_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES = 0x100028,
//   D3D10_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED = 0x100029,
//   D3D10_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED = 0x10002A,
//   D3D10_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED = 0x10002B,
//   D3D10_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED = 0x10002C,
//   D3D10_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED = 0x10002D,
//   D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND = 0x10002E,
//   D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND = 0x10002F,
//   D3D10_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED = 0x100030,
//   D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE = 0x100031,
//   D3D10_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED = 0x100032,
//   D3D10_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 = 0x100033,
//   D3D10_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED = 0x100034,
//   D3D10_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO = 0x100035,
//   D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION = 0x100036,
//   D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED = 0x100037,
//   D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR = 0x100038,
//   D3D10_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA = 0x100039,
//   D3D10_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP = 0x10003A,
//   D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED = 0x10003B,
//   D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT = 0x10003C,
//   D3D10_MESSAGE_ID_D3D10L9_MESSAGES_END = 0x10003D,
// };

// /* 1012 */
// enum _D3D_INCLUDE_TYPE : __int32
// {
//   D3D_INCLUDE_LOCAL = 0x0,
//   D3D_INCLUDE_SYSTEM = 0x1,
//   D3D10_INCLUDE_LOCAL = 0x0,
//   D3D10_INCLUDE_SYSTEM = 0x1,
//   D3D_INCLUDE_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 1013 */
// enum _D3D_SHADER_VARIABLE_CLASS : __int32
// {
//   D3D_SVC_SCALAR = 0x0,
//   D3D_SVC_VECTOR = 0x1,
//   D3D_SVC_MATRIX_ROWS = 0x2,
//   D3D_SVC_MATRIX_COLUMNS = 0x3,
//   D3D_SVC_OBJECT = 0x4,
//   D3D_SVC_STRUCT = 0x5,
//   D3D_SVC_INTERFACE_CLASS = 0x6,
//   D3D_SVC_INTERFACE_POINTER = 0x7,
//   D3D10_SVC_SCALAR = 0x0,
//   D3D10_SVC_VECTOR = 0x1,
//   D3D10_SVC_MATRIX_ROWS = 0x2,
//   D3D10_SVC_MATRIX_COLUMNS = 0x3,
//   D3D10_SVC_OBJECT = 0x4,
//   D3D10_SVC_STRUCT = 0x5,
//   D3D11_SVC_INTERFACE_CLASS = 0x6,
//   D3D11_SVC_INTERFACE_POINTER = 0x7,
//   D3D_SVC_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 1014 */
// enum D3D11_DSV_DIMENSION : __int32
// {
//   D3D11_DSV_DIMENSION_UNKNOWN = 0x0,
//   D3D11_DSV_DIMENSION_TEXTURE1D = 0x1,
//   D3D11_DSV_DIMENSION_TEXTURE1DARRAY = 0x2,
//   D3D11_DSV_DIMENSION_TEXTURE2D = 0x3,
//   D3D11_DSV_DIMENSION_TEXTURE2DARRAY = 0x4,
//   D3D11_DSV_DIMENSION_TEXTURE2DMS = 0x5,
//   D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY = 0x6,
// };

// /* 1015 */
// enum D3D11_RTV_DIMENSION : __int32
// {
//   D3D11_RTV_DIMENSION_UNKNOWN = 0x0,
//   D3D11_RTV_DIMENSION_BUFFER = 0x1,
//   D3D11_RTV_DIMENSION_TEXTURE1D = 0x2,
//   D3D11_RTV_DIMENSION_TEXTURE1DARRAY = 0x3,
//   D3D11_RTV_DIMENSION_TEXTURE2D = 0x4,
//   D3D11_RTV_DIMENSION_TEXTURE2DARRAY = 0x5,
//   D3D11_RTV_DIMENSION_TEXTURE2DMS = 0x6,
//   D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY = 0x7,
//   D3D11_RTV_DIMENSION_TEXTURE3D = 0x8,
// };

// /* 1016 */
// enum _D3D_SHADER_VARIABLE_FLAGS : __int32
// {
//   D3D_SVF_USERPACKED = 0x1,
//   D3D_SVF_USED = 0x2,
//   D3D_SVF_INTERFACE_POINTER = 0x4,
//   D3D_SVF_INTERFACE_PARAMETER = 0x8,
//   D3D10_SVF_USERPACKED = 0x1,
//   D3D10_SVF_USED = 0x2,
//   D3D11_SVF_INTERFACE_POINTER = 0x4,
//   D3D11_SVF_INTERFACE_PARAMETER = 0x8,
//   D3D_SVF_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 1017 */
// enum D3D11_UAV_DIMENSION : __int32
// {
//   D3D11_UAV_DIMENSION_UNKNOWN = 0x0,
//   D3D11_UAV_DIMENSION_BUFFER = 0x1,
//   D3D11_UAV_DIMENSION_TEXTURE1D = 0x2,
//   D3D11_UAV_DIMENSION_TEXTURE1DARRAY = 0x3,
//   D3D11_UAV_DIMENSION_TEXTURE2D = 0x4,
//   D3D11_UAV_DIMENSION_TEXTURE2DARRAY = 0x5,
//   D3D11_UAV_DIMENSION_TEXTURE3D = 0x8,
// };

// /* 1018 */
// enum _D3D_SHADER_VARIABLE_TYPE : __int32
// {
//   D3D_SVT_VOID = 0x0,
//   D3D_SVT_BOOL = 0x1,
//   D3D_SVT_INT = 0x2,
//   D3D_SVT_FLOAT = 0x3,
//   D3D_SVT_STRING = 0x4,
//   D3D_SVT_TEXTURE = 0x5,
//   D3D_SVT_TEXTURE1D = 0x6,
//   D3D_SVT_TEXTURE2D = 0x7,
//   D3D_SVT_TEXTURE3D = 0x8,
//   D3D_SVT_TEXTURECUBE = 0x9,
//   D3D_SVT_SAMPLER = 0xA,
//   D3D_SVT_SAMPLER1D = 0xB,
//   D3D_SVT_SAMPLER2D = 0xC,
//   D3D_SVT_SAMPLER3D = 0xD,
//   D3D_SVT_SAMPLERCUBE = 0xE,
//   D3D_SVT_PIXELSHADER = 0xF,
//   D3D_SVT_VERTEXSHADER = 0x10,
//   D3D_SVT_PIXELFRAGMENT = 0x11,
//   D3D_SVT_VERTEXFRAGMENT = 0x12,
//   D3D_SVT_UINT = 0x13,
//   D3D_SVT_UINT8 = 0x14,
//   D3D_SVT_GEOMETRYSHADER = 0x15,
//   D3D_SVT_RASTERIZER = 0x16,
//   D3D_SVT_DEPTHSTENCIL = 0x17,
//   D3D_SVT_BLEND = 0x18,
//   D3D_SVT_BUFFER = 0x19,
//   D3D_SVT_CBUFFER = 0x1A,
//   D3D_SVT_TBUFFER = 0x1B,
//   D3D_SVT_TEXTURE1DARRAY = 0x1C,
//   D3D_SVT_TEXTURE2DARRAY = 0x1D,
//   D3D_SVT_RENDERTARGETVIEW = 0x1E,
//   D3D_SVT_DEPTHSTENCILVIEW = 0x1F,
//   D3D_SVT_TEXTURE2DMS = 0x20,
//   D3D_SVT_TEXTURE2DMSARRAY = 0x21,
//   D3D_SVT_TEXTURECUBEARRAY = 0x22,
//   D3D_SVT_HULLSHADER = 0x23,
//   D3D_SVT_DOMAINSHADER = 0x24,
//   D3D_SVT_INTERFACE_POINTER = 0x25,
//   D3D_SVT_COMPUTESHADER = 0x26,
//   D3D_SVT_DOUBLE = 0x27,
//   D3D_SVT_RWTEXTURE1D = 0x28,
//   D3D_SVT_RWTEXTURE1DARRAY = 0x29,
//   D3D_SVT_RWTEXTURE2D = 0x2A,
//   D3D_SVT_RWTEXTURE2DARRAY = 0x2B,
//   D3D_SVT_RWTEXTURE3D = 0x2C,
//   D3D_SVT_RWBUFFER = 0x2D,
//   D3D_SVT_BYTEADDRESS_BUFFER = 0x2E,
//   D3D_SVT_RWBYTEADDRESS_BUFFER = 0x2F,
//   D3D_SVT_STRUCTURED_BUFFER = 0x30,
//   D3D_SVT_RWSTRUCTURED_BUFFER = 0x31,
//   D3D_SVT_APPEND_STRUCTURED_BUFFER = 0x32,
//   D3D_SVT_CONSUME_STRUCTURED_BUFFER = 0x33,
//   D3D10_SVT_VOID = 0x0,
//   D3D10_SVT_BOOL = 0x1,
//   D3D10_SVT_INT = 0x2,
//   D3D10_SVT_FLOAT = 0x3,
//   D3D10_SVT_STRING = 0x4,
//   D3D10_SVT_TEXTURE = 0x5,
//   D3D10_SVT_TEXTURE1D = 0x6,
//   D3D10_SVT_TEXTURE2D = 0x7,
//   D3D10_SVT_TEXTURE3D = 0x8,
//   D3D10_SVT_TEXTURECUBE = 0x9,
//   D3D10_SVT_SAMPLER = 0xA,
//   D3D10_SVT_SAMPLER1D = 0xB,
//   D3D10_SVT_SAMPLER2D = 0xC,
//   D3D10_SVT_SAMPLER3D = 0xD,
//   D3D10_SVT_SAMPLERCUBE = 0xE,
//   D3D10_SVT_PIXELSHADER = 0xF,
//   D3D10_SVT_VERTEXSHADER = 0x10,
//   D3D10_SVT_PIXELFRAGMENT = 0x11,
//   D3D10_SVT_VERTEXFRAGMENT = 0x12,
//   D3D10_SVT_UINT = 0x13,
//   D3D10_SVT_UINT8 = 0x14,
//   D3D10_SVT_GEOMETRYSHADER = 0x15,
//   D3D10_SVT_RASTERIZER = 0x16,
//   D3D10_SVT_DEPTHSTENCIL = 0x17,
//   D3D10_SVT_BLEND = 0x18,
//   D3D10_SVT_BUFFER = 0x19,
//   D3D10_SVT_CBUFFER = 0x1A,
//   D3D10_SVT_TBUFFER = 0x1B,
//   D3D10_SVT_TEXTURE1DARRAY = 0x1C,
//   D3D10_SVT_TEXTURE2DARRAY = 0x1D,
//   D3D10_SVT_RENDERTARGETVIEW = 0x1E,
//   D3D10_SVT_DEPTHSTENCILVIEW = 0x1F,
//   D3D10_SVT_TEXTURE2DMS = 0x20,
//   D3D10_SVT_TEXTURE2DMSARRAY = 0x21,
//   D3D10_SVT_TEXTURECUBEARRAY = 0x22,
//   D3D11_SVT_HULLSHADER = 0x23,
//   D3D11_SVT_DOMAINSHADER = 0x24,
//   D3D11_SVT_INTERFACE_POINTER = 0x25,
//   D3D11_SVT_COMPUTESHADER = 0x26,
//   D3D11_SVT_DOUBLE = 0x27,
//   D3D11_SVT_RWTEXTURE1D = 0x28,
//   D3D11_SVT_RWTEXTURE1DARRAY = 0x29,
//   D3D11_SVT_RWTEXTURE2D = 0x2A,
//   D3D11_SVT_RWTEXTURE2DARRAY = 0x2B,
//   D3D11_SVT_RWTEXTURE3D = 0x2C,
//   D3D11_SVT_RWBUFFER = 0x2D,
//   D3D11_SVT_BYTEADDRESS_BUFFER = 0x2E,
//   D3D11_SVT_RWBYTEADDRESS_BUFFER = 0x2F,
//   D3D11_SVT_STRUCTURED_BUFFER = 0x30,
//   D3D11_SVT_RWSTRUCTURED_BUFFER = 0x31,
//   D3D11_SVT_APPEND_STRUCTURED_BUFFER = 0x32,
//   D3D11_SVT_CONSUME_STRUCTURED_BUFFER = 0x33,
//   D3D_SVT_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 1019 */
// enum D3D11_USAGE : __int32
// {
//   D3D11_USAGE_DEFAULT = 0x0,
//   D3D11_USAGE_IMMUTABLE = 0x1,
//   D3D11_USAGE_DYNAMIC = 0x2,
//   D3D11_USAGE_STAGING = 0x3,
// };

// /* 1020 */
// enum D2D1_CAP_STYLE : __int32
// {
//   D2D1_CAP_STYLE_FLAT = 0x0,
//   D2D1_CAP_STYLE_SQUARE = 0x1,
//   D2D1_CAP_STYLE_ROUND = 0x2,
//   D2D1_CAP_STYLE_TRIANGLE = 0x3,
//   D2D1_CAP_STYLE_FORCE_DWORD = 0xFFFFFFFF,
// };

// /* 1021 */
// enum D3D11_COUNTER_TYPE : __int32
// {
//   D3D11_COUNTER_TYPE_FLOAT32 = 0x0,
//   D3D11_COUNTER_TYPE_UINT16 = 0x1,
//   D3D11_COUNTER_TYPE_UINT32 = 0x2,
//   D3D11_COUNTER_TYPE_UINT64 = 0x3,
// };

// /* 1022 */
// enum D2D1_DASH_STYLE : __int32
// {
//   D2D1_DASH_STYLE_SOLID = 0x0,
//   D2D1_DASH_STYLE_DASH = 0x1,
//   D2D1_DASH_STYLE_DOT = 0x2,
//   D2D1_DASH_STYLE_DASH_DOT = 0x3,
//   D2D1_DASH_STYLE_DASH_DOT_DOT = 0x4,
//   D2D1_DASH_STYLE_CUSTOM = 0x5,
//   D2D1_DASH_STYLE_FORCE_DWORD = 0xFFFFFFFF,
// };

// /* 1023 */
// enum D2D1_LINE_JOIN : __int32
// {
//   D2D1_LINE_JOIN_MITER = 0x0,
//   D2D1_LINE_JOIN_BEVEL = 0x1,
//   D2D1_LINE_JOIN_ROUND = 0x2,
//   D2D1_LINE_JOIN_MITER_OR_BEVEL = 0x3,
//   D2D1_LINE_JOIN_FORCE_DWORD = 0xFFFFFFFF,
// };

// /* 1024 */
// enum _D3D_SHADER_INPUT_FLAGS : __int32
// {
//   D3D_SIF_USERPACKED = 0x1,
//   D3D_SIF_COMPARISON_SAMPLER = 0x2,
//   D3D_SIF_TEXTURE_COMPONENT_0 = 0x4,
//   D3D_SIF_TEXTURE_COMPONENT_1 = 0x8,
//   D3D_SIF_TEXTURE_COMPONENTS = 0xC,
//   D3D10_SIF_USERPACKED = 0x1,
//   D3D10_SIF_COMPARISON_SAMPLER = 0x2,
//   D3D10_SIF_TEXTURE_COMPONENT_0 = 0x4,
//   D3D10_SIF_TEXTURE_COMPONENT_1 = 0x8,
//   D3D10_SIF_TEXTURE_COMPONENTS = 0xC,
//   D3D_SIF_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 1025 */
// enum _D3D_SHADER_INPUT_TYPE : __int32
// {
//   D3D_SIT_CBUFFER = 0x0,
//   D3D_SIT_TBUFFER = 0x1,
//   D3D_SIT_TEXTURE = 0x2,
//   D3D_SIT_SAMPLER = 0x3,
//   D3D_SIT_UAV_RWTYPED = 0x4,
//   D3D_SIT_STRUCTURED = 0x5,
//   D3D_SIT_UAV_RWSTRUCTURED = 0x6,
//   D3D_SIT_BYTEADDRESS = 0x7,
//   D3D_SIT_UAV_RWBYTEADDRESS = 0x8,
//   D3D_SIT_UAV_APPEND_STRUCTURED = 0x9,
//   D3D_SIT_UAV_CONSUME_STRUCTURED = 0xA,
//   D3D_SIT_UAV_RWSTRUCTURED_WITH_COUNTER = 0xB,
//   D3D10_SIT_CBUFFER = 0x0,
//   D3D10_SIT_TBUFFER = 0x1,
//   D3D10_SIT_TEXTURE = 0x2,
//   D3D10_SIT_SAMPLER = 0x3,
//   D3D11_SIT_UAV_RWTYPED = 0x4,
//   D3D11_SIT_STRUCTURED = 0x5,
//   D3D11_SIT_UAV_RWSTRUCTURED = 0x6,
//   D3D11_SIT_BYTEADDRESS = 0x7,
//   D3D11_SIT_UAV_RWBYTEADDRESS = 0x8,
//   D3D11_SIT_UAV_APPEND_STRUCTURED = 0x9,
//   D3D11_SIT_UAV_CONSUME_STRUCTURED = 0xA,
//   D3D11_SIT_UAV_RWSTRUCTURED_WITH_COUNTER = 0xB,
// };

// /* 1026 */
// enum _D3D_SHADER_CBUFFER_FLAGS : __int32
// {
//   D3D_CBF_USERPACKED = 0x1,
//   D3D10_CBF_USERPACKED = 0x1,
//   D3D_CBF_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 1027 */
// enum _D3D_CBUFFER_TYPE : __int32
// {
//   D3D_CT_CBUFFER = 0x0,
//   D3D_CT_TBUFFER = 0x1,
//   D3D_CT_INTERFACE_POINTERS = 0x2,
//   D3D_CT_RESOURCE_BIND_INFO = 0x3,
//   D3D10_CT_CBUFFER = 0x0,
//   D3D10_CT_TBUFFER = 0x1,
//   D3D11_CT_CBUFFER = 0x0,
//   D3D11_CT_TBUFFER = 0x1,
//   D3D11_CT_INTERFACE_POINTERS = 0x2,
//   D3D11_CT_RESOURCE_BIND_INFO = 0x3,
// };

// /* 1028 */
// enum D3D11_COMPARISON_FUNC : __int32
// {
//   D3D11_COMPARISON_NEVER = 0x1,
//   D3D11_COMPARISON_LESS = 0x2,
//   D3D11_COMPARISON_EQUAL = 0x3,
//   D3D11_COMPARISON_LESS_EQUAL = 0x4,
//   D3D11_COMPARISON_GREATER = 0x5,
//   D3D11_COMPARISON_NOT_EQUAL = 0x6,
//   D3D11_COMPARISON_GREATER_EQUAL = 0x7,
//   D3D11_COMPARISON_ALWAYS = 0x8,
// };

// /* 1029 */
// enum D3D_NAME : __int32
// {
//   D3D_NAME_UNDEFINED = 0x0,
//   D3D_NAME_POSITION = 0x1,
//   D3D_NAME_CLIP_DISTANCE = 0x2,
//   D3D_NAME_CULL_DISTANCE = 0x3,
//   D3D_NAME_RENDER_TARGET_ARRAY_INDEX = 0x4,
//   D3D_NAME_VIEWPORT_ARRAY_INDEX = 0x5,
//   D3D_NAME_VERTEX_ID = 0x6,
//   D3D_NAME_PRIMITIVE_ID = 0x7,
//   D3D_NAME_INSTANCE_ID = 0x8,
//   D3D_NAME_IS_FRONT_FACE = 0x9,
//   D3D_NAME_SAMPLE_INDEX = 0xA,
//   D3D_NAME_FINAL_QUAD_EDGE_TESSFACTOR = 0xB,
//   D3D_NAME_FINAL_QUAD_INSIDE_TESSFACTOR = 0xC,
//   D3D_NAME_FINAL_TRI_EDGE_TESSFACTOR = 0xD,
//   D3D_NAME_FINAL_TRI_INSIDE_TESSFACTOR = 0xE,
//   D3D_NAME_FINAL_LINE_DETAIL_TESSFACTOR = 0xF,
//   D3D_NAME_FINAL_LINE_DENSITY_TESSFACTOR = 0x10,
//   D3D_NAME_TARGET = 0x40,
//   D3D_NAME_DEPTH = 0x41,
//   D3D_NAME_COVERAGE = 0x42,
//   D3D_NAME_DEPTH_GREATER_EQUAL = 0x43,
//   D3D_NAME_DEPTH_LESS_EQUAL = 0x44,
//   D3D10_NAME_UNDEFINED = 0x0,
//   D3D10_NAME_POSITION = 0x1,
//   D3D10_NAME_CLIP_DISTANCE = 0x2,
//   D3D10_NAME_CULL_DISTANCE = 0x3,
//   D3D10_NAME_RENDER_TARGET_ARRAY_INDEX = 0x4,
//   D3D10_NAME_VIEWPORT_ARRAY_INDEX = 0x5,
//   D3D10_NAME_VERTEX_ID = 0x6,
//   D3D10_NAME_PRIMITIVE_ID = 0x7,
//   D3D10_NAME_INSTANCE_ID = 0x8,
//   D3D10_NAME_IS_FRONT_FACE = 0x9,
//   D3D10_NAME_SAMPLE_INDEX = 0xA,
//   D3D10_NAME_TARGET = 0x40,
//   D3D10_NAME_DEPTH = 0x41,
//   D3D10_NAME_COVERAGE = 0x42,
//   D3D11_NAME_FINAL_QUAD_EDGE_TESSFACTOR = 0xB,
//   D3D11_NAME_FINAL_QUAD_INSIDE_TESSFACTOR = 0xC,
//   D3D11_NAME_FINAL_TRI_EDGE_TESSFACTOR = 0xD,
//   D3D11_NAME_FINAL_TRI_INSIDE_TESSFACTOR = 0xE,
//   D3D11_NAME_FINAL_LINE_DETAIL_TESSFACTOR = 0xF,
//   D3D11_NAME_FINAL_LINE_DENSITY_TESSFACTOR = 0x10,
//   D3D11_NAME_DEPTH_GREATER_EQUAL = 0x43,
//   D3D11_NAME_DEPTH_LESS_EQUAL = 0x44,
// };

// /* 1030 */
// enum D3D11_FEATURE : __int32
// {
//   D3D11_FEATURE_THREADING = 0x0,
//   D3D11_FEATURE_DOUBLES = 0x1,
//   D3D11_FEATURE_FORMAT_SUPPORT = 0x2,
//   D3D11_FEATURE_FORMAT_SUPPORT2 = 0x3,
//   D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS = 0x4,
// };

// /* 1031 */
// enum D3D11_DEPTH_WRITE_MASK : __int32
// {
//   D3D11_DEPTH_WRITE_MASK_ZERO = 0x0,
//   D3D11_DEPTH_WRITE_MASK_ALL = 0x1,
// };

// /* 1032 */
// enum D3D11_STENCIL_OP : __int32
// {
//   D3D11_STENCIL_OP_KEEP = 0x1,
//   D3D11_STENCIL_OP_ZERO = 0x2,
//   D3D11_STENCIL_OP_REPLACE = 0x3,
//   D3D11_STENCIL_OP_INCR_SAT = 0x4,
//   D3D11_STENCIL_OP_DECR_SAT = 0x5,
//   D3D11_STENCIL_OP_INVERT = 0x6,
//   D3D11_STENCIL_OP_INCR = 0x7,
//   D3D11_STENCIL_OP_DECR = 0x8,
// };

// /* 1033 */
// enum DXGI_FORMAT : __int32
// {
//   DXGI_FORMAT_UNKNOWN = 0x0,
//   DXGI_FORMAT_R32G32B32A32_TYPELESS = 0x1,
//   DXGI_FORMAT_R32G32B32A32_FLOAT = 0x2,
//   DXGI_FORMAT_R32G32B32A32_UINT = 0x3,
//   DXGI_FORMAT_R32G32B32A32_SINT = 0x4,
//   DXGI_FORMAT_R32G32B32_TYPELESS = 0x5,
//   DXGI_FORMAT_R32G32B32_FLOAT = 0x6,
//   DXGI_FORMAT_R32G32B32_UINT = 0x7,
//   DXGI_FORMAT_R32G32B32_SINT = 0x8,
//   DXGI_FORMAT_R16G16B16A16_TYPELESS = 0x9,
//   DXGI_FORMAT_R16G16B16A16_FLOAT = 0xA,
//   DXGI_FORMAT_R16G16B16A16_UNORM = 0xB,
//   DXGI_FORMAT_R16G16B16A16_UINT = 0xC,
//   DXGI_FORMAT_R16G16B16A16_SNORM = 0xD,
//   DXGI_FORMAT_R16G16B16A16_SINT = 0xE,
//   DXGI_FORMAT_R32G32_TYPELESS = 0xF,
//   DXGI_FORMAT_R32G32_FLOAT = 0x10,
//   DXGI_FORMAT_R32G32_UINT = 0x11,
//   DXGI_FORMAT_R32G32_SINT = 0x12,
//   DXGI_FORMAT_R32G8X24_TYPELESS = 0x13,
//   DXGI_FORMAT_D32_FLOAT_S8X24_UINT = 0x14,
//   DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS = 0x15,
//   DXGI_FORMAT_X32_TYPELESS_G8X24_UINT = 0x16,
//   DXGI_FORMAT_R10G10B10A2_TYPELESS = 0x17,
//   DXGI_FORMAT_R10G10B10A2_UNORM = 0x18,
//   DXGI_FORMAT_R10G10B10A2_UINT = 0x19,
//   DXGI_FORMAT_R11G11B10_FLOAT = 0x1A,
//   DXGI_FORMAT_R8G8B8A8_TYPELESS = 0x1B,
//   DXGI_FORMAT_R8G8B8A8_UNORM = 0x1C,
//   DXGI_FORMAT_R8G8B8A8_UNORM_SRGB = 0x1D,
//   DXGI_FORMAT_R8G8B8A8_UINT = 0x1E,
//   DXGI_FORMAT_R8G8B8A8_SNORM = 0x1F,
//   DXGI_FORMAT_R8G8B8A8_SINT = 0x20,
//   DXGI_FORMAT_R16G16_TYPELESS = 0x21,
//   DXGI_FORMAT_R16G16_FLOAT = 0x22,
//   DXGI_FORMAT_R16G16_UNORM = 0x23,
//   DXGI_FORMAT_R16G16_UINT = 0x24,
//   DXGI_FORMAT_R16G16_SNORM = 0x25,
//   DXGI_FORMAT_R16G16_SINT = 0x26,
//   DXGI_FORMAT_R32_TYPELESS = 0x27,
//   DXGI_FORMAT_D32_FLOAT = 0x28,
//   DXGI_FORMAT_R32_FLOAT = 0x29,
//   DXGI_FORMAT_R32_UINT = 0x2A,
//   DXGI_FORMAT_R32_SINT = 0x2B,
//   DXGI_FORMAT_R24G8_TYPELESS = 0x2C,
//   DXGI_FORMAT_D24_UNORM_S8_UINT = 0x2D,
//   DXGI_FORMAT_R24_UNORM_X8_TYPELESS = 0x2E,
//   DXGI_FORMAT_X24_TYPELESS_G8_UINT = 0x2F,
//   DXGI_FORMAT_R8G8_TYPELESS = 0x30,
//   DXGI_FORMAT_R8G8_UNORM = 0x31,
//   DXGI_FORMAT_R8G8_UINT = 0x32,
//   DXGI_FORMAT_R8G8_SNORM = 0x33,
//   DXGI_FORMAT_R8G8_SINT = 0x34,
//   DXGI_FORMAT_R16_TYPELESS = 0x35,
//   DXGI_FORMAT_R16_FLOAT = 0x36,
//   DXGI_FORMAT_D16_UNORM = 0x37,
//   DXGI_FORMAT_R16_UNORM = 0x38,
//   DXGI_FORMAT_R16_UINT = 0x39,
//   DXGI_FORMAT_R16_SNORM = 0x3A,
//   DXGI_FORMAT_R16_SINT = 0x3B,
//   DXGI_FORMAT_R8_TYPELESS = 0x3C,
//   DXGI_FORMAT_R8_UNORM = 0x3D,
//   DXGI_FORMAT_R8_UINT = 0x3E,
//   DXGI_FORMAT_R8_SNORM = 0x3F,
//   DXGI_FORMAT_R8_SINT = 0x40,
//   DXGI_FORMAT_A8_UNORM = 0x41,
//   DXGI_FORMAT_R1_UNORM = 0x42,
//   DXGI_FORMAT_R9G9B9E5_SHAREDEXP = 0x43,
//   DXGI_FORMAT_R8G8_B8G8_UNORM = 0x44,
//   DXGI_FORMAT_G8R8_G8B8_UNORM = 0x45,
//   DXGI_FORMAT_BC1_TYPELESS = 0x46,
//   DXGI_FORMAT_BC1_UNORM = 0x47,
//   DXGI_FORMAT_BC1_UNORM_SRGB = 0x48,
//   DXGI_FORMAT_BC2_TYPELESS = 0x49,
//   DXGI_FORMAT_BC2_UNORM = 0x4A,
//   DXGI_FORMAT_BC2_UNORM_SRGB = 0x4B,
//   DXGI_FORMAT_BC3_TYPELESS = 0x4C,
//   DXGI_FORMAT_BC3_UNORM = 0x4D,
//   DXGI_FORMAT_BC3_UNORM_SRGB = 0x4E,
//   DXGI_FORMAT_BC4_TYPELESS = 0x4F,
//   DXGI_FORMAT_BC4_UNORM = 0x50,
//   DXGI_FORMAT_BC4_SNORM = 0x51,
//   DXGI_FORMAT_BC5_TYPELESS = 0x52,
//   DXGI_FORMAT_BC5_UNORM = 0x53,
//   DXGI_FORMAT_BC5_SNORM = 0x54,
//   DXGI_FORMAT_B5G6R5_UNORM = 0x55,
//   DXGI_FORMAT_B5G5R5A1_UNORM = 0x56,
//   DXGI_FORMAT_B8G8R8A8_UNORM = 0x57,
//   DXGI_FORMAT_B8G8R8X8_UNORM = 0x58,
//   DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 0x59,
//   DXGI_FORMAT_B8G8R8A8_TYPELESS = 0x5A,
//   DXGI_FORMAT_B8G8R8A8_UNORM_SRGB = 0x5B,
//   DXGI_FORMAT_B8G8R8X8_TYPELESS = 0x5C,
//   DXGI_FORMAT_B8G8R8X8_UNORM_SRGB = 0x5D,
//   DXGI_FORMAT_BC6H_TYPELESS = 0x5E,
//   DXGI_FORMAT_BC6H_UF16 = 0x5F,
//   DXGI_FORMAT_BC6H_SF16 = 0x60,
//   DXGI_FORMAT_BC7_TYPELESS = 0x61,
//   DXGI_FORMAT_BC7_UNORM = 0x62,
//   DXGI_FORMAT_BC7_UNORM_SRGB = 0x63,
//   DXGI_FORMAT_FORCE_UINT = 0xFFFFFFFF,
// };

// /* 1034 */
// enum D3D_RESOURCE_RETURN_TYPE : __int32
// {
//   D3D_RETURN_TYPE_UNORM = 0x1,
//   D3D_RETURN_TYPE_SNORM = 0x2,
//   D3D_RETURN_TYPE_SINT = 0x3,
//   D3D_RETURN_TYPE_UINT = 0x4,
//   D3D_RETURN_TYPE_FLOAT = 0x5,
//   D3D_RETURN_TYPE_MIXED = 0x6,
//   D3D_RETURN_TYPE_DOUBLE = 0x7,
//   D3D_RETURN_TYPE_CONTINUED = 0x8,
//   D3D10_RETURN_TYPE_UNORM = 0x1,
//   D3D10_RETURN_TYPE_SNORM = 0x2,
//   D3D10_RETURN_TYPE_SINT = 0x3,
//   D3D10_RETURN_TYPE_UINT = 0x4,
//   D3D10_RETURN_TYPE_FLOAT = 0x5,
//   D3D10_RETURN_TYPE_MIXED = 0x6,
//   D3D11_RETURN_TYPE_UNORM = 0x1,
//   D3D11_RETURN_TYPE_SNORM = 0x2,
//   D3D11_RETURN_TYPE_SINT = 0x3,
//   D3D11_RETURN_TYPE_UINT = 0x4,
//   D3D11_RETURN_TYPE_FLOAT = 0x5,
//   D3D11_RETURN_TYPE_MIXED = 0x6,
//   D3D11_RETURN_TYPE_DOUBLE = 0x7,
//   D3D11_RETURN_TYPE_CONTINUED = 0x8,
// };

// /* 1035 */
// enum D2D1_LAYER_OPTIONS : __int32
// {
//   D2D1_LAYER_OPTIONS_NONE = 0x0,
//   D2D1_LAYER_OPTIONS_INITIALIZE_FOR_CLEARTYPE = 0x1,
//   D2D1_LAYER_OPTIONS_FORCE_DWORD = 0xFFFFFFFF,
// };

// /* 1036 */
// enum D3D_REGISTER_COMPONENT_TYPE : __int32
// {
//   D3D_REGISTER_COMPONENT_UNKNOWN = 0x0,
//   D3D_REGISTER_COMPONENT_UINT32 = 0x1,
//   D3D_REGISTER_COMPONENT_SINT32 = 0x2,
//   D3D_REGISTER_COMPONENT_FLOAT32 = 0x3,
//   D3D10_REGISTER_COMPONENT_UNKNOWN = 0x0,
//   D3D10_REGISTER_COMPONENT_UINT32 = 0x1,
//   D3D10_REGISTER_COMPONENT_SINT32 = 0x2,
//   D3D10_REGISTER_COMPONENT_FLOAT32 = 0x3,
// };

// /* 1037 */
// enum D3D_TESSELLATOR_DOMAIN : __int32
// {
//   D3D_TESSELLATOR_DOMAIN_UNDEFINED = 0x0,
//   D3D_TESSELLATOR_DOMAIN_ISOLINE = 0x1,
//   D3D_TESSELLATOR_DOMAIN_TRI = 0x2,
//   D3D_TESSELLATOR_DOMAIN_QUAD = 0x3,
//   D3D11_TESSELLATOR_DOMAIN_UNDEFINED = 0x0,
//   D3D11_TESSELLATOR_DOMAIN_ISOLINE = 0x1,
//   D3D11_TESSELLATOR_DOMAIN_TRI = 0x2,
//   D3D11_TESSELLATOR_DOMAIN_QUAD = 0x3,
// };

// /* 1038 */
// enum D3D_TESSELLATOR_PARTITIONING : __int32
// {
//   D3D_TESSELLATOR_PARTITIONING_UNDEFINED = 0x0,
//   D3D_TESSELLATOR_PARTITIONING_INTEGER = 0x1,
//   D3D_TESSELLATOR_PARTITIONING_POW2 = 0x2,
//   D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD = 0x3,
//   D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN = 0x4,
//   D3D11_TESSELLATOR_PARTITIONING_UNDEFINED = 0x0,
//   D3D11_TESSELLATOR_PARTITIONING_INTEGER = 0x1,
//   D3D11_TESSELLATOR_PARTITIONING_POW2 = 0x2,
//   D3D11_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD = 0x3,
//   D3D11_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN = 0x4,
// };

// /* 1039 */
// enum D3D_TESSELLATOR_OUTPUT_PRIMITIVE : __int32
// {
//   D3D_TESSELLATOR_OUTPUT_UNDEFINED = 0x0,
//   D3D_TESSELLATOR_OUTPUT_POINT = 0x1,
//   D3D_TESSELLATOR_OUTPUT_LINE = 0x2,
//   D3D_TESSELLATOR_OUTPUT_TRIANGLE_CW = 0x3,
//   D3D_TESSELLATOR_OUTPUT_TRIANGLE_CCW = 0x4,
//   D3D11_TESSELLATOR_OUTPUT_UNDEFINED = 0x0,
//   D3D11_TESSELLATOR_OUTPUT_POINT = 0x1,
//   D3D11_TESSELLATOR_OUTPUT_LINE = 0x2,
//   D3D11_TESSELLATOR_OUTPUT_TRIANGLE_CW = 0x3,
//   D3D11_TESSELLATOR_OUTPUT_TRIANGLE_CCW = 0x4,
// };

// /* 1040 */
// enum D3D11_BLEND : __int32
// {
//   D3D11_BLEND_ZERO = 0x1,
//   D3D11_BLEND_ONE = 0x2,
//   D3D11_BLEND_SRC_COLOR = 0x3,
//   D3D11_BLEND_INV_SRC_COLOR = 0x4,
//   D3D11_BLEND_SRC_ALPHA = 0x5,
//   D3D11_BLEND_INV_SRC_ALPHA = 0x6,
//   D3D11_BLEND_DEST_ALPHA = 0x7,
//   D3D11_BLEND_INV_DEST_ALPHA = 0x8,
//   D3D11_BLEND_DEST_COLOR = 0x9,
//   D3D11_BLEND_INV_DEST_COLOR = 0xA,
//   D3D11_BLEND_SRC_ALPHA_SAT = 0xB,
//   D3D11_BLEND_BLEND_FACTOR = 0xE,
//   D3D11_BLEND_INV_BLEND_FACTOR = 0xF,
//   D3D11_BLEND_SRC1_COLOR = 0x10,
//   D3D11_BLEND_INV_SRC1_COLOR = 0x11,
//   D3D11_BLEND_SRC1_ALPHA = 0x12,
//   D3D11_BLEND_INV_SRC1_ALPHA = 0x13,
// };

// /* 1041 */
// enum D3D10_FEATURE_LEVEL1 : __int32
// {
//   D3D10_FEATURE_LEVEL_10_0 = 0xA000,
//   D3D10_FEATURE_LEVEL_10_1 = 0xA100,
//   D3D10_FEATURE_LEVEL_9_1 = 0x9100,
//   D3D10_FEATURE_LEVEL_9_2 = 0x9200,
//   D3D10_FEATURE_LEVEL_9_3 = 0x9300,
// };

// /* 1042 */
// enum D3D11_BLEND_OP : __int32
// {
//   D3D11_BLEND_OP_ADD = 0x1,
//   D3D11_BLEND_OP_SUBTRACT = 0x2,
//   D3D11_BLEND_OP_REV_SUBTRACT = 0x3,
//   D3D11_BLEND_OP_MIN = 0x4,
//   D3D11_BLEND_OP_MAX = 0x5,
// };

// /* 1043 */
// enum D3D11_COLOR_WRITE_ENABLE : __int32
// {
//   D3D11_COLOR_WRITE_ENABLE_RED = 0x1,
//   D3D11_COLOR_WRITE_ENABLE_GREEN = 0x2,
//   D3D11_COLOR_WRITE_ENABLE_BLUE = 0x4,
//   D3D11_COLOR_WRITE_ENABLE_ALPHA = 0x8,
//   D3D11_COLOR_WRITE_ENABLE_ALL = 0xF,
// };

// /* 1044 */
// enum DWRITE_MEASURING_MODE : __int32
// {
//   DWRITE_MEASURING_MODE_NATURAL = 0x0,
//   DWRITE_MEASURING_MODE_GDI_CLASSIC = 0x1,
//   DWRITE_MEASURING_MODE_GDI_NATURAL = 0x2,
// };

// /* 1045 */
// enum D2D1_RENDER_TARGET_TYPE : __int32
// {
//   D2D1_RENDER_TARGET_TYPE_DEFAULT = 0x0,
//   D2D1_RENDER_TARGET_TYPE_SOFTWARE = 0x1,
//   D2D1_RENDER_TARGET_TYPE_HARDWARE = 0x2,
//   D2D1_RENDER_TARGET_TYPE_FORCE_DWORD = 0xFFFFFFFF,
// };

// /* 1046 */
// enum D2D1_FEATURE_LEVEL : __int32
// {
//   D2D1_FEATURE_LEVEL_DEFAULT = 0x0,
//   D2D1_FEATURE_LEVEL_9 = 0x9100,
//   D2D1_FEATURE_LEVEL_10 = 0xA000,
//   D2D1_FEATURE_LEVEL_FORCE_DWORD = 0xFFFFFFFF,
// };

// /* 1047 */
// enum D2D1_RENDER_TARGET_USAGE : __int32
// {
//   D2D1_RENDER_TARGET_USAGE_NONE = 0x0,
//   D2D1_RENDER_TARGET_USAGE_FORCE_BITMAP_REMOTING = 0x1,
//   D2D1_RENDER_TARGET_USAGE_GDI_COMPATIBLE = 0x2,
//   D2D1_RENDER_TARGET_USAGE_FORCE_DWORD = 0xFFFFFFFF,
// };

// /* 1048 */
// enum D3D10_USAGE : __int32
// {
//   D3D10_USAGE_DEFAULT = 0x0,
//   D3D10_USAGE_IMMUTABLE = 0x1,
//   D3D10_USAGE_DYNAMIC = 0x2,
//   D3D10_USAGE_STAGING = 0x3,
// };

// /* 1049 */
// enum D3D10_QUERY : __int32
// {
//   D3D10_QUERY_EVENT = 0x0,
//   D3D10_QUERY_OCCLUSION = 0x1,
//   D3D10_QUERY_TIMESTAMP = 0x2,
//   D3D10_QUERY_TIMESTAMP_DISJOINT = 0x3,
//   D3D10_QUERY_PIPELINE_STATISTICS = 0x4,
//   D3D10_QUERY_OCCLUSION_PREDICATE = 0x5,
//   D3D10_QUERY_SO_STATISTICS = 0x6,
//   D3D10_QUERY_SO_OVERFLOW_PREDICATE = 0x7,
// };

// /* 1050 */
// enum D2D1_PRESENT_OPTIONS : __int32
// {
//   D2D1_PRESENT_OPTIONS_NONE = 0x0,
//   D2D1_PRESENT_OPTIONS_RETAIN_CONTENTS = 0x1,
//   D2D1_PRESENT_OPTIONS_IMMEDIATELY = 0x2,
//   D2D1_PRESENT_OPTIONS_FORCE_DWORD = 0xFFFFFFFF,
// };

// /* 1051 */
// enum D3D10_COUNTER : __int32
// {
//   D3D10_COUNTER_GPU_IDLE = 0x0,
//   D3D10_COUNTER_VERTEX_PROCESSING = 0x1,
//   D3D10_COUNTER_GEOMETRY_PROCESSING = 0x2,
//   D3D10_COUNTER_PIXEL_PROCESSING = 0x3,
//   D3D10_COUNTER_OTHER_GPU_PROCESSING = 0x4,
//   D3D10_COUNTER_HOST_ADAPTER_BANDWIDTH_UTILIZATION = 0x5,
//   D3D10_COUNTER_LOCAL_VIDMEM_BANDWIDTH_UTILIZATION = 0x6,
//   D3D10_COUNTER_VERTEX_THROUGHPUT_UTILIZATION = 0x7,
//   D3D10_COUNTER_TRIANGLE_SETUP_THROUGHPUT_UTILIZATION = 0x8,
//   D3D10_COUNTER_FILLRATE_THROUGHPUT_UTILIZATION = 0x9,
//   D3D10_COUNTER_VS_MEMORY_LIMITED = 0xA,
//   D3D10_COUNTER_VS_COMPUTATION_LIMITED = 0xB,
//   D3D10_COUNTER_GS_MEMORY_LIMITED = 0xC,
//   D3D10_COUNTER_GS_COMPUTATION_LIMITED = 0xD,
//   D3D10_COUNTER_PS_MEMORY_LIMITED = 0xE,
//   D3D10_COUNTER_PS_COMPUTATION_LIMITED = 0xF,
//   D3D10_COUNTER_POST_TRANSFORM_CACHE_HIT_RATE = 0x10,
//   D3D10_COUNTER_TEXTURE_CACHE_HIT_RATE = 0x11,
//   D3D10_COUNTER_DEVICE_DEPENDENT_0 = 0x40000000,
// };

// /* 1052 */
// enum D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS : __int32
// {
//   D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_NONE = 0x0,
//   D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_GDI_COMPATIBLE = 0x1,
//   D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_FORCE_DWORD = 0xFFFFFFFF,
// };

// /* 1053 */
// enum D3D10_COUNTER_TYPE : __int32
// {
//   D3D10_COUNTER_TYPE_FLOAT32 = 0x0,
//   D3D10_COUNTER_TYPE_UINT16 = 0x1,
//   D3D10_COUNTER_TYPE_UINT32 = 0x2,
//   D3D10_COUNTER_TYPE_UINT64 = 0x3,
// };

// /* 1054 */
// enum _D3DXERR : __int32
// {
//   D3DXERR_CANNOTMODIFYINDEXBUFFER = 0x88760B54,
//   D3DXERR_INVALIDMESH = 0x88760B55,
//   D3DXERR_CANNOTATTRSORT = 0x88760B56,
//   D3DXERR_SKINNINGNOTSUPPORTED = 0x88760B57,
//   D3DXERR_TOOMANYINFLUENCES = 0x88760B58,
//   D3DXERR_INVALIDDATA = 0x88760B59,
//   D3DXERR_LOADEDMESHASNODATA = 0x88760B5A,
//   D3DXERR_DUPLICATENAMEDFRAGMENT = 0x88760B5B,
//   D3DXERR_CANNOTREMOVELASTITEM = 0x88760B5C,
// };

// /* 1055 */
// enum tag_WBEMSTATUS : __int32
// {
//   WBEM_NO_ERROR = 0x0,
//   WBEM_S_NO_ERROR = 0x0,
//   WBEM_S_SAME = 0x0,
//   WBEM_S_FALSE = 0x1,
//   WBEM_S_ALREADY_EXISTS = 0x40001,
//   WBEM_S_RESET_TO_DEFAULT = 0x40002,
//   WBEM_S_DIFFERENT = 0x40003,
//   WBEM_S_TIMEDOUT = 0x40004,
//   WBEM_S_NO_MORE_DATA = 0x40005,
//   WBEM_S_OPERATION_CANCELLED = 0x40006,
//   WBEM_S_PENDING = 0x40007,
//   WBEM_S_DUPLICATE_OBJECTS = 0x40008,
//   WBEM_S_ACCESS_DENIED = 0x40009,
//   WBEM_S_PARTIAL_RESULTS = 0x40010,
//   WBEM_S_SOURCE_NOT_AVAILABLE = 0x40017,
//   WBEM_E_FAILED = 0x80041001,
//   WBEM_E_NOT_FOUND = 0x80041002,
//   WBEM_E_ACCESS_DENIED = 0x80041003,
//   WBEM_E_PROVIDER_FAILURE = 0x80041004,
//   WBEM_E_TYPE_MISMATCH = 0x80041005,
//   WBEM_E_OUT_OF_MEMORY = 0x80041006,
//   WBEM_E_INVALID_CONTEXT = 0x80041007,
//   WBEM_E_INVALID_PARAMETER = 0x80041008,
//   WBEM_E_NOT_AVAILABLE = 0x80041009,
//   WBEM_E_CRITICAL_ERROR = 0x8004100A,
//   WBEM_E_INVALID_STREAM = 0x8004100B,
//   WBEM_E_NOT_SUPPORTED = 0x8004100C,
//   WBEM_E_INVALID_SUPERCLASS = 0x8004100D,
//   WBEM_E_INVALID_NAMESPACE = 0x8004100E,
//   WBEM_E_INVALID_OBJECT = 0x8004100F,
//   WBEM_E_INVALID_CLASS = 0x80041010,
//   WBEM_E_PROVIDER_NOT_FOUND = 0x80041011,
//   WBEM_E_INVALID_PROVIDER_REGISTRATION = 0x80041012,
//   WBEM_E_PROVIDER_LOAD_FAILURE = 0x80041013,
//   WBEM_E_INITIALIZATION_FAILURE = 0x80041014,
//   WBEM_E_TRANSPORT_FAILURE = 0x80041015,
//   WBEM_E_INVALID_OPERATION = 0x80041016,
//   WBEM_E_INVALID_QUERY = 0x80041017,
//   WBEM_E_INVALID_QUERY_TYPE = 0x80041018,
//   WBEM_E_ALREADY_EXISTS = 0x80041019,
//   WBEM_E_OVERRIDE_NOT_ALLOWED = 0x8004101A,
//   WBEM_E_PROPAGATED_QUALIFIER = 0x8004101B,
//   WBEM_E_PROPAGATED_PROPERTY = 0x8004101C,
//   WBEM_E_UNEXPECTED = 0x8004101D,
//   WBEM_E_ILLEGAL_OPERATION = 0x8004101E,
//   WBEM_E_CANNOT_BE_KEY = 0x8004101F,
//   WBEM_E_INCOMPLETE_CLASS = 0x80041020,
//   WBEM_E_INVALID_SYNTAX = 0x80041021,
//   WBEM_E_NONDECORATED_OBJECT = 0x80041022,
//   WBEM_E_READ_ONLY = 0x80041023,
//   WBEM_E_PROVIDER_NOT_CAPABLE = 0x80041024,
//   WBEM_E_CLASS_HAS_CHILDREN = 0x80041025,
//   WBEM_E_CLASS_HAS_INSTANCES = 0x80041026,
//   WBEM_E_QUERY_NOT_IMPLEMENTED = 0x80041027,
//   WBEM_E_ILLEGAL_NULL = 0x80041028,
//   WBEM_E_INVALID_QUALIFIER_TYPE = 0x80041029,
//   WBEM_E_INVALID_PROPERTY_TYPE = 0x8004102A,
//   WBEM_E_VALUE_OUT_OF_RANGE = 0x8004102B,
//   WBEM_E_CANNOT_BE_SINGLETON = 0x8004102C,
//   WBEM_E_INVALID_CIM_TYPE = 0x8004102D,
//   WBEM_E_INVALID_METHOD = 0x8004102E,
//   WBEM_E_INVALID_METHOD_PARAMETERS = 0x8004102F,
//   WBEM_E_SYSTEM_PROPERTY = 0x80041030,
//   WBEM_E_INVALID_PROPERTY = 0x80041031,
//   WBEM_E_CALL_CANCELLED = 0x80041032,
//   WBEM_E_SHUTTING_DOWN = 0x80041033,
//   WBEM_E_PROPAGATED_METHOD = 0x80041034,
//   WBEM_E_UNSUPPORTED_PARAMETER = 0x80041035,
//   WBEM_E_MISSING_PARAMETER_ID = 0x80041036,
//   WBEM_E_INVALID_PARAMETER_ID = 0x80041037,
//   WBEM_E_NONCONSECUTIVE_PARAMETER_IDS = 0x80041038,
//   WBEM_E_PARAMETER_ID_ON_RETVAL = 0x80041039,
//   WBEM_E_INVALID_OBJECT_PATH = 0x8004103A,
//   WBEM_E_OUT_OF_DISK_SPACE = 0x8004103B,
//   WBEM_E_BUFFER_TOO_SMALL = 0x8004103C,
//   WBEM_E_UNSUPPORTED_PUT_EXTENSION = 0x8004103D,
//   WBEM_E_UNKNOWN_OBJECT_TYPE = 0x8004103E,
//   WBEM_E_UNKNOWN_PACKET_TYPE = 0x8004103F,
//   WBEM_E_MARSHAL_VERSION_MISMATCH = 0x80041040,
//   WBEM_E_MARSHAL_INVALID_SIGNATURE = 0x80041041,
//   WBEM_E_INVALID_QUALIFIER = 0x80041042,
//   WBEM_E_INVALID_DUPLICATE_PARAMETER = 0x80041043,
//   WBEM_E_TOO_MUCH_DATA = 0x80041044,
//   WBEM_E_SERVER_TOO_BUSY = 0x80041045,
//   WBEM_E_INVALID_FLAVOR = 0x80041046,
//   WBEM_E_CIRCULAR_REFERENCE = 0x80041047,
//   WBEM_E_UNSUPPORTED_CLASS_UPDATE = 0x80041048,
//   WBEM_E_CANNOT_CHANGE_KEY_INHERITANCE = 0x80041049,
//   WBEM_E_CANNOT_CHANGE_INDEX_INHERITANCE = 0x80041050,
//   WBEM_E_TOO_MANY_PROPERTIES = 0x80041051,
//   WBEM_E_UPDATE_TYPE_MISMATCH = 0x80041052,
//   WBEM_E_UPDATE_OVERRIDE_NOT_ALLOWED = 0x80041053,
//   WBEM_E_UPDATE_PROPAGATED_METHOD = 0x80041054,
//   WBEM_E_METHOD_NOT_IMPLEMENTED = 0x80041055,
//   WBEM_E_METHOD_DISABLED = 0x80041056,
//   WBEM_E_REFRESHER_BUSY = 0x80041057,
//   WBEM_E_UNPARSABLE_QUERY = 0x80041058,
//   WBEM_E_NOT_EVENT_CLASS = 0x80041059,
//   WBEM_E_MISSING_GROUP_WITHIN = 0x8004105A,
//   WBEM_E_MISSING_AGGREGATION_LIST = 0x8004105B,
//   WBEM_E_PROPERTY_NOT_AN_OBJECT = 0x8004105C,
//   WBEM_E_AGGREGATING_BY_OBJECT = 0x8004105D,
//   WBEM_E_UNINTERPRETABLE_PROVIDER_QUERY = 0x8004105F,
//   WBEM_E_BACKUP_RESTORE_WINMGMT_RUNNING = 0x80041060,
//   WBEM_E_QUEUE_OVERFLOW = 0x80041061,
//   WBEM_E_PRIVILEGE_NOT_HELD = 0x80041062,
//   WBEM_E_INVALID_OPERATOR = 0x80041063,
//   WBEM_E_LOCAL_CREDENTIALS = 0x80041064,
//   WBEM_E_CANNOT_BE_ABSTRACT = 0x80041065,
//   WBEM_E_AMENDED_OBJECT = 0x80041066,
//   WBEM_E_CLIENT_TOO_SLOW = 0x80041067,
//   WBEM_E_NULL_SECURITY_DESCRIPTOR = 0x80041068,
//   WBEM_E_TIMED_OUT = 0x80041069,
//   WBEM_E_INVALID_ASSOCIATION = 0x8004106A,
//   WBEM_E_AMBIGUOUS_OPERATION = 0x8004106B,
//   WBEM_E_QUOTA_VIOLATION = 0x8004106C,
//   WBEM_E_RESERVED_001 = 0x8004106D,
//   WBEM_E_RESERVED_002 = 0x8004106E,
//   WBEM_E_UNSUPPORTED_LOCALE = 0x8004106F,
//   WBEM_E_HANDLE_OUT_OF_DATE = 0x80041070,
//   WBEM_E_CONNECTION_FAILED = 0x80041071,
//   WBEM_E_INVALID_HANDLE_REQUEST = 0x80041072,
//   WBEM_E_PROPERTY_NAME_TOO_WIDE = 0x80041073,
//   WBEM_E_CLASS_NAME_TOO_WIDE = 0x80041074,
//   WBEM_E_METHOD_NAME_TOO_WIDE = 0x80041075,
//   WBEM_E_QUALIFIER_NAME_TOO_WIDE = 0x80041076,
//   WBEM_E_RERUN_COMMAND = 0x80041077,
//   WBEM_E_DATABASE_VER_MISMATCH = 0x80041078,
//   WBEM_E_VETO_DELETE = 0x80041079,
//   WBEM_E_VETO_PUT = 0x8004107A,
//   WBEM_E_INVALID_LOCALE = 0x80041080,
//   WBEM_E_PROVIDER_SUSPENDED = 0x80041081,
//   WBEM_E_SYNCHRONIZATION_REQUIRED = 0x80041082,
//   WBEM_E_NO_SCHEMA = 0x80041083,
//   WBEM_E_PROVIDER_ALREADY_REGISTERED = 0x80041084,
//   WBEM_E_PROVIDER_NOT_REGISTERED = 0x80041085,
//   WBEM_E_FATAL_TRANSPORT_ERROR = 0x80041086,
//   WBEM_E_ENCRYPTED_CONNECTION_REQUIRED = 0x80041087,
//   WBEM_E_PROVIDER_TIMED_OUT = 0x80041088,
//   WBEM_E_NO_KEY = 0x80041089,
//   WBEM_E_PROVIDER_DISABLED = 0x8004108A,
//   WBEMESS_E_REGISTRATION_TOO_BROAD = 0x80042001,
//   WBEMESS_E_REGISTRATION_TOO_PRECISE = 0x80042002,
//   WBEMESS_E_AUTHZ_NOT_PRIVILEGED = 0x80042003,
//   WBEMMOF_E_EXPECTED_QUALIFIER_NAME = 0x80044001,
//   WBEMMOF_E_EXPECTED_SEMI = 0x80044002,
//   WBEMMOF_E_EXPECTED_OPEN_BRACE = 0x80044003,
//   WBEMMOF_E_EXPECTED_CLOSE_BRACE = 0x80044004,
//   WBEMMOF_E_EXPECTED_CLOSE_BRACKET = 0x80044005,
//   WBEMMOF_E_EXPECTED_CLOSE_PAREN = 0x80044006,
//   WBEMMOF_E_ILLEGAL_CONSTANT_VALUE = 0x80044007,
//   WBEMMOF_E_EXPECTED_TYPE_IDENTIFIER = 0x80044008,
//   WBEMMOF_E_EXPECTED_OPEN_PAREN = 0x80044009,
//   WBEMMOF_E_UNRECOGNIZED_TOKEN = 0x8004400A,
//   WBEMMOF_E_UNRECOGNIZED_TYPE = 0x8004400B,
//   WBEMMOF_E_EXPECTED_PROPERTY_NAME = 0x8004400C,
//   WBEMMOF_E_TYPEDEF_NOT_SUPPORTED = 0x8004400D,
//   WBEMMOF_E_UNEXPECTED_ALIAS = 0x8004400E,
//   WBEMMOF_E_UNEXPECTED_ARRAY_INIT = 0x8004400F,
//   WBEMMOF_E_INVALID_AMENDMENT_SYNTAX = 0x80044010,
//   WBEMMOF_E_INVALID_DUPLICATE_AMENDMENT = 0x80044011,
//   WBEMMOF_E_INVALID_PRAGMA = 0x80044012,
//   WBEMMOF_E_INVALID_NAMESPACE_SYNTAX = 0x80044013,
//   WBEMMOF_E_EXPECTED_CLASS_NAME = 0x80044014,
//   WBEMMOF_E_TYPE_MISMATCH = 0x80044015,
//   WBEMMOF_E_EXPECTED_ALIAS_NAME = 0x80044016,
//   WBEMMOF_E_INVALID_CLASS_DECLARATION = 0x80044017,
//   WBEMMOF_E_INVALID_INSTANCE_DECLARATION = 0x80044018,
//   WBEMMOF_E_EXPECTED_DOLLAR = 0x80044019,
//   WBEMMOF_E_CIMTYPE_QUALIFIER = 0x8004401A,
//   WBEMMOF_E_DUPLICATE_PROPERTY = 0x8004401B,
//   WBEMMOF_E_INVALID_NAMESPACE_SPECIFICATION = 0x8004401C,
//   WBEMMOF_E_OUT_OF_RANGE = 0x8004401D,
//   WBEMMOF_E_INVALID_FILE = 0x8004401E,
//   WBEMMOF_E_ALIASES_IN_EMBEDDED = 0x8004401F,
//   WBEMMOF_E_NULL_ARRAY_ELEM = 0x80044020,
//   WBEMMOF_E_DUPLICATE_QUALIFIER = 0x80044021,
//   WBEMMOF_E_EXPECTED_FLAVOR_TYPE = 0x80044022,
//   WBEMMOF_E_INCOMPATIBLE_FLAVOR_TYPES = 0x80044023,
//   WBEMMOF_E_MULTIPLE_ALIASES = 0x80044024,
//   WBEMMOF_E_INCOMPATIBLE_FLAVOR_TYPES2 = 0x80044025,
//   WBEMMOF_E_NO_ARRAYS_RETURNED = 0x80044026,
//   WBEMMOF_E_MUST_BE_IN_OR_OUT = 0x80044027,
//   WBEMMOF_E_INVALID_FLAGS_SYNTAX = 0x80044028,
//   WBEMMOF_E_EXPECTED_BRACE_OR_BAD_TYPE = 0x80044029,
//   WBEMMOF_E_UNSUPPORTED_CIMV22_QUAL_VALUE = 0x8004402A,
//   WBEMMOF_E_UNSUPPORTED_CIMV22_DATA_TYPE = 0x8004402B,
//   WBEMMOF_E_INVALID_DELETEINSTANCE_SYNTAX = 0x8004402C,
//   WBEMMOF_E_INVALID_QUALIFIER_SYNTAX = 0x8004402D,
//   WBEMMOF_E_QUALIFIER_USED_OUTSIDE_SCOPE = 0x8004402E,
//   WBEMMOF_E_ERROR_CREATING_TEMP_FILE = 0x8004402F,
//   WBEMMOF_E_ERROR_INVALID_INCLUDE_FILE = 0x80044030,
//   WBEMMOF_E_INVALID_DELETECLASS_SYNTAX = 0x80044031,
// };

// /* 1056 */
// enum D3D_DRIVER_TYPE : __int32
// {
//   D3D_DRIVER_TYPE_UNKNOWN = 0x0,
//   D3D_DRIVER_TYPE_HARDWARE = 0x1,
//   D3D_DRIVER_TYPE_REFERENCE = 0x2,
//   D3D_DRIVER_TYPE_NULL = 0x3,
//   D3D_DRIVER_TYPE_SOFTWARE = 0x4,
//   D3D_DRIVER_TYPE_WARP = 0x5,
// };

// /* 1057 */
// enum D3D_PRIMITIVE_TOPOLOGY : __int32
// {
//   D3D_PRIMITIVE_TOPOLOGY_UNDEFINED = 0x0,
//   D3D_PRIMITIVE_TOPOLOGY_POINTLIST = 0x1,
//   D3D_PRIMITIVE_TOPOLOGY_LINELIST = 0x2,
//   D3D_PRIMITIVE_TOPOLOGY_LINESTRIP = 0x3,
//   D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST = 0x4,
//   D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 0x5,
//   D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 0xA,
//   D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 0xB,
//   D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 0xC,
//   D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 0xD,
//   D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST = 0x21,
//   D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST = 0x22,
//   D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST = 0x23,
//   D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST = 0x24,
//   D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST = 0x25,
//   D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST = 0x26,
//   D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST = 0x27,
//   D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST = 0x28,
//   D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST = 0x29,
//   D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST = 0x2A,
//   D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST = 0x2B,
//   D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST = 0x2C,
//   D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST = 0x2D,
//   D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST = 0x2E,
//   D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST = 0x2F,
//   D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST = 0x30,
//   D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST = 0x31,
//   D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST = 0x32,
//   D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST = 0x33,
//   D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST = 0x34,
//   D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST = 0x35,
//   D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST = 0x36,
//   D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST = 0x37,
//   D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST = 0x38,
//   D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST = 0x39,
//   D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST = 0x3A,
//   D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST = 0x3B,
//   D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST = 0x3C,
//   D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST = 0x3D,
//   D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST = 0x3E,
//   D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST = 0x3F,
//   D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST = 0x40,
//   D3D10_PRIMITIVE_TOPOLOGY_UNDEFINED = 0x0,
//   D3D10_PRIMITIVE_TOPOLOGY_POINTLIST = 0x1,
//   D3D10_PRIMITIVE_TOPOLOGY_LINELIST = 0x2,
//   D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP = 0x3,
//   D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST = 0x4,
//   D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 0x5,
//   D3D10_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 0xA,
//   D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 0xB,
//   D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 0xC,
//   D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 0xD,
//   D3D11_PRIMITIVE_TOPOLOGY_UNDEFINED = 0x0,
//   D3D11_PRIMITIVE_TOPOLOGY_POINTLIST = 0x1,
//   D3D11_PRIMITIVE_TOPOLOGY_LINELIST = 0x2,
//   D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP = 0x3,
//   D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST = 0x4,
//   D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 0x5,
//   D3D11_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 0xA,
//   D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 0xB,
//   D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 0xC,
//   D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 0xD,
//   D3D11_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST = 0x21,
//   D3D11_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST = 0x22,
//   D3D11_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST = 0x23,
//   D3D11_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST = 0x24,
//   D3D11_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST = 0x25,
//   D3D11_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST = 0x26,
//   D3D11_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST = 0x27,
//   D3D11_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST = 0x28,
//   D3D11_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST = 0x29,
//   D3D11_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST = 0x2A,
//   D3D11_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST = 0x2B,
//   D3D11_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST = 0x2C,
//   D3D11_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST = 0x2D,
//   D3D11_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST = 0x2E,
//   D3D11_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST = 0x2F,
//   D3D11_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST = 0x30,
//   D3D11_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST = 0x31,
//   D3D11_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST = 0x32,
//   D3D11_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST = 0x33,
//   D3D11_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST = 0x34,
//   D3D11_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST = 0x35,
//   D3D11_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST = 0x36,
//   D3D11_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST = 0x37,
//   D3D11_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST = 0x38,
//   D3D11_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST = 0x39,
//   D3D11_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST = 0x3A,
//   D3D11_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST = 0x3B,
//   D3D11_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST = 0x3C,
//   D3D11_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST = 0x3D,
//   D3D11_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST = 0x3E,
//   D3D11_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST = 0x3F,
//   D3D11_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST = 0x40,
// };

// /* 1058 */
// enum D3D11_FILTER : __int32
// {
//   D3D11_FILTER_MIN_MAG_MIP_POINT = 0x0,
//   D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR = 0x1,
//   D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x4,
//   D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR = 0x5,
//   D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT = 0x10,
//   D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x11,
//   D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT = 0x14,
//   D3D11_FILTER_MIN_MAG_MIP_LINEAR = 0x15,
//   D3D11_FILTER_ANISOTROPIC = 0x55,
//   D3D11_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 0x80,
//   D3D11_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x81,
//   D3D11_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x84,
//   D3D11_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x85,
//   D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x90,
//   D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x91,
//   D3D11_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x94,
//   D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 0x95,
//   D3D11_FILTER_COMPARISON_ANISOTROPIC = 0xD5,
// };

// /* 1059 */
// enum D3D_PRIMITIVE : __int32
// {
//   D3D_PRIMITIVE_UNDEFINED = 0x0,
//   D3D_PRIMITIVE_POINT = 0x1,
//   D3D_PRIMITIVE_LINE = 0x2,
//   D3D_PRIMITIVE_TRIANGLE = 0x3,
//   D3D_PRIMITIVE_LINE_ADJ = 0x6,
//   D3D_PRIMITIVE_TRIANGLE_ADJ = 0x7,
//   D3D_PRIMITIVE_1_CONTROL_POINT_PATCH = 0x8,
//   D3D_PRIMITIVE_2_CONTROL_POINT_PATCH = 0x9,
//   D3D_PRIMITIVE_3_CONTROL_POINT_PATCH = 0xA,
//   D3D_PRIMITIVE_4_CONTROL_POINT_PATCH = 0xB,
//   D3D_PRIMITIVE_5_CONTROL_POINT_PATCH = 0xC,
//   D3D_PRIMITIVE_6_CONTROL_POINT_PATCH = 0xD,
//   D3D_PRIMITIVE_7_CONTROL_POINT_PATCH = 0xE,
//   D3D_PRIMITIVE_8_CONTROL_POINT_PATCH = 0xF,
//   D3D_PRIMITIVE_9_CONTROL_POINT_PATCH = 0x10,
//   D3D_PRIMITIVE_10_CONTROL_POINT_PATCH = 0x11,
//   D3D_PRIMITIVE_11_CONTROL_POINT_PATCH = 0x12,
//   D3D_PRIMITIVE_12_CONTROL_POINT_PATCH = 0x13,
//   D3D_PRIMITIVE_13_CONTROL_POINT_PATCH = 0x14,
//   D3D_PRIMITIVE_14_CONTROL_POINT_PATCH = 0x15,
//   D3D_PRIMITIVE_15_CONTROL_POINT_PATCH = 0x16,
//   D3D_PRIMITIVE_16_CONTROL_POINT_PATCH = 0x17,
//   D3D_PRIMITIVE_17_CONTROL_POINT_PATCH = 0x18,
//   D3D_PRIMITIVE_18_CONTROL_POINT_PATCH = 0x19,
//   D3D_PRIMITIVE_19_CONTROL_POINT_PATCH = 0x1A,
//   D3D_PRIMITIVE_20_CONTROL_POINT_PATCH = 0x1C,
//   D3D_PRIMITIVE_21_CONTROL_POINT_PATCH = 0x1D,
//   D3D_PRIMITIVE_22_CONTROL_POINT_PATCH = 0x1E,
//   D3D_PRIMITIVE_23_CONTROL_POINT_PATCH = 0x1F,
//   D3D_PRIMITIVE_24_CONTROL_POINT_PATCH = 0x20,
//   D3D_PRIMITIVE_25_CONTROL_POINT_PATCH = 0x21,
//   D3D_PRIMITIVE_26_CONTROL_POINT_PATCH = 0x22,
//   D3D_PRIMITIVE_27_CONTROL_POINT_PATCH = 0x23,
//   D3D_PRIMITIVE_28_CONTROL_POINT_PATCH = 0x24,
//   D3D_PRIMITIVE_29_CONTROL_POINT_PATCH = 0x25,
//   D3D_PRIMITIVE_30_CONTROL_POINT_PATCH = 0x26,
//   D3D_PRIMITIVE_31_CONTROL_POINT_PATCH = 0x27,
//   D3D_PRIMITIVE_32_CONTROL_POINT_PATCH = 0x28,
//   D3D10_PRIMITIVE_UNDEFINED = 0x0,
//   D3D10_PRIMITIVE_POINT = 0x1,
//   D3D10_PRIMITIVE_LINE = 0x2,
//   D3D10_PRIMITIVE_TRIANGLE = 0x3,
//   D3D10_PRIMITIVE_LINE_ADJ = 0x6,
//   D3D10_PRIMITIVE_TRIANGLE_ADJ = 0x7,
//   D3D11_PRIMITIVE_UNDEFINED = 0x0,
//   D3D11_PRIMITIVE_POINT = 0x1,
//   D3D11_PRIMITIVE_LINE = 0x2,
//   D3D11_PRIMITIVE_TRIANGLE = 0x3,
//   D3D11_PRIMITIVE_LINE_ADJ = 0x6,
//   D3D11_PRIMITIVE_TRIANGLE_ADJ = 0x7,
//   D3D11_PRIMITIVE_1_CONTROL_POINT_PATCH = 0x8,
//   D3D11_PRIMITIVE_2_CONTROL_POINT_PATCH = 0x9,
//   D3D11_PRIMITIVE_3_CONTROL_POINT_PATCH = 0xA,
//   D3D11_PRIMITIVE_4_CONTROL_POINT_PATCH = 0xB,
//   D3D11_PRIMITIVE_5_CONTROL_POINT_PATCH = 0xC,
//   D3D11_PRIMITIVE_6_CONTROL_POINT_PATCH = 0xD,
//   D3D11_PRIMITIVE_7_CONTROL_POINT_PATCH = 0xE,
//   D3D11_PRIMITIVE_8_CONTROL_POINT_PATCH = 0xF,
//   D3D11_PRIMITIVE_9_CONTROL_POINT_PATCH = 0x10,
//   D3D11_PRIMITIVE_10_CONTROL_POINT_PATCH = 0x11,
//   D3D11_PRIMITIVE_11_CONTROL_POINT_PATCH = 0x12,
//   D3D11_PRIMITIVE_12_CONTROL_POINT_PATCH = 0x13,
//   D3D11_PRIMITIVE_13_CONTROL_POINT_PATCH = 0x14,
//   D3D11_PRIMITIVE_14_CONTROL_POINT_PATCH = 0x15,
//   D3D11_PRIMITIVE_15_CONTROL_POINT_PATCH = 0x16,
//   D3D11_PRIMITIVE_16_CONTROL_POINT_PATCH = 0x17,
//   D3D11_PRIMITIVE_17_CONTROL_POINT_PATCH = 0x18,
//   D3D11_PRIMITIVE_18_CONTROL_POINT_PATCH = 0x19,
//   D3D11_PRIMITIVE_19_CONTROL_POINT_PATCH = 0x1A,
//   D3D11_PRIMITIVE_20_CONTROL_POINT_PATCH = 0x1C,
//   D3D11_PRIMITIVE_21_CONTROL_POINT_PATCH = 0x1D,
//   D3D11_PRIMITIVE_22_CONTROL_POINT_PATCH = 0x1E,
//   D3D11_PRIMITIVE_23_CONTROL_POINT_PATCH = 0x1F,
//   D3D11_PRIMITIVE_24_CONTROL_POINT_PATCH = 0x20,
//   D3D11_PRIMITIVE_25_CONTROL_POINT_PATCH = 0x21,
//   D3D11_PRIMITIVE_26_CONTROL_POINT_PATCH = 0x22,
//   D3D11_PRIMITIVE_27_CONTROL_POINT_PATCH = 0x23,
//   D3D11_PRIMITIVE_28_CONTROL_POINT_PATCH = 0x24,
//   D3D11_PRIMITIVE_29_CONTROL_POINT_PATCH = 0x25,
//   D3D11_PRIMITIVE_30_CONTROL_POINT_PATCH = 0x26,
//   D3D11_PRIMITIVE_31_CONTROL_POINT_PATCH = 0x27,
//   D3D11_PRIMITIVE_32_CONTROL_POINT_PATCH = 0x28,
// };

// /* 1060 */
// enum D3D11_TEXTURE_ADDRESS_MODE : __int32
// {
//   D3D11_TEXTURE_ADDRESS_WRAP = 0x1,
//   D3D11_TEXTURE_ADDRESS_MIRROR = 0x2,
//   D3D11_TEXTURE_ADDRESS_CLAMP = 0x3,
//   D3D11_TEXTURE_ADDRESS_BORDER = 0x4,
//   D3D11_TEXTURE_ADDRESS_MIRROR_ONCE = 0x5,
// };

// /* 1061 */
// enum DWRITE_FONT_FEATURE_TAG : __int32
// {
// };

// /* 1062 */
// enum D3D10_MAP : __int32
// {
// };

// /* 1063 */
// enum D3D10_FILL_MODE : __int32
// {
// };

// /* 1064 */
// enum D3D10_CULL_MODE : __int32
// {
// };

// /* 1065 */
// enum D3D10_STENCIL_OP : __int32
// {
// };

// /* 1066 */
// enum D3D10_COMPARISON_FUNC : __int32
// {
// };

// /* 1067 */
// enum D3D10_DEPTH_WRITE_MASK : __int32
// {
// };

// /* 1068 */
// enum DWRITE_READING_DIRECTION : __int32
// {
// };

// /* 1069 */
// enum DWRITE_FLOW_DIRECTION : __int32
// {
// };

// /* 1070 */
// enum D3D10_INPUT_CLASSIFICATION : __int32
// {
// };

// /* 1071 */
// enum D3D10_RTV_DIMENSION : __int32
// {
// };

// /* 1072 */
// enum D3D10_DSV_DIMENSION : __int32
// {
// };

// /* 1073 */
// enum D2D1_FILL_MODE : __int32
// {
// };

// /* 1074 */
// enum D2D1_PATH_SEGMENT : __int32
// {
// };

// /* 1075 */
// enum D2D1_FIGURE_BEGIN : __int32
// {
// };

// /* 1076 */
// enum D2D1_FIGURE_END : __int32
// {
// };

// /* 1077 */
// enum D3D10_FILTER : __int32
// {
// };

// /* 1078 */
// enum D3D10_TEXTURE_ADDRESS_MODE : __int32
// {
// };

// /* 1079 */
// enum DWRITE_FONT_WEIGHT : __int32
// {
// };

// /* 1080 */
// enum DWRITE_FONT_STRETCH : __int32
// {
// };

// /* 1081 */
// enum DWRITE_FONT_STYLE : __int32
// {
// };

// /* 1082 */
// enum DWRITE_INFORMATIONAL_STRING_ID : __int32
// {
// };

// /* 1083 */
// enum DWRITE_FONT_SIMULATIONS : __int32
// {
// };

// /* 1084 */
// enum D3D10_BLEND : __int32
// {
// };

// /* 1085 */
// enum D3D10_BLEND_OP : __int32
// {
// };

// /* 1086 */
// enum D3D11_COUNTER : __int32
// {
// };

// /* 1087 */
// enum DWRITE_FONT_FILE_TYPE : __int32
// {
// };

// /* 1088 */
// enum DWRITE_FONT_FACE_TYPE : __int32
// {
// };

// /* 1089 */
// enum D3D11_MAP : __int32
// {
// };

// /* 1090 */
// enum D3D11_DEVICE_CONTEXT_TYPE : __int32
// {
//   D3D11_DEVICE_CONTEXT_IMMEDIATE = 0x0,
//   D3D11_DEVICE_CONTEXT_DEFERRED = 0x1,
// };

// /* 1091 */
// enum D3D10_RESOURCE_DIMENSION : __int32
// {
// };

// /* 1092 */
// enum D3D10_COLOR_WRITE_ENABLE : __int32
// {
//   D3D10_COLOR_WRITE_ENABLE_RED = 0x1,
//   D3D10_COLOR_WRITE_ENABLE_GREEN = 0x2,
//   D3D10_COLOR_WRITE_ENABLE_BLUE = 0x4,
//   D3D10_COLOR_WRITE_ENABLE_ALPHA = 0x8,
//   D3D10_COLOR_WRITE_ENABLE_ALL = 0xF,
// };

// /* 1093 */
// enum D2D1::ColorF::Enum : __int32
// {
//   AliceBlue = 0xF0F8FF,
//   AntiqueWhite = 0xFAEBD7,
//   Aqua = 0xFFFF,
//   Aquamarine = 0x7FFFD4,
//   Azure = 0xF0FFFF,
//   Beige = 0xF5F5DC,
//   Bisque = 0xFFE4C4,
//   Black = 0x0,
//   BlanchedAlmond = 0xFFEBCD,
//   Blue = 0xFF,
//   BlueViolet = 0x8A2BE2,
//   Brown = 0xA52A2A,
//   BurlyWood = 0xDEB887,
//   CadetBlue = 0x5F9EA0,
//   Chartreuse = 0x7FFF00,
//   Chocolate = 0xD2691E,
//   Coral = 0xFF7F50,
//   CornflowerBlue = 0x6495ED,
//   Cornsilk = 0xFFF8DC,
//   Crimson = 0xDC143C,
//   Cyan = 0xFFFF,
//   DarkBlue = 0x8B,
//   DarkCyan = 0x8B8B,
//   DarkGoldenrod = 0xB8860B,
//   DarkGray = 0xA9A9A9,
//   DarkGreen = 0x6400,
//   DarkKhaki = 0xBDB76B,
//   DarkMagenta = 0x8B008B,
//   DarkOliveGreen = 0x556B2F,
//   DarkOrange = 0xFF8C00,
//   DarkOrchid = 0x9932CC,
//   DarkRed = 0x8B0000,
//   DarkSalmon = 0xE9967A,
//   DarkSeaGreen = 0x8FBC8F,
//   DarkSlateBlue = 0x483D8B,
//   DarkSlateGray = 0x2F4F4F,
//   DarkTurquoise = 0xCED1,
//   DarkViolet = 0x9400D3,
//   DeepPink = 0xFF1493,
//   DeepSkyBlue = 0xBFFF,
//   DimGray = 0x696969,
//   DodgerBlue = 0x1E90FF,
//   Firebrick = 0xB22222,
//   FloralWhite = 0xFFFAF0,
//   ForestGreen = 0x228B22,
//   Fuchsia = 0xFF00FF,
//   Gainsboro = 0xDCDCDC,
//   GhostWhite = 0xF8F8FF,
//   Gold = 0xFFD700,
//   Goldenrod = 0xDAA520,
//   Gray = 0x808080,
//   Green = 0x8000,
//   GreenYellow = 0xADFF2F,
//   Honeydew = 0xF0FFF0,
//   HotPink = 0xFF69B4,
//   IndianRed = 0xCD5C5C,
//   Indigo = 0x4B0082,
//   Ivory = 0xFFFFF0,
//   Khaki = 0xF0E68C,
//   Lavender = 0xE6E6FA,
//   LavenderBlush = 0xFFF0F5,
//   LawnGreen = 0x7CFC00,
//   LemonChiffon = 0xFFFACD,
//   LightBlue = 0xADD8E6,
//   LightCoral = 0xF08080,
//   LightCyan = 0xE0FFFF,
//   LightGoldenrodYellow = 0xFAFAD2,
//   LightGreen = 0x90EE90,
//   LightGray = 0xD3D3D3,
//   LightPink = 0xFFB6C1,
//   LightSalmon = 0xFFA07A,
//   LightSeaGreen = 0x20B2AA,
//   LightSkyBlue = 0x87CEFA,
//   LightSlateGray = 0x778899,
//   LightSteelBlue = 0xB0C4DE,
//   LightYellow = 0xFFFFE0,
//   Lime = 0xFF00,
//   LimeGreen = 0x32CD32,
//   Linen = 0xFAF0E6,
//   Magenta = 0xFF00FF,
//   Maroon = 0x800000,
//   MediumAquamarine = 0x66CDAA,
//   MediumBlue = 0xCD,
//   MediumOrchid = 0xBA55D3,
//   MediumPurple = 0x9370DB,
//   MediumSeaGreen = 0x3CB371,
//   MediumSlateBlue = 0x7B68EE,
//   MediumSpringGreen = 0xFA9A,
//   MediumTurquoise = 0x48D1CC,
//   MediumVioletRed = 0xC71585,
//   MidnightBlue = 0x191970,
//   MintCream = 0xF5FFFA,
//   MistyRose = 0xFFE4E1,
//   Moccasin = 0xFFE4B5,
//   NavajoWhite = 0xFFDEAD,
//   Navy = 0x80,
//   OldLace = 0xFDF5E6,
//   Olive = 0x808000,
//   OliveDrab = 0x6B8E23,
//   Orange = 0xFFA500,
//   OrangeRed = 0xFF4500,
//   Orchid = 0xDA70D6,
//   PaleGoldenrod = 0xEEE8AA,
//   PaleGreen = 0x98FB98,
//   PaleTurquoise = 0xAFEEEE,
//   PaleVioletRed = 0xDB7093,
//   PapayaWhip = 0xFFEFD5,
//   PeachPuff = 0xFFDAB9,
//   Peru = 0xCD853F,
//   Pink = 0xFFC0CB,
//   Plum = 0xDDA0DD,
//   PowderBlue = 0xB0E0E6,
//   Purple = 0x800080,
//   Red = 0xFF0000,
//   RosyBrown = 0xBC8F8F,
//   RoyalBlue = 0x4169E1,
//   SaddleBrown = 0x8B4513,
//   Salmon = 0xFA8072,
//   SandyBrown = 0xF4A460,
//   SeaGreen = 0x2E8B57,
//   SeaShell = 0xFFF5EE,
//   Sienna = 0xA0522D,
//   Silver = 0xC0C0C0,
//   SkyBlue = 0x87CEEB,
//   SlateBlue = 0x6A5ACD,
//   SlateGray = 0x708090,
//   Snow = 0xFFFAFA,
//   SpringGreen = 0xFF7F,
//   SteelBlue = 0x4682B4,
//   Tan = 0xD2B48C,
//   Teal = 0x8080,
//   Thistle = 0xD8BFD8,
//   Tomato = 0xFF6347,
//   Turquoise = 0x40E0D0,
//   Violet = 0xEE82EE,
//   Wheat = 0xF5DEB3,
//   White = 0xFFFFFF,
//   WhiteSmoke = 0xF5F5F5,
//   Yellow = 0xFFFF00,
//   YellowGreen = 0x9ACD32,
// };

// /* 1094 */
// enum D3D11_INPUT_CLASSIFICATION : __int32
// {
// };

// /* 1095 */
// enum DWRITE_RENDERING_MODE : __int32
// {
// };

// /* 1096 */
// enum D3D10_BIND_FLAG : __int32
// {
//   D3D10_BIND_VERTEX_BUFFER = 0x1,
//   D3D10_BIND_INDEX_BUFFER = 0x2,
//   D3D10_BIND_CONSTANT_BUFFER = 0x4,
//   D3D10_BIND_SHADER_RESOURCE = 0x8,
//   D3D10_BIND_STREAM_OUTPUT = 0x10,
//   D3D10_BIND_RENDER_TARGET = 0x20,
//   D3D10_BIND_DEPTH_STENCIL = 0x40,
// };

// /* 1097 */
// enum DWRITE_TEXT_ALIGNMENT : __int32
// {
// };

// /* 1098 */
// enum DWRITE_PARAGRAPH_ALIGNMENT : __int32
// {
// };

// /* 1099 */
// enum DWRITE_WORD_WRAPPING : __int32
// {
// };

// /* 1100 */
// enum DWRITE_LINE_SPACING_METHOD : __int32
// {
// };

// /* 1101 */
// enum D3D10_MESSAGE_SEVERITY : __int32
// {
//   D3D10_MESSAGE_SEVERITY_CORRUPTION = 0x0,
//   D3D10_MESSAGE_SEVERITY_ERROR = 0x1,
//   D3D10_MESSAGE_SEVERITY_WARNING = 0x2,
//   D3D10_MESSAGE_SEVERITY_INFO = 0x3,
// };

// /* 1102 */
// enum WICBitmapPaletteType : __int32
// {
//   WICBitmapPaletteTypeCustom = 0x0,
//   WICBitmapPaletteTypeMedianCut = 0x1,
//   WICBitmapPaletteTypeFixedBW = 0x2,
//   WICBitmapPaletteTypeFixedHalftone8 = 0x3,
//   WICBitmapPaletteTypeFixedHalftone27 = 0x4,
//   WICBitmapPaletteTypeFixedHalftone64 = 0x5,
//   WICBitmapPaletteTypeFixedHalftone125 = 0x6,
//   WICBitmapPaletteTypeFixedHalftone216 = 0x7,
//   WICBitmapPaletteTypeFixedWebPalette = 0x7,
//   WICBitmapPaletteTypeFixedHalftone252 = 0x8,
//   WICBitmapPaletteTypeFixedHalftone256 = 0x9,
//   WICBitmapPaletteTypeFixedGray4 = 0xA,
//   WICBitmapPaletteTypeFixedGray16 = 0xB,
//   WICBitmapPaletteTypeFixedGray256 = 0xC,
//   WICBITMAPPALETTETYPE_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 1103 */
// enum D3D11_RESOURCE_DIMENSION : __int32
// {
// };

// /* 1104 */
// enum D3DX11_IMAGE_FILE_FORMAT : __int32
// {
// };

// /* 1105 */
// enum D2D1_WINDOW_STATE : __int32
// {
// };

// /* 1106 */
// enum D3D_FEATURE_LEVEL : __int32
// {
// };

// /* 1107 */
// enum DWRITE_TRIMMING_GRANULARITY : __int32
// {
// };

// /* 1108 */
// enum D2D1_GEOMETRY_RELATION : __int32
// {
// };

// /* 1109 */
// enum D2D1_GEOMETRY_SIMPLIFICATION_OPTION : __int32
// {
// };

// /* 1110 */
// enum D2D1_COMBINE_MODE : __int32
// {
// };

// /* 1111 */
// enum D3DX10_IMAGE_FILE_FORMAT : __int32
// {
// };

// /* 1112 */
// enum D2D1_OPACITY_MASK_CONTENT : __int32
// {
// };

// /* 1113 */
// enum D3D11_BIND_FLAG : __int32
// {
//   D3D11_BIND_VERTEX_BUFFER = 0x1,
//   D3D11_BIND_INDEX_BUFFER = 0x2,
//   D3D11_BIND_CONSTANT_BUFFER = 0x4,
//   D3D11_BIND_SHADER_RESOURCE = 0x8,
//   D3D11_BIND_STREAM_OUTPUT = 0x10,
//   D3D11_BIND_RENDER_TARGET = 0x20,
//   D3D11_BIND_DEPTH_STENCIL = 0x40,
//   D3D11_BIND_UNORDERED_ACCESS = 0x80,
// };

// /* 1114 */
// enum D2D1_DEBUG_LEVEL : __int32
// {
// };

// /* 1115 */
// enum DWRITE_PIXEL_GEOMETRY : __int32
// {
// };

// /* 1116 */
// enum D2D1_SWEEP_DIRECTION : __int32
// {
// };

// /* 1117 */
// enum D2D1_ARC_SIZE : __int32
// {
// };

// /* 1118 */
// enum DWRITE_BREAK_CONDITION : __int32
// {
// };

// /* 1119 */
// enum $B630FD68FD3ED85E9ECA47ACBCAD312B : __int32
// {
//   TL_MEMALLOC_NGL = 0x1000000,
//   TL_MEMALLOC_NAL = 0x2000000,
//   TL_MEMALLOC_AEPS = 0x3000000,
//   TL_MEMALLOC_NVL = 0x4000000,
//   TL_MEMALLOC_PHYSICS = 0x5000000,
//   TL_MEMALLOC_LIBMASK = 0xFF000000,
//   TL_MEMALLOC_TEMP = 0x1,
//   TL_MEMALLOC_CANFAIL = 0x2,
//   TL_MEMALLOC_PHYSICAL = 0x10000,
//   TL_MEMALLOC_WRITECOMBINE = 0x20000,
//   TL_MEMALLOC_FIFO = 0x80000,
//   TL_MEMALLOC_RSXMAIN = 0x0,
//   TL_MEMALLOC_RSXLOCAL = 0x0,
//   TL_MEMALLOC_MEM1 = 0x0,
//   TL_MEMALLOC_MEM2 = 0x0,
// };

// /* 1120 */
// enum axis_aligned_sweep_and_prune::<unnamed_tag> : __int32
// {
//   X_AXIS = 0x0,
//   Y_AXIS = 0x1,
//   Z_AXIS = 0x2,
//   NUM_AXIS = 0x3,
//   AE_MIN_ELEMENT = 0x0,
//   AE_MAX_ELEMENT = 0x1,
// };

// /* 1121 */
// enum GFX_SURFACE_FLAGS : __int32
// {
//   GFX_SURFACE_CASTS_SUN_SHADOW = 0x1,
//   GFX_SURFACE_HAS_PRIMARY_LIGHT_CONFLICT = 0x2,
//   GFX_SURFACE_IS_SKY = 0x4,
//   GFX_SURFACE_ONLY_CASTS_SHADOW = 0x8,
// };

// /* 1122 */
// enum $71C24D2F1625168C41CFDBE8C0A0D069 : __int32
// {
//   CUSTOMINDEX_COMMON_CASTS_SHADOW = 0x1,
//   CUSTOMINDEX_XMODEL_IS_SHADOW_RECEIVER = 0x1,
//   CUSTOMINDEX_XMODEL_IS_CHARRED = 0x2,
//   CUSTOMINDEX_XMODEL_SHADER_CONSTANT_SET_MASK = 0x1C,
// };

// /* 1123 */
// enum $EEBC5D9207B77ABD13B84F943FDC1A2F : __int32
// {
//   MTL_PREPASS_STANDARD = 0x0,
//   MTL_PREPASS_ALPHA = 0x1,
//   MTL_PREPASS_NONE = 0x2,
//   MTL_PREPASS_FLOATZ = 0x3,
//   MTL_PREPASS_TYPECOUNT = 0x4,
// };

// /* 1124 */
// enum $9F522F4C897FF18CE3892299E8E798E2 : __int32
// {
//   DOBJ_MAX_SURFS = 0x80,
//   XMODEL_MAX_MERGED_SURFS = 0x20,
//   XMODEL_MAX_SURFS = 0x50,
// };

// /* 1125 */
// enum GfxDrawSceneMethod : __int32
// {
//   GFX_DRAW_SCENE_NONE = 0x0,
//   GFX_DRAW_SCENE_FULLBRIGHT = 0x1,
//   GFX_DRAW_SCENE_DEBUGSHADER = 0x2,
//   GFX_DRAW_SCENE_STANDARD = 0x3,
// };

// /* 1126 */
// enum $EA24675358C7D0697CC98EFC8767D17F : __int32
// {
//   R_PRIMARYLIGHTLINES_OFF = 0x0,
//   R_PRIMARYLIGHTLINES_STATICMODELS = 0x1,
//   R_PRIMARYLIGHTLINES_SCENEMODELS = 0x2,
//   R_PRIMARYLIGHTLINES_DOBJS = 0x3,
//   R_PRIMARYLIGHTLINES_DYNENT_MODELS = 0x4,
//   R_PRIMARYLIGHTLINES_COUNT = 0x5,
// };

// /* 1127 */
// enum StaticModelFlag : __int32
// {
//   STATIC_MODEL_FLAG_NO_SHADOW = 0x1,
// };

// /* 1128 */
// enum $B168676AE0E2FEA6E0039539F9162E78 : __int32
// {
//   MAPTYPE_NONE = 0x0,
//   MAPTYPE_INVALID1 = 0x1,
//   MAPTYPE_INVALID2 = 0x2,
//   MAPTYPE_2D = 0x3,
//   MAPTYPE_3D = 0x4,
//   MAPTYPE_CUBE = 0x5,
//   MAPTYPE_COUNT = 0x6,
// };

// /* 1129 */
// enum $42F5C425657C8C7F48F5AEE8674B8AC5 : __int32
// {
//   CUSTOM_SAMPLER_REFLECTION_PROBE = 0x0,
//   CUSTOM_SAMPLER_LIGHTMAP_PRIMARY = 0x1,
//   CUSTOM_SAMPLER_LIGHTMAP_SECONDARY = 0x2,
//   CUSTOM_SAMPLER_LIGHTMAP_SECONDARYB = 0x3,
//   CUSTOM_SAMPLER_COUNT = 0x4,
// };

// /* 1130 */
// enum DxCapsResponse : __int32
// {
//   DX_CAPS_RESPONSE_QUIT = 0x0,
//   DX_CAPS_RESPONSE_WARN = 0x1,
//   DX_CAPS_RESPONSE_INFO = 0x2,
//   DX_CAPS_RESPONSE_FORBID_SM3 = 0x3,
// };

// /* 1131 */
// enum file_image_flags_t : __int32
// {
//   IMG_FLAG_NOPICMIP = 0x1,
//   IMG_FLAG_NOMIPMAPS = 0x2,
//   IMG_FLAG_CUBEMAP = 0x4,
//   IMG_FLAG_VOLMAP = 0x8,
//   IMG_FLAG_STREAMING = 0x10,
//   IMG_FLAG_LEGACY_NORMALS = 0x20,
//   IMG_FLAG_CLAMP_U = 0x40,
//   IMG_FLAG_CLAMP_V = 0x80,
//   IMG_FLAG_FORCE_SYSTEM = 0x100,
//   IMG_FLAG_DYNAMIC = 0x10000,
//   IMG_FLAG_RENDER_TARGET = 0x20000,
//   IMG_FLAG_SYSTEMMEM = 0x40000,
// };

// /* 1132 */
// enum CIN_IOSTATE : __int32
// {
//   CIN_IOSTATE_RELINQUISHED = 0x0,
//   CIN_IOSTATE_SEIZED = 0x1,
//   CIN_IOSTATE_COUNT = 0x2,
// };

// /* 1133 */
// enum CinematicEnum : __int32
// {
//   CINEMATIC_NOT_PAUSED = 0x0,
//   CINEMATIC_PAUSED = 0x1,
//   CINEMATIC_SCRIPT_PAUSED = 0x2,
// };

// /* 1134 */
// enum GfxScreenshotType : __int32
// {
//   R_SCREENSHOT_JPG = 0x0,
//   R_SCREENSHOT_TGA = 0x1,
// };

// /* 1135 */
// enum $72E71F3D9535328A1AA08FD8E568F55B : __int32
// {
//   CULL_STATE_OUT = 0x0,
//   CULL_STATE_BOUNDED_PENDING = 0x1,
//   CULL_STATE_BOUNDED = 0x2,
//   CULL_STATE_SKINNED_PENDING = 0x3,
//   CULL_STATE_DONE = 0x4,
// };

// /* 1136 */
// enum $19367882E50C0D90FA74E887951753D7 : __int32
// {
//   VISDATA_VISIBLE = 0x1,
//   VISDATA_CULL_OUT = 0x2,
// };

// /* 1137 */
// enum DpvsForceBevels : __int32
// {
//   DPVS_DONT_FORCE_BEVELS = 0x0,
//   DPVS_FORCE_BEVELS = 0x1,
// };

// /* 1138 */
// enum DpvsClipChildren : __int32
// {
//   DPVS_DONT_CLIP_CHILDREN = 0x0,
//   DPVS_CLIP_CHILDREN = 0x1,
// };

// /* 1139 */
// enum $669BDC9D2CE6D0BEFB4F7D57A1B924C8 : __int32
// {
//   R_COLOR_OVERRIDE_BLACK = 0x0,
//   R_COLOR_OVERRIDE_NONE = 0x1,
//   R_COLOR_OVERRIDE_WHITE = 0x2,
//   R_COLOR_OVERRIDE_GRAY = 0x3,
//   R_COLOR_OVERRIDE_COUNT = 0x4,
// };

// /* 1140 */
// enum LitPhaseID : __int32
// {
//   LIT_PHASE_MAIN = 0x0,
//   LIT_PHASE_POST_RESOLVE = 0x1,
//   LIT_PHASE_PUNCHTHROUGH = 0x2,
// };

// /* 1141 */
// enum CloakPhaseID : __int32
// {
//   CLOAK_PHASE_PREPASS = 0x0,
//   CLOAK_PHASE_CLOAKED = 0x1,
// };

// /* 1142 */
// enum GfxStateOverride : __int32
// {
//   GFX_IGNORE_DEPTH_STATE = 0x80000000,
//   GFX_IGNORE_ALPHA_TEST_STATE = 0x40000000,
//   GFX_STATE_USE_ALPHA_TO_COVERAGE = 0x4,
// };

// /* 1143 */
// enum GfxPixelCostMode : __int32
// {
//   GFX_PIXEL_COST_MODE_OFF = 0x0,
//   GFX_PIXEL_COST_MODE_MEASURE_COST = 0x1,
//   GFX_PIXEL_COST_MODE_MEASURE_MSEC = 0x2,
//   GFX_PIXEL_COST_MODE_ADD_COST_USE_DEPTH = 0x3,
//   GFX_PIXEL_COST_MODE_ADD_COST_IGNORE_DEPTH = 0x4,
//   GFX_PIXEL_COST_MODE_ADD_PASSES_USE_DEPTH = 0x5,
//   GFX_PIXEL_COST_MODE_ADD_PASSES_IGNORE_DEPTH = 0x6,
// };

// /* 1144 */
// enum LightHasShadowMap : __int32
// {
//   LIGHT_HAS_SHADOWMAP = 0x0,
//   LIGHT_HAS_NO_SHADOWMAP = 0x1,
// };

// /* 1145 */
// enum GfxAspectRatio : __int32
// {
//   GFX_ASPECT_RATIO_AUTO = 0x0,
//   GFX_ASPECT_RATIO_STANDARD = 0x1,
//   GFX_ASPECT_RATIO_WIDE_16_10 = 0x2,
//   GFX_ASPECT_RATIO_WIDE_16_9 = 0x3,
//   GFX_ASPECT_RATIO_COUNT = 0x4,
// };

// /* 1146 */
// enum $E06BEC8252F71222734B04B086D889DD : __int32
// {
//   R_LOD_INFO_NONE = 0x0,
//   R_LOD_INFO_ALL = 0x1,
//   R_LOD_INFO_CUR_LOD_ONLY = 0x2,
//   R_LOD_INFO_CUR_DIST_ONLY = 0x3,
//   R_LOD_INFO_AUTO_DIST_ONLY = 0x4,
//   R_LOD_INFO_COUNT = 0x5,
// };

// /* 1147 */
// enum $B22BF9976090D5C840686E22605C2FF7 : __int32
// {
//   R_SPECULAR_ROUGHNESS_OVERRIDE_NONE = 0x0,
//   R_SPECULAR_ROUGHNESS_OVERRIDE_MATTE_SMOOTH = 0x1,
//   R_SPECULAR_ROUGHNESS_OVERRIDE_MATTE_ROUGH = 0x2,
//   R_SPECULAR_ROUGHNESS_OVERRIDE_SHINY_SMOOTH = 0x3,
//   R_SPECULAR_ROUGHNESS_OVERRIDE_SHINY_ROUGH = 0x4,
//   R_SPECULAR_ROUGHNESS_OVERRIDE_COUNT = 0x5,
// };

// /* 1148 */
// enum $A1823DBB2E1ECBBFE5B3FD011D242004 : __int32
// {
//   R_NORMAL_OVERRIDE_FLAT = 0x0,
//   R_NORMAL_OVERRIDE_NONE = 0x1,
//   R_NORMAL_OVERRIDE_COUNT = 0x2,
// };

// /* 1149 */
// enum $2CDBB6FB02DE140D6C242132EAFCD501 : __int32
// {
//   R_FB_COLOR_DEBUG_NONE = 0x0,
//   R_FB_COLOR_DEBUG_SCREEN = 0x1,
//   R_FB_COLOR_DEBUG_FEEDBACK = 0x2,
//   R_FB_COLOR_DEBUG_COUNT = 0x3,
// };

// /* 1150 */
// enum $C7DDB36EBC8A0E6A12FFF07E09941262 : __int32
// {
//   R_SHOW_COLLISION_NONE = 0x0,
//   R_SHOW_COLLISION_ALL = 0x1,
//   R_SHOW_COLLISION_PLAYER = 0x2,
//   R_SHOW_COLLISION_BULLET = 0x3,
//   R_SHOW_COLLISION_MISSILE = 0x4,
//   R_SHOW_COLLISION_VEHICLE = 0x5,
//   R_SHOW_COLLISION_MONSTER = 0x6,
//   R_SHOW_COLLISION_ITEM = 0x7,
//   R_SHOW_COLLISION_CANSHOOT = 0x8,
//   R_SHOW_COLLISION_AINOSIGHT = 0x9,
//   R_SHOW_COLLISION_COUNT = 0xA,
// };

// /* 1151 */
// enum $EDDE65824B9FECD8724E2AFB60F4FAB9 : __int32
// {
//   R_SHOW_COLLISION_GROUPS_ALL = 0x0,
//   R_SHOW_COLLISION_GROUPS_BRUSH = 0x1,
//   R_SHOW_COLLISION_GROUPS_TERRAIN = 0x2,
//   R_SHOW_COLLISION_GROUPS_COUNT = 0x3,
// };

// /* 1152 */
// enum $008CE78860C0EFF69FED022A9304118E : __int32
// {
//   R_SHOW_COLLISION_POLYTYPE_ALL = 0x0,
//   R_SHOW_COLLISION_POLYTYPE_WIREFRAME = 0x1,
//   R_SHOW_COLLISION_POLYTYPE_INTERIOR = 0x2,
//   R_SHOW_COLLISION_POLYTYPE_COUNT = 0x3,
// };

// /* 1153 */
// enum $70AF7554D84087E88C7E212265C5B7FC : __int32
// {
//   R_DEBUGSHADER_NONE = 0x0,
//   R_DEBUGSHADER_TEXTURE = 0x1,
//   R_DEBUGSHADER_TANGENT = 0x2,
//   R_DEBUGSHADER_BINORMAL = 0x3,
//   R_DEBUGSHADER_NORMAL = 0x4,
//   R_DEBUGSHADER_COUNT = 0x5,
// };

// /* 1154 */
// enum $CE01B310B9D4331A0D8C4EB7FFA0F7F1 : __int32
// {
//   R_GPU_SYNC_OFF = 0x0,
//   R_GPU_SYNC_ADAPTIVE = 0x1,
//   R_GPU_SYNC_AGGRESSIVE = 0x2,
//   R_GPU_SYNC_COUNT = 0x3,
// };

// /* 1155 */
// enum $F8BAC180992631E19A574A0F352E600A : __int32
// {
//   GFX_SM_OVERLAY_OFF = 0x0,
//   GFX_SM_OVERLAY_SUN = 0x1,
//   GFX_SM_OVERLAY_SPOT = 0x2,
//   GFX_SM_OVERLAY_COUNT = 0x3,
// };

// /* 1156 */
// enum $992610B3BFC3932E8DACC0F4E0AAB928 : __int32
// {
//   GFX_AA_ALPHA_OFF = 0x0,
//   GFX_AA_ALPHA_TO_COVERAGE = 0x1,
//   GFX_AA_ALPHA_SUPERSAMPLE = 0x2,
//   GFX_AA_ALPHA_COUNT = 0x3,
// };

// /* 1157 */
// enum $0A74F54669E6FD0FB2FE5E6B9004FAC8 : __int32
// {
//   R_CLEAR_NEVER = 0x0,
//   R_CLEAR_DEV_ONLY_BLINK = 0x1,
//   R_CLEAR_BLINK = 0x2,
//   R_CLEAR_STEADY = 0x3,
//   R_CLEAR_FOG_COLOR = 0x4,
//   R_CLEAR_COUNT = 0x5,
// };

// /* 1158 */
// enum $7D3C21EA98995ABCBC0D287EF2F1BCC1 : __int32
// {
//   GFX_SHOW_PIXEL_COST_OFF = 0x0,
//   GFX_SHOW_PIXEL_COST_TIMING_ONLY = 0x1,
//   GFX_SHOW_PIXEL_COST_USE_DEPTH = 0x2,
//   GFX_SHOW_PIXEL_COST_IGNORE_DEPTH = 0x3,
//   GFX_SHOW_PIXEL_COST_COUNT = 0x4,
// };

// /* 1159 */
// enum $BAAA890B7CAD06B6387D5E0CC1077F60 : __int32
// {
//   R_SHOWTESS_OFF = 0x0,
//   R_SHOWTESS_TECH = 0x1,
//   R_SHOWTESS_TECHSET = 0x2,
//   R_SHOWTESS_MATERIAL = 0x3,
//   R_SHOWTESS_VERTEX_SHADER = 0x4,
//   R_SHOWTESS_PIXEL_SHADER = 0x5,
//   R_SHOWTESS_COUNT = 0x6,
// };

// /* 1160 */
// enum $DA8BCB5A54BAB06CD35E1014CE5D911C : __int32
// {
//   R_MIP_FILTER_UNCHANGED = 0x0,
//   R_MIP_FILTER_FORCE_LINEAR = 0x1,
//   R_MIP_FILTER_FORCE_NEAREST = 0x2,
//   R_MIP_FILTER_FORCE_NO_MIPS = 0x3,
//   R_MIP_FILTER_COUNT = 0x4,
// };

// /* 1161 */
// typedef FxUniqueHandleDb::<unnamed_tag> ModelHashTable<ActiveModelNode,63,128>::<unnamed_tag>;

// /* 1162 */
// enum GfxDisplayStandard : __int32
// {
//   VIDEO_STANDARD_NTSC = 0x0,
//   VIDEO_STANDARD_PAL_SECAM = 0x1,
//   VIDEO_STANDARD_HDTV = 0x2,
//   VIDEO_STANDARD_SRGB = 0x3,
// };

// /* 1163 */
// enum GfxEDIDMode : __int32
// {
//   EDID_FALSE = 0x0,
//   EDID_TRUE = 0x1,
//   EDID_ACTIVE = 0x2,
// };

// /* 1164 */
// enum GfxDisplayGamma : __int32
// {
//   GAMMA_SMPTE240M = 0x0,
//   GAMMA_REC709 = 0x1,
//   GAMMA_SRGB = 0x2,
//   GAMMA_USER = 0x3,
// };

// /* 1165 */
// enum NvAPI_Status : __int32
// {
//   NVAPI_OK = 0x0,
//   NVAPI_ERROR = 0xFFFFFFFF,
//   NVAPI_LIBRARY_NOT_FOUND = 0xFFFFFFFE,
//   NVAPI_NO_IMPLEMENTATION = 0xFFFFFFFD,
//   NVAPI_API_NOT_INTIALIZED = 0xFFFFFFFC,
//   NVAPI_INVALID_ARGUMENT = 0xFFFFFFFB,
//   NVAPI_NVIDIA_DEVICE_NOT_FOUND = 0xFFFFFFFA,
//   NVAPI_END_ENUMERATION = 0xFFFFFFF9,
//   NVAPI_INVALID_HANDLE = 0xFFFFFFF8,
//   NVAPI_INCOMPATIBLE_STRUCT_VERSION = 0xFFFFFFF7,
//   NVAPI_HANDLE_INVALIDATED = 0xFFFFFFF6,
//   NVAPI_OPENGL_CONTEXT_NOT_CURRENT = 0xFFFFFFF5,
//   NVAPI_INVALID_POINTER = 0xFFFFFFF2,
//   NVAPI_NO_GL_EXPERT = 0xFFFFFFF4,
//   NVAPI_INSTRUMENTATION_DISABLED = 0xFFFFFFF3,
//   NVAPI_EXPECTED_LOGICAL_GPU_HANDLE = 0xFFFFFF9C,
//   NVAPI_EXPECTED_PHYSICAL_GPU_HANDLE = 0xFFFFFF9B,
//   NVAPI_EXPECTED_DISPLAY_HANDLE = 0xFFFFFF9A,
//   NVAPI_INVALID_COMBINATION = 0xFFFFFF99,
//   NVAPI_NOT_SUPPORTED = 0xFFFFFF98,
//   NVAPI_PORTID_NOT_FOUND = 0xFFFFFF97,
//   NVAPI_EXPECTED_UNATTACHED_DISPLAY_HANDLE = 0xFFFFFF96,
//   NVAPI_INVALID_PERF_LEVEL = 0xFFFFFF95,
//   NVAPI_DEVICE_BUSY = 0xFFFFFF94,
//   NVAPI_NV_PERSIST_FILE_NOT_FOUND = 0xFFFFFF93,
//   NVAPI_PERSIST_DATA_NOT_FOUND = 0xFFFFFF92,
//   NVAPI_EXPECTED_TV_DISPLAY = 0xFFFFFF91,
//   NVAPI_EXPECTED_TV_DISPLAY_ON_DCONNECTOR = 0xFFFFFF90,
//   NVAPI_NO_ACTIVE_SLI_TOPOLOGY = 0xFFFFFF8F,
//   NVAPI_SLI_RENDERING_MODE_NOTALLOWED = 0xFFFFFF8E,
//   NVAPI_EXPECTED_DIGITAL_FLAT_PANEL = 0xFFFFFF8D,
//   NVAPI_ARGUMENT_EXCEED_MAX_SIZE = 0xFFFFFF8C,
//   NVAPI_DEVICE_SWITCHING_NOT_ALLOWED = 0xFFFFFF8B,
//   NVAPI_TESTING_CLOCKS_NOT_SUPPORTED = 0xFFFFFF8A,
//   NVAPI_UNKNOWN_UNDERSCAN_CONFIG = 0xFFFFFF89,
//   NVAPI_TIMEOUT_RECONFIGURING_GPU_TOPO = 0xFFFFFF88,
//   NVAPI_DATA_NOT_FOUND = 0xFFFFFF87,
//   NVAPI_EXPECTED_ANALOG_DISPLAY = 0xFFFFFF86,
//   NVAPI_NO_VIDLINK = 0xFFFFFF85,
//   NVAPI_REQUIRES_REBOOT = 0xFFFFFF84,
//   NVAPI_INVALID_HYBRID_MODE = 0xFFFFFF83,
//   NVAPI_MIXED_TARGET_TYPES = 0xFFFFFF82,
//   NVAPI_SYSWOW64_NOT_SUPPORTED = 0xFFFFFF81,
//   NVAPI_IMPLICIT_SET_GPU_TOPOLOGY_CHANGE_NOT_ALLOWED = 0xFFFFFF80,
//   NVAPI_REQUEST_USER_TO_CLOSE_NON_MIGRATABLE_APPS = 0xFFFFFF7F,
//   NVAPI_OUT_OF_MEMORY = 0xFFFFFF7E,
//   NVAPI_WAS_STILL_DRAWING = 0xFFFFFF7D,
//   NVAPI_FILE_NOT_FOUND = 0xFFFFFF7C,
//   NVAPI_TOO_MANY_UNIQUE_STATE_OBJECTS = 0xFFFFFF7B,
//   NVAPI_INVALID_CALL = 0xFFFFFF7A,
//   NVAPI_D3D10_1_LIBRARY_NOT_FOUND = 0xFFFFFF79,
//   NVAPI_FUNCTION_NOT_FOUND = 0xFFFFFF78,
//   NVAPI_INVALID_USER_PRIVILEDGE = 0xFFFFFF77,
//   NVAPI_EXPECTED_NON_PRIMARY_DISPLAY_HANDLE = 0xFFFFFF76,
//   NVAPI_EXPECTED_COMPUTE_GPU_HANDLE = 0xFFFFFF75,
//   NVAPI_STEREO_NOT_INITIALIZED = 0xFFFFFF74,
//   NVAPI_STEREO_REGISTRY_ACCESS_FAILED = 0xFFFFFF73,
//   NVAPI_STEREO_REGISTRY_PROFILE_TYPE_NOT_SUPPORTED = 0xFFFFFF72,
//   NVAPI_STEREO_REGISTRY_VALUE_NOT_SUPPORTED = 0xFFFFFF71,
//   NVAPI_STEREO_NOT_ENABLED = 0xFFFFFF70,
//   NVAPI_STEREO_NOT_TURNED_ON = 0xFFFFFF6F,
//   NVAPI_STEREO_INVALID_DEVICE_INTERFACE = 0xFFFFFF6E,
//   NVAPI_STEREO_PARAMETER_OUT_OF_RANGE = 0xFFFFFF6D,
//   NVAPI_STEREO_FRUSTUM_ADJUST_MODE_NOT_SUPPORTED = 0xFFFFFF6C,
//   NVAPI_D3D11_LIBRARY_NOT_FOUND = 0xFFFFFF69,
// };

// /* 1166 */
// enum $9A133664CF7407138D76859A4793DF40 : __int32
// {
//   IMAGE_PROG_SHADOWMAP_SUN = 0x0,
//   IMAGE_PROG_SHADOWMAP_SPOT = 0x1,
//   IMAGE_PROG_FLOATZ = 0x2,
//   IMAGE_PROG_POST_EFFECT_SRC = 0x3,
//   IMAGE_PROG_POST_EFFECT_GODRAYS = 0x4,
//   IMAGE_PROG_POST_EFFECT_0 = 0x5,
//   IMAGE_PROG_POST_EFFECT_1 = 0x6,
//   IMAGE_PROG_PINGPONG_0 = 0x7,
//   IMAGE_PROG_PINGPONG_1 = 0x8,
//   IMAGE_PROG_RESOLVED_SCENE = 0x9,
//   IMAGE_PROG_SAVEDSCREEN = 0xA,
//   IMAGE_PROG_RAW = 0xB,
//   IMAGE_PROG_MODEL_LIGHTING = 0xC,
//   IMAGE_PROG_SWAPCHAIN = 0xD,
//   IMAGE_PROG_16BIT_SYSTEM = 0xE,
//   IMAGE_PROG_8BIT_SYSTEM = 0xF,
//   IMAGE_PROG_SEETHRU_DECAL = 0x10,
//   IMAGE_PROG_LUT = 0x11,
//   IMAGE_PROG_UI3D = 0x12,
//   IMAGE_PROG_UI3D_PING_PONG = 0x13,
//   IMAGE_PROG_MISSILE_CAM = 0x14,
//   IMAGE_PROG_FLOATZ_MISSILE_CAM = 0x15,
//   IMAGE_PROG_COMPOSITE = 0x16,
//   IMAGE_PROG_BLOOM_MIP1 = 0x17,
//   IMAGE_PROG_BLOOM_MIP2 = 0x18,
//   IMAGE_PROG_BLOOM_MIP3 = 0x19,
//   IMAGE_PROG_BLOOM_MIP3_PING = 0x1A,
//   IMAGE_PROG_BLOOM_MIP3_PONG = 0x1B,
//   IMAGE_PROG_BLOOM_STREAK = 0x1C,
//   IMAGE_PROG_COUNT = 0x1D,
// };

// /* 1167 */
// enum GfxImageFileFormat : __int32
// {
//   IMG_FORMAT_INVALID = 0x0,
//   IMG_FORMAT_BITMAP_RGBA = 0x1,
//   IMG_FORMAT_BITMAP_RGB = 0x2,
//   IMG_FORMAT_BITMAP_LUMINANCE_ALPHA = 0x3,
//   IMG_FORMAT_BITMAP_LUMINANCE = 0x4,
//   IMG_FORMAT_BITMAP_ALPHA = 0x5,
//   IMG_FORMAT_WAVELET_RGBA = 0x6,
//   IMG_FORMAT_WAVELET_RGB = 0x7,
//   IMG_FORMAT_WAVELET_LUMINANCE_ALPHA = 0x8,
//   IMG_FORMAT_WAVELET_LUMINANCE = 0x9,
//   IMG_FORMAT_WAVELET_ALPHA = 0xA,
//   IMG_FORMAT_DXT1 = 0xB,
//   IMG_FORMAT_DXT3 = 0xC,
//   IMG_FORMAT_DXT5 = 0xD,
//   IMG_FORMAT_DXN = 0xE,
//   IMG_FORMAT_BITMAP_RGB565 = 0xF,
//   IMG_FORMAT_BITMAP_RGB5A3 = 0x10,
//   IMG_FORMAT_BITMAP_C8 = 0x11,
//   IMG_FORMAT_BITMAP_RGBA8 = 0x12,
//   IMG_FORMAT_A16B16G16R16F = 0x13,
//   IMG_FORMAT_COUNT = 0x14,
// };

// /* 1168 */
// enum GfxRefBlendMode : __int32
// {
//   BLENDMODE_OPAQUE = 0x0,
//   BLENDMODE_BLEND = 0x1,
//   BLENDMODE_GT0 = 0x2,
//   BLENDMODE_GE128 = 0x3,
//   BLENDMODE_LT128 = 0x4,
//   BLENDMODE_ADD = 0x5,
// };

// /* 1169 */
// enum J_COLOR_SPACE : __int32
// {
//   JCS_UNKNOWN = 0x0,
//   JCS_GRAYSCALE = 0x1,
//   JCS_RGB = 0x2,
//   JCS_YCbCr = 0x3,
//   JCS_CMYK = 0x4,
//   JCS_YCCK = 0x5,
// };

// /* 1170 */
// enum J_DCT_METHOD : __int32
// {
//   JDCT_ISLOW = 0x0,
//   JDCT_IFAST = 0x1,
//   JDCT_FLOAT = 0x2,
// };

// /* 1171 */
// enum J_DITHER_MODE : __int32
// {
//   JDITHER_NONE = 0x0,
//   JDITHER_ORDERED = 0x1,
//   JDITHER_FS = 0x2,
// };

// /* 1172 */
// enum J_BUF_MODE : __int32
// {
//   JBUF_PASS_THRU = 0x0,
//   JBUF_SAVE_SOURCE = 0x1,
//   JBUF_CRANK_DEST = 0x2,
//   JBUF_SAVE_AND_PASS = 0x3,
// };

// /* 1173 */
// enum MtlTechSetNotFoundBehavior : __int32
// {
//   MTL_TECHSET_NOT_FOUND_RETURN_NULL = 0x0,
//   MTL_TECHSET_NOT_FOUND_RETURN_DEFAULT = 0x1,
// };

// /* 1174 */
// enum $52458AF7298FAC6588F16908A91E7C51 : __int32
// {
//   MTL_TYPE_DEFAULT = 0x0,
//   MTL_TYPE_MODEL = 0x1,
//   MTL_TYPE_MODEL_VERTCOL = 0x2,
//   MTL_TYPE_WORLD = 0x3,
//   MTL_TYPE_WORLD_VERTCOL = 0x4,
//   MTL_TYPE_COUNT = 0x5,
// };

// /* 1175 */
// enum MaterialShaderType : __int32
// {
//   MTL_VERTEX_SHADER = 0x0,
//   MTL_PIXEL_SHADER = 0x1,
// };

// /* 1176 */
// enum MtlParseSuccess : __int32
// {
//   MTL_PARSE_SUCCESS = 0x0,
//   MTL_PARSE_NO_MATCH = 0x1,
//   MTL_PARSE_ERROR = 0x2,
// };

// /* 1177 */
// enum ShaderParamType : __int32
// {
//   SHADER_PARAM_FLOAT4 = 0x0,
//   SHADER_PARAM_SAMPLER_2D = 0x1,
//   SHADER_PARAM_SAMPLER_3D = 0x2,
//   SHADER_PARAM_SAMPLER_CUBE = 0x3,
//   SHADER_PARAM_SAMPLER_1D = 0x4,
// };

// /* 1178 */
// enum GfxModelLightExtrapolation : __int32
// {
//   GFX_MODELLIGHT_EXTRAPOLATE = 0x0,
//   GFX_MODELLIGHT_SHOW_MISSING = 0x1,
// };

// /* 1179 */
// enum GfxProjectionTypes : __int32
// {
//   GFX_PROJECTION_2D = 0x0,
//   GFX_PROJECTION_3D = 0x1,
// };

// /* 1180 */
// enum $F16CEC0D35833CB9A393DA2A09BA16EA : __int32
// {
//   TEXT_RENDERFLAG_FORCEMONOSPACE = 0x1,
//   TEXT_RENDERFLAG_CURSOR = 0x2,
//   TEXT_RENDERFLAG_DROPSHADOW = 0x4,
//   TEXT_RENDERFLAG_DROPSHADOW_EXTRA = 0x8,
//   TEXT_RENDERFLAG_GLOW = 0x10,
//   TEXT_RENDERFLAG_GLOW_FORCE_COLOR = 0x20,
//   TEXT_RENDERFLAG_FX_DECODE = 0x40,
//   TEXT_RENDERFLAG_PADDING = 0x80,
//   TEXT_RENDERFLAG_SUBTITLETEXT = 0x100,
//   TEXT_RENDERFLAG_CINEMATIC = 0x200,
//   TEXT_RENDERFLAG_TYPEWRITER = 0x400,
//   TEXT_RENDERFLAG_FADEIN = 0x800,
//   TEXT_RENDERFLAG_COD7_TYPEWRITER = 0x1000,
//   TEXT_RENDERFLAG_POP_IN_WRITE = 0x2000,
//   TEXT_RENDERFLAG_REDACT = 0x4000,
//   TEXT_RENDERFLAG_JITTERSCALE = 0x8000,
//   TEXT_RENDERFLAG_COD7_DECODE = 0x10000,
// };

// /* 1181 */
// enum TexAllocFlags : __int32
// {
//   TEXALLOC_STREAM = 0x1,
//   TEXALLOC_HIGHMEM = 0x2,
// };

// /* 1182 */
// enum RenderTargetUsage : __int32
// {
//   RENDERTARGET_USAGE_DEPTH = 0x0,
//   RENDERTARGET_USAGE_RENDER = 0x1,
//   RENDERTARGET_USAGE_RENDER_SHARE_SCENE = 0x2,
//   RENDERTARGET_USAGE_TEXTURE = 0x3,
// };

// /* 1183 */
// enum FullscreenType : __int32
// {
//   FULLSCREEN_DISPLAY = 0x0,
//   FULLSCREEN_MIXED = 0x1,
//   FULLSCREEN_SCENE = 0x2,
// };

// /* 1184 */
// enum ShadowmapRTTiling : __int32
// {
//   SHADOWMAP_RT_TILE_VERTICAL = 0x0,
//   SHADOWMAP_RT_TILE_GRID = 0x1,
// };

// /* 1185 */
// enum $A2F847BB8D31C43E04CD401F511C61FA : __int32
// {
//   POST_FX_FLAME = 0x1,
//   POST_FX_ELECTRIFIED = 0x2,
//   POST_FX_TRANSPORTED = 0x4,
//   POST_FX_WATER = 0x8,
//   POST_FX_POISON = 0x10,
//   POST_FX_DOUBLE_VISION = 0x20,
//   POST_FX_DEPTH_OF_FIELD = 0x40,
//   POST_FX_REVIVE = 0x80,
//   POST_FX_MAIN_GROUP = 0xFF,
//   POST_FX_GENERIC = 0x100,
//   POST_FX_BLUR = 0x80000,
//   POST_FX_SAVE_SCREEN_BLUR = 0x20000000,
//   POST_FX_SAVE_SCREEN_FLASH = 0x40000000,
//   POST_FX_SAVE_SCREEN_REQUIRED = 0x80000000,
//   POST_FX_SAVE_SCREEN_MASK = 0xE0000000,
// };

// /* 1186 */
// enum GFX_SPOT_SHADOW_FLAGS : __int32
// {
//   SPOT_LIGHT_USING_FULL_SPOT_SHADOW_BUFFER = 0x1,
// };

// /* 1187 */
// enum stream_status : __int32
// {
//   STREAM_STATUS_INVALID = 0x0,
//   STREAM_STATUS_PRE = 0x1,
//   STREAM_STATUS_QUEUED = 0x2,
//   STREAM_STATUS_INPROGRESS = 0x3,
//   STREAM_STATUS_CANCELLED = 0x4,
//   STREAM_STATUS_READFAILED = 0x5,
//   STREAM_STATUS_EOF = 0x6,
//   STREAM_STATUS_FINISHED = 0x7,
//   STREAM_STATUS_USER1 = 0x8,
//   STREAM_STATUS_COUNT = 0x9,
// };

// /* 1188 */
// enum $0AD278112074DEABB4BD5967038E2F1B : __int32
// {
//   DISTANCE_CHECK_PERFORM = 0x0,
//   DISTANCE_CHECK_SKIP = 0x1,
// };

// /* 1189 */
// enum GfxUI3DStack::<unnamed_tag> : __int32
// {
//   STACK_MAX_SIZE = 0x2,
// };

// /* 1190 */
// enum math::SinCosType : __int32
// {
//   _cos = 0x0,
//   _negsin = 0x1,
//   _negcos = 0x2,
//   _sin = 0x3,
//   _any = 0x0,
// };

// /* 1191 */
// enum XSurfaceVertColType : __int32
// {
//   XSURFACE_VERTCOL_NONE = 0x0,
//   XSURFACE_VERTCOL_GREY = 0x1,
//   XSURFACE_VERTCOL_ALL = 0x2,
// };

// /* 1192 */
// typedef std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0>::<unnamed_tag> std::_Tset_traits<unsigned __int64,std::less<unsigned __int64>,std::allocator<unsigned __int64>,0>::<unnamed_tag>;

// /* 1193 */
// typedef std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >::_Redbl std::_Tree<std::_Tset_traits<unsigned __int64,std::less<unsigned __int64>,std::allocator<unsigned __int64>,0> >::_Redbl;

// /* 1194 */
// enum GfxFrameBufferTextures : __int32
// {
//   RT_COLOR0 = 0x0,
//   RT_DEPTH = 0x1,
//   RT_DEPTH_AS_ARGB = 0x2,
//   FRAME_BUFFER_TEXTURE_COUNT = 0x3,
// };

// /* 1195 */
// enum RB_DrawDebugSphere::__l2::<unnamed_tag> : __int32
// {
//   SPHERE_MAX_SIDES = 0x20,
// };

// /* 1196 */
// enum GfxSortedHistoryAdd : __int32
// {
//   SH_ADD_NEVER = 0x0,
//   SH_ADD_IF_NEW = 0x1,
// };

// /* 1197 */
// enum $4A3C60FAC9076ECED52AA17DDEC80626 : __int32
// {
//   RB_RESOURCE_NONE = 0x0,
//   RB_RESOURCE_CREATE_TEXTURE = 0x1,
//   RB_RESOURCE_RELEASE = 0x2,
//   RB_RESOURCE_LOAD_TEXTURE = 0x3,
//   RB_RESOURCE_RELOAD_TEXTURE = 0x4,
//   RB_RESOURCE_CALLBACK = 0x5,
//   RB_RESOURCE_CALLBACK_PARAM = 0x6,
//   RB_RESOURCE_CREATE_VERTEX_DECLARATION = 0x7,
//   RB_RESOURCE_CREATE_VERTEX_SHADER = 0x8,
//   RB_RESOURCE_CREATE_PIXEL_SHADER = 0x9,
//   RB_RESOURCE_LOAD_VERTEX_BUFFER = 0xA,
//   RB_RESOURCE_LOAD_INDEX_BUFFER = 0xB,
// };

// /* 1198 */
// enum J_MESSAGE_CODE : __int32
// {
//   JMSG_NOMESSAGE = 0x0,
//   JERR_ARITH_NOTIMPL = 0x1,
//   JERR_BAD_ALIGN_TYPE = 0x2,
//   JERR_BAD_ALLOC_CHUNK = 0x3,
//   JERR_BAD_BUFFER_MODE = 0x4,
//   JERR_BAD_COMPONENT_ID = 0x5,
//   JERR_BAD_DCT_COEF = 0x6,
//   JERR_BAD_DCTSIZE = 0x7,
//   JERR_BAD_HUFF_TABLE = 0x8,
//   JERR_BAD_IN_COLORSPACE = 0x9,
//   JERR_BAD_J_COLORSPACE = 0xA,
//   JERR_BAD_LENGTH = 0xB,
//   JERR_BAD_LIB_VERSION = 0xC,
//   JERR_BAD_MCU_SIZE = 0xD,
//   JERR_BAD_POOL_ID = 0xE,
//   JERR_BAD_PRECISION = 0xF,
//   JERR_BAD_PROGRESSION = 0x10,
//   JERR_BAD_PROG_SCRIPT = 0x11,
//   JERR_BAD_SAMPLING = 0x12,
//   JERR_BAD_SCAN_SCRIPT = 0x13,
//   JERR_BAD_STATE = 0x14,
//   JERR_BAD_STRUCT_SIZE = 0x15,
//   JERR_BAD_VIRTUAL_ACCESS = 0x16,
//   JERR_BUFFER_SIZE = 0x17,
//   JERR_CANT_SUSPEND = 0x18,
//   JERR_CCIR601_NOTIMPL = 0x19,
//   JERR_COMPONENT_COUNT = 0x1A,
//   JERR_CONVERSION_NOTIMPL = 0x1B,
//   JERR_DAC_INDEX = 0x1C,
//   JERR_DAC_VALUE = 0x1D,
//   JERR_DHT_INDEX = 0x1E,
//   JERR_DQT_INDEX = 0x1F,
//   JERR_EMPTY_IMAGE = 0x20,
//   JERR_EMS_READ = 0x21,
//   JERR_EMS_WRITE = 0x22,
//   JERR_EOI_EXPECTED = 0x23,
//   JERR_FILE_READ = 0x24,
//   JERR_FILE_WRITE = 0x25,
//   JERR_FRACT_SAMPLE_NOTIMPL = 0x26,
//   JERR_HUFF_CLEN_OVERFLOW = 0x27,
//   JERR_HUFF_MISSING_CODE = 0x28,
//   JERR_IMAGE_TOO_BIG = 0x29,
//   JERR_INPUT_EMPTY = 0x2A,
//   JERR_INPUT_EOF = 0x2B,
//   JERR_MISMATCHED_QUANT_TABLE = 0x2C,
//   JERR_MISSING_DATA = 0x2D,
//   JERR_MODE_CHANGE = 0x2E,
//   JERR_NOTIMPL = 0x2F,
//   JERR_NOT_COMPILED = 0x30,
//   JERR_NO_BACKING_STORE = 0x31,
//   JERR_NO_HUFF_TABLE = 0x32,
//   JERR_NO_IMAGE = 0x33,
//   JERR_NO_QUANT_TABLE = 0x34,
//   JERR_NO_SOI = 0x35,
//   JERR_OUT_OF_MEMORY = 0x36,
//   JERR_QUANT_COMPONENTS = 0x37,
//   JERR_QUANT_FEW_COLORS = 0x38,
//   JERR_QUANT_MANY_COLORS = 0x39,
//   JERR_SOF_DUPLICATE = 0x3A,
//   JERR_SOF_NO_SOS = 0x3B,
//   JERR_SOF_UNSUPPORTED = 0x3C,
//   JERR_SOI_DUPLICATE = 0x3D,
//   JERR_SOS_NO_SOF = 0x3E,
//   JERR_TFILE_CREATE = 0x3F,
//   JERR_TFILE_READ = 0x40,
//   JERR_TFILE_SEEK = 0x41,
//   JERR_TFILE_WRITE = 0x42,
//   JERR_TOO_LITTLE_DATA = 0x43,
//   JERR_UNKNOWN_MARKER = 0x44,
//   JERR_VIRTUAL_BUG = 0x45,
//   JERR_WIDTH_OVERFLOW = 0x46,
//   JERR_XMS_READ = 0x47,
//   JERR_XMS_WRITE = 0x48,
//   JMSG_COPYRIGHT = 0x49,
//   JMSG_VERSION = 0x4A,
//   JTRC_16BIT_TABLES = 0x4B,
//   JTRC_ADOBE = 0x4C,
//   JTRC_APP0 = 0x4D,
//   JTRC_APP14 = 0x4E,
//   JTRC_DAC = 0x4F,
//   JTRC_DHT = 0x50,
//   JTRC_DQT = 0x51,
//   JTRC_DRI = 0x52,
//   JTRC_EMS_CLOSE = 0x53,
//   JTRC_EMS_OPEN = 0x54,
//   JTRC_EOI = 0x55,
//   JTRC_HUFFBITS = 0x56,
//   JTRC_JFIF = 0x57,
//   JTRC_JFIF_BADTHUMBNAILSIZE = 0x58,
//   JTRC_JFIF_EXTENSION = 0x59,
//   JTRC_JFIF_THUMBNAIL = 0x5A,
//   JTRC_MISC_MARKER = 0x5B,
//   JTRC_PARMLESS_MARKER = 0x5C,
//   JTRC_QUANTVALS = 0x5D,
//   JTRC_QUANT_3_NCOLORS = 0x5E,
//   JTRC_QUANT_NCOLORS = 0x5F,
//   JTRC_QUANT_SELECTED = 0x60,
//   JTRC_RECOVERY_ACTION = 0x61,
//   JTRC_RST = 0x62,
//   JTRC_SMOOTH_NOTIMPL = 0x63,
//   JTRC_SOF = 0x64,
//   JTRC_SOF_COMPONENT = 0x65,
//   JTRC_SOI = 0x66,
//   JTRC_SOS = 0x67,
//   JTRC_SOS_COMPONENT = 0x68,
//   JTRC_SOS_PARAMS = 0x69,
//   JTRC_TFILE_CLOSE = 0x6A,
//   JTRC_TFILE_OPEN = 0x6B,
//   JTRC_THUMB_JPEG = 0x6C,
//   JTRC_THUMB_PALETTE = 0x6D,
//   JTRC_THUMB_RGB = 0x6E,
//   JTRC_UNKNOWN_IDS = 0x6F,
//   JTRC_XMS_CLOSE = 0x70,
//   JTRC_XMS_OPEN = 0x71,
//   JWRN_ADOBE_XFORM = 0x72,
//   JWRN_BOGUS_PROGRESSION = 0x73,
//   JWRN_EXTRANEOUS_DATA = 0x74,
//   JWRN_HIT_MARKER = 0x75,
//   JWRN_HUFF_BAD_CODE = 0x76,
//   JWRN_JFIF_MAJOR = 0x77,
//   JWRN_JPEG_EOF = 0x78,
//   JWRN_MUST_RESYNC = 0x79,
//   JWRN_NOT_SEQUENTIAL = 0x7A,
//   JWRN_TOO_MUCH_DATA = 0x7B,
//   JMSG_LASTMSGCODE = 0x7C,
// };

// /* 1199 */
// enum SA_AttrTarget : __int32
// {
//   SA_All = 0xFFFF,
//   SA_Assembly = 0x1,
//   SA_Class = 0x4,
//   SA_Constructor = 0x20,
//   SA_Delegate = 0x1000,
//   SA_Enum = 0x10,
//   SA_Event = 0x200,
//   SA_Field = 0x100,
//   SA_GenericParameter = 0x4000,
//   SA_Interface = 0x400,
//   SA_Method = 0x40,
//   SA_Module = 0x2,
//   SA_Parameter = 0x800,
//   SA_Property = 0x80,
//   SA_ReturnValue = 0x2000,
//   SA_Struct = 0x8,
//   SA_This = 0x8000,
// };

// /* 1200 */
// enum SA_YesNoMaybe : __int32
// {
//   SA_No = 0xFFF0001,
//   SA_Maybe = 0xFFF0010,
//   SA_Yes = 0xFFF0100,
// };

// /* 1201 */
// enum SA_AccessType : __int32
// {
//   SA_NoAccess = 0x0,
//   SA_Read = 0x1,
//   SA_Write = 0x2,
//   SA_ReadWrite = 0x3,
// };

// /* 1202 */
// enum JPEG_MARKER : __int32
// {
//   M_SOF0 = 0xC0,
//   M_SOF1 = 0xC1,
//   M_SOF2 = 0xC2,
//   M_SOF3 = 0xC3,
//   M_SOF5 = 0xC5,
//   M_SOF6 = 0xC6,
//   M_SOF7 = 0xC7,
//   M_JPG = 0xC8,
//   M_SOF9 = 0xC9,
//   M_SOF10 = 0xCA,
//   M_SOF11 = 0xCB,
//   M_SOF13 = 0xCD,
//   M_SOF14 = 0xCE,
//   M_SOF15 = 0xCF,
//   M_DHT = 0xC4,
//   M_DAC = 0xCC,
//   M_RST0 = 0xD0,
//   M_RST1 = 0xD1,
//   M_RST2 = 0xD2,
//   M_RST3 = 0xD3,
//   M_RST4 = 0xD4,
//   M_RST5 = 0xD5,
//   M_RST6 = 0xD6,
//   M_RST7 = 0xD7,
//   M_SOI = 0xD8,
//   M_EOI = 0xD9,
//   M_SOS = 0xDA,
//   M_DQT = 0xDB,
//   M_DNL = 0xDC,
//   M_DRI = 0xDD,
//   M_DHP = 0xDE,
//   M_EXP = 0xDF,
//   M_APP0 = 0xE0,
//   M_APP1 = 0xE1,
//   M_APP2 = 0xE2,
//   M_APP3 = 0xE3,
//   M_APP4 = 0xE4,
//   M_APP5 = 0xE5,
//   M_APP6 = 0xE6,
//   M_APP7 = 0xE7,
//   M_APP8 = 0xE8,
//   M_APP9 = 0xE9,
//   M_APP10 = 0xEA,
//   M_APP11 = 0xEB,
//   M_APP12 = 0xEC,
//   M_APP13 = 0xED,
//   M_APP14 = 0xEE,
//   M_APP15 = 0xEF,
//   M_JPG0 = 0xF0,
//   M_JPG13 = 0xFD,
//   M_COM = 0xFE,
//   M_TEM = 0x1,
//   M_ERROR = 0x100,
// };

// /* 1203 */
// enum c_pass_type : __int32
// {
//   main_pass = 0x0,
//   huff_opt_pass = 0x1,
//   output_pass = 0x2,
// };

// /* 1204 */
// enum _EXCEPTION_DISPOSITION : __int32
// {
//   ExceptionContinueExecution = 0x0,
//   ExceptionContinueSearch = 0x1,
//   ExceptionNestedException = 0x2,
//   ExceptionCollidedUnwind = 0x3,
// };

// /* 1205 */
// enum _NT_PRODUCT_TYPE : __int32
// {
//   NtProductWinNt = 0x1,
//   NtProductLanManNt = 0x2,
//   NtProductServer = 0x3,
// };

// /* 1206 */
// enum _ALTERNATIVE_ARCHITECTURE_TYPE : __int32
// {
//   StandardDesign = 0x0,
//   NEC98x86 = 0x1,
//   EndAlternatives = 0x2,
// };

// /* 1207 */
// enum _HEAP_INFORMATION_CLASS : __int32
// {
//   HeapCompatibilityInformation = 0x0,
//   HeapEnableTerminationOnCorruption = 0x1,
// };

// /* 1208 */
// enum INTRNCVT_STATUS : __int32
// {
//   INTRNCVT_OK = 0x0,
//   INTRNCVT_OVERFLOW = 0x1,
//   INTRNCVT_UNDERFLOW = 0x2,
// };

// /* 1209 */
// enum STATE : __int32
// {
//   ST_NORMAL = 0x0,
//   ST_PERCENT = 0x1,
//   ST_FLAG = 0x2,
//   ST_WIDTH = 0x3,
//   ST_DOT = 0x4,
//   ST_PRECIS = 0x5,
//   ST_SIZE = 0x6,
//   ST_TYPE = 0x7,
// };

// /* 1210 */
// enum CHARTYPE : __int32
// {
//   CH_OTHER = 0x0,
//   CH_PERCENT = 0x1,
//   CH_DOT = 0x2,
//   CH_STAR = 0x3,
//   CH_ZERO = 0x4,
//   CH_DIGIT = 0x5,
//   CH_FLAG = 0x6,
//   CH_SIZE = 0x7,
//   CH_TYPE = 0x8,
// };

// /* 1211 */
// enum ARG_TYPE : __int32
// {
//   eblank = 0x0,
//   e_int_arg = 0x1,
//   e_short_arg = 0x2,
//   e_ptr_arg = 0x3,
//   e_int64_arg = 0x4,
//   e_long_long_arg = 0x5,
//   e_long_arg = 0x6,
//   e_longdouble_arg = 0x7,
//   e_double_arg = 0x8,
// };

// /* 1212 */
// enum $D283E5A92EBEB600100C8EBC9C67A011 : __int32
// {
//   lkNormal = 0x0,
//   lkPrealloc = 0x1,
//   lkDeleted = 0x2,
// };

// /* 1213 */
// enum state_t : __int32
// {
//   S_INIT = 0x0,
//   S_EAT0L = 0x1,
//   S_SIGNM = 0x2,
//   S_GETL = 0x3,
//   S_GETR = 0x4,
//   S_POINT = 0x5,
//   S_E = 0x6,
//   S_SIGNE = 0x7,
//   S_EAT0E = 0x8,
//   S_GETE = 0x9,
//   S_END = 0xA,
//   S_E_IMPLICIT = 0xB,
// };

// /* 1214 */
// enum error_types : __int32
// {
//   logl_zero = 0x0,
//   logl_negative = 0x1,
//   log_zero = 0x2,
//   log_negative = 0x3,
//   logf_zero = 0x4,
//   logf_negative = 0x5,
//   log10l_zero = 0x6,
//   log10l_negative = 0x7,
//   log10_zero = 0x8,
//   log10_negative = 0x9,
//   log10f_zero = 0xA,
//   log10f_negative = 0xB,
//   expl_overflow = 0xC,
//   expl_underflow = 0xD,
//   exp_overflow = 0xE,
//   exp_underflow = 0xF,
//   expf_overflow = 0x10,
//   expf_underflow = 0x11,
//   powl_overflow = 0x12,
//   powl_underflow = 0x13,
//   powl_zero_to_zero = 0x14,
//   powl_zero_to_negative = 0x15,
//   powl_neg_to_non_integer = 0x16,
//   powl_nan_to_zero = 0x17,
//   pow_overflow = 0x18,
//   pow_underflow = 0x19,
//   pow_zero_to_zero = 0x1A,
//   pow_zero_to_negative = 0x1B,
//   pow_neg_to_non_integer = 0x1C,
//   pow_nan_to_zero = 0x1D,
//   powf_overflow = 0x1E,
//   powf_underflow = 0x1F,
//   powf_zero_to_zero = 0x20,
//   powf_zero_to_negative = 0x21,
//   powf_neg_to_non_integer = 0x22,
//   powf_nan_to_zero = 0x23,
//   atan2l_zero = 0x24,
//   atan2_zero = 0x25,
//   atan2f_zero = 0x26,
//   expm1l_overflow = 0x27,
//   expm1l_underflow = 0x28,
//   expm1_overflow = 0x29,
//   expm1_underflow = 0x2A,
//   expm1f_overflow = 0x2B,
//   expm1f_underflow = 0x2C,
//   hypotl_overflow = 0x2D,
//   hypot_overflow = 0x2E,
//   hypotf_overflow = 0x2F,
//   sqrtl_negative = 0x30,
//   sqrt_negative = 0x31,
//   sqrtf_negative = 0x32,
//   scalbl_overflow = 0x33,
//   scalbl_underflow = 0x34,
//   scalb_overflow = 0x35,
//   scalb_underflow = 0x36,
//   scalbf_overflow = 0x37,
//   scalbf_underflow = 0x38,
//   acosl_gt_one = 0x39,
//   acos_gt_one = 0x3A,
//   acosf_gt_one = 0x3B,
//   asinl_gt_one = 0x3C,
//   asin_gt_one = 0x3D,
//   asinf_gt_one = 0x3E,
//   coshl_overflow = 0x3F,
//   cosh_overflow = 0x40,
//   coshf_overflow = 0x41,
//   y0l_zero = 0x42,
//   y0l_negative = 0x43,
//   y0l_gt_loss = 0x44,
//   y0_zero = 0x45,
//   y0_negative = 0x46,
//   y0_gt_loss = 0x47,
//   y0f_zero = 0x48,
//   y0f_negative = 0x49,
//   y0f_gt_loss = 0x4A,
//   y1l_zero = 0x4B,
//   y1l_negative = 0x4C,
//   y1l_gt_loss = 0x4D,
//   y1_zero = 0x4E,
//   y1_negative = 0x4F,
//   y1_gt_loss = 0x50,
//   y1f_zero = 0x51,
//   y1f_negative = 0x52,
//   y1f_gt_loss = 0x53,
//   ynl_zero = 0x54,
//   ynl_negative = 0x55,
//   ynl_gt_loss = 0x56,
//   yn_zero = 0x57,
//   yn_negative = 0x58,
//   yn_gt_loss = 0x59,
//   ynf_zero = 0x5A,
//   ynf_negative = 0x5B,
//   ynf_gt_loss = 0x5C,
//   j0l_gt_loss = 0x5D,
//   j0_gt_loss = 0x5E,
//   j0f_gt_loss = 0x5F,
//   j1l_gt_loss = 0x60,
//   j1_gt_loss = 0x61,
//   j1f_gt_loss = 0x62,
//   jnl_gt_loss = 0x63,
//   jn_gt_loss = 0x64,
//   jnf_gt_loss = 0x65,
//   lgammal_overflow = 0x66,
//   lgammal_negative = 0x67,
//   lgammal_reserve = 0x68,
//   lgamma_overflow = 0x69,
//   lgamma_negative = 0x6A,
//   lgamma_reserve = 0x6B,
//   lgammaf_overflow = 0x6C,
//   lgammaf_negative = 0x6D,
//   lgammaf_reserve = 0x6E,
//   gammal_overflow = 0x6F,
//   gammal_negative = 0x70,
//   gammal_reserve = 0x71,
//   gamma_overflow = 0x72,
//   gamma_negative = 0x73,
//   gamma_reserve = 0x74,
//   gammaf_overflow = 0x75,
//   gammaf_negative = 0x76,
//   gammaf_reserve = 0x77,
//   fmodl_by_zero = 0x78,
//   fmod_by_zero = 0x79,
//   fmodf_by_zero = 0x7A,
//   remainderl_by_zero = 0x7B,
//   remainder_by_zero = 0x7C,
//   remainderf_by_zero = 0x7D,
//   sinhl_overflow = 0x7E,
//   sinh_overflow = 0x7F,
//   sinhf_overflow = 0x80,
//   atanhl_gt_one = 0x81,
//   atanhl_eq_one = 0x82,
//   atanh_gt_one = 0x83,
//   atanh_eq_one = 0x84,
//   atanhf_gt_one = 0x85,
//   atanhf_eq_one = 0x86,
//   acoshl_lt_one = 0x87,
//   acosh_lt_one = 0x88,
//   acoshf_lt_one = 0x89,
//   log1pl_zero = 0x8A,
//   log1pl_negative = 0x8B,
//   log1p_zero = 0x8C,
//   log1p_negative = 0x8D,
//   log1pf_zero = 0x8E,
//   log1pf_negative = 0x8F,
//   ldexpl_overflow = 0x90,
//   ldexpl_underflow = 0x91,
//   ldexp_overflow = 0x92,
//   ldexp_underflow = 0x93,
//   ldexpf_overflow = 0x94,
//   ldexpf_underflow = 0x95,
//   logbl_zero = 0x96,
//   logb_zero = 0x97,
//   logbf_zero = 0x98,
//   nextafterl_overflow = 0x99,
//   nextafter_overflow = 0x9A,
//   nextafterf_overflow = 0x9B,
//   ilogbl_zero = 0x9C,
//   ilogb_zero = 0x9D,
//   ilogbf_zero = 0x9E,
//   exp2l_overflow = 0x9F,
//   exp2l_underflow = 0xA0,
//   exp2_overflow = 0xA1,
//   exp2_underflow = 0xA2,
//   exp2f_overflow = 0xA3,
//   exp2f_underflow = 0xA4,
//   exp10l_overflow = 0xA5,
//   exp10_overflow = 0xA6,
//   exp10f_overflow = 0xA7,
//   log2l_zero = 0xA8,
//   log2l_negative = 0xA9,
//   log2_zero = 0xAA,
//   log2_negative = 0xAB,
//   log2f_zero = 0xAC,
//   log2f_negative = 0xAD,
//   log_nan = 0x3E8,
//   log10_nan = 0x3E9,
//   exp_nan = 0x3EA,
//   atan_nan = 0x3EB,
//   ceil_nan = 0x3EC,
//   floor_nan = 0x3ED,
//   pow_nan = 0x3EE,
//   modf_nan = 0x3EF,
//   acos_nan = 0x3F0,
//   asin_nan = 0x3F1,
//   sin_naninf = 0x3F2,
//   cos_naninf = 0x3F3,
//   tan_naninf = 0x3F4,
// };

// /* 1215 */
// enum _FPIEEE_FORMAT : __int32
// {
//   _FpFormatFp32 = 0x0,
//   _FpFormatFp64 = 0x1,
//   _FpFormatFp80 = 0x2,
//   _FpFormatFp128 = 0x3,
//   _FpFormatI16 = 0x4,
//   _FpFormatI32 = 0x5,
//   _FpFormatI64 = 0x6,
//   _FpFormatU16 = 0x7,
//   _FpFormatU32 = 0x8,
//   _FpFormatU64 = 0x9,
//   _FpFormatBcd80 = 0xA,
//   _FpFormatCompare = 0xB,
//   _FpFormatString = 0xC,
// };

// /* 1216 */
// enum _FP_OPERATION_CODE : __int32
// {
//   _FpCodeUnspecified = 0x0,
//   _FpCodeAdd = 0x1,
//   _FpCodeSubtract = 0x2,
//   _FpCodeMultiply = 0x3,
//   _FpCodeDivide = 0x4,
//   _FpCodeSquareRoot = 0x5,
//   _FpCodeRemainder = 0x6,
//   _FpCodeCompare = 0x7,
//   _FpCodeConvert = 0x8,
//   _FpCodeRound = 0x9,
//   _FpCodeTruncate = 0xA,
//   _FpCodeFloor = 0xB,
//   _FpCodeCeil = 0xC,
//   _FpCodeAcos = 0xD,
//   _FpCodeAsin = 0xE,
//   _FpCodeAtan = 0xF,
//   _FpCodeAtan2 = 0x10,
//   _FpCodeCabs = 0x11,
//   _FpCodeCos = 0x12,
//   _FpCodeCosh = 0x13,
//   _FpCodeExp = 0x14,
//   _FpCodeFabs = 0x15,
//   _FpCodeFmod = 0x16,
//   _FpCodeFrexp = 0x17,
//   _FpCodeHypot = 0x18,
//   _FpCodeLdexp = 0x19,
//   _FpCodeLog = 0x1A,
//   _FpCodeLog10 = 0x1B,
//   _FpCodeModf = 0x1C,
//   _FpCodePow = 0x1D,
//   _FpCodeSin = 0x1E,
//   _FpCodeSinh = 0x1F,
//   _FpCodeTan = 0x20,
//   _FpCodeTanh = 0x21,
//   _FpCodeY0 = 0x22,
//   _FpCodeY1 = 0x23,
//   _FpCodeYn = 0x24,
//   _FpCodeLogb = 0x25,
//   _FpCodeNextafter = 0x26,
//   _FpCodeNegate = 0x27,
//   _FpCodeFmin = 0x28,
//   _FpCodeFmax = 0x29,
//   _FpCodeConvertTrunc = 0x2A,
//   _XMMIAddps = 0x2B,
//   _XMMIAddss = 0x2C,
//   _XMMISubps = 0x2D,
//   _XMMISubss = 0x2E,
//   _XMMIMulps = 0x2F,
//   _XMMIMulss = 0x30,
//   _XMMIDivps = 0x31,
//   _XMMIDivss = 0x32,
//   _XMMISqrtps = 0x33,
//   _XMMISqrtss = 0x34,
//   _XMMIMaxps = 0x35,
//   _XMMIMaxss = 0x36,
//   _XMMIMinps = 0x37,
//   _XMMIMinss = 0x38,
//   _XMMICmpps = 0x39,
//   _XMMICmpss = 0x3A,
//   _XMMIComiss = 0x3B,
//   _XMMIUComiss = 0x3C,
//   _XMMICvtpi2ps = 0x3D,
//   _XMMICvtsi2ss = 0x3E,
//   _XMMICvtps2pi = 0x3F,
//   _XMMICvtss2si = 0x40,
//   _XMMICvttps2pi = 0x41,
//   _XMMICvttss2si = 0x42,
//   _XMMIAddsubps = 0x43,
//   _XMMIHaddps = 0x44,
//   _XMMIHsubps = 0x45,
//   _XMMIRoundps = 0x46,
//   _XMMIRoundss = 0x47,
//   _XMMIDpps = 0x48,
//   _XMMI2Addpd = 0x49,
//   _XMMI2Addsd = 0x4A,
//   _XMMI2Subpd = 0x4B,
//   _XMMI2Subsd = 0x4C,
//   _XMMI2Mulpd = 0x4D,
//   _XMMI2Mulsd = 0x4E,
//   _XMMI2Divpd = 0x4F,
//   _XMMI2Divsd = 0x50,
//   _XMMI2Sqrtpd = 0x51,
//   _XMMI2Sqrtsd = 0x52,
//   _XMMI2Maxpd = 0x53,
//   _XMMI2Maxsd = 0x54,
//   _XMMI2Minpd = 0x55,
//   _XMMI2Minsd = 0x56,
//   _XMMI2Cmppd = 0x57,
//   _XMMI2Cmpsd = 0x58,
//   _XMMI2Comisd = 0x59,
//   _XMMI2UComisd = 0x5A,
//   _XMMI2Cvtpd2pi = 0x5B,
//   _XMMI2Cvtsd2si = 0x5C,
//   _XMMI2Cvttpd2pi = 0x5D,
//   _XMMI2Cvttsd2si = 0x5E,
//   _XMMI2Cvtps2pd = 0x5F,
//   _XMMI2Cvtss2sd = 0x60,
//   _XMMI2Cvtpd2ps = 0x61,
//   _XMMI2Cvtsd2ss = 0x62,
//   _XMMI2Cvtdq2ps = 0x63,
//   _XMMI2Cvttps2dq = 0x64,
//   _XMMI2Cvtps2dq = 0x65,
//   _XMMI2Cvttpd2dq = 0x66,
//   _XMMI2Cvtpd2dq = 0x67,
//   _XMMI2Addsubpd = 0x68,
//   _XMMI2Haddpd = 0x69,
//   _XMMI2Hsubpd = 0x6A,
//   _XMMI2Roundpd = 0x6B,
//   _XMMI2Roundsd = 0x6C,
//   _XMMI2Dppd = 0x6D,
// };

// /* 1217 */
// enum _FPIEEE_ROUNDING_MODE : __int32
// {
//   _FpRoundNearest = 0x0,
//   _FpRoundMinusInfinity = 0x1,
//   _FpRoundPlusInfinity = 0x2,
//   _FpRoundChopped = 0x3,
// };

// /* 1218 */
// enum _FPIEEE_PRECISION : __int32
// {
//   _FpPrecisionFull = 0x0,
//   _FpPrecision53 = 0x1,
//   _FpPrecision24 = 0x2,
// };

// /* 1219 */
// enum Tokens : __int32
// {
//   TOK_basedLp = 0x0,
//   TOK_cdecl = 0x1,
//   TOK_pascal = 0x2,
//   TOK_stdcall = 0x3,
//   TOK_thiscall = 0x4,
//   TOK_fastcall = 0x5,
//   TOK_cocall = 0x6,
//   TOK_ptr64 = 0x7,
//   TOK_restrict = 0x8,
//   TOK_unaligned = 0x9,
//   TOK__last = 0xA,
// };

// /* 1220 */
// enum DNameStatus : __int32
// {
//   DN_valid = 0x0,
//   DN_truncated = 0x1,
//   DN_invalid = 0x2,
//   DN_error = 0x3,
// };

// /* 1221 */
// enum _RTC_ErrorNumber : __int32
// {
//   _RTC_CHKSTK = 0x0,
//   _RTC_CVRT_LOSS_INFO = 0x1,
//   _RTC_CORRUPT_STACK = 0x2,
//   _RTC_UNINIT_LOCAL_USE = 0x3,
//   _RTC_CORRUPTED_ALLOCA = 0x4,
//   _RTC_ILLEGAL = 0x5,
// };

// /* 1222 */
// enum OAPIPELINE::EAudioFormat : __int32
// {
//   PCM_INT8 = 0x0,
//   PCM_INT16 = 0x1,
//   PCM_INT20IN24 = 0x2,
//   PCM_INT20IN32 = 0x3,
//   PCM_INT24IN24 = 0x4,
//   PCM_INT24IN32 = 0x5,
//   PCM_INT32 = 0x6,
//   PCM_FLOAT32 = 0x7,
// };

// /* 1223 */
// enum _tagINTERNETFEATURELIST : __int32
// {
//   FEATURE_OBJECT_CACHING = 0x0,
//   FEATURE_ZONE_ELEVATION = 0x1,
//   FEATURE_MIME_HANDLING = 0x2,
//   FEATURE_MIME_SNIFFING = 0x3,
//   FEATURE_WINDOW_RESTRICTIONS = 0x4,
//   FEATURE_WEBOC_POPUPMANAGEMENT = 0x5,
//   FEATURE_BEHAVIORS = 0x6,
//   FEATURE_DISABLE_MK_PROTOCOL = 0x7,
//   FEATURE_LOCALMACHINE_LOCKDOWN = 0x8,
//   FEATURE_SECURITYBAND = 0x9,
//   FEATURE_RESTRICT_ACTIVEXINSTALL = 0xA,
//   FEATURE_VALIDATE_NAVIGATE_URL = 0xB,
//   FEATURE_RESTRICT_FILEDOWNLOAD = 0xC,
//   FEATURE_ADDON_MANAGEMENT = 0xD,
//   FEATURE_PROTOCOL_LOCKDOWN = 0xE,
//   FEATURE_HTTP_USERNAME_PASSWORD_DISABLE = 0xF,
//   FEATURE_SAFE_BINDTOOBJECT = 0x10,
//   FEATURE_UNC_SAVEDFILECHECK = 0x11,
//   FEATURE_GET_URL_DOM_FILEPATH_UNENCODED = 0x12,
//   FEATURE_TABBED_BROWSING = 0x13,
//   FEATURE_SSLUX = 0x14,
//   FEATURE_DISABLE_NAVIGATION_SOUNDS = 0x15,
//   FEATURE_DISABLE_LEGACY_COMPRESSION = 0x16,
//   FEATURE_FORCE_ADDR_AND_STATUS = 0x17,
//   FEATURE_XMLHTTP = 0x18,
//   FEATURE_DISABLE_TELNET_PROTOCOL = 0x19,
//   FEATURE_FEEDS = 0x1A,
//   FEATURE_BLOCK_INPUT_PROMPTS = 0x1B,
//   FEATURE_ENTRY_COUNT = 0x1C,
// };

// /* 1224 */
// enum XAPOBaseWaveHlpNameSpace::WaveFmtSize : __int32
// {
//   FmtReadSize = 0x0,
//   FmtWriteSize = 0x1,
// };

// /* 1225 */
// typedef $4D82FFD23A232AE1E043C123231C9F85 $1B309A1B4809FA75A2791E4B451F109B;

// /* 1226 */
// typedef $229F243C29BD2822189FBA4671A843A3 $F2DE834046F78D62D18562EF724C3984;

// /* 1227 */
// enum blobtype_t : __int32
// {
//   BLOB_TYPE_CAC = 0x0,
//   BLOB_TYPE_GLOBAL = 0x1,
//   BLOB_TYPE_INVALID = 0x2,
// };

// /* 1228 */
// typedef e_friendsListColumns e_combatRecordMiniFriendsListColumns;

// /* 1229 */
// enum _D3DXIMAGE_FILEFORMAT : __int32
// {
//   D3DXIFF_BMP = 0x0,
//   D3DXIFF_JPG = 0x1,
//   D3DXIFF_TGA = 0x2,
//   D3DXIFF_PNG = 0x3,
//   D3DXIFF_DDS = 0x4,
//   D3DXIFF_PPM = 0x5,
//   D3DXIFF_DIB = 0x6,
//   D3DXIFF_HDR = 0x7,
//   D3DXIFF_PFM = 0x8,
//   D3DXIFF_FORCE_DWORD = 0x7FFFFFFF,
// };

// /* 1230 */
// enum sv_apstate_t : __int32
// {
//   AP_START = 0x0,
//   AP_GETTINGDATA = 0x1,
//   AP_GETONE = 0x2,
//   AP_CHOOSE = 0x3,
//   AP_SETTINGDATA = 0x4,
//   AP_SLEEPING = 0x5,
//   AP_ERROR = 0x6,
// };

// /* 1231 */
// enum fileShareSearchAge : __int32
// {
//   FILESHARE_AGE_ALLTIME = 0x0,
//   FILESHARE_AGE_WEEK = 0x1,
//   FILESHARE_AGE_MONTH = 0x2,
//   FILESHARE_AGE_YEAR = 0x3,
// };

// /* 1232 */
// enum e_restricted_category : __int32
// {
//   RESTRICTED_CLIENT = 0x0,
//   RESTRICTED_SERVER = 0x1,
// };

// /* 1233 */
// enum e_restricted_tableColumns : __int32
// {
//   RESTRICTED_TABLE_NAME = 0x0,
//   RESTRICTED_TABLE_CATEGORY = 0x1,
//   RESTRICTED_TABLE_TYPE = 0x2,
//   RESTRICTED_TABLE_COUNT = 0x3,
// };

// /* 1234 */
// typedef e_restricted_tableColumns e_restricted_ClientTableColumns;

// 1236
union DvarValue
{
  bool enabled;
  int integer;
  unsigned int unsigned_int;
  __int64 integer64;
  unsigned __int64 unsigned_int64;
  float value;
  float vector[4];
  const char* string;
  unsigned __int8 color[4];
};

static_assert(sizeof(DvarValue) == 0x10, "The size is not correct");

// 1242
union DvarLimits
{
  // 1237
  struct
  {
    int string_count;
    const char** strings;
  } enumeration;

  // 1238
  struct
  {
    int min;
    int max;
  } integer;

  // 1239
  struct
  {
    __int64 min;
    __int64 max;
  } integer64;

  // 1240
  struct
  {
    float min;
    float max;
  } value;

  // 1241
  struct
  {
    float min;
    float max;
  } vector;
};

static_assert(sizeof(DvarLimits) == 0x10, "The size is not correct");

// 1243
struct __declspec(align(8)) Dvar_s
{
  const char* name;
  const char* description;
  int hash;
  unsigned int flags;
  DvarType_t type;
  bool modified;
  bool loaded_from_save_game;
  DvarValue current;
  DvarValue latched;
  DvarValue reset;
  DvarValue saved;
  DvarLimits domain;
  Dvar_s* hash_next;
};

static_assert(sizeof(Dvar_s) == 0x70, "The size is not correct");

// /* 1235 */
// enum e_restricted_initState : __int32
// {
//   RESTRICTED_DISABLED = 0x0,
//   RESTRICTED_CONFIGURING = 0x1,
//   RESTRICTED_PROTECTED = 0x2,
//   RESTRICTED_STATE_COUNT = 0x3,
// };

// /* 1244 */
// struct des_key
// {
//   unsigned int ek[32];
//   unsigned int dk[32];
// };

// /* 1245 */
// struct des3_key
// {
//   unsigned int ek[3][32];
//   unsigned int dk[3][32];
// };

// /* 1246 */
// struct rijndael_key
// {
//   unsigned int eK[60];
//   unsigned int dK[60];
//   int Nr;
// };

// /* 1247 */
// union Symmetric_key
// {
//   des_key des;
//   des3_key des3;
//   rijndael_key rijndael;
//   void *data;
// };

// /* 1248 */
// struct ltc_cipher_descriptor
// {
//   char *name;
//   unsigned __int8 ID;
//   int min_key_length;
//   int max_key_length;
//   int block_length;
//   int default_rounds;
//   int (__cdecl *setup)(const unsigned __int8 *, int, int, Symmetric_key *);
//   int (__cdecl *ecb_encrypt)(const unsigned __int8 *, unsigned __int8 *, Symmetric_key *);
//   int (__cdecl *ecb_decrypt)(const unsigned __int8 *, unsigned __int8 *, Symmetric_key *);
//   int (__cdecl *test)();
//   void (__cdecl *done)(Symmetric_key *);
//   int (__cdecl *keysize)(int *);
//   int (__cdecl *accel_ecb_encrypt)(const unsigned __int8 *, unsigned __int8 *, unsigned int, Symmetric_key *);
//   int (__cdecl *accel_ecb_decrypt)(const unsigned __int8 *, unsigned __int8 *, unsigned int, Symmetric_key *);
//   int (__cdecl *accel_cbc_encrypt)(const unsigned __int8 *, unsigned __int8 *, unsigned int, unsigned __int8 *, Symmetric_key *);
//   int (__cdecl *accel_cbc_decrypt)(const unsigned __int8 *, unsigned __int8 *, unsigned int, unsigned __int8 *, Symmetric_key *);
//   int (__cdecl *accel_ctr_encrypt)(const unsigned __int8 *, unsigned __int8 *, unsigned int, unsigned __int8 *, int, Symmetric_key *);
//   int (__cdecl *accel_lrw_encrypt)(const unsigned __int8 *, unsigned __int8 *, unsigned int, unsigned __int8 *, const unsigned __int8 *, Symmetric_key *);
//   int (__cdecl *accel_lrw_decrypt)(const unsigned __int8 *, unsigned __int8 *, unsigned int, unsigned __int8 *, const unsigned __int8 *, Symmetric_key *);
//   int (__cdecl *accel_ccm_memory)(const unsigned __int8 *, unsigned int, Symmetric_key *, const unsigned __int8 *, unsigned int, const unsigned __int8 *, unsigned int, unsigned __int8 *, unsigned int, unsigned __int8 *, unsigned __int8 *, unsigned int *, int);
//   int (__cdecl *accel_gcm_memory)(const unsigned __int8 *, unsigned int, const unsigned __int8 *, unsigned int, const unsigned __int8 *, unsigned int, unsigned __int8 *, unsigned int, unsigned __int8 *, unsigned __int8 *, unsigned int *, int);
//   int (__cdecl *omac_memory)(const unsigned __int8 *, unsigned int, const unsigned __int8 *, unsigned int, unsigned __int8 *, unsigned int *);
//   int (__cdecl *xcbc_memory)(const unsigned __int8 *, unsigned int, const unsigned __int8 *, unsigned int, unsigned __int8 *, unsigned int *);
//   int (__cdecl *f9_memory)(const unsigned __int8 *, unsigned int, const unsigned __int8 *, unsigned int, unsigned __int8 *, unsigned int *);
// };

// /* 1249 */
// struct __declspec(align(8)) sha256_state
// {
//   unsigned __int64 length;
//   unsigned int state[8];
//   unsigned int curlen;
//   unsigned __int8 buf[64];
// };

// /* 1250 */
// struct sha1_state
// {
//   unsigned __int64 length;
//   unsigned int state[5];
//   unsigned int curlen;
//   unsigned __int8 buf[64];
// };

// /* 1251 */
// struct __declspec(align(8)) md5_state
// {
//   unsigned __int64 length;
//   unsigned int state[4];
//   unsigned int curlen;
//   unsigned __int8 buf[64];
// };

// /* 1252 */
// struct __declspec(align(8)) tiger_state
// {
//   unsigned __int64 state[3];
//   unsigned __int64 length;
//   unsigned int curlen;
//   unsigned __int8 buf[64];
// };

// /* 1253 */
// union Hash_state
// {
//   char dummy[1];
//   sha256_state sha256;
//   sha1_state sha1;
//   md5_state md5;
//   tiger_state tiger;
//   void *data;
// };

// /* 1254 */
// struct ltc_hash_descriptor
// {
//   char *name;
//   unsigned __int8 ID;
//   unsigned int hashsize;
//   unsigned int blocksize;
//   unsigned int OID[16];
//   unsigned int OIDlen;
//   int (__cdecl *init)(Hash_state *);
//   int (__cdecl *process)(Hash_state *, const unsigned __int8 *, unsigned int);
//   int (__cdecl *done)(Hash_state *, unsigned __int8 *);
//   int (__cdecl *test)();
//   int (__cdecl *hmac_block)(const unsigned __int8 *, unsigned int, const unsigned __int8 *, unsigned int, unsigned __int8 *, unsigned int *);
// };

// /* 1255 */
// struct __declspec(align(2)) GamerSettingState
// {
//   bool isProfileLoggedIn;
//   bool isInitialized;
//   bool errorOnRead;
//   int firstTime;
//   bool zombietron_discovered;
//   bool zombiefive_discovered;
//   bool invertPitch;
//   float viewSensitivity;
//   bool autoAim;
//   bool gpadEnabled;
//   int team_indicator;
//   bool mature_content;
//   bool show_blood;
//   bool targetAssist;
//   bool lastSpectatorSelectedThirdPerson;
//   char gpadButtonsConfig[256];
//   char gpadSticksConfig[256];
//   float gpadButtonLStickDeflect;
//   float gpadButtonRStickDeflect;
//   float gamma;
//   float snd_menu_voice;
//   float snd_menu_music;
//   float snd_menu_sfx;
//   float snd_menu_master;
//   float snd_cinematic_volume;
//   int snd_menu_speaker_setup;
//   int snd_menu_listen_level;
//   float snd_menu_left_channel;
//   float snd_menu_right_channel;
//   float snd_menu_center_channel;
//   float snd_menu_left_surround;
//   float snd_menu_right_surround;
//   float snd_menu_lfe;
//   float safeAreaHorizontal;
//   float safeAreaVertical;
//   int demoControllerConfig;
//   bool basicTrainingPopup;
//   int friends;
//   int enemies;
//   int difficulty;
//   bool tips;
//   bool gamertags;
//   char exeSettingsBuffer[1000];
//   char commonSettingsBuffer[1000];
//   char motd[256];
//   bool mapPrefs[16];
//   int playlist;
//   int category;
//   int categoryPlaylist;
//   int wagerCategory;
//   int wagerCategoryPlaylist;
//   char clanPrefix[5];
//   char customClass[10][16];
//   bool loadoutDirty;
//   unsigned __int8 classLoadouts[5][34];
//   unsigned __int8 killstreaks[3];
// };

 /* 1258 */
struct renderOptions_s
{
  /* 1257 */
  union
  {
    unsigned int i;
    /* 1256 */
    struct
    {
      unsigned __int32 camo : 6;
      unsigned __int32 lens : 4;
      unsigned __int32 reticle : 6;
      unsigned __int32 reticleColor : 3;
      unsigned __int32 emblem : 1;
      unsigned __int32 tag : 1;
      unsigned __int32 player : 5;
      unsigned __int32 facepaintPattern : 6;
    };
  };
};

/* 1260 */
struct __declspec(align(4)) PlayerHeldWeapon
{
  unsigned int weapon;
  unsigned __int8 model;
  renderOptions_s options;
  /* 1259 */
  union
  {
    float heatPercent;
    int fuelTankTime;
  };
  bool overHeating;
  bool needsRechamber;
  bool heldBefore;
  bool quickReload;
  bool blockWeaponPickup;
};

/* 1261 */
struct AmmoPool
{
  int ammoIndex;
  int count;
};

/* 1262 */
struct AmmoClip
{
  int clipIndex;
  int count;
};

/* 1263 */
struct SprintState
{
  int sprintButtonUpRequired;
  int sprintDelay;
  int lastSprintStart;
  int lastSprintEnd;
  int sprintStartMaxLength;
  int sprintDuration;
  int sprintCooldown;
};

/* 1264 */
struct MantleState
{
  float yaw;
  int timer;
  int transIndex;
  int flags;
};

/* 1265 */
struct ActionSlotParam_SpecifyWeapon
{
  unsigned int index;
};

/* 1266 */
struct ActionSlotParam
{
  ActionSlotParam_SpecifyWeapon specifyWeapon;
};

/* 1267 */
struct objective_t
{
  objectiveState_t state;
  float origin[3];
  float size[2];
  int entNum;
  int teamNum;
  int icon;
  int use3D;
  int color;
  const char* alt_3D_text;
};

/* 1269 */
union hudelem_color_t
{
  /* 1268 */
  struct
  {
    unsigned __int8 r;
    unsigned __int8 g;
    unsigned __int8 b;
    unsigned __int8 a;
  };
  int rgba;
};

/* 1270 */
struct __declspec(align(4)) hudelem_s
{
  float x;
  float y;
  float z;
  float fontScale;
  hudelem_color_t color;
  hudelem_color_t fromColor;
  int fadeStartTime;
  int scaleStartTime;
  float fromX;
  float fromY;
  int moveStartTime;
  int time;
  int duration;
  float value;
  float sort;
  hudelem_color_t glowColor;
  int fxBirthTime;
  __int16 targetEntNum;
  __int16 fadeTime;
  __int16 label;
  __int16 width;
  __int16 height;
  __int16 fromWidth;
  __int16 fromHeight;
  __int16 scaleTime;
  __int16 moveTime;
  __int16 text;
  unsigned __int16 fxLetterTime;
  unsigned __int16 fxDecayStartTime;
  unsigned __int16 fxDecayDuration;
  unsigned __int16 fxRedactDecayStartTime;
  unsigned __int16 fxRedactDecayDuration;
  unsigned __int16 flags;
  unsigned __int8 type;
  unsigned __int8 font;
  unsigned __int8 alignOrg;
  unsigned __int8 alignScreen;
  unsigned __int8 materialIndex;
  unsigned __int8 offscreenMaterialIdx;
  unsigned __int8 fromAlignOrg;
  unsigned __int8 fromAlignScreen;
  unsigned __int8 soundID;
  char ui3dWindow;
};

/* 1272 */
struct playerState_s
{
  int commandTime;
  int pm_type;
  int bobCycle;
  int pm_flags;
  int weapFlags;
  int otherFlags;
  int pm_time;
  unsigned int loopSoundId;
  int loopSoundFade;
  float origin[3];
  float velocity[3];
  int weaponTime;
  int weaponDelay;
  int weaponTimeLeft;
  int weaponDelayLeft;
  int weaponIdleTime;
  int grenadeTimeLeft;
  int throwBackGrenadeOwner;
  int throwBackGrenadeTimeLeft;
  int weaponRestrictKickTime;
  bool mountAvailable;
  bool bRunLeftGun;
  bool bCarryingTurret;
  float mountPos[3];
  float mountDir;
  int foliageSoundTime;
  int gravity;
  float leanf;
  int speed;
  float delta_angles[3];
  int groundEntityNum;
  int groundType;
  float vLadderVec[3];
  int jumpTime;
  float jumpOriginZ;
  int slideTime;
  int moveType;
  int legsTimer;
  int torsoTimer;
  __int16 legsAnim;
  __int16 torsoAnim;
  int legsAnimDuration;
  int torsoAnimDuration;
  int damageTimer;
  int damageDuration;
  int dmgDirection;
  int dmgType;
  int corpseIndex;
  int movementDir;
  int eFlags;
  int eFlags2;
  __int16 predictableEventSequence;
  __int16 predictableEventSequenceOld;
  int predictableEvents[4];
  unsigned int predictableEventParms[4];
  __int16 unpredictableEventSequence;
  __int16 unpredictableEventSequenceOld;
  int unpredictableEvents[4];
  unsigned int unpredictableEventParms[4];
  unsigned __int8 clientNum;
  int offHandIndex;
  OffhandSecondaryClass offhandSecondary;
  OffhandPrimaryClass offhandPrimary;
  renderOptions_s renderOptions;
  unsigned __int16 weapon;
  unsigned __int16 lastStandPrevWeapon;
  unsigned int lastWeaponAltModeSwitch;
  unsigned int stowedWeapon;
  unsigned __int8 stowedWeaponCamo;
  unsigned int meleeWeapon;
  int weaponstate;
  int weaponstateLeft;
  unsigned int weaponShotCount;
  unsigned int weaponShotCountLeft;
  float fWeaponPosFrac;
  int adsDelayTime;
  int spreadOverride;
  int spreadOverrideState;
  float weaponSpinLerp;
  int viewmodelIndex;
  float viewangles[3];
  int viewHeightTarget;
  float viewHeightCurrent;
  int viewHeightLerpTime;
  int viewHeightLerpTarget;
  int viewHeightLerpDown;
  float viewAngleClampBase[2];
  float viewAngleClampRange[2];
  unsigned int stackFireCount;
  int damageEvent;
  int damageYaw;
  int damagePitch;
  int damageCount;
  int stats[5];
  PlayerHeldWeapon heldWeapons[15];
  AmmoPool ammoNotInClip[15];
  AmmoClip ammoInClip[15];
  float proneDirection;
  float proneDirectionPitch;
  float proneTorsoPitch;
  ViewLockTypes viewlocked;
  __int16 viewlocked_entNum;
  int vehiclePos;
  int vehicleType;
  int vehicleAnimBoneIndex;
  int linkFlags;
  float linkAngles[3];
  int cursorHint;
  int cursorHintString;
  int cursorHintEntIndex;
  int iCompassPlayerInfo;
  unsigned int spyplaneTypeEnabled;
  unsigned int satelliteTypeEnabled;
  locSel_t locationSelectionType;
  int locationSelectionInfo;
  SprintState sprintState;
  int lastDtpEnd;
  float fTorsoPitch;
  float fWaistPitch;
  float holdBreathScale;
  int holdBreathTimer;
  float moveSpeedScaleMultiplier;
  MantleState mantleState;
  int vehicleAnimStage;
  int vehicleEntryPoint;
  unsigned int scriptedAnim;
  int scriptedAnimTime;
  float meleeChargeYaw;
  int meleeChargeDist;
  int meleeChargeTime;
  int weapLockFlags;
  int weapLockedEntnum;
  unsigned int perks[2];
  ActionSlotType actionSlotType[4];
  ActionSlotParam actionSlotParam[4];
  int entityEventSequence;
  int weapAnim;
  int weapAnimLeft;
  float aimSpreadScale;
  int shellshockIndex;
  int shellshockTime;
  int shellshockDuration;
  float dofNearStart;
  float dofNearEnd;
  float dofFarStart;
  float dofFarEnd;
  float dofNearBlur;
  float dofFarBlur;
  float dofViewmodelStart;
  float dofViewmodelEnd;
  int waterlevel;
  int smokeColorIndex;
  int hudElemLastAssignedSoundID;
  int adsZoomSelect;
  int adsZoomLatchTime;
  bool adsZoomLatchState;
  int artilleryInboundIconLocation;
  float visionSetLerpRatio;
  int poisoned;
  int binoculars;
  int scriptCursorHintString;
  objective_t objective[32];
  int deltaTime;
  int killCamEntity;
  int killCamTargetEntity;
  /* 1271 */
  struct
  {
    hudelem_s current[31];
    hudelem_s archival[31];
  } hud;
};
/* 1273 */
struct trajectory_t
{
  unsigned __int8 trType;
  int trTime;
  int trDuration;
  float trBase[3];
  float trDelta[3];
};

/* 1274 */
struct LerpEntityStateTurret
{
  float gunAngles[3];
  int ownerNum;
  float heatVal;
  int overheating;
  float pivotOffset;
  int flags;
};

/* 1275 */
struct LerpEntityStateLoopFx
{
  float cullDist;
  int period;
};

/* 1278 */
struct __declspec(align(4)) LerpEntityStateActor
{
  /* 1276 */
  union
  {
    int actorNum;
    int corpseNum;
  } index;

  int species;
  int team;
  int enemy;

  /* 1277 */
  struct
  {
    __int16 fBodyPitch;
  } proneInfo;
};

/* 1279 */
struct LerpEntityStatePrimaryLight
{
  unsigned __int8 colorAndExp[4];
  float intensity;
  float radius;
  float cosHalfFovOuter;
  float cosHalfFovInner;
};

/* 1280 */
struct __declspec(align(4)) LerpEntityStatePlayer
{
  float leanf;
  int movementDir;
  int moveType;
  unsigned __int16 primaryWeapon;
  unsigned __int16 stowedWeapon;
  unsigned __int16 offhandWeapon;
  unsigned __int16 meleeWeapon;
  unsigned __int8 offhandWeaponModel;
  unsigned __int8 meleeWeaponModel;
  unsigned __int8 vehicleType;
  unsigned __int8 vehicleAnimBoneIndex;
  unsigned __int8 vehicleSeat;
  unsigned __int8 stowedWeaponCamo;
};

/* 1281 */
struct LerpEntityStateVehicleGunnerAngles
{
  __int16 pitch;
  __int16 yaw;
};

/* 1283 */
struct LerpEntityStateVehicle
{
  float steerYaw;
  float bodyRoll;
  LerpEntityStateVehicleGunnerAngles gunnerAngles[4];
  /* 1282 */
  union
  {
    __int16 throttle;
    __int16 bodyPitch;
  };
  __int16 gunPitch;
  __int16 gunYaw;
  unsigned __int8 drawOnCompass;
};

/* 1284 */
struct LerpEntityStateMissile
{
  int launchTime;
  int parentClientNum;
  int fuseTime;
  int forcedDud;
};

/* 1285 */
struct LerpEntityStateScriptMover
{
  unsigned __int8 attachTagIndex[4];
  int attachedTagIndex;
  __int16 attachModelIndex[4];
  __int16 animScriptedAnim;
  __int16 attachedEntNum;
  __int16 exploderIndex;
  unsigned __int16 scale;
};

/* 1286 */
struct LerpEntityStateBulletHit
{
  float start[3];
};

/* 1287 */
struct LerpEntityStateEarthquake
{
  float scale;
  float radius;
  int duration;
};

/* 1288 */
struct LerpEntityStateCustomExplode
{
  int startTime;
  int effectIndex;
};

/* 1289 */
struct LerpEntityStateExplosion
{
  float innerRadius;
  float magnitude;
  float innerDamage;
  int dummy;
  float outerDamage;
};

/* 1290 */
struct LerpEntityStateExplosionJolt
{
  float innerRadius;
  float impulse[3];
};

/* 1291 */
struct LerpEntityStatePhysicsJitter
{
  float innerRadius;
  float minDisplacement;
  float maxDisplacement;
};

/* 1292 */
struct LerpEntityStateDestructibleHit
{
  int modelState0;
  int modelState1;
  int modelState2;
  int dummy;
  int modelState3;
  int modelState4;
};

/* 1293 */
struct LerpEntityStateCreateDynEnt
{
  int model;
  int fxId;
  int mature;
};

/* 1294 */
struct LerpEntityStateStreamerHint
{
  float factor;
};

/* 1295 */
struct LerpEntityStateAnonymous
{
  int data[8];
};

/* 1296 */
union LerpEntityStateTypeUnion
{
  LerpEntityStateTurret turret;
  LerpEntityStateLoopFx loopFx;
  LerpEntityStateActor actor;
  LerpEntityStatePrimaryLight primaryLight;
  LerpEntityStatePlayer player;
  LerpEntityStateVehicle vehicle;
  LerpEntityStateMissile missile;
  LerpEntityStateScriptMover scriptMover;
  LerpEntityStateBulletHit bulletHit;
  LerpEntityStateEarthquake earthquake;
  LerpEntityStateCustomExplode customExplode;
  LerpEntityStateExplosion explosion;
  LerpEntityStateExplosionJolt explosionJolt;
  LerpEntityStatePhysicsJitter physicsJitter;
  LerpEntityStateDestructibleHit destructibleHit;
  LerpEntityStateCreateDynEnt createDynEnt;
  LerpEntityStateStreamerHint streamerHint;
  LerpEntityStateAnonymous anonymous;
};

/* 1297 */
struct LerpEntityState
{
  int eFlags;
  int eFlags2;
  trajectory_t pos;
  trajectory_t apos;
  LerpEntityStateTypeUnion u;
  int useCount;
};

/* 1298 */
struct actorAnimState_t
{
  int state;
  float fLeanAmount;
  float fAimUpDown;
  float fAimLeftRight;
};

/* 1299 */
struct playerAnimState_t
{
  int legsAnim;
  int torsoAnim;
  float fTorsoPitch;
  float fWaistPitch;
};

/* 1300 */
struct vehicleState_t
{
  unsigned __int8 vehicleInfoIndex;
  __int16 attachModelIndex[2];
  unsigned __int8 attachTagIndex[2];
};

/* 1306 */
struct clientLinkInfo_t
{
  __int16 parentEnt;
  unsigned __int8 tagIndex;
  unsigned __int8 flags;
};

/* 1307 */
struct __declspec(align(4)) entityState_s
{
  int number;
  LerpEntityState lerp;
  int time2;
  unsigned int loopSoundId;
  int solid;
  renderOptions_s renderOptions;
  /* 1301 */
  union
  {
    actorAnimState_t animState;
    playerAnimState_t anim;
    vehicleState_t vehicleState;
  } un2;
  /* 1302 */
  union
  {
    int item;
    int hintString;
    int vehicleXModel;
    unsigned int secondBcAlias;
    unsigned int soundTag;
  } un3;
  unsigned int partBits[5];
  unsigned __int8 events[4];
  unsigned __int16 eventParms[4];
  unsigned __int16 eventParm;
  __int16 eType;
  __int16 groundEntityNum;
  /* 1303 */
  union
  {
    __int16 brushmodel;
    __int16 xmodel;
    __int16 primaryLight;
    unsigned __int16 bone;
  } index;
  __int16 otherEntityNum;
  __int16 attackerEntityNum;
  __int16 enemyModel;
  unsigned __int16 weapon;
  unsigned __int16 lastStandPrevWeapon;
  unsigned __int16 targetname;
  __int16 loopSoundFade;
  __int16 eventSequence;
  unsigned __int8 surfType;
  unsigned __int8 clientNum;
  unsigned __int8 iHeadIcon;
  /* 1304 */
  union
  {
    unsigned __int8 iHeadIconTeam;
    unsigned __int8 teamAndOwnerIndex;
  } faction;
  unsigned __int8 weaponModel;
  /* 1305 */
  union
  {
    unsigned __int8 scale;
    unsigned __int8 eventParm2;
    unsigned __int8 helicopterStage;
    unsigned __int8 destructibleid;
  } u1;
  clientLinkInfo_t clientLinkInfo;
};

static_assert(sizeof(entityState_s) == 0xE0, "The size is not correct");

/* 1308 */
struct score_s
{
  int ping;
  int status_icon;
  int place;
  int score;
  int kills;
  int assists;
  int deaths;
  int scoreboardColumns[4];
};

/* 1310 */
struct clientState_s
{
  int clientIndex;
  team_t team;
  ffa_team_t ffaTeam;
  int modelindex;
  int attachModelIndex[6];
  int attachTagIndex[6];
  char name[32];
  float maxSprintTimeMultiplier;
  int rank;
  int prestige;
  int lastDamageTime;
  int lastStandStartTime;
  /* 1309 */
  union
  {
    unsigned __int64 xuid;
    unsigned int xuid32[2];
  };
  unsigned int perks[2];
  char clanAbbrev[8];
  int attachedVehEntNum;
  int attachedVehSeat;
  int needsRevive;
  VehicleAnimState vehAnimState;
  score_s score;
  int clientUIVisibilityFlags;
};

/* 1311 */
struct ArchivedMatchState
{
  int matchUIVisibilityFlags;
  int bombTimer[2];
};

/* 1312 */
struct UnarchivedMatchState
{
  int alliesScore;
  int axisScore;
  int scoreLimit;
  int matchUIVisibilityFlags;
  scoreboardColumnType_t scoreboardColumnTypes[4];
  float mapCenter[3];
  unsigned int talkFlags;
};

/* 1313 */
struct __declspec(align(64)) MatchState
{
  int index;
  ArchivedMatchState archivedState;
  UnarchivedMatchState unarchivedState;
  unsigned int pad[1];
};

/* 1314 */
struct snapshot_s
{
  int snapFlags;
  int ping;
  int serverTime;
  int physicsTime;
  playerState_s ps;
  int numEntities;
  int numClients;
  entityState_s entities[512];
  clientState_s clients[32];
  __declspec(align(128)) MatchState matchState;
  int serverCommandSequence;
};

/* 1315 */
struct GfxSkinCacheEntry
{
  unsigned int frameCount;
  int skinnedCachedOffset;
  unsigned __int16 numSkinnedVerts;
  unsigned __int16 ageCount;
};

/* 1316 */
struct clientControllers_t
{
  float angles[6][3];
  float tag_origin_angles[3];
  float tag_origin_offset[3];
};

/* 1317 */
struct CEntPlayerInfo
{
  clientControllers_t* control;
  unsigned __int8 tag[6];
  float waterHeight;
  int nextWaterHeightCheck;
  int nextRippleTime;
};

/* 1318 */
struct CEntTurretAngles
{
  float pitch;
  float yaw;
};


/* 1320 */
struct __declspec(align(4)) CEntTurretInfo
{
  /* 1319 */
  union
  {
    CEntTurretAngles angles;
    const float* viewAngles;
  };
  float barrelPitch;
  float pivotOffset;
  bool playerUsing;
  float firingOffset;
  unsigned __int8 tag_aim;
  unsigned __int8 tag_aim_pivot;
  unsigned __int8 tag_aim_animated;
  unsigned __int8 tag_flash;
  unsigned __int8 tag_weapon;
};

/* 1321 */
struct CEntVehicleInfo
{
  __int16 pitch;
  __int16 yaw;
  __int16 roll;
  __int16 barrelPitch;
  __int16 steerYaw;
  __int16 steerPitch;
  __int16 steerRoll;
  __int16 gunnerPitch[4];
  __int16 gunnerYaw[4];
  float time;
  unsigned __int8 wheelBoneIndex[6];
  float nitrousWheelRotation[6];
  float nitrousWheelYaw[6];
  float wheelHeight[6];
  unsigned __int8 tag_body;
  unsigned __int8 tag_turret;
  unsigned __int8 tag_barrel;
  unsigned __int8 tag_barrel_recoil;
  unsigned __int8 tag_gunner_turret[4];
  unsigned __int8 tag_gunner_barrel[4];
  unsigned __int8 tag_extra_tank_wheels[4];
  unsigned __int8 tag_minigun_spin;
  __int16 minigun_rotation;
  float extra_wheel_rot_scale;
  float barrelRecoil;
};

/* 1322 */
struct CEntFx
{
  int triggerTime;
  unsigned int effect;
};

/* 1324 */
struct CEntActorInfo
{
  int proneType;
  float pitch;
  float roll;
  unsigned __int8 headBone;
  /* 1323 */
  union
  {
    float height;
    float yaw;
  };
  float waterHeight;
  int nextWaterHeightCheck;
  int nextRippleTime;
};

/* 1325 */
struct CEntGeneral
{
  int contents;
  bool linked;
  float mins[3];
  float maxs[3];
};

/* 1326 */
struct ShaderConstantSet
{
  float value[7][4];
  unsigned __int8 constantSource[7];
  unsigned __int8 used;
};

/* 1328 */
struct cpose_t
{
  unsigned __int16 lightingHandle;
  unsigned __int8 eType;
  unsigned __int8 eTypeUnion;
  unsigned __int8 localClientNum;
  int cullIn;
  unsigned __int8 isRagdoll;
  int ragdollHandle;
  int killcamRagdollHandle;
  int physObjId;
  int physUserBody;
  int physUserBodyProneFeet;
  unsigned __int8 destructiblePose;
  int startBurnTime;
  float wetness;
  float origin[3];
  float angles[3];
  float absmin[3];
  float absmax[3];
  GfxSkinCacheEntry skinCacheEntry;
  /* 1327 */
  union
  {
    CEntPlayerInfo player;
    CEntTurretInfo turret;
    CEntVehicleInfo vehicle;
    CEntFx fx;
    CEntActorInfo actor;
    CEntGeneral general;
  };
  ShaderConstantSet constantSet;
};

/* 1329 */
struct XAnimParam
{
  char strName[16];
  float fValue;
};

/* 1330 */
union XAnimIndices
{
  unsigned __int8* _1;
  unsigned __int16* _2;
  void* data;
};

static_assert(sizeof(XAnimIndices) == 0x04, "The size is not correct");

/* 1331 */
struct XAnimNotifyInfo
{
  unsigned __int16 name;
  float time;
};

static_assert(sizeof(XAnimNotifyInfo) == 0x8, "The size is not correct");

/* 1332 */
union XAnimDynamicFrames
{
  unsigned __int8(*_1)[3];
  unsigned __int16(*_2)[3];
};

static_assert(sizeof(XAnimDynamicFrames) == 0x4, "The size is not correct");

/* 1333 */
union XAnimDynamicIndices
{
  unsigned __int8 _1[1];
  unsigned __int16 _2[1];
};

static_assert(sizeof(XAnimDynamicIndices) == 0x2, "The size is not correct");

/* 1334 */
struct __declspec(align(4)) XAnimPartTransFrames
{
  float mins[3];
  float size[3];
  XAnimDynamicFrames frames;
  XAnimDynamicIndices indices;
};

static_assert(sizeof(XAnimPartTransFrames) == 0x20, "The size is not correct");

/* 1335 */
union XAnimPartTransData
{
  XAnimPartTransFrames frames;
  float frame0[3];
};

static_assert(sizeof(XAnimPartTransData) == 0x20, "The size is not correct");

/* 1336 */
struct XAnimPartTrans
{
  unsigned __int16 size;
  unsigned __int8 smallTrans;
  XAnimPartTransData u;
};

static_assert(sizeof(XAnimPartTrans) == 0x24, "The size is not correct");

/* 1337 */
struct __declspec(align(4)) XAnimDeltaPartQuatDataFrames
{
  __int16(*frames)[2];
  XAnimDynamicIndices indices;
};

static_assert(sizeof(XAnimDeltaPartQuatDataFrames) == 0x8, "The size is not correct");

/* 1338 */
union XAnimDeltaPartQuatData
{
  XAnimDeltaPartQuatDataFrames frames;
  __int16 frame0[2];
};

static_assert(sizeof(XAnimDeltaPartQuatData) == 0x8, "The size is not correct");

/* 1339 */
struct XAnimDeltaPartQuat
{
  unsigned __int16 size;
  XAnimDeltaPartQuatData u;
};

static_assert(sizeof(XAnimDeltaPartQuat) == 0xC, "The size is not correct");

/* 1340 */
struct XAnimDeltaPart
{
  XAnimPartTrans* trans;
  XAnimDeltaPartQuat* quat;
};

static_assert(sizeof(XAnimDeltaPart) == 0x8, "The size is not correct");

/* 1341 */
struct XAnimParts
{
  const char* name;
  unsigned __int16 dataByteCount;
  unsigned __int16 dataShortCount;
  unsigned __int16 dataIntCount;
  unsigned __int16 randomDataByteCount;
  unsigned __int16 randomDataIntCount;
  unsigned __int16 numframes;
  bool bLoop;
  bool bDelta;
  bool bLeftHandGripIK;
  bool bStreamable;
  unsigned int streamedFileSize;
  unsigned __int8 boneCount[10];
  unsigned __int8 notifyCount;
  unsigned __int8 assetType;
  bool isDefault;
  unsigned int randomDataShortCount;
  unsigned int indexCount;
  float framerate;
  float frequency;
  float primedLength;
  float loopEntryTime;
  unsigned __int16* names;
  unsigned __int8* dataByte;
  __int16* dataShort;
  int* dataInt;
  __int16* randomDataShort;
  unsigned __int8* randomDataByte;
  int* randomDataInt;
  XAnimIndices indices;
  XAnimNotifyInfo* notify;
  XAnimDeltaPart* deltaPart;
};

static_assert(sizeof(XAnimParts) == 0x68, "The size is not correct");

/* 1342 */
struct XAnimParent
{
  unsigned __int16 flags;
  unsigned __int16 children;
};

/* 1344 */
struct XAnimEntry
{
  unsigned __int16 bCreated;
  unsigned __int16 numAnims;
  unsigned __int16 firstParamIxPlusOne;
  unsigned __int16 paramCount;
  unsigned __int16 parent;
  /* 1343 */
  union
  {
    XAnimParts* parts;
    XAnimParent animParent;
  };
};

/* 1345 */
struct XAnim_s
{
  const char* debugName;
  unsigned int size;
  unsigned int paramSize;
  XAnimParam* params;
  const char** debugAnimNames;
  bool* wasLoggedIfMissing;
  XAnimEntry entries[1];
};

/* 1346 */
struct XAnimTree_s
{
  XAnim_s* anims;
  unsigned __int16 children;
  __int16 inst;
};

/* 1347 */
struct DestructibleBurnData
{
  int burnTime;
  unsigned int fx;
  int sndId;
};

/* 1348 */
struct DESTRUCTIBLE_PIECE_INFO
{
  __int16 health;
  int xdollHandle;
  unsigned int fx;
  DestructibleBurnData burnData;
};

/* 1349 */
struct DObjAnimMat
{
  float quat[4];
  float trans[3];
  float transWeight;
};

static_assert(sizeof(DObjAnimMat) == 0x20, "The size is not correct");

/* 1350 */
struct XSurfaceVertexInfo
{
  __int16 vertCount[4];
  unsigned __int16* vertsBlend;
  float* tensionData;
};

static_assert(sizeof(XSurfaceVertexInfo) == 0x10, "The size is not correct");

/* 1351 */
union GfxColor
{
  unsigned int packed;
  unsigned __int8 array[4];
};

static_assert(sizeof(GfxColor) == 0x4, "The size is not correct");

/* 1352 */
union PackedTexCoords
{
  unsigned int packed;
};

static_assert(sizeof(PackedTexCoords) == 0x4, "The size is not correct");

/* 1353 */
union PackedUnitVec
{
  unsigned int packed;
  unsigned __int8 array[4];
};

static_assert(sizeof(PackedUnitVec) == 0x4, "The size is not correct");

/* 1354 */
struct GfxPackedVertex
{
  float xyz[3];
  float binormalSign;
  GfxColor color;
  PackedTexCoords texCoord;
  PackedUnitVec normal;
  PackedUnitVec tangent;
};

static_assert(sizeof(GfxPackedVertex) == 0x20, "The size is not correct");

// /* 1355 */
// const struct _GUID
// {
//   unsigned int Data1;
//   unsigned __int16 Data2;
//   unsigned __int16 Data3;
//   unsigned __int8 Data4[8];
// };

// /* 1356 */
// struct __cppobj IUnknown
// {
//   IUnknown_vtbl *__vftable /*VFT*/;
// };

// /* 5969 */
// typedef int HRESULT;

// /* 1357 */
// struct /*VFT*/ IUnknown_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
// };

// /* 1358 */
// struct __cppobj IDirect3DDevice9 : IUnknown
// {
// };

// /* 1359 */
// struct __cppobj IDirect3D9 : IUnknown
// {
// };

// /* 1360 */
// struct _LARGE_INTEGER::<unnamed_type_u>
// {
//   unsigned int LowPart;
//   int HighPart;
// };

// /* 1361 */
// struct $FAF74743FBE1C8632047CFB668F7028A
// {
//   unsigned int LowPart;
//   int HighPart;
// };

// /* 1362 */
// union _LARGE_INTEGER
// {
//   $FAF74743FBE1C8632047CFB668F7028A __s0;
//   _LARGE_INTEGER::<unnamed_type_u> u;
//   __int64 QuadPart;
// };

// /* 1363 */
// struct __unaligned __declspec(align(4)) _D3DADAPTER_IDENTIFIER9
// {
//   char Driver[512];
//   char Description[512];
//   char DeviceName[32];
//   _LARGE_INTEGER DriverVersion;
//   unsigned int VendorId;
//   unsigned int DeviceId;
//   unsigned int SubSysId;
//   unsigned int Revision;
//   _GUID DeviceIdentifier;
//   unsigned int WHQLLevel;
// };

// /* 1364 */
// struct _D3DDISPLAYMODE
// {
//   unsigned int Width;
//   unsigned int Height;
//   unsigned int RefreshRate;
//   _D3DFORMAT Format;
// };

// /* 1365 */
// struct _D3DVSHADERCAPS2_0
// {
//   unsigned int Caps;
//   int DynamicFlowControlDepth;
//   int NumTemps;
//   int StaticFlowControlDepth;
// };

// /* 1366 */
// struct _D3DPSHADERCAPS2_0
// {
//   unsigned int Caps;
//   int DynamicFlowControlDepth;
//   int NumTemps;
//   int StaticFlowControlDepth;
//   int NumInstructionSlots;
// };

// /* 1367 */
// struct _D3DCAPS9
// {
//   _D3DDEVTYPE DeviceType;
//   unsigned int AdapterOrdinal;
//   unsigned int Caps;
//   unsigned int Caps2;
//   unsigned int Caps3;
//   unsigned int PresentationIntervals;
//   unsigned int CursorCaps;
//   unsigned int DevCaps;
//   unsigned int PrimitiveMiscCaps;
//   unsigned int RasterCaps;
//   unsigned int ZCmpCaps;
//   unsigned int SrcBlendCaps;
//   unsigned int DestBlendCaps;
//   unsigned int AlphaCmpCaps;
//   unsigned int ShadeCaps;
//   unsigned int TextureCaps;
//   unsigned int TextureFilterCaps;
//   unsigned int CubeTextureFilterCaps;
//   unsigned int VolumeTextureFilterCaps;
//   unsigned int TextureAddressCaps;
//   unsigned int VolumeTextureAddressCaps;
//   unsigned int LineCaps;
//   unsigned int MaxTextureWidth;
//   unsigned int MaxTextureHeight;
//   unsigned int MaxVolumeExtent;
//   unsigned int MaxTextureRepeat;
//   unsigned int MaxTextureAspectRatio;
//   unsigned int MaxAnisotropy;
//   float MaxVertexW;
//   float GuardBandLeft;
//   float GuardBandTop;
//   float GuardBandRight;
//   float GuardBandBottom;
//   float ExtentsAdjust;
//   unsigned int StencilCaps;
//   unsigned int FVFCaps;
//   unsigned int TextureOpCaps;
//   unsigned int MaxTextureBlendStages;
//   unsigned int MaxSimultaneousTextures;
//   unsigned int VertexProcessingCaps;
//   unsigned int MaxActiveLights;
//   unsigned int MaxUserClipPlanes;
//   unsigned int MaxVertexBlendMatrices;
//   unsigned int MaxVertexBlendMatrixIndex;
//   float MaxPointSize;
//   unsigned int MaxPrimitiveCount;
//   unsigned int MaxVertexIndex;
//   unsigned int MaxStreams;
//   unsigned int MaxStreamStride;
//   unsigned int VertexShaderVersion;
//   unsigned int MaxVertexShaderConst;
//   unsigned int PixelShaderVersion;
//   float PixelShader1xMaxValue;
//   unsigned int DevCaps2;
//   float MaxNpatchTessellationLevel;
//   unsigned int Reserved5;
//   unsigned int MasterAdapterOrdinal;
//   unsigned int AdapterOrdinalInGroup;
//   unsigned int NumberOfAdaptersInGroup;
//   unsigned int DeclTypes;
//   unsigned int NumSimultaneousRTs;
//   unsigned int StretchRectFilterCaps;
//   _D3DVSHADERCAPS2_0 VS20Caps;
//   _D3DPSHADERCAPS2_0 PS20Caps;
//   unsigned int VertexTextureFilterCaps;
//   unsigned int MaxVShaderInstructionsExecuted;
//   unsigned int MaxPShaderInstructionsExecuted;
//   unsigned int MaxVertexShader30InstructionSlots;
//   unsigned int MaxPixelShader30InstructionSlots;
// };

// /* 1368 */
// struct HMONITOR__
// {
//   int unused;
// };

// /* 1369 */
// struct HWND__
// {
//   int unused;
// };

// /* 1370 */
// struct _D3DPRESENT_PARAMETERS_
// {
//   unsigned int BackBufferWidth;
//   unsigned int BackBufferHeight;
//   _D3DFORMAT BackBufferFormat;
//   unsigned int BackBufferCount;
//   _D3DMULTISAMPLE_TYPE MultiSampleType;
//   unsigned int MultiSampleQuality;
//   _D3DSWAPEFFECT SwapEffect;
//   HWND__ *hDeviceWindow;
//   int Windowed;
//   int EnableAutoDepthStencil;
//   _D3DFORMAT AutoDepthStencilFormat;
//   unsigned int Flags;
//   unsigned int FullScreen_RefreshRateInHz;
//   unsigned int PresentationInterval;
// };

// /* 1371 */
// struct /*VFT*/ IDirect3D9_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *RegisterSoftwareDevice)(IDirect3D9 *this, void *);
//   unsigned int (__stdcall *GetAdapterCount)(IDirect3D9 *this);
//   HRESULT (__stdcall *GetAdapterIdentifier)(IDirect3D9 *this, unsigned int, unsigned int, _D3DADAPTER_IDENTIFIER9 *);
//   unsigned int (__stdcall *GetAdapterModeCount)(IDirect3D9 *this, unsigned int, _D3DFORMAT);
//   HRESULT (__stdcall *EnumAdapterModes)(IDirect3D9 *this, unsigned int, _D3DFORMAT, unsigned int, _D3DDISPLAYMODE *);
//   HRESULT (__stdcall *GetAdapterDisplayMode)(IDirect3D9 *this, unsigned int, _D3DDISPLAYMODE *);
//   HRESULT (__stdcall *CheckDeviceType)(IDirect3D9 *this, unsigned int, _D3DDEVTYPE, _D3DFORMAT, _D3DFORMAT, int);
//   HRESULT (__stdcall *CheckDeviceFormat)(IDirect3D9 *this, unsigned int, _D3DDEVTYPE, _D3DFORMAT, unsigned int, _D3DRESOURCETYPE, _D3DFORMAT);
//   HRESULT (__stdcall *CheckDeviceMultiSampleType)(IDirect3D9 *this, unsigned int, _D3DDEVTYPE, _D3DFORMAT, int, _D3DMULTISAMPLE_TYPE, unsigned int *);
//   HRESULT (__stdcall *CheckDepthStencilMatch)(IDirect3D9 *this, unsigned int, _D3DDEVTYPE, _D3DFORMAT, _D3DFORMAT, _D3DFORMAT);
//   HRESULT (__stdcall *CheckDeviceFormatConversion)(IDirect3D9 *this, unsigned int, _D3DDEVTYPE, _D3DFORMAT, _D3DFORMAT);
//   HRESULT (__stdcall *GetDeviceCaps)(IDirect3D9 *this, unsigned int, _D3DDEVTYPE, _D3DCAPS9 *);
//   HMONITOR__ *(__stdcall *GetAdapterMonitor)(IDirect3D9 *this, unsigned int);
//   HRESULT (__stdcall *CreateDevice)(IDirect3D9 *this, unsigned int, _D3DDEVTYPE, HWND__ *, unsigned int, _D3DPRESENT_PARAMETERS_ *, IDirect3DDevice9 **);
// };

// /* 1372 */
// struct _D3DDEVICE_CREATION_PARAMETERS
// {
//   unsigned int AdapterOrdinal;
//   _D3DDEVTYPE DeviceType;
//   HWND__ *hFocusWindow;
//   unsigned int BehaviorFlags;
// };

// /* 1373 */
// struct __cppobj IDirect3DResource9 : IUnknown
// {
// };

// /* 1374 */
// struct __cppobj IDirect3DSurface9 : IDirect3DResource9
// {
// };

// /* 1375 */
// struct _D3DSURFACE_DESC
// {
//   _D3DFORMAT Format;
//   _D3DRESOURCETYPE Type;
//   unsigned int Usage;
//   _D3DPOOL Pool;
//   _D3DMULTISAMPLE_TYPE MultiSampleType;
//   unsigned int MultiSampleQuality;
//   unsigned int Width;
//   unsigned int Height;
// };

// /* 1376 */
// struct _D3DLOCKED_RECT
// {
//   int Pitch;
//   void *pBits;
// };

// /* 1377 */
// const struct tagRECT
// {
//   int left;
//   int top;
//   int right;
//   int bottom;
// };

// /* 1378 */
// struct HDC__
// {
//   int unused;
// };

// /* 1379 */
// struct _RGNDATAHEADER
// {
//   unsigned int dwSize;
//   unsigned int iType;
//   unsigned int nCount;
//   unsigned int nRgnSize;
//   tagRECT rcBound;
// };

// /* 1380 */
// const struct __declspec(align(4)) _RGNDATA
// {
//   _RGNDATAHEADER rdh;
//   char Buffer[1];
// };

// /* 1381 */
// struct __cppobj IDirect3DSwapChain9 : IUnknown
// {
// };

// /* 1382 */
// struct _D3DRASTER_STATUS
// {
//   int InVBlank;
//   unsigned int ScanLine;
// };

// /* 1383 */
// struct /*VFT*/ IDirect3DSwapChain9_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *Present)(IDirect3DSwapChain9 *this, const tagRECT *, const tagRECT *, HWND__ *, const _RGNDATA *, unsigned int);
//   HRESULT (__stdcall *GetFrontBufferData)(IDirect3DSwapChain9 *this, IDirect3DSurface9 *);
//   HRESULT (__stdcall *GetBackBuffer)(IDirect3DSwapChain9 *this, unsigned int, _D3DBACKBUFFER_TYPE, IDirect3DSurface9 **);
//   HRESULT (__stdcall *GetRasterStatus)(IDirect3DSwapChain9 *this, _D3DRASTER_STATUS *);
//   HRESULT (__stdcall *GetDisplayMode)(IDirect3DSwapChain9 *this, _D3DDISPLAYMODE *);
//   HRESULT (__stdcall *GetDevice)(IDirect3DSwapChain9 *this, IDirect3DDevice9 **);
//   HRESULT (__stdcall *GetPresentParameters)(IDirect3DSwapChain9 *this, _D3DPRESENT_PARAMETERS_ *);
// };

// /* 1384 */
// const struct _D3DGAMMARAMP
// {
//   unsigned __int16 red[256];
//   unsigned __int16 green[256];
//   unsigned __int16 blue[256];
// };

// /* 1385 */
// struct __cppobj IDirect3DBaseTexture9 : IDirect3DResource9
// {
// };

// /* 1386 */
// struct __cppobj IDirect3DTexture9 : IDirect3DBaseTexture9
// {
// };

// /* 1387 */
// struct _D3DVOLUME_DESC
// {
//   _D3DFORMAT Format;
//   _D3DRESOURCETYPE Type;
//   unsigned int Usage;
//   _D3DPOOL Pool;
//   unsigned int Width;
//   unsigned int Height;
//   unsigned int Depth;
// };

// /* 1388 */
// struct __cppobj IDirect3DVolumeTexture9 : IDirect3DBaseTexture9
// {
// };

// /* 1389 */
// struct __cppobj IDirect3DVolume9 : IUnknown
// {
// };

// /* 1390 */
// struct _D3DLOCKED_BOX
// {
//   int RowPitch;
//   int SlicePitch;
//   void *pBits;
// };

// /* 1391 */
// const struct _D3DBOX
// {
//   unsigned int Left;
//   unsigned int Top;
//   unsigned int Right;
//   unsigned int Bottom;
//   unsigned int Front;
//   unsigned int Back;
// };

// /* 1392 */
// struct /*VFT*/ IDirect3DVolume9_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetDevice)(IDirect3DVolume9 *this, IDirect3DDevice9 **);
//   HRESULT (__stdcall *SetPrivateData)(IDirect3DVolume9 *this, const _GUID *, const void *, unsigned int, unsigned int);
//   HRESULT (__stdcall *GetPrivateData)(IDirect3DVolume9 *this, const _GUID *, void *, unsigned int *);
//   HRESULT (__stdcall *FreePrivateData)(IDirect3DVolume9 *this, const _GUID *);
//   HRESULT (__stdcall *GetContainer)(IDirect3DVolume9 *this, const _GUID *, void **);
//   HRESULT (__stdcall *GetDesc)(IDirect3DVolume9 *this, _D3DVOLUME_DESC *);
//   HRESULT (__stdcall *LockBox)(IDirect3DVolume9 *this, _D3DLOCKED_BOX *, const _D3DBOX *, unsigned int);
//   HRESULT (__stdcall *UnlockBox)(IDirect3DVolume9 *this);
// };

// /* 1393 */
// struct __cppobj IDirect3DCubeTexture9 : IDirect3DBaseTexture9
// {
// };

// /* 1394 */
// struct __cppobj IDirect3DVertexBuffer9 : IDirect3DResource9
// {
// };

// /* 1395 */
// struct __cppobj IDirect3DIndexBuffer9 : IDirect3DResource9
// {
// };

// /* 1396 */
// struct _D3DINDEXBUFFER_DESC
// {
//   _D3DFORMAT Format;
//   _D3DRESOURCETYPE Type;
//   unsigned int Usage;
//   _D3DPOOL Pool;
//   unsigned int Size;
// };

// /* 1397 */
// const struct tagPOINT
// {
//   int x;
//   int y;
// };

// /* 1398 */
// const struct _D3DRECT
// {
//   int x1;
//   int y1;
//   int x2;
//   int y2;
// };

// /* 1399 */
// struct $40942CBCB8F0A1CDBC81269929B28324
// {
//   float _11;
//   float _12;
//   float _13;
//   float _14;
//   float _21;
//   float _22;
//   float _23;
//   float _24;
//   float _31;
//   float _32;
//   float _33;
//   float _34;
//   float _41;
//   float _42;
//   float _43;
//   float _44;
// };

// /* 1400 */
// union $A78FD6EB7312677E662E8BB8EE0E1C28
// {
//   $40942CBCB8F0A1CDBC81269929B28324 __s0;
//   float m[4][4];
// };

// /* 1401 */
// const struct _D3DMATRIX
// {
//   $A78FD6EB7312677E662E8BB8EE0E1C28 ___u0;
// };

// /* 1402 */
// const struct _D3DVIEWPORT9
// {
//   unsigned int X;
//   unsigned int Y;
//   unsigned int Width;
//   unsigned int Height;
//   float MinZ;
//   float MaxZ;
// };

// /* 1403 */
// struct _D3DCOLORVALUE
// {
//   float r;
//   float g;
//   float b;
//   float a;
// };

// /* 1404 */
// const struct _D3DMATERIAL9
// {
//   _D3DCOLORVALUE Diffuse;
//   _D3DCOLORVALUE Ambient;
//   _D3DCOLORVALUE Specular;
//   _D3DCOLORVALUE Emissive;
//   float Power;
// };

// /* 1405 */
// struct _D3DVECTOR
// {
//   float x;
//   float y;
//   float z;
// };

// /* 1406 */
// const struct _D3DLIGHT9
// {
//   _D3DLIGHTTYPE Type;
//   _D3DCOLORVALUE Diffuse;
//   _D3DCOLORVALUE Specular;
//   _D3DCOLORVALUE Ambient;
//   _D3DVECTOR Position;
//   _D3DVECTOR Direction;
//   float Range;
//   float Falloff;
//   float Attenuation0;
//   float Attenuation1;
//   float Attenuation2;
//   float Theta;
//   float Phi;
// };

// /* 1407 */
// struct __cppobj IDirect3DStateBlock9 : IUnknown
// {
// };

// /* 1408 */
// struct /*VFT*/ IDirect3DStateBlock9_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetDevice)(IDirect3DStateBlock9 *this, IDirect3DDevice9 **);
//   HRESULT (__stdcall *Capture)(IDirect3DStateBlock9 *this);
//   HRESULT (__stdcall *Apply)(IDirect3DStateBlock9 *this);
// };

// /* 1409 */
// const struct _D3DCLIPSTATUS9
// {
//   unsigned int ClipUnion;
//   unsigned int ClipIntersection;
// };

// /* 1410 */
// const struct tagPALETTEENTRY
// {
//   unsigned __int8 peRed;
//   unsigned __int8 peGreen;
//   unsigned __int8 peBlue;
//   unsigned __int8 peFlags;
// };

// /* 1411 */
// struct __cppobj IDirect3DVertexDeclaration9 : IUnknown
// {
// };

// /* 1412 */
// struct _D3DVERTEXELEMENT9
// {
//   unsigned __int16 Stream;
//   unsigned __int16 Offset;
//   unsigned __int8 Type;
//   unsigned __int8 Method;
//   unsigned __int8 Usage;
//   unsigned __int8 UsageIndex;
// };

// /* 1413 */
// struct /*VFT*/ IDirect3DVertexDeclaration9_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetDevice)(IDirect3DVertexDeclaration9 *this, IDirect3DDevice9 **);
//   HRESULT (__stdcall *GetDeclaration)(IDirect3DVertexDeclaration9 *this, _D3DVERTEXELEMENT9 *, unsigned int *);
// };

// /* 1414 */
// struct __cppobj IDirect3DVertexShader9 : IUnknown
// {
// };

// /* 1415 */
// struct /*VFT*/ IDirect3DVertexShader9_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetDevice)(IDirect3DVertexShader9 *this, IDirect3DDevice9 **);
//   HRESULT (__stdcall *GetFunction)(IDirect3DVertexShader9 *this, void *, unsigned int *);
// };

// /* 1416 */
// struct __cppobj IDirect3DPixelShader9 : IUnknown
// {
// };

// /* 1417 */
// struct /*VFT*/ IDirect3DPixelShader9_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetDevice)(IDirect3DPixelShader9 *this, IDirect3DDevice9 **);
//   HRESULT (__stdcall *GetFunction)(IDirect3DPixelShader9 *this, void *, unsigned int *);
// };

// /* 1418 */
// const struct _D3DRECTPATCH_INFO
// {
//   unsigned int StartVertexOffsetWidth;
//   unsigned int StartVertexOffsetHeight;
//   unsigned int Width;
//   unsigned int Height;
//   unsigned int Stride;
//   _D3DBASISTYPE Basis;
//   _D3DDEGREETYPE Degree;
// };

// /* 1419 */
// const struct _D3DTRIPATCH_INFO
// {
//   unsigned int StartVertexOffset;
//   unsigned int NumVertices;
//   _D3DBASISTYPE Basis;
//   _D3DDEGREETYPE Degree;
// };

// /* 1420 */
// struct __cppobj IDirect3DQuery9 : IUnknown
// {
// };

// /* 1421 */
// struct /*VFT*/ IDirect3DQuery9_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetDevice)(IDirect3DQuery9 *this, IDirect3DDevice9 **);
//   _D3DQUERYTYPE (__stdcall *GetType)(IDirect3DQuery9 *this);
//   unsigned int (__stdcall *GetDataSize)(IDirect3DQuery9 *this);
//   HRESULT (__stdcall *Issue)(IDirect3DQuery9 *this, unsigned int);
//   HRESULT (__stdcall *GetData)(IDirect3DQuery9 *this, void *, unsigned int, unsigned int);
// };

// /* 1422 */
// struct /*VFT*/ IDirect3DDevice9_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *TestCooperativeLevel)(IDirect3DDevice9 *this);
//   unsigned int (__stdcall *GetAvailableTextureMem)(IDirect3DDevice9 *this);
//   HRESULT (__stdcall *EvictManagedResources)(IDirect3DDevice9 *this);
//   HRESULT (__stdcall *GetDirect3D)(IDirect3DDevice9 *this, IDirect3D9 **);
//   HRESULT (__stdcall *GetDeviceCaps)(IDirect3DDevice9 *this, _D3DCAPS9 *);
//   HRESULT (__stdcall *GetDisplayMode)(IDirect3DDevice9 *this, unsigned int, _D3DDISPLAYMODE *);
//   HRESULT (__stdcall *GetCreationParameters)(IDirect3DDevice9 *this, _D3DDEVICE_CREATION_PARAMETERS *);
//   HRESULT (__stdcall *SetCursorProperties)(IDirect3DDevice9 *this, unsigned int, unsigned int, IDirect3DSurface9 *);
//   void (__stdcall *SetCursorPosition)(IDirect3DDevice9 *this, int, int, unsigned int);
//   int (__stdcall *ShowCursor)(IDirect3DDevice9 *this, int);
//   HRESULT (__stdcall *CreateAdditionalSwapChain)(IDirect3DDevice9 *this, _D3DPRESENT_PARAMETERS_ *, IDirect3DSwapChain9 **);
//   HRESULT (__stdcall *GetSwapChain)(IDirect3DDevice9 *this, unsigned int, IDirect3DSwapChain9 **);
//   unsigned int (__stdcall *GetNumberOfSwapChains)(IDirect3DDevice9 *this);
//   HRESULT (__stdcall *Reset)(IDirect3DDevice9 *this, _D3DPRESENT_PARAMETERS_ *);
//   HRESULT (__stdcall *Present)(IDirect3DDevice9 *this, const tagRECT *, const tagRECT *, HWND__ *, const _RGNDATA *);
//   HRESULT (__stdcall *GetBackBuffer)(IDirect3DDevice9 *this, unsigned int, unsigned int, _D3DBACKBUFFER_TYPE, IDirect3DSurface9 **);
//   HRESULT (__stdcall *GetRasterStatus)(IDirect3DDevice9 *this, unsigned int, _D3DRASTER_STATUS *);
//   HRESULT (__stdcall *SetDialogBoxMode)(IDirect3DDevice9 *this, int);
//   void (__stdcall *SetGammaRamp)(IDirect3DDevice9 *this, unsigned int, unsigned int, const _D3DGAMMARAMP *);
//   void (__stdcall *GetGammaRamp)(IDirect3DDevice9 *this, unsigned int, _D3DGAMMARAMP *);
//   HRESULT (__stdcall *CreateTexture)(IDirect3DDevice9 *this, unsigned int, unsigned int, unsigned int, unsigned int, _D3DFORMAT, _D3DPOOL, IDirect3DTexture9 **, void **);
//   HRESULT (__stdcall *CreateVolumeTexture)(IDirect3DDevice9 *this, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, _D3DFORMAT, _D3DPOOL, IDirect3DVolumeTexture9 **, void **);
//   HRESULT (__stdcall *CreateCubeTexture)(IDirect3DDevice9 *this, unsigned int, unsigned int, unsigned int, _D3DFORMAT, _D3DPOOL, IDirect3DCubeTexture9 **, void **);
//   HRESULT (__stdcall *CreateVertexBuffer)(IDirect3DDevice9 *this, unsigned int, unsigned int, unsigned int, _D3DPOOL, IDirect3DVertexBuffer9 **, void **);
//   HRESULT (__stdcall *CreateIndexBuffer)(IDirect3DDevice9 *this, unsigned int, unsigned int, _D3DFORMAT, _D3DPOOL, IDirect3DIndexBuffer9 **, void **);
//   HRESULT (__stdcall *CreateRenderTarget)(IDirect3DDevice9 *this, unsigned int, unsigned int, _D3DFORMAT, _D3DMULTISAMPLE_TYPE, unsigned int, int, IDirect3DSurface9 **, void **);
//   HRESULT (__stdcall *CreateDepthStencilSurface)(IDirect3DDevice9 *this, unsigned int, unsigned int, _D3DFORMAT, _D3DMULTISAMPLE_TYPE, unsigned int, int, IDirect3DSurface9 **, void **);
//   HRESULT (__stdcall *UpdateSurface)(IDirect3DDevice9 *this, IDirect3DSurface9 *, const tagRECT *, IDirect3DSurface9 *, const tagPOINT *);
//   HRESULT (__stdcall *UpdateTexture)(IDirect3DDevice9 *this, IDirect3DBaseTexture9 *, IDirect3DBaseTexture9 *);
//   HRESULT (__stdcall *GetRenderTargetData)(IDirect3DDevice9 *this, IDirect3DSurface9 *, IDirect3DSurface9 *);
//   HRESULT (__stdcall *GetFrontBufferData)(IDirect3DDevice9 *this, unsigned int, IDirect3DSurface9 *);
//   HRESULT (__stdcall *StretchRect)(IDirect3DDevice9 *this, IDirect3DSurface9 *, const tagRECT *, IDirect3DSurface9 *, const tagRECT *, _D3DTEXTUREFILTERTYPE);
//   HRESULT (__stdcall *ColorFill)(IDirect3DDevice9 *this, IDirect3DSurface9 *, const tagRECT *, unsigned int);
//   HRESULT (__stdcall *CreateOffscreenPlainSurface)(IDirect3DDevice9 *this, unsigned int, unsigned int, _D3DFORMAT, _D3DPOOL, IDirect3DSurface9 **, void **);
//   HRESULT (__stdcall *SetRenderTarget)(IDirect3DDevice9 *this, unsigned int, IDirect3DSurface9 *);
//   HRESULT (__stdcall *GetRenderTarget)(IDirect3DDevice9 *this, unsigned int, IDirect3DSurface9 **);
//   HRESULT (__stdcall *SetDepthStencilSurface)(IDirect3DDevice9 *this, IDirect3DSurface9 *);
//   HRESULT (__stdcall *GetDepthStencilSurface)(IDirect3DDevice9 *this, IDirect3DSurface9 **);
//   HRESULT (__stdcall *BeginScene)(IDirect3DDevice9 *this);
//   HRESULT (__stdcall *EndScene)(IDirect3DDevice9 *this);
//   HRESULT (__stdcall *Clear)(IDirect3DDevice9 *this, unsigned int, const _D3DRECT *, unsigned int, unsigned int, float, unsigned int);
//   HRESULT (__stdcall *SetTransform)(IDirect3DDevice9 *this, _D3DTRANSFORMSTATETYPE, const _D3DMATRIX *);
//   HRESULT (__stdcall *GetTransform)(IDirect3DDevice9 *this, _D3DTRANSFORMSTATETYPE, _D3DMATRIX *);
//   HRESULT (__stdcall *MultiplyTransform)(IDirect3DDevice9 *this, _D3DTRANSFORMSTATETYPE, const _D3DMATRIX *);
//   HRESULT (__stdcall *SetViewport)(IDirect3DDevice9 *this, const _D3DVIEWPORT9 *);
//   HRESULT (__stdcall *GetViewport)(IDirect3DDevice9 *this, _D3DVIEWPORT9 *);
//   HRESULT (__stdcall *SetMaterial)(IDirect3DDevice9 *this, const _D3DMATERIAL9 *);
//   HRESULT (__stdcall *GetMaterial)(IDirect3DDevice9 *this, _D3DMATERIAL9 *);
//   HRESULT (__stdcall *SetLight)(IDirect3DDevice9 *this, unsigned int, const _D3DLIGHT9 *);
//   HRESULT (__stdcall *GetLight)(IDirect3DDevice9 *this, unsigned int, _D3DLIGHT9 *);
//   HRESULT (__stdcall *LightEnable)(IDirect3DDevice9 *this, unsigned int, int);
//   HRESULT (__stdcall *GetLightEnable)(IDirect3DDevice9 *this, unsigned int, int *);
//   HRESULT (__stdcall *SetClipPlane)(IDirect3DDevice9 *this, unsigned int, const float *);
//   HRESULT (__stdcall *GetClipPlane)(IDirect3DDevice9 *this, unsigned int, float *);
//   HRESULT (__stdcall *SetRenderState)(IDirect3DDevice9 *this, _D3DRENDERSTATETYPE, unsigned int);
//   HRESULT (__stdcall *GetRenderState)(IDirect3DDevice9 *this, _D3DRENDERSTATETYPE, unsigned int *);
//   HRESULT (__stdcall *CreateStateBlock)(IDirect3DDevice9 *this, _D3DSTATEBLOCKTYPE, IDirect3DStateBlock9 **);
//   HRESULT (__stdcall *BeginStateBlock)(IDirect3DDevice9 *this);
//   HRESULT (__stdcall *EndStateBlock)(IDirect3DDevice9 *this, IDirect3DStateBlock9 **);
//   HRESULT (__stdcall *SetClipStatus)(IDirect3DDevice9 *this, const _D3DCLIPSTATUS9 *);
//   HRESULT (__stdcall *GetClipStatus)(IDirect3DDevice9 *this, _D3DCLIPSTATUS9 *);
//   HRESULT (__stdcall *GetTexture)(IDirect3DDevice9 *this, unsigned int, IDirect3DBaseTexture9 **);
//   HRESULT (__stdcall *SetTexture)(IDirect3DDevice9 *this, unsigned int, IDirect3DBaseTexture9 *);
//   HRESULT (__stdcall *GetTextureStageState)(IDirect3DDevice9 *this, unsigned int, _D3DTEXTURESTAGESTATETYPE, unsigned int *);
//   HRESULT (__stdcall *SetTextureStageState)(IDirect3DDevice9 *this, unsigned int, _D3DTEXTURESTAGESTATETYPE, unsigned int);
//   HRESULT (__stdcall *GetSamplerState)(IDirect3DDevice9 *this, unsigned int, _D3DSAMPLERSTATETYPE, unsigned int *);
//   HRESULT (__stdcall *SetSamplerState)(IDirect3DDevice9 *this, unsigned int, _D3DSAMPLERSTATETYPE, unsigned int);
//   HRESULT (__stdcall *ValidateDevice)(IDirect3DDevice9 *this, unsigned int *);
//   HRESULT (__stdcall *SetPaletteEntries)(IDirect3DDevice9 *this, unsigned int, const tagPALETTEENTRY *);
//   HRESULT (__stdcall *GetPaletteEntries)(IDirect3DDevice9 *this, unsigned int, tagPALETTEENTRY *);
//   HRESULT (__stdcall *SetCurrentTexturePalette)(IDirect3DDevice9 *this, unsigned int);
//   HRESULT (__stdcall *GetCurrentTexturePalette)(IDirect3DDevice9 *this, unsigned int *);
//   HRESULT (__stdcall *SetScissorRect)(IDirect3DDevice9 *this, const tagRECT *);
//   HRESULT (__stdcall *GetScissorRect)(IDirect3DDevice9 *this, tagRECT *);
//   HRESULT (__stdcall *SetSoftwareVertexProcessing)(IDirect3DDevice9 *this, int);
//   int (__stdcall *GetSoftwareVertexProcessing)(IDirect3DDevice9 *this);
//   HRESULT (__stdcall *SetNPatchMode)(IDirect3DDevice9 *this, float);
//   float (__stdcall *GetNPatchMode)(IDirect3DDevice9 *this);
//   HRESULT (__stdcall *DrawPrimitive)(IDirect3DDevice9 *this, _D3DPRIMITIVETYPE, unsigned int, unsigned int);
//   HRESULT (__stdcall *DrawIndexedPrimitive)(IDirect3DDevice9 *this, _D3DPRIMITIVETYPE, int, unsigned int, unsigned int, unsigned int, unsigned int);
//   HRESULT (__stdcall *DrawPrimitiveUP)(IDirect3DDevice9 *this, _D3DPRIMITIVETYPE, unsigned int, const void *, unsigned int);
//   HRESULT (__stdcall *DrawIndexedPrimitiveUP)(IDirect3DDevice9 *this, _D3DPRIMITIVETYPE, unsigned int, unsigned int, unsigned int, const void *, _D3DFORMAT, const void *, unsigned int);
//   HRESULT (__stdcall *ProcessVertices)(IDirect3DDevice9 *this, unsigned int, unsigned int, unsigned int, IDirect3DVertexBuffer9 *, IDirect3DVertexDeclaration9 *, unsigned int);
//   HRESULT (__stdcall *CreateVertexDeclaration)(IDirect3DDevice9 *this, const _D3DVERTEXELEMENT9 *, IDirect3DVertexDeclaration9 **);
//   HRESULT (__stdcall *SetVertexDeclaration)(IDirect3DDevice9 *this, IDirect3DVertexDeclaration9 *);
//   HRESULT (__stdcall *GetVertexDeclaration)(IDirect3DDevice9 *this, IDirect3DVertexDeclaration9 **);
//   HRESULT (__stdcall *SetFVF)(IDirect3DDevice9 *this, unsigned int);
//   HRESULT (__stdcall *GetFVF)(IDirect3DDevice9 *this, unsigned int *);
//   HRESULT (__stdcall *CreateVertexShader)(IDirect3DDevice9 *this, const unsigned int *, IDirect3DVertexShader9 **);
//   HRESULT (__stdcall *SetVertexShader)(IDirect3DDevice9 *this, IDirect3DVertexShader9 *);
//   HRESULT (__stdcall *GetVertexShader)(IDirect3DDevice9 *this, IDirect3DVertexShader9 **);
//   HRESULT (__stdcall *SetVertexShaderConstantF)(IDirect3DDevice9 *this, unsigned int, const float *, unsigned int);
//   HRESULT (__stdcall *GetVertexShaderConstantF)(IDirect3DDevice9 *this, unsigned int, float *, unsigned int);
//   HRESULT (__stdcall *SetVertexShaderConstantI)(IDirect3DDevice9 *this, unsigned int, const int *, unsigned int);
//   HRESULT (__stdcall *GetVertexShaderConstantI)(IDirect3DDevice9 *this, unsigned int, int *, unsigned int);
//   HRESULT (__stdcall *SetVertexShaderConstantB)(IDirect3DDevice9 *this, unsigned int, const int *, unsigned int);
//   HRESULT (__stdcall *GetVertexShaderConstantB)(IDirect3DDevice9 *this, unsigned int, int *, unsigned int);
//   HRESULT (__stdcall *SetStreamSource)(IDirect3DDevice9 *this, unsigned int, IDirect3DVertexBuffer9 *, unsigned int, unsigned int);
//   HRESULT (__stdcall *GetStreamSource)(IDirect3DDevice9 *this, unsigned int, IDirect3DVertexBuffer9 **, unsigned int *, unsigned int *);
//   HRESULT (__stdcall *SetStreamSourceFreq)(IDirect3DDevice9 *this, unsigned int, unsigned int);
//   HRESULT (__stdcall *GetStreamSourceFreq)(IDirect3DDevice9 *this, unsigned int, unsigned int *);
//   HRESULT (__stdcall *SetIndices)(IDirect3DDevice9 *this, IDirect3DIndexBuffer9 *);
//   HRESULT (__stdcall *GetIndices)(IDirect3DDevice9 *this, IDirect3DIndexBuffer9 **);
//   HRESULT (__stdcall *CreatePixelShader)(IDirect3DDevice9 *this, const unsigned int *, IDirect3DPixelShader9 **);
//   HRESULT (__stdcall *SetPixelShader)(IDirect3DDevice9 *this, IDirect3DPixelShader9 *);
//   HRESULT (__stdcall *GetPixelShader)(IDirect3DDevice9 *this, IDirect3DPixelShader9 **);
//   HRESULT (__stdcall *SetPixelShaderConstantF)(IDirect3DDevice9 *this, unsigned int, const float *, unsigned int);
//   HRESULT (__stdcall *GetPixelShaderConstantF)(IDirect3DDevice9 *this, unsigned int, float *, unsigned int);
//   HRESULT (__stdcall *SetPixelShaderConstantI)(IDirect3DDevice9 *this, unsigned int, const int *, unsigned int);
//   HRESULT (__stdcall *GetPixelShaderConstantI)(IDirect3DDevice9 *this, unsigned int, int *, unsigned int);
//   HRESULT (__stdcall *SetPixelShaderConstantB)(IDirect3DDevice9 *this, unsigned int, const int *, unsigned int);
//   HRESULT (__stdcall *GetPixelShaderConstantB)(IDirect3DDevice9 *this, unsigned int, int *, unsigned int);
//   HRESULT (__stdcall *DrawRectPatch)(IDirect3DDevice9 *this, unsigned int, const float *, const _D3DRECTPATCH_INFO *);
//   HRESULT (__stdcall *DrawTriPatch)(IDirect3DDevice9 *this, unsigned int, const float *, const _D3DTRIPATCH_INFO *);
//   HRESULT (__stdcall *DeletePatch)(IDirect3DDevice9 *this, unsigned int);
//   HRESULT (__stdcall *CreateQuery)(IDirect3DDevice9 *this, _D3DQUERYTYPE, IDirect3DQuery9 **);
// };

// /* 1423 */
// struct /*VFT*/ IDirect3DResource9_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetDevice)(IDirect3DResource9 *this, IDirect3DDevice9 **);
//   HRESULT (__stdcall *SetPrivateData)(IDirect3DResource9 *this, const _GUID *, const void *, unsigned int, unsigned int);
//   HRESULT (__stdcall *GetPrivateData)(IDirect3DResource9 *this, const _GUID *, void *, unsigned int *);
//   HRESULT (__stdcall *FreePrivateData)(IDirect3DResource9 *this, const _GUID *);
//   unsigned int (__stdcall *SetPriority)(IDirect3DResource9 *this, unsigned int);
//   unsigned int (__stdcall *GetPriority)(IDirect3DResource9 *this);
//   void (__stdcall *PreLoad)(IDirect3DResource9 *this);
//   _D3DRESOURCETYPE (__stdcall *GetType)(IDirect3DResource9 *this);
// };

// /* 1424 */
// struct _D3DVERTEXBUFFER_DESC
// {
//   _D3DFORMAT Format;
//   _D3DRESOURCETYPE Type;
//   unsigned int Usage;
//   _D3DPOOL Pool;
//   unsigned int Size;
//   unsigned int FVF;
// };

// /* 1425 */
// struct /*VFT*/ IDirect3DVertexBuffer9_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetDevice)(IDirect3DResource9 *this, IDirect3DDevice9 **);
//   HRESULT (__stdcall *SetPrivateData)(IDirect3DResource9 *this, const _GUID *, const void *, unsigned int, unsigned int);
//   HRESULT (__stdcall *GetPrivateData)(IDirect3DResource9 *this, const _GUID *, void *, unsigned int *);
//   HRESULT (__stdcall *FreePrivateData)(IDirect3DResource9 *this, const _GUID *);
//   unsigned int (__stdcall *SetPriority)(IDirect3DResource9 *this, unsigned int);
//   unsigned int (__stdcall *GetPriority)(IDirect3DResource9 *this);
//   void (__stdcall *PreLoad)(IDirect3DResource9 *this);
//   _D3DRESOURCETYPE (__stdcall *GetType)(IDirect3DResource9 *this);
//   HRESULT (__stdcall *Lock)(IDirect3DVertexBuffer9 *this, unsigned int, unsigned int, void **, unsigned int);
//   HRESULT (__stdcall *Unlock)(IDirect3DVertexBuffer9 *this);
//   HRESULT (__stdcall *GetDesc)(IDirect3DVertexBuffer9 *this, _D3DVERTEXBUFFER_DESC *);
// };

/* 1426 */
struct XSurfaceCollisionAabb
{
  unsigned __int16 mins[3];
  unsigned __int16 maxs[3];
};

static_assert(sizeof(XSurfaceCollisionAabb) == 0xC, "The size is not correct");

/* 1427 */
struct XSurfaceCollisionNode
{
  XSurfaceCollisionAabb aabb;
  unsigned __int16 childBeginIndex;
  unsigned __int16 childCount;
};

static_assert(sizeof(XSurfaceCollisionNode) == 0x10, "The size is not correct");

/* 1428 */
struct XSurfaceCollisionLeaf
{
  unsigned __int16 triangleBeginIndex;
};

static_assert(sizeof(XSurfaceCollisionLeaf) == 0x2, "The size is not correct");


/* 1429 */
struct XSurfaceCollisionTree
{
  float trans[3];
  float scale[3];
  unsigned int nodeCount;
  XSurfaceCollisionNode* nodes;
  unsigned int leafCount;
  XSurfaceCollisionLeaf* leafs;
};

static_assert(sizeof(XSurfaceCollisionTree) == 0x28, "The size is not correct");

/* 1430 */
struct XRigidVertList
{
  unsigned __int16 boneOffset;
  unsigned __int16 vertCount;
  unsigned __int16 triOffset;
  unsigned __int16 triCount;
  XSurfaceCollisionTree* collisionTree;
};

static_assert(sizeof(XRigidVertList) == 0xC, "The size is not correct");

/* 1431 */
struct XSurface
{
  unsigned __int8 tileMode;
  unsigned __int8 vertListCount;
  unsigned __int16 flags;
  unsigned __int16 vertCount;
  unsigned __int16 triCount;
  unsigned __int16 baseTriIndex;
  unsigned __int16 baseVertIndex;
  unsigned __int16* triIndices;
  XSurfaceVertexInfo vertInfo;
  GfxPackedVertex* verts0;
  IDirect3DVertexBuffer9* vb0;
  XRigidVertList* vertList;
  IDirect3DIndexBuffer9* indexBuffer;
  int partBits[5];
};

static_assert(sizeof(XSurface) == 0x44, "The size is not correct");

/* 1432 */
struct GfxDrawSurfFields
{
  unsigned __int64 objectId : 16;
  unsigned __int64 fade : 4;
  unsigned __int64 customIndex : 5;
  unsigned __int64 reflectionProbeIndex : 3;
  unsigned __int64 hdrBits : 1;
  unsigned __int64 glightRender : 1;
  unsigned __int64 dlightRender : 1;
  unsigned __int64 materialSortedIndex : 12;
  unsigned __int64 primaryLightIndex : 8;
  unsigned __int64 surfType : 4;
  unsigned __int64 prepass : 2;
  unsigned __int64 noDynamicShadow : 1;
  unsigned __int64 primarySortKey : 6;
};

static_assert(sizeof(GfxDrawSurfFields) == 0x8, "The size is not correct");

/* 1433 */
union GfxDrawSurf
{
  GfxDrawSurfFields fields;
  unsigned __int64 packed;
};

static_assert(sizeof(GfxDrawSurf) == 0x8, "The size is not correct");

/* 1434 */
struct __declspec(align(8)) MaterialInfo
{
  const char* name;
  unsigned int gameFlags;
  unsigned __int8 pad;
  unsigned __int8 sortKey;
  unsigned __int8 textureAtlasRowCount;
  unsigned __int8 textureAtlasColumnCount;
  GfxDrawSurf drawSurf;
  unsigned int surfaceTypeBits;
  unsigned int layeredSurfaceTypes;
  unsigned __int16 hashIndex;
};

static_assert(sizeof(MaterialInfo) == 0x28, "The size is not correct");

/* 1435 */
struct MaterialStreamRouting
{
  unsigned __int8 source;
  unsigned __int8 dest;
};

static_assert(sizeof(MaterialStreamRouting) == 0x2, "The size is not correct");

/* 1436 */
struct MaterialVertexStreamRouting
{
  MaterialStreamRouting data[16];
  IDirect3DVertexDeclaration9* decl[18];
};

static_assert(sizeof(MaterialVertexStreamRouting) == 0x68, "The size is not correct");

/* 1437 */
struct MaterialVertexDeclaration
{
  unsigned __int8 streamCount;
  bool hasOptionalSource;
  bool isLoaded;
  MaterialVertexStreamRouting routing;
};

static_assert(sizeof(MaterialVertexDeclaration) == 0x6C, "The size is not correct");

/* 1438 */
struct __declspec(align(4)) GfxVertexShaderLoadDef
{
  unsigned int* program;
  unsigned __int16 programSize;
};

static_assert(sizeof(GfxVertexShaderLoadDef) == 0x8, "The size is not correct");

/* 1439 */
struct MaterialVertexShaderProgram
{
  IDirect3DVertexShader9* vs;
  GfxVertexShaderLoadDef loadDef;
};

static_assert(sizeof(MaterialVertexShaderProgram) == 0xC, "The size is not correct");

/* 1440 */
struct MaterialVertexShader
{
  const char* name;
  MaterialVertexShaderProgram prog;
};

static_assert(sizeof(MaterialVertexShader) == 0x10, "The size is not correct");

/* 1441 */
struct __declspec(align(4)) GfxPixelShaderLoadDef
{
  unsigned int* program;
  unsigned __int16 programSize;
};

static_assert(sizeof(GfxPixelShaderLoadDef) == 0x8, "The size is not correct");

/* 1442 */
struct MaterialPixelShaderProgram
{
  IDirect3DPixelShader9* ps;
  GfxPixelShaderLoadDef loadDef;
};

static_assert(sizeof(MaterialPixelShaderProgram) == 0xC, "The size is not correct");

/* 1443 */
struct MaterialPixelShader
{
  const char* name;
  MaterialPixelShaderProgram prog;
};

static_assert(sizeof(MaterialPixelShader) == 0x10, "The size is not correct");

/* 1444 */
struct MaterialArgumentCodeConst
{
  unsigned __int16 index;
  unsigned __int8 firstRow;
  unsigned __int8 rowCount;
};

static_assert(sizeof(MaterialArgumentCodeConst) == 0x4, "The size is not correct");

/* 1445 */
union MaterialArgumentDef
{
  const float* literalConst;
  MaterialArgumentCodeConst codeConst;
  unsigned int codeSampler;
  unsigned int nameHash;
};

static_assert(sizeof(MaterialArgumentDef) == 0x4, "The size is not correct");

/* 1446 */
struct MaterialShaderArgument
{
  unsigned __int16 type;
  unsigned __int16 dest;
  MaterialArgumentDef u;
};

static_assert(sizeof(MaterialShaderArgument) == 0x8, "The size is not correct");

/* 1449 */
struct MaterialPass
{
  MaterialVertexDeclaration* vertexDecl;
  MaterialVertexShader* vertexShader;

  /* 1447 */
  union
  {
    MaterialPixelShader* pixelShader;
    MaterialPixelShader* localPixelShader;
  };

  unsigned __int8 perPrimArgCount;
  unsigned __int8 perObjArgCount;
  unsigned __int8 stableArgCount;
  unsigned __int8 customSamplerFlags;

  /* 1448 */
  union
  {
    MaterialShaderArgument* localArgs;
    MaterialShaderArgument* args;
  };
};

static_assert(sizeof(MaterialPass) == 0x14, "The size is not correct");

/* 1450 */
struct MaterialTechnique
{
  const char* name;
  unsigned __int16 flags;
  unsigned __int16 passCount;
  MaterialPass passArray[1];
};

static_assert(sizeof(MaterialTechnique) == 0x1C, "The size is not correct");

/* 1451 */
struct MaterialTechniqueSet
{
  const char* name;
  unsigned __int8 worldVertFormat;
  unsigned __int8 unused[1];
  unsigned __int16 techsetFlags;
  MaterialTechnique* techniques[130];
};

static_assert(sizeof(MaterialTechniqueSet) == 0x210, "The size is not correct");

/* 1452 */
struct __declspec(align(4)) GfxImageLoadDef
{
  unsigned __int8 levelCount;
  unsigned __int8 flags;
  int format;
  int resourceSize;
  unsigned __int8 data[1];
};

static_assert(sizeof(GfxImageLoadDef) == 0x10, "The size is not correct");

/* 1453 */
union GfxTexture
{
  IDirect3DBaseTexture9* basemap;
  IDirect3DTexture9* map;
  IDirect3DVolumeTexture9* volmap;
  IDirect3DCubeTexture9* cubemap;
  GfxImageLoadDef* loadDef;
};

static_assert(sizeof(GfxTexture) == 0x4, "The size is not correct");

/* 1454 */
struct Picmip
{
  unsigned __int8 platform[2];
};

static_assert(sizeof(Picmip) == 0x2, "The size is not correct");

/* 1455 */
struct CardMemory
{
  int platform[2];
};

static_assert(sizeof(CardMemory) == 0x8, "The size is not correct");

/* 1456 */
struct GfxImage
{
  GfxTexture texture;
  unsigned __int8 mapType;
  unsigned __int8 semantic;
  unsigned __int8 category;
  bool delayLoadPixels;
  Picmip picmip;
  bool noPicmip;
  unsigned __int8 track;
  CardMemory cardMemory;
  unsigned __int16 width;
  unsigned __int16 height;
  unsigned __int16 depth;
  unsigned __int8 levelCount;
  unsigned __int8 streaming;
  unsigned int baseSize;
  unsigned __int8* pixels;
  unsigned int loadedSize;
  unsigned __int8 skippedMipLevels;
  const char* name;
  unsigned int hash;
};

static_assert(sizeof(GfxImage) == 0x34, "The size is not correct");

/* 1457 */
struct WaterWritable
{
  float floatTime;
};

static_assert(sizeof(WaterWritable) == 0x4, "The size is not correct");

/* 1458 */
struct complex_s
{
  float real;
  float imag;
};

static_assert(sizeof(complex_s) == 0x8, "The size is not correct");

/* 1459 */
struct water_t
{
  WaterWritable writable;
  complex_s* H0;
  float* wTerm;
  int M;
  int N;
  float Lx;
  float Lz;
  float gravity;
  float windvel;
  float winddir[2];
  float amplitude;
  float codeConstant[4];
  GfxImage* image;
};

static_assert(sizeof(water_t) == 0x44, "The size is not correct");

/* 1460 */
union MaterialTextureDefInfo
{
  GfxImage* image;
  water_t* water;
};

static_assert(sizeof(MaterialTextureDefInfo) == 0x4, "The size is not correct");

/* 1461 */
struct MaterialTextureDef
{
  unsigned int nameHash;
  char nameStart;
  char nameEnd;
  unsigned __int8 samplerState;
  unsigned __int8 semantic;
  unsigned __int8 isMatureContent;
  unsigned __int8 pad[3];
  MaterialTextureDefInfo u;
};

static_assert(sizeof(MaterialTextureDef) == 0x10, "The size is not correct");

/* 1462 */
struct MaterialConstantDef
{
  unsigned int nameHash;
  char name[12];
  float literal[4];
};

static_assert(sizeof(MaterialConstantDef) == 0x20, "The size is not correct");

/* 1463 */
struct GfxStateBits
{
  unsigned int loadBits[2];
};

static_assert(sizeof(GfxStateBits) == 0x8, "The size is not correct");

/* 1466 */
struct Material
{
  MaterialInfo info;
  unsigned __int8 stateBitsEntry[130];
  unsigned __int8 textureCount;
  unsigned __int8 constantCount;
  unsigned __int8 stateBitsCount;
  unsigned __int8 stateFlags;
  unsigned __int8 cameraRegion;
  unsigned __int8 maxStreamedMips;

  /* 1464 */
  union
  {
    MaterialTechniqueSet* localTechniqueSet;
    MaterialTechniqueSet* techniqueSet;
  };

  MaterialTextureDef* textureTable;

  /* 1465 */
  union
  {
    MaterialConstantDef* localConstantTable;
    MaterialConstantDef* constantTable;
  };

  GfxStateBits* stateBitsTable;
};

static_assert(sizeof(Material) == 0xC0, "The size is not correct");

/* 1467 */
struct XModelLodInfo
{
  float dist;
  unsigned __int16 numsurfs;
  unsigned __int16 surfIndex;
  int partBits[5];
  unsigned __int8 lod;
  unsigned __int8 smcIndexPlusOne;
  unsigned __int8 smcAllocBits;
  unsigned __int8 unused;
};

static_assert(sizeof(XModelLodInfo) == 0x20, "The size is not correct");

/* 1468 */
struct XModelCollTri_s
{
  float plane[4];
  float svec[4];
  float tvec[4];
};

static_assert(sizeof(XModelCollTri_s) == 0x30, "The size is not correct");

/* 1469 */
struct XModelCollSurf_s
{
  XModelCollTri_s* collTris;
  int numCollTris;
  float mins[3];
  float maxs[3];
  int boneIdx;
  int contents;
  int surfFlags;
};

static_assert(sizeof(XModelCollSurf_s) == 0x2C, "The size is not correct");

/* 1470 */
struct __declspec(align(4)) XBoneInfo
{
  float bounds[2][3];
  float offset[3];
  float radiusSquared;
  unsigned __int8 collmap;
};

static_assert(sizeof(XBoneInfo) == 0x2C, "The size is not correct");

/* 1471 */
struct XModelHighMipBounds
{
  float center[3];
  float himipRadiusSq;
};

static_assert(sizeof(XModelHighMipBounds) == 0x10, "The size is not correct");

/* 1472 */
struct XModelStreamInfo
{
  XModelHighMipBounds* highMipBounds;
};

static_assert(sizeof(XModelStreamInfo) == 0x4, "The size is not correct");

/* 1473 */
struct PhysPreset
{
  const char* name;
  int flags;
  float mass;
  float bounce;
  float friction;
  float bulletForceScale;
  float explosiveForceScale;
  const char* sndAliasPrefix;
  float piecesSpreadFraction;
  float piecesUpwardVelocity;
  int canFloat;
  float gravityScale;
  float centerOfMassOffset[3];
  float buoyancyBoxMin[3];
  float buoyancyBoxMax[3];
};

static_assert(sizeof(PhysPreset) == 0x54, "The size is not correct");

/* 1474 */
struct cplane_s
{
  float normal[3];
  float dist;
  unsigned __int8 type;
  unsigned __int8 signbits;
  unsigned __int8 pad[2];
};

static_assert(sizeof(cplane_s) == 0x14, "The size is not correct");

/* 1475 */
struct cbrushside_t
{
  cplane_s* plane;
  int cflags;
  int sflags;
};

static_assert(sizeof(cbrushside_t) == 0xC, "The size is not correct");

/* 1476 */
struct BrushWrapper
{
  float mins[3];
  int contents;
  float maxs[3];
  unsigned int numsides;
  cbrushside_t* sides;
  int axial_cflags[2][3];
  int axial_sflags[2][3];
  unsigned int numverts;
  float(*verts)[3];
  cplane_s* planes;
};

static_assert(sizeof(BrushWrapper) == 0x60, "The size is not correct");

/* 1477 */
struct PhysGeomInfo
{
  BrushWrapper* brush;
  int type;
  float orientation[3][3];
  float offset[3];
  float halfLengths[3];
};

static_assert(sizeof(PhysGeomInfo) == 0x44, "The size is not correct");

/* 1478 */
struct PhysGeomList
{
  unsigned int count;
  PhysGeomInfo* geoms;
  int contents;
};

static_assert(sizeof(PhysGeomList) == 0xC, "The size is not correct");

/* 1479 */
struct Collmap
{
  PhysGeomList* geomList;
};

static_assert(sizeof(Collmap) == 0x4, "The size is not correct");

/* 1480 */
struct PhysConstraint
{
  unsigned __int16 targetname;
  ConstraintType type;
  AttachPointType attach_point_type1;
  int target_index1;
  unsigned __int16 target_ent1;
  const char* target_bone1;
  AttachPointType attach_point_type2;
  int target_index2;
  unsigned __int16 target_ent2;
  const char* target_bone2;
  float offset[3];
  float pos[3];
  float pos2[3];
  float dir[3];
  int flags;
  int timeout;
  int min_health;
  int max_health;
  float distance;
  float damp;
  float power;
  float scale[3];
  float spin_scale;
  float minAngle;
  float maxAngle;
  Material* material;
  int constraintHandle;
  int rope_index;
  int centity_num[4];
};

/* 1481 */
struct PhysConstraints
{
  const char* name;
  unsigned int count;
  PhysConstraint data[16];
};

/* 1487 */
struct XModel
{
  const char* name;
  unsigned __int8 numBones;
  unsigned __int8 numRootBones;
  unsigned __int8 numsurfs;
  unsigned __int8 lodRampType;

  /* 1482 */
  union
  {
    unsigned __int16* localBoneNames;
    unsigned __int16* boneNames;
  };

  /* 1483 */
  union
  {
    unsigned __int8* localParentList;
    unsigned __int8* parentList;
  };

  /* 1484 */
  union
  {
    __int16* localQuats;
    __int16* quats;
  };

  /* 1485 */
  union
  {
    float* localTrans;
    float* trans;
  };

  unsigned __int8* partClassification;
  DObjAnimMat* baseMat;
  XSurface* surfs;
  Material** materialHandles;
  XModelLodInfo lodInfo[4];
  unsigned __int8 lodDistAutoGenerated;
  XModelCollSurf_s* collSurfs;
  int numCollSurfs;
  int contents;

  /* 1486 */
  union
  {
    XBoneInfo* localBoneInfo;
    XBoneInfo* boneInfo;
  };

  float radius;
  float mins[3];
  float maxs[3];
  __int16 numLods;
  __int16 collLod;
  XModelStreamInfo streamInfo;
  int memUsage;
  int flags;
  bool bad;
  PhysPreset* physPreset;
  unsigned __int8 numCollmaps;
  Collmap* collmaps;
  PhysConstraints* physConstraints;
};

static_assert(sizeof(XModel) == 0xFC, "The size is not correct");

/* 1488 */
struct FxSpawnDefLooping
{
  int intervalMsec;
  int count;
};

static_assert(sizeof(FxSpawnDefLooping) == 0x8, "The size is not correct");

/* 1489 */
struct FxIntRange
{
  int base;
  int amplitude;
};

static_assert(sizeof(FxIntRange) == 0x8, "The size is not correct");

/* 1490 */
struct FxSpawnDefOneShot
{
  FxIntRange count;
};

static_assert(sizeof(FxSpawnDefOneShot) == 0x8, "The size is not correct");

/* 1491 */
union FxSpawnDef
{
  FxSpawnDefLooping looping;
  FxSpawnDefOneShot oneShot;
};

static_assert(sizeof(FxSpawnDef) == 0x8, "The size is not correct");

/* 1492 */
struct FxFloatRange
{
  float base;
  float amplitude;
};

static_assert(sizeof(FxFloatRange) == 0x8, "The size is not correct");

/* 1493 */
struct FxElemAtlas
{
  unsigned __int8 behavior;
  unsigned __int8 index;
  unsigned __int8 fps;
  unsigned __int8 loopCount;
  unsigned __int8 colIndexBits;
  unsigned __int8 rowIndexBits;
  unsigned __int16 entryCountAndIndexRange;
};

static_assert(sizeof(FxElemAtlas) == 0x8, "The size is not correct");

/* 1494 */
struct FxElemVec3Range
{
  float base[3];
  float amplitude[3];
};

static_assert(sizeof(FxElemVec3Range) == 0x18, "The size is not correct");

/* 1495 */
struct FxElemVelStateInFrame
{
  FxElemVec3Range velocity;
  FxElemVec3Range totalDelta;
};

static_assert(sizeof(FxElemVelStateInFrame) == 0x30, "The size is not correct");

/* 1496 */
const struct FxElemVelStateSample
{
  FxElemVelStateInFrame local;
  FxElemVelStateInFrame world;
};

static_assert(sizeof(FxElemVelStateSample) == 0x60, "The size is not correct");

/* 1497 */
struct FxElemVisualState
{
  unsigned __int8 color[4];
  float rotationDelta;
  float rotationTotal;
  float size[2];
  float scale;
};

static_assert(sizeof(FxElemVisualState) == 0x18, "The size is not correct");

/* 1498 */
const struct FxElemVisStateSample
{
  FxElemVisualState base;
  FxElemVisualState amplitude;
};

static_assert(sizeof(FxElemVisStateSample) == 0x30, "The size is not correct");

/* 1499 */
struct FxElemMarkVisuals
{
  Material* materials[2];
};

static_assert(sizeof(FxElemMarkVisuals) == 0x8, "The size is not correct");

/* 1500 */
const struct FxEffectDef
{
  const char* name;
  unsigned __int8 flags;
  unsigned __int8 efPriority;
  unsigned __int8 reserved[2];
  int totalSize;
  int msecLoopingLife;
  int elemDefCountLooping;
  int elemDefCountOneShot;
  int elemDefCountEmission;

  /* 1513 */
  union
  {
    const FxElemDef* elemDefsEA;
    const FxElemDef* elemDefs;
  };

  float boundingBoxDim[3];
  float boundingSphere[4];
};

static_assert(sizeof(FxEffectDef) == 0x3C, "The size is not correct");

/* 1501 */
union FxEffectDefRef
{
  const FxEffectDef* handle;
  const char* name;
};

static_assert(sizeof(FxEffectDefRef) == 0x4, "The size is not correct");

/* 1502 */
union FxElemVisuals
{
  const void* anonymous;
  Material* material;
  XModel* model;
  FxEffectDefRef effectDef;
  const char* soundName;
};

static_assert(sizeof(FxElemVisuals) == 0x4, "The size is not correct");

/* 1503 */
union FxElemDefVisuals
{
  FxElemMarkVisuals* markArray;
  FxElemVisuals* array;
  FxElemVisuals instance;
};
static_assert(sizeof(FxElemDefVisuals) == 0x4, "The size is not correct");

/* 1508 */
struct FxBillboardTrim
{
  float topWidth;
  float bottomWidth;
};
static_assert(sizeof(FxBillboardTrim) == 0x8, "The size is not correct");

/* 1509 */
union FxElemDefUnion
{
  FxBillboardTrim billboard;
  FxIntRange cloudDensityRange;
};

static_assert(sizeof(FxElemDefUnion) == 0x8, "The size is not correct");

/* 1510 */
struct FxElemSpawnSound
{
  const char* spawnSound;
};

static_assert(sizeof(FxElemSpawnSound) == 0x4, "The size is not correct");

/* 1512 */
const struct FxElemDef
{
  int flags;
  FxSpawnDef spawn;
  FxFloatRange spawnRange;
  FxFloatRange fadeInRange;
  FxFloatRange fadeOutRange;
  float spawnFrustumCullRadius;
  FxIntRange spawnDelayMsec;
  FxIntRange lifeSpanMsec;
  FxFloatRange spawnOrigin[3];
  FxFloatRange spawnOffsetRadius;
  FxFloatRange spawnOffsetHeight;
  FxFloatRange spawnAngles[3];
  FxFloatRange angularVelocity[3];
  FxFloatRange initialRotation;
  unsigned int rotationAxis;
  FxFloatRange gravity;
  FxFloatRange reflectionFactor;
  FxElemAtlas atlas;
  float windInfluence;
  unsigned __int8 elemType;
  unsigned __int8 visualCount;
  unsigned __int8 velIntervalCount;
  unsigned __int8 visStateIntervalCount;
  const FxElemVelStateSample* velSamples;
  const FxElemVisStateSample* visSamples;
  FxElemDefVisuals visuals;
  float collMins[3];
  float collMaxs[3];
  FxEffectDefRef effectOnImpact;
  FxEffectDefRef effectOnDeath;
  FxEffectDefRef effectEmitted;
  FxFloatRange emitDist;
  FxFloatRange emitDistVariance;
  FxEffectDefRef effectAttached;

  /* 1511 */
  union
  {
    FxTrailDef* localTrailDef;
    FxTrailDef* trailDef;
  };

  unsigned __int8 sortOrder;
  unsigned __int8 lightingFrac;
  unsigned __int8 unused[2];
  unsigned __int16 alphaFadeTimeMsec;
  unsigned __int16 maxWindStrength;
  unsigned __int16 spawnIntervalAtMaxWind;
  unsigned __int16 lifespanAtMaxWind;
  FxElemDefUnion u;
  FxElemSpawnSound spawnSound;
  float billboardPivot[2];
};

static_assert(sizeof(FxEffectDef) == 0x3C, "The size is not correct");

/* 1507 */
struct FxTrailDef
{
  int scrollTimeMsec;
  int repeatDist;
  int splitDist;
  int vertCount;

  /* 1505 */
  union
  {
    FxTrailVertex* vertsEA;
    FxTrailVertex* verts;
  };

  int indCount;

  /* 1506 */
  union
  {
    unsigned __int16* indsEA;
    unsigned __int16* inds;
  };
};

static_assert(sizeof(FxTrailDef) == 0x1C, "The size is not correct");


/* 1504 */
struct FxTrailVertex
{
  float pos[2];
  float normal[2];
  float texCoord;
};

static_assert(sizeof(FxTrailVertex) == 0x14, "The size is not correct");

/* 1514 */
struct DestructibleStage
{
  unsigned __int16 showBone;
  float breakHealth;
  float maxTime;
  unsigned int flags;
  const FxEffectDef* breakEffect;
  const char* breakSound;
  const char* breakNotify;
  const char* loopSound;
  XModel* spawnModel[3];
  PhysPreset* physPreset;
};

static_assert(sizeof(DestructibleStage) == 0x30, "The size is not correct");

/* 1515 */
struct DestructiblePiece
{
  DestructibleStage stages[5];
  unsigned __int8 parentPiece;
  float parentDamagePercent;
  float bulletDamageScale;
  float explosiveDamageScale;
  float meleeDamageScale;
  float impactDamageScale;
  float entityDamageTransfer;
  PhysConstraints* physConstraints;
  int health;
  const char* damageSound;
  const FxEffectDef* burnEffect;
  const char* burnSound;
  unsigned __int16 enableLabel;
  int hideBones[5];
};

static_assert(sizeof(DestructiblePiece) == 0x138, "The size is not correct");

/* 1516 */
struct DestructibleDef
{
  const char* name;
  XModel* model;
  XModel* pristineModel;
  int numPieces;
  DestructiblePiece* pieces;
  int clientOnly;
};

static_assert(sizeof(DestructibleDef) == 0x18, "The size is not correct");

/* 1517 */
struct DestructibleState
{
  LerpEntityStateDestructibleHit state;
  int time;
};

/* 1518 */
struct __declspec(align(4)) Destructible
{
  int entNum;
  DESTRUCTIBLE_PIECE_INFO* pieceArray;
  int oldestBurnTime;
  unsigned __int8 destructiblePoseID;
  int pieceCount;
  DestructibleDef* ddef;
  unsigned int flags;
  DestructibleState states[5];
  unsigned __int8 bHasBeenHit;
};

/* 1519 */
struct WheelState
{
  WheelEffectState m_state;
  WheelEffectState m_last_state;
  float m_state_time;
  float m_rate;
};

/* 1520 */
struct phys_vec3
{
  float x;
  float y;
  float z;
  float w;
};

/* 1521 */
struct phys_mat44
{
  phys_vec3 x;
  phys_vec3 y;
  phys_vec3 z;
  phys_vec3 w;
};

/* 1522 */
const struct VehicleParameter
{
  float m_speed_max;
  float m_accel_max;
  float m_reverse_scale;
  float m_steer_angle_max;
  float m_steer_speed;
  float m_wheel_radius;
  float m_susp_spring_k;
  float m_susp_damp_k;
  float m_susp_adj;
  float m_susp_hard_limit;
  float m_susp_min_height;
  float m_tire_fric_fwd;
  float m_tire_fric_side;
  float m_tire_fric_brake;
  float m_tire_fric_hand_brake;
  float m_body_mass;
  float m_roll_stability;
  float m_pitch_roll_resistance;
  float m_yaw_resistance;
  float m_upright_strength;
  float m_tilt_fakey;
  float m_peel_out_max_speed;
  float m_tire_damp_coast;
  float m_tire_damp_brake;
  float m_tire_damp_hand;
  float m_auto_hand_brake_min_speed;
  TractionType m_traction_type;
  char m_name[64];
  float m_bbox_min[3];
  float m_bbox_max[3];
  float m_mass_center_offset[3];
  float m_buoyancybox_min[3];
  float m_buoyancybox_max[3];
  float m_water_speed_max;
  float m_water_accel_max;
  float m_water_turn_accel;
  float m_water_turn_speed_max;
  float m_water_ebrake_power;
  float m_boat_motor_offset[3];
  float m_boat_speed_rise;
  float m_boat_speed_tilt;
  float m_boat_side_fric_scale;
  float m_boat_forward_fric_scale;
  float m_boat_vertical_fric_scale;
  float m_jump_force;
  float m_tire_fric_side_max;
};

/* 1523 */
struct EntHandle
{
  unsigned __int16 number;
  unsigned __int16 infoIndex;
};

/* 1524 */
struct entityShared_t
{
  unsigned __int8 linked;
  unsigned __int8 bmodel;
  unsigned __int8 svFlags;
  int clientMask[1];
  unsigned __int8 inuse;
  int broadcastTime;
  float mins[3];
  float maxs[3];
  int contents;
  float absmin[3];
  float absmax[3];
  float currentOrigin[3];
  float currentAngles[3];
  EntHandle ownerNum;
  int eventTime;
};

// /* 1525 */
// struct __cppobj bitarray<51>
// {
//   int array[2];
// };

/* 1526 */
struct usercmd_s
{
  int serverTime;
  bitarray<51> button_bits;
  int angles[3];
  unsigned __int16 weapon;
  unsigned __int16 offHandIndex;
  unsigned __int16 lastWeaponAltModeSwitch;
  char forwardmove;
  char rightmove;
  char upmove;
  char pitchmove;
  char yawmove;
  float meleeChargeYaw;
  unsigned __int8 meleeChargeDist;
  float rollmove;
  char selectedLocation[2];
  unsigned __int8 selectedYaw;
};

/* 1527 */
struct playerTeamState_t
{
  int location;
};

/* 1528 */
struct __declspec(align(8)) clientSession_t
{
  sessionState_t sessionState;
  int forceSpectatorClient;
  int killCamEntity;
  int killCamTargetEntity;
  int archiveTime;
  unsigned int scriptPersId;
  clientConnected_t connected;
  usercmd_s cmd;
  usercmd_s oldcmd;
  int localClient;
  int predictItemPickup;
  char newnetname[32];
  int maxHealth;
  int enterTime;
  playerTeamState_t teamState;
  int voteCount;
  int teamVoteCount;
  float moveSpeedScaleMultiplier;
  int viewmodelIndex;
  int noSpectate;
  int teamInfo;
  clientState_s cs;
  int psOffsetTime;
  int scoreboardColumnCache[18];
};

// /* 1529 */
struct gclient_s
{
  playerState_s ps;
  clientSession_t sess;
  int spectatorClient;
  int flags;
  int lastCmdTime;
  bitarray<51> button_bits;
  bitarray<51> oldbutton_bits;
  bitarray<51> latched_button_bits;
  bitarray<51> button_bitsSinceLastFrame;
  float fGunPitch;
  float fGunYaw;
  int damage_blood;
  float damage_from[3];
  int damage_fromWorld;
  int inactivityTime;
  int inactivityWarning;
  int lastVoiceTime;
  int outWaterTime;
  int switchSeatTime;
  float currentAimSpreadScale;
  int dropWeaponTime;
  int sniperRifleFiredTime;
  float sniperRifleMuzzleYaw;
  int PCSpecialPickedUpCount;
  bool prevLinkAnglesSet;
  float prevLinkedInvQuat[4];
  float linkAnglesFrac;
  bool linkAnglesLocked;
  float linkAnglesMinClamp[2];
  float linkAnglesMaxClamp[2];
  bool link_rotationMovesEyePos;
  EntHandle useHoldEntity;
  int useHoldTime;
  int useButtonDone;
  int iLastCompassPlayerInfoEnt;
  int compassPingTime;
  int damageTime;
  float v_dmg_roll;
  float v_dmg_pitch;
  float swayViewAngles[3];
  float swayOffset[3];
  float swayAngles[3];
  float baseAngles[3];
  float baseOrigin[3];
  float recoilAngles[3];
  float fLastIdleFactor;
  int weapIdleTime;
  float recoilSpeed[3];
  int lastServerTime;
  int lastSpawnTime;
  unsigned int lastWeapon;
  bool previouslyFiring;
  bool previouslyUsingNightVision;
  bool previouslyBeganWeaponRaise;
  bool previouslySprinting;
  unsigned int hasSpyplane;
  unsigned int hasSatellite;
  int revive;
  int reviveTime;
  int disallowVehicleUsage;
  int lastStand;
  int lastStandTime;
};

// /* 1601 */
struct flame_timed_damage_t
{
  gentity_s* attacker;
  int damage;
  float damageDuration;
  float damageInterval;
  int start_timestamp;
  int end_timestamp;
  int lastupdate_timestamp;
};

/* 1602 */
struct item_ent_t
{
  int ammoCount;
  int clipAmmoCount;
  int index;
};

/* 1603 */
struct trigger_ent_t
{
  int threshold;
  int accumulate;
  int timestamp;
  int singleUserEntIndex;
  unsigned __int8 perk;
  bool requireLookAt;
  int exposureIndex;
  float exposureLerpToLighter;
  float exposureLerpToDarker;
  float exposureFeather[3];
};

/* 1604 */
struct mover_ent_t
{
  float decelTime;
  float aDecelTime;
  float speed;
  float aSpeed;
  float midTime;
  float aMidTime;
  float pos1[3];
  float pos2[3];
  float pos3[3];
  float apos1[3];
  float apos2[3];
  float apos3[3];
};

/* 1605 */
struct corpse_ent_t
{
  int deathAnimStartTime;
};

/* 1609 */
struct missile_ent_t
{
  int timestamp;
  float time;
  int timeOfBirth;
  float travelDist;
  float surfaceNormal[3];
  team_t team;
  unsigned __int8 flags;
  int antilagTimeOffset;
  int timeAlive;
  /* 1608 */
  union
  {
    /* 1606 */
    struct
    {
      float curvature[3];
      float targetOffset[3];
      MissileStage stage;
      MissileFlightMode flightMode;
    } missile;

    /* 1607 */
    struct
    {
      int effectIndex;
    } grenade;
  };
  int forcedDud;
  float grenadeWobbleCycle;
  float grenadeCurve;
};

/* 1610 */
struct spawner_ent_t
{
  int team;
  int timestamp;
};

/* 1530 */
struct gentity_s
{
  entityState_s s;
  entityShared_t r;
  gclient_s* client;
  actor_s* actor;
  sentient_s* sentient;
  TurretInfo* pTurretInfo;
  Destructible* destructible;
  scr_vehicle_s* scr_vehicle;
  unsigned __int16 model;
  unsigned __int8 physicsObject;
  unsigned __int8 takedamage;
  unsigned __int8 active;
  unsigned __int8 nopickup;
  unsigned __int8 handler;
  unsigned __int8 team;
  unsigned __int16 classname;
  unsigned __int16 target;
  unsigned __int16 targetname;
  unsigned __int16 script_noteworthy;
  unsigned int attachIgnoreCollision;
  int spawnflags;
  int flags;
  int eventTime;
  int freeAfterEvent;
  int unlinkAfterEvent;
  int clipmask;
  int processedFrame;
  EntHandle parent;
  int nextthink;
  int health;
  int maxHealth;
  int damage;
  flame_timed_damage_t flame_timed_damage[4];
  int last_timed_radius_damage;
  int count;
  gentity_s* chain;
  /* 1612 */
  union
  {
    item_ent_t item[2];
    trigger_ent_t trigger;
    mover_ent_t mover;
    corpse_ent_t corpse;
    missile_ent_t missile;
    spawner_ent_t spawner;
  };
  EntHandle missileTargetEnt;
  tagInfo_s* tagInfo;
  gentity_s* tagChildren;
  unsigned __int16 attachModelNames[19];
  unsigned __int16 attachTagNames[19];
  XAnimTree_s* pAnimTree;
  unsigned __int16 disconnectedLinks;
  int iDisconnectTime;
  int useCount;
  int physObjId;
  gentity_s* nextFree;
  int birthTime;
  int ikPlayerclipTerrainTime;
  int ikDisableTerrainMappingTime;
};

/* 1538 */
struct ai_transition_cmd_t
{
  ai_state_transition_t eTransition;
  ai_state_t eState;
};

/* 1539 */
struct ai_orient_t
{
  ai_orient_mode_t eMode;
  float fDesiredLookPitch;
  float fDesiredLookYaw;
  float fDesiredBodyYaw;
};

/* 1542 */
struct actor_prone_info_s
{
  bool bCorpseOrientation;
  bool orientPitch;
  bool prone;
  int iProneTime;
  int iProneTrans;
  float fBodyHeight;
  /* 1540 */
  union
  {
    float fTorsoPitch;
    float fBodyPitch;
  };
  /* 1541 */
  union
  {
    float fWaistPitch;
    float fBodyRoll;
  };
};

/* 1543 */
struct ActorCachedInfo
{
  int time;
  float pos[3];
  float dir[3];
};

/* 1544 */
struct ActorLookAtInfo
{
  float vLookAtPos[3];
  float fLookAtTurnAngle;
  float fLookAtTurnSpeed;
  float fLookAtTurnAccel;
  float fLookAtAnimYawLimit;
  float fLookAtYawLimit;
  unsigned __int16 animLookAtStraight;
  unsigned __int16 animLookAtLeft;
  unsigned __int16 animLookAtRight;
  bool bDoLookAt;
  bool bLookAtSetup;
  int iLookAtBlendEndTime;
  float fLookAtAnimBlendRate;
  float fLookAtLimitBlendRate;
};

/* 1545 */
struct __declspec(align(4)) scr_animscript_t
{
  int func;
  unsigned __int16 name;
};

// /* 1546 */
// struct __cppobj visitor_base_t
// {
//   visitor_base_t_vtbl *__vftable /*VFT*/;
// };

// /* 1552 */
// union float4
// {
//   float v[4];
//   unsigned int u[4];
//   PackedUnitVec unitVec[4];
// };

// /* 1553 */
// struct __cppobj hybrid_vector
// {
//   float4 vec;
// };

// /* 1548 */
// struct __cppobj colgeom_visitor_t : visitor_base_t
// {
//   hybrid_vector m_mn;
//   hybrid_vector m_mx;
//   hybrid_vector m_p0;
//   hybrid_vector m_p1;
//   hybrid_vector m_delta;
//   hybrid_vector m_rvec;
//   float m_radius;
//   int m_mask;
//   TraceThreadInfo *m_threadInfo;
// };

 /* 1560 */
struct col_prim_t
{
  int type;
  /* 1559 */
  union
  {
    const CollisionAabbTree* tree;
    const cbrush_t* brush;
  } ___u1;
};

// /* 1561 */
// struct __cppobj colgeom_visitor_inlined_t<200> : colgeom_visitor_t
// {
//   int nprims;
//   bool overflow;
//   col_prim_t prims[200];
// };

 /* 1573 */
struct actor_physics_t
{
  float vOrigin[3];
  float vVelocity[3];
  unsigned __int16 groundEntNum;
  int iFootstepTimer;
  int bHasGroundPlane;
  float groundplaneSlope;
  int iSurfaceType;
  float vWishDelta[3];
  int bIsAlive;
  int iEntNum;
  aiphys_t ePhysicsType;
  float fGravity;
  int iMsec;
  float vMins[3];
  float vMaxs[3];
  bool prone;
  int iTraceMask;
  int foliageSoundTime;
  int iNumTouch;
  int iTouchEnts[32];
  int iHitEntnum;
  float vHitOrigin[3];
  float vHitNormal[3];
  unsigned __int8 bStuck;
  unsigned __int8 bDeflected;

  char* padding[431];

  // const gjkcc_input_t* m_gjkcc_input;
  // colgeom_visitor_inlined_t<200> proximity_data;
};

// static_padding<sizeof(actor_physics_t)> actor_physics_padding;

 /* 1574 */
struct pathpoint_t
{
  float vOrigPoint[3];
  float fDir2D[2];
  float fOrigLength;
  int iNodeNum;
};

/* 1575 */
struct path_t
{
  pathpoint_t pts[32];
  __int16 wPathLen;
  __int16 wOrigPathLen;
  __int16 wDodgeCount;
  __int16 wNegotiationStartNode;
  __int16 lookaheadNextNode;
  __int16 wDodgeEntity;
  float vFinalGoal[3];
  float lookaheadDir[3];
  float forwardLookaheadDir2D[2];
  float fLookaheadDist;
  float fLookaheadAmount;
  float fLookaheadDistToNextNode;
  int minLookAheadNodes;
  int flags;
  int iPathTime;
  team_t eTeam;
  float fCurrLength;
  float vCurrPoint[3];
  int iPathEndTime;
  float pathEndAnimDistSq;
  int pathEndAnimNotified;
  __int16 numIncreases;
  __int16 numReductions;
};

/* 1576 */
struct path_trim_t
{
  int iIndex;
  int iDelta;
};

/* 1578 */
struct actor_goal_s
{
  float pos[3];
  float ang[3];
  float radius;
  float height;
  pathnode_t* node;
  gentity_s* volume;
};

/* 1579 */
struct ActorCoverArrivalInfo
{
  int arrivalNotifyRequested;
  int animscriptOverrideRunTo;
  float animscriptOverrideRunToPos[3];
  float animscriptOverrideOriginError[3];
};

/* 1580 */
struct vis_cache_t
{
  bool bVisible;
  int iLastUpdateTime;
  int iLastVisTime;
};

/* 1581 */
struct sentient_info_t
{
  vis_cache_t VisCache;
  int iLastAttackMeTime;
  int lastKnownPosTime;
  int attackTime;
  float vLastKnownPos[3];
  pathnode_t* pLastKnownNode;
};

/* 1533 */
struct SentientHandle
{
  unsigned __int16 number;
  unsigned __int16 infoIndex;
};

static_assert(sizeof(SentientHandle) == 0x4, "The size is not correct");

/* 1582 */
struct potential_threat_t
{
  bool isEnabled;
  float direction[2];
};

/* 1577 */
struct actor_s
{
  gentity_s* ent;
  sentient_s* sentient;
  AISpecies species;
  int legsAnim;
  int legsTimer;
  int legsAnimDuration;
  ai_state_t eState[6];
  ai_substate_t eSubState[6];
  unsigned int stateLevel;
  int iStateTime;
  int preThinkTime;
  ai_transition_cmd_t StateTransitions[13];
  unsigned int transitionCount;
  ai_state_t eSimulatedState[6];
  unsigned int simulatedStateLevel;
  int deathContents;
  int iPainTime;
  bool allowPain;
  bool allowDeath;
  bool delayedDeath;
  bool provideCoveringFire;
  int lastShotTime;
  unsigned __int16 weaponName;
  float fLookPitch;
  float fLookYaw;
  float vLookForward[3];
  float vLookRight[3];
  float vLookUp[3];
  ai_orient_t CodeOrient;
  ai_orient_t ScriptOrient;
  float fDesiredBodyYaw;
  float fInvProneAnimLowPitch;
  float fInvProneAnimHighPitch;
  float fProneLastDiff;
  int bProneOK;
  actor_prone_info_s ProneInfo;
  ActorCachedInfo eyeInfo;
  ActorCachedInfo muzzleInfo;
  ActorLookAtInfo lookAtInfo;
  float accuracy;
  float playerSightAccuracy;
  unsigned int missCount;
  unsigned int hitCount;
  float debugLastAccuracy;
  float debugWeaponAccuracy;
  int iTraceCount;
  int iDamageTaken;
  int iDamageYaw;
  float damageDir[3];
  unsigned __int16 damageHitLoc;
  unsigned __int16 damageWeapon;
  unsigned __int16 damageMod;
  ai_stance_e eAllowedStances;
  unsigned __int16 AnimScriptHandle;
  scr_animscript_t* pAnimScriptFunc;
  scr_animscript_t AnimScriptSpecific;
  ai_traverse_mode_t eTraverseMode;
  unsigned __int8 moveMode;
  bool safeToChangeScript;
  bool bUseGoalWeight;
  ai_animmode_t eAnimMode;
  ai_animmode_t eScriptSetAnimMode;
  float fAnimTranslationScale;
  actor_physics_t Physics;
  path_t Path;
  float fWalkDist;
  path_trim_t TrimInfo;
  float fInterval;
  int pathWaitTime;
  int iTeamMoveWaitTime;
  int iTeamMoveDodgeTime;
  actor_s* pPileUpActor;
  gentity_s* pPileUpEnt;
  int bDontAvoidPlayer;
  float sideMove;
  unsigned __int8 keepClaimedNode;
  unsigned __int8 keepClaimedNodeInGoal;
  bool noDodgeMove;
  int mayMoveTime;
  float prevMoveDir[2];
  float leanAmount;
  bool isFacingMotion;
  int lastPathToEnemyTime;
  int bNotifyTurnDone;
  int exposedStartTime;
  int exposedDuration;
  actor_goal_s codeGoal;
  aiGoalSources codeGoalSrc;
  actor_goal_s scriptGoal;
  EntHandle scriptGoalEnt;
  float pathEnemyLookahead;
  float pathEnemyFightDist;
  float meleeAttackDist;
  bool useEnemyGoal;
  bool useMeleeAttackSpot;
  bool goalPosChanged;
  bool commitToFixedNode;
  bool ignoreForFixedNodeSafeCheck;
  bool fixedNode;
  float fixedNodeSafeRadius;
  float fixedNodeSafeVolumeRadiusSq;
  EntHandle fixedNodeSafeVolume;
  int bPacifist;
  int iPacifistWait;
  int numCoverNodesInGoal;
  int iPotentialCoverNodeCount;
  pathnode_t* pPotentialReacquireNode[10];
  int iPotentialReacquireNodeCount;
  ActorCoverArrivalInfo arrivalInfo;
  float fovDot;
  float fMaxSightDistSqrd;
  int ignoreCloseFoliage;
  sentient_info_t sentientInfo[48];
  SentientHandle pFavoriteEnemy;
  int talkToSpecies;
  float lastEnemySightPos[3];
  bool lastEnemySightPosValid;
  float anglesToLikelyEnemyPath[3];
  int faceLikelyEnemyPathNeedCheckTime;
  int faceLikelyEnemyPathNeedRecalculateTime;
  const pathnode_t* faceLikelyEnemyPathNode;
  int ignoreSuppression;
  int suppressionWait;
  int suppressionDuration;
  int suppressionStartTime;
  float suppressionMeter;
  potential_threat_t potentialThreat;
  int threatUpdateTime;
  int hasThreateningEnemy;
  float grenadeAwareness;
  int bThrowbackGrenades;
  EntHandle pGrenade;
  int iGrenadeWeaponIndex;
  unsigned __int16 GrenadeTossMethod;
  int bGrenadeTossValid;
  int bGrenadeTargetValid;
  int iGrenadeAmmo;
  float vGrenadeTossPos[3];
  float vGrenadeTargetPos[3];
  float vGrenadeTossVel[3];
  int bDropWeapon;
  int bDrawOnCompass;
  int bActivateCrosshair;
  bool ignoreTriggers;
  bool pushable;
  int inuse;
  ai_badplace_t aiBadPlace;
  float badPlaceAwareness;
  float goodShootPos[3];
  int goodShootPosValid;
  unsigned __int16 scriptState;
  unsigned __int16 lastScriptState;
  unsigned __int16 stateChangeReason;
  EntHandle pCloseEnt;
  int moveHistoryIndex;
  float moveHistory[10][2];
  float yawVeloc;
  int flashBanged;
  float flashBangedStrength;
  int flashBangImmunity;
  const char* pszDebugInfo;
  pathnode_t* pPotentialCoverNode[1000];
  int ikPriority;
};

// /* 1537 */
// struct __declspec(align(4)) sentient_s
// {
//   gentity_s *ent;
//   team_t eTeam;
//   EntHandle scriptOwner;
//   int iThreatBias;
//   int iThreatBiasGroupIndex;
//   bool bIgnoreMe;
//   bool bIgnoreAll;
//   bool bIgnoreForFriendlyFire;
//   bool originChanged;
//   float oldOrigin[3];
//   float maxVisibleDist;
//   int iEnemyNotifyTime;
//   int attackerCount;
//   EntHandle lastAttacker;
//   EntHandle syncedMeleeEnt;
//   EntHandle targetEnt;
//   EntHandle scriptTargetEnt;
//   unsigned __int16 scriptTargetTag;
//   float entityTargetThreat;
//   int meleeAttackerSpot[4];
//   float attackerAccuracy;
//   bool ignoreRandomBulletDamage;
//   bool turretInvulnerability;
//   pathnode_t *pClaimedNode;
//   pathnode_t *pPrevClaimedNode;
//   pathnode_t *pActualChainPos;
//   int iActualChainPosTime;
//   pathnode_t *pNearestNode;
//   unsigned __int8 bNearestNodeValid;
//   unsigned __int8 bNearestNodeBad;
//   float vNearestNodeCheckPos[3];
//   bool inuse;
//   int banNodeTime;
//   bool bInMeleeCharge;
// };

// /* 1583 */
// struct TurretInfo
// {
//   bool inuse;
//   int state;
//   int flags;
//   int fireTime;
//   EntHandle manualTarget;
//   EntHandle target;
//   float targetPos[3];
//   int targetTime;
//   float missOffsetNormalized[3];
//   float arcmin[2];
//   float arcmax[2];
//   float initialYawmin;
//   float initialYawmax;
//   float forwardAngleDot;
//   float dropPitch;
//   float scanningPitch;
//   int convergenceTime[2];
//   int suppressTime;
//   float maxRangeSquared;
//   SentientHandle detachSentient;
//   int stance;
//   int prevStance;
//   int fireSndDelay;
//   float accuracy;
//   float userOrigin[3];
//   int prevSentTarget;
//   float aiSpread;
//   float playerSpread;
//   team_t eTeam;
//   float heatVal;
//   bool overheating;
//   int fireBarrel;
//   float scanSpeed;
//   float scanDecelYaw;
//   int scanPauseTime;
//   float originError[3];
//   float anglesError[3];
//   float pitchCap;
//   int triggerDown;
//   unsigned int fireSnd;
//   unsigned int fireSndPlayer;
//   unsigned int stopSnd;
//   unsigned int stopSndPlayer;
// };

// /* 1584 */
// struct vehicle_spline_node_t
// {
//   __int16 nextIdx;
//   __int16 prevIdx;
//   float length;
//   float dir[3];
// };

// /* 1585 */
// struct vehicle_path_node_t
// {
//   __int16 numLinks;
//   __int16 firstLinkIndex;
//   float radius;
// };

// /* 1586 */
// union $D7144489F720B3BEDA1018D511D72833
// {
//   vehicle_spline_node_t splineNode;
//   vehicle_path_node_t pathNode;
// };

// /* 1587 */
// struct vehicle_node_t
// {
//   unsigned __int16 name;
//   unsigned __int16 target;
//   unsigned __int16 target2;
//   unsigned __int16 script_linkname;
//   unsigned __int16 script_noteworthy;
//   __int16 index;
//   int flags;
//   float speed;
//   float lookAhead;
//   float origin[3];
//   float angles[3];
//   $D7144489F720B3BEDA1018D511D72833 ___u11;
// };

// /* 1589 */
// struct vehicle_pathpos_t
// {
//   __int16 nodeIdx;
//   __int16 lastNodeIdx;
//   __int16 endOfPath;
//   float frac;
//   float speed;
//   float lookAhead;
//   float slide;
//   float origin[3];
//   float angles[3];
//   float lookPos[3];
//   vehicle_node_t switchNode[2];
//   int flags;
//   vehicle_custom_path_t *customPath;
//   float customGoalLength;
//   float customGoalDir[3];
// };

// /* 1590 */
// struct vehicle_physic_t
// {
//   float origin[3];
//   float prevOrigin[3];
//   float angles[3];
//   float prevAngles[3];
//   float maxAngleVel[3];
//   float yawAccel;
//   float yawDecel;
//   char inputAccelerationOLD;
//   char inputTurning;
//   float driverPedal;
//   float driverSteer;
//   int onGround;
//   float colVelDelta[3];
//   float mins[3];
//   float maxs[3];
//   float vel[3];
//   float bodyVel[3];
//   float rotVel[3];
//   float accel[3];
//   float maxPitchAngle;
//   float maxRollAngle;
//   float wheelZVel[6];
//   float wheelZPos[6];
//   int wheelSurfType[6];
//   float worldTilt[3];
//   float worldTiltVel[3];
//   float heliLockHeight;
//   float curveLength;
//   int curveID;
//   float curveStep;
//   float curveTime;
//   float timeStep;
// };

// /* 1591 */
// struct VehicleTurret
// {
//   int fireTime;
//   int fireBarrel;
//   float barrelOffset;
//   int flags;
//   float heatVal;
//   float turretOnTargetRange;
//   int overheating;
//   VehicleTurretState turretState;
// };

// /* 1592 */
// struct VehicleJitter
// {
//   int jitterPeriodMin;
//   int jitterPeriodMax;
//   int jitterEndTime;
//   float jitterOffsetRange[3];
//   float jitterDeltaAccel[3];
//   float jitterAccel[3];
//   float jitterPos[3];
// };

// /* 1593 */
// struct VehicleHover
// {
//   float hoverRadius;
//   float hoverSpeed;
//   float hoverAccel;
//   float hoverGoalPos[3];
//   int useHoverAccelForAngles;
// };

// /* 1594 */
// struct VehicleTarget
// {
//   int valid;
//   int hasTargetYaw;
//   int targetEnt;
//   int lookAtEnt;
//   float targetOrigin[3];
//   float targetOffset[3];
//   float targetYaw;
// };

// /* 1595 */
// struct VehicleGunnerTags
// {
//   int turret;
//   int barrel;
//   int flash;
//   int flash2;
// };

// /* 1596 */
// struct VehicleTags
// {
//   int player;
//   int popout;
//   int body;
//   int turret;
//   int turret_base;
//   int barrel;
//   int flash[5];
//   VehicleGunnerTags gunnerTags[4];
//   int wheel[6];
//   int seats[11];
//   int entryPoints[5];
// };

// /* 1597 */
// struct VehicleSeat
// {
//   int _occupantEntNum;
// };

// /* 1599 */
// struct __cppobj vehicle_cache_t
// {
//   float lastOrigin[3];
//   float lastAngles[3];
//   int hit_indices[6];
//   int hit_sflags[6];
//   float hit_normals[6][3];
//   float hit_fractions[6];
//   TraceHitType hit_type[6];
//   unsigned __int16 hit_id[6];
//   colgeom_visitor_inlined_t<200> proximity_data;
//   int wheel_mask;
// };

// /* 1600 */
// struct __cppobj scr_vehicle_s
// {
//   vehicle_pathpos_t pathPos;
//   vehicle_physic_t phys;
//   int entNum;
//   __int16 infoIdx;
//   int flags;
//   int team;
//   VehicleMoveState moveState;
//   __int16 waitNode;
//   float waitSpeed;
//   VehicleTurret turret;
//   float turretRotScale;
//   VehicleJitter jitter;
//   VehicleHover hover;
//   VehicleTurret gunnerTurrets[4];
//   VehicleJitter gunnerJitter[4];
//   unsigned __int16 lookAtText0;
//   unsigned __int16 lookAtText1;
//   int manualMode;
//   float manualSpeed;
//   float manualAccel;
//   float manualDecel;
//   float manualTime;
//   float speed;
//   float maxSpeedOverride;
//   float maxDragSpeed;
//   float turningAbility;
//   int hasTarget;
//   int hasTargetYaw;
//   int hasGoalYaw;
//   int stopAtGoal;
//   int stopping;
//   int targetEnt;
//   EntHandle lookAtEnt;
//   float targetOrigin[3];
//   float targetOffset[3];
//   float targetYaw;
//   float goalPosition[3];
//   float goalYaw;
//   float prevGoalYaw;
//   float yawOverShoot;
//   int yawSlowDown;
//   float pathTransitionTime;
//   int hasDefaultPitch;
//   float defaultPitch;
//   float hasGoalRoll;
//   float goalRoll;
//   float goalRollTime;
//   float currentRollTime;
//   int numRolls;
//   VehicleTarget gunnerTargets[4];
//   float nearGoalNotifyDist;
//   float joltDir[2];
//   float joltTime;
//   float joltWave;
//   float joltSpeed;
//   float joltDecel;
//   VehicleTags boneIndex;
//   int turretHitNum;
//   VehicleSeat seats[11];
//   float forcedMaterialSpeed;
//   float modelSwapDelay;
//   int oneExhaust;
//   float deathQuakeScale;
//   float deathQuakeDuration;
//   float deathQuakeRadius;
//   int secTurretAiControlled;
//   float frontArmorRegen;
//   int addToCompass;
//   int m_bSpecialAbilityEventDown;
//   int m_bFirePickupEventDown;
//   int m_bSwapPickupEventDown;
//   int m_bDropDeployableEventDown;
//   NitrousVehicle *nitrousVehicle;
//   vehicle_cache_t vehicle_cache;
//   float heliHeightLockOffset;
// };


/* 1611 */
struct tagInfo_s
{
  gentity_s* parent;
  gentity_s* next;
  unsigned __int16 name;
  int index;
  float axis[4][3];
  float parentInvAxis[4][3];
};

// /* 1572 */
// const struct gjkcc_input_t
// {
//   unsigned int gjkcc_id;
//   bool is_server_thread;
//   colgeom_visitor_inlined_t<200> *proximity_data;
//   int proximity_mask;
//   int m_ent_num;
//   unsigned int m_gjk_query_flags;
//   const gjk_base_t *m_gjk_cg;
//   const phys_mat44 *m_mat;
// };

// /* 1547 */
// struct /*VFT*/ visitor_base_t_vtbl
// {
//   void (__thiscall *~visitor_base_t)(visitor_base_t *this);
// };

/* 1554 */
struct TraceCheckCount
{
  int global;
  int* partitions;
};

static_assert(sizeof(TraceCheckCount) == 0x8, "The size is not correct");

/* 1557 */
struct TraceThreadInfo
{
  TraceCheckCount checkcount;
  cbrush_t* box_brush;
  cmodel_t* box_model;
  PhysGeomList** geoms;
};

static_assert(sizeof(TraceThreadInfo) == 0x14, "The size is not correct");

/* 1550 */
union CollisionAabbTreeIndex
{
  int firstChildIndex;
  int partitionIndex;
};

static_assert(sizeof(CollisionAabbTreeIndex) == 0x4, "The size is not correct");

/* 1551 */
const struct CollisionAabbTree
{
  float origin[3];
  unsigned __int16 materialIndex;
  unsigned __int16 childCount;
  float halfSize[3];
  CollisionAabbTreeIndex u;
};

static_assert(sizeof(CollisionAabbTree) == 0x20, "The size is not correct");

/* 1549 */
const struct __declspec(align(8)) cbrush_t
{
  float mins[3];
  int contents;
  float maxs[3];
  unsigned int numsides;
  cbrushside_t* sides;
  int axial_cflags[2][3];
  int axial_sflags[2][3];
  unsigned int numverts;
  float(*verts)[3];
};

static_assert(sizeof(cbrush_t) == 0x60, "The size is not correct");

/* 1532 */
struct pathnode_constant_t
{
  nodeType type;
  unsigned __int16 spawnflags;
  unsigned __int16 targetname;
  unsigned __int16 script_linkName;
  unsigned __int16 script_noteworthy;
  unsigned __int16 target;
  unsigned __int16 animscript;
  int animscriptfunc;
  float vOrigin[3];
  float fAngle;
  float forward[2];
  float fRadius;
  float minUseDistSq;
  __int16 wOverlapNode[2];
  __int16 wChainId;
  __int16 wChainDepth;
  __int16 wChainParent;
  unsigned __int16 totalLinkCount;
  pathlink_s* Links;
};

static_assert(sizeof(pathnode_constant_t) == 0x44, "The size is not correct");

/* 1534 */
struct pathnode_dynamic_t
{
  SentientHandle pOwner;
  int iFreeTime;
  int iValidTime[3];
  int inPlayerLOSTime;
  __int16 wLinkCount;
  __int16 wOverlapCount;
  __int16 turretEntNumber;
  __int16 userCount;
};

static_assert(sizeof(pathnode_dynamic_t) == 0x20, "The size is not correct");

/* 1536 */
struct pathnode_transient_t
{
  int iSearchFrame;
  pathnode_t* pNextOpen;
  pathnode_t* pPrevOpen;
  pathnode_t* pParent;
  float fCost;
  float fHeuristic;
  float costFactor;
};

static_assert(sizeof(pathnode_transient_t) == 0x1C, "The size is not correct");

/* 1535 */
struct pathnode_t
{
  pathnode_constant_t constant;
  pathnode_dynamic_t dynamic;
  pathnode_transient_t transient;
};

static_assert(sizeof(pathnode_t) == 0x80, "The size is not correct");

// /* 1588 */
// struct __declspec(align(2)) vehicle_custom_path_t
// {
//   __int16 pathOrder[128];
//   __int16 pathLinkIdx[128];
//   unsigned __int8 inUse;
// };

// /* 1650 */
// struct VehicleStun
// {
//   bool m_changed_this_frame;
//   float m_stun_time;
//   float m_last_throttle;
//   float m_throttle_stun_time;
//   float m_last_brake;
//   float m_brake_stun_time;
// };

// /* 1651 */
// struct __cppobj NitrousVehicleController
// {
//   phys_vec3 m_script_goal_position;
//   float m_script_goal_radius;
//   float m_script_goal_speed;
//   float m_drive_path_speed;
//   float m_stopped_time;
//   float m_stuck_time;
//   __declspec(align(16)) phys_vec3 m_stuck_position;
//   usercmd_s m_cmd;
//   int m_cmd_local_client_num;
//   bool m_cmd_valid;
//   bool m_stop_at_goal;
//   bool m_jump_button_pressed;
//   VehicleStun m_stun;
// };

// /* 1598 */
// struct __cppobj NitrousVehicle
// {
//   WheelState m_wheel_state[4];
//   phys_mat44 m_wheel_orig_relpo[6];
//   int m_wheel_damage[6];
//   int m_wheel_surf_types[6];
//   const VehicleParameter *m_parameter;
//   float m_throttle;
//   float m_brake;
//   float m_hand_brake;
//   float m_script_brake;
//   float m_steer_factor;
//   float m_forward_vel;
//   __declspec(align(8)) phys_vec3 m_ground_vel;
//   float m_hand_brake_friction_time;
//   gentity_s *m_owner;
//   int m_entnum;
//   const vehicle_info_t *m_vehicle_info;
//   PhysObjUserData *m_phys_user_data;
//   XModel *m_xmodel;
//   float m_origin[3];
//   float m_angles[3];
//   rigid_body_constraint_custom_orientation *m_orientation_constraint;
//   rigid_body_constraint_custom_path *m_vpc;
//   int m_flags;
//   int m_notify_flags;
//   int m_server_notify_flags;
//   float m_collision_hitp[3];
//   float m_collision_hitn[3];
//   float m_collision_intensity;
//   int m_collision_stype;
//   int m_collision_entnum;
//   __declspec(align(16)) phys_mat44 m_prev_rb_mat;
//   NitrousVehicleController mVehicleController;
//   float m_fake_rpm;
//   int m_num_colliding_wheels;
//   float m_current_front_side_fric_scale;
//   float m_current_rear_side_fric_scale;
//   float m_current_front_fwd_fric_scale;
//   float m_current_rear_fwd_fric_scale;
//   float m_stuck_time;
//   int m_lastNetworkTime;
//   int m_lastErrorReductionTime;
//   float m_networkErrorOrigin[3];
//   float m_networkErrorAngles[3];
//   int m_trackDistAccumLeftInches;
//   int m_trackDistAccumRightInches;
//   int m_sfx_state_flags;
//   float m_speed_scale;
//   float m_drivepath_scale;
//   int m_boost_start_time;
//   float m_boost_time_pool;
//   int m_throttle_held_down;
//   bool m_throttle_time_started;
//   int id;
//   int refcount;
//   rigid_body_constraint_wheel *m_wheels[6];
//   float m_desired_speed_factor;
//   float m_acceleration_factor;
//   float m_power_braking_factor;
//   float m_braking_factor;
//   float m_coasting_factor;
//   float m_reference_wheel_radius;
//   float m_steer_current_angle;
//   float m_steer_max_angle;
//   float m_steer_speed;
//   __declspec(align(16)) phys_vec3 m_steer_front_pt_loc;
//   float m_steer_front_back_length;
//   unsigned int m_state_flags;
// };

// /* 1563 */
// struct __cppobj phys_gjk_geom
// {
//   phys_gjk_geom_vtbl *__vftable /*VFT*/;
// };

// /* 1570 */
// const struct __cppobj gjk_base_t : phys_gjk_geom
// {
//   __declspec(align(16)) phys_vec3 m_aabb_mn_loc;
//   phys_vec3 m_aabb_mx_loc;
//   unsigned int m_gjk_geom_id;
//   const phys_mat44 *m_xform_;
//   gjk_base_t *m_next_geom;
//   unsigned int m_flags;
//   int stype;
//   int m_contents;
// };

/* 1555 */
struct __declspec(align(4)) cLeaf_s
{
  unsigned __int16 firstCollAabbIndex;
  unsigned __int16 collAabbCount;
  int brushContents;
  int terrainContents;
  float mins[3];
  float maxs[3];
  int leafBrushNode;
  __int16 cluster;
};

static_assert(sizeof(cLeaf_s) == 0x2C, "The size is not correct");

/* 1556 */
struct cmodel_t
{
  float mins[3];
  float maxs[3];
  float radius;
  cLeaf_s leaf;
};

static_assert(sizeof(cmodel_t) == 0x48, "The size is not correct");

/* 1531 */
struct pathlink_s
{
  float fDist;
  unsigned __int16 nodeNum;
  unsigned __int8 disconnectCount;
  unsigned __int8 negotiationLink;
  unsigned __int8 ubBadPlaceCount[4];
};

static_assert(sizeof(pathlink_s) == 0xC, "The size is not correct");

/* 1613 */
struct view_limits_t
{
  float horizSpanLeft;
  float horizSpanRight;
  float vertSpanUp;
  float vertSpanDown;
};

/* 1616 */
const struct vehicle_info_t
{
  char name[64];
  __int16 type;
  int remoteControl;
  int steerWheels;
  int texScroll;
  int quadBarrel;
  int bulletDamage;
  int armorPiercingDamage;
  int grenadeDamage;
  int projectileDamage;
  int projectileSplashDamage;
  int heavyExplosiveDamage;
  __int16 cameraMode;
  int autoRecenterOnAccel;
  int thirdPersonDriver;
  float thirdPersonCameraRange;
  float thirdPersonCameraMinPitchClamp;
  float thirdPersonCameraMaxPitchClamp;
  float thirdPersonCameraHeight[2];
  float thirdPersonCameraPitch[2];
  int cameraAlwaysAutoCenter;
  float cameraAutoCenterLerpRate;
  float cameraAutoCenterMaxLerpRate;
  float thirdPersonCameraSpringDistance;
  float thirdPersonCameraSpringTime;
  float thirdPersonCameraHandbrakeTurnRateInc;
  float cameraFOV;
  int killcamCollision;
  float killcamDist;
  float killcamZDist;
  float killcamMinDist;
  float killcamZTargetOffset;
  float killcamFOV;
  float killcamNearBlur;
  float killcamNearBlurStart;
  float killcamNearBlurEnd;
  float killcamFarBlur;
  float killcamFarBlurStart;
  float killcamFarBlurEnd;
  int isDrivable;
  int numberOfSeats;
  int numberOfGunners;
  int seatSwitchOrder[11];
  int driverControlledGunPos;
  float entryPointRadius[5];
  float texScrollScale;
  float wheelRotRate;
  float extraWheelRotScale;
  float maxSpeed;
  float accel;
  float rotRate;
  float rotAccel;
  float maxBodyPitch;
  float maxBodyRoll;
  float collisionDamage;
  float collisionSpeed;
  float suspensionTravel;
  __int16 boostMode;
  float boostSpeedIncrease;
  float boostAccelMultiplier;
  float boostInterval;
  float boostDuration;
  float boostFrictionMultiplier;
  float boostContinuousRegenCooldown;
  float boostContinuousRegenAmount;
  float heliCollisionScalar;
  float viewPitchOffset;
  float viewInfluence;
  float tiltFromAcceleration[2];
  float tiltFromDeceleration[2];
  float tiltFromVelocity[2];
  float tiltSpeed[2];
  char turretWeapon[64];
  view_limits_t turretViewLimits;
  float turretRotRate;
  int turretClampPlayerView;
  char turretTag1[64];
  char turretTag2[64];
  char turretTag3[64];
  char turretTag4[64];
  char gunnerWeapon[4][64];
  unsigned __int16 gunnerWeaponIndex[4];
  float gunnerRotRate;
  float gunnerRestAngles[4][2];
  view_limits_t passengerViewLimits[6];
  char sndNames[19][64];
  unsigned int sndIndices[19];
  char sndMaterialNames[3][64];
  float engineSndSpeed;
  float engineModLoopNaturalRPMs;
  float idleRPMs;
  float idleRPMsMax;
  float gear1MinRPMs;
  float gear1MaxRPMs;
  float gearChangeMPH;
  float gear2MinRPMs;
  float gear2MaxRPMs;
  int trackLengthInches;
  float clacksCurveDamageStart;
  float clacksCurveDamageEnd;
  float clacksCurveMaxOmitted;
  float treadGrindAttenuation;
  float treadDamageLoopHealthRatio;
  float skidSpeedMin;
  float skidSpeedMax;
  int animType;
  char animSet[64];
  float mantleAngles[4];
  int extraWheelTags[4];
  char attachmentModels[4][64];
  char attachmentTags[4][64];
  char deathAttachmentModels[4][64];
  char deathAttachmentTags[4][64];
  float tracerOffset[2];
  char model[64];
  char deathModel[64];
  float modelSwapDelay;
  char exhaustFx[64];
  int oneExhaust;
  char rotorMainIdleFx[64];
  char rotorMainStartFx[64];
  char rotorMainRunningFx[64];
  char rotorMainStopFx[64];
  char rotorTailIdleFx[64];
  char rotorTailStartFx[64];
  char rotorTailRunningFx[64];
  char rotorTailStopFx[64];
  char treadFx[31][64];
  char deathFxName[64];
  char deathFxTag[64];
  char deathFxSound[64];
  float radiusDamageMin;
  float radiusDamageMax;
  float radiusDamageRadius;
  char shootShock[64];
  char shootRumble[64];
  float deathQuakeScale;
  float deathQuakeDuration;
  float deathQuakeRadius;
  char secTurretType[64];
  char secTurretTag[64];
  char secTurretModel[64];
  int secTurretAiControlled;
  float frontArmorRegen;
  char rumbleType[64];
  float rumbleScale;
  float rumbleDuration;
  float rumbleRadius;
  float rumbleBaseTime;
  float rumbleAdditionalTime;
  int healthDefault;
  int healthMin;
  int healthMax;
  team_t eTeam;
  int addToCompass;
  int addToCompassEnemy;
  char compassIcon[64];
  Material* compassIconMaterial;
  int gasButton;
  int boostButton;
  int reverseBrakeButton;
  int handBrakeButton;
  int attackButton;
  int attackSecondaryButton;
  int moveUpButton;
  int moveDownButton;
  int switchSeatButton;
  int specialAbilityButton;
  int firePickupButton;
  int swapPickupButton;
  int dropDeployableButton;
  GraphFloat* steerGraph;
  GraphFloat* accelGraph;
  int isNitrous;
  int isFourWheelSteering;
  float max_fric_tilt_angle;
  float max_fric_tilt;
  int noDirectionalDamage;
  VehicleParameter nitrousVehParams;
};

// /* 1648 */
// struct __cppobj gjk_geom_list_t
// {
//   gjk_base_t *m_first_geom;
//   int m_geom_count;
// };

// /* 1649 */
// struct __cppobj PhysObjUserData
// {
//   rigid_body *body;
//   NitrousVehicle *vehicle;
//   gjk_geom_list_t m_gjk_geom_list;
//   PhysObjUserData *m_next_link;
//   __declspec(align(16)) phys_mat44 cg2rb;
//   phys_mat44 cg2w;
//   broad_phase_base *m_bpb;
//   float savedPos[3];
//   float savedRot[3][3];
//   float friction;
//   float bounce;
//   int id;
//   int refcount;
//   int underwater;
//   int buoyancy;
//   int timeBuoyant;
//   int timeRipple;
//   unsigned __int16 trDuration;
//   float m_time_since_last_event;
//   float m_time_since_last_reeval;
//   int m_flags;
//   float mass;
//   float buoyancyBoxMin[3];
//   float buoyancyBoxMax[3];
//   float centerOfMassOffset[3];
// };

// /* 1620 */
// struct rigid_body_constraint
// {
//   rigid_body *b1;
//   rigid_body *b2;
//   rigid_body_constraint *m_next;
// };

// /* 1621 */
// struct __cppobj pulse_sum_cache
// {
//   float m_pulse_sum;
// };

// /* 1632 */
// struct __cppobj rigid_body_constraint_custom_orientation : rigid_body_constraint
// {
//   pulse_sum_cache m_ps_cache_list[5];
//   bool m_active;
//   bool m_no_orientation_correction;
//   float m_torque_resistance_pitch_roll;
//   float m_torque_resistance_yaw;
//   float m_upright_strength;
// };

// /* 1634 */
// struct __cppobj __declspec(align(16)) rigid_body_constraint_custom_path : rigid_body_constraint
// {
//   __declspec(align(8)) phys_mat44 m_path_mat;
//   phys_vec3 b1_r_loc;
//   user_rigid_body *m_urb;
//   pulse_sum_cache m_list_psc[4];
// };

// /* 1629 */
// struct __cppobj rigid_body_constraint_wheel : rigid_body_constraint
// {
//   __declspec(align(8)) phys_vec3 m_b2_hitp_loc;
//   phys_vec3 m_b2_hitn_loc;
//   phys_vec3 m_b1_wheel_center_loc;
//   phys_vec3 m_b1_suspension_dir_loc;
//   phys_vec3 m_b1_wheel_axis_loc;
//   float m_wheel_radius;
//   float m_fwd_fric_k;
//   float m_side_fric_k;
//   float m_side_fric_max;
//   float m_suspension_stiffness_k;
//   float m_suspension_damp_k;
//   float m_hard_limit_dist;
//   float m_roll_stability_factor;
//   float m_pitch_stability_factor;
//   float m_turning_radius_ratio_max_speed;
//   float m_turning_radius_ratio_accel;
//   float m_desired_speed_k;
//   float m_acceleration_factor_k;
//   float m_braking_factor_k;
//   float m_wheel_vel;
//   float m_wheel_fwd;
//   float m_wheel_pos;
//   float m_wheel_displaced_center_dist;
//   float m_wheel_normal_force;
//   unsigned int m_wheel_state;
//   unsigned int m_wheel_flags;
//   pulse_sum_cache m_ps_cache_list[4];
//   pulse_sum_normal *m_ps_suspension;
//   pulse_sum_normal *m_ps_side_fric;
//   pulse_sum_normal *m_ps_fwd_fric;
// };

// /* 1569 */
// struct /*VFT*/ phys_gjk_geom_vtbl
// {
//   void (__thiscall *support)(phys_gjk_geom *this, const phys_vec3 *, phys_vec3 *, phys_vec3 *);
//   void (__thiscall *get_simplex)(phys_gjk_geom *this, const cached_simplex_info *, const int, phys_vec3 *, phys_vec3 *);
//   void (__thiscall *set_simplex)(phys_gjk_geom *this, const phys_vec3 *, const int, const phys_vec3 *, cached_simplex_info *);
//   const phys_vec3 *(__thiscall *get_center)(phys_gjk_geom *this, const phys_vec3 *result);
//   void (__thiscall *get_feature)(phys_gjk_geom *this, phys_contact_manifold *);
//   float (__thiscall *get_geom_radius)(phys_gjk_geom *this);
//   void (__thiscall *calc_aabb)(phys_gjk_geom *this, const phys_mat44 *, phys_vec3 *, phys_vec3 *);
//   bool (__thiscall *ray_cast)(phys_gjk_geom *this, const phys_vec3 *, const phys_vec3 *, const float, float *, phys_vec3 *);
//   bool (__thiscall *is_polyhedron)(phys_gjk_geom *this);
// };

 /* 1614 */
struct __declspec(align(4)) DevGraph
{
  float(*knots)[2];
  int* knotCount;
  int knotCountMax;
  int selectedKnot;
  void(__cdecl* eventCallback)(const DevGraph*, DevEventType, int);
  void(__cdecl* textCallback)(const DevGraph*, const float, const float, char*, const int);
  void* data;
  bool disableEditingEndPoints;
};

/* 1615 */
struct GraphFloat
{
  char name[64];
  float knots[32][2];
  int knotCount;
  float scale;
  DevGraph devguiGraph;
};

// /* 1647 */
// struct rb_inplace_partition_node
// {
//   rigid_body_constraint_point *m_rbc_point_first;
//   rigid_body_constraint_hinge *m_rbc_hinge_first;
//   rigid_body_constraint_distance *m_rbc_dist_first;
//   rigid_body_constraint_ragdoll *m_rbc_ragdoll_first;
//   rigid_body_constraint_wheel *m_rbc_wheel_first;
//   rigid_body_constraint_angular_actuator *m_rbc_angular_actuator_first;
//   rigid_body_constraint_upright *m_rbc_upright_first;
//   rigid_body_constraint_custom_orientation *m_rbc_custom_orientation_first;
//   rigid_body_constraint_custom_path *m_rbc_custom_path_first;
//   rigid_body_constraint_contact *m_rbc_contact_first;
//   rigid_body *m_partition_head;
//   rigid_body *m_partition_tail;
//   rigid_body *m_next_node;
//   int m_partition_size;
// };

// /* 1619 */
// struct __cppobj rigid_body
// {
//   phys_vec3 m_last_position;
//   phys_vec3 m_moved_vec;
//   float m_smallest_lambda;
//   __declspec(align(16)) phys_mat44 m_mat;
//   phys_vec3 m_inv_inertia;
//   phys_vec3 m_gravity_acc_vec;
//   phys_vec3 m_t_vel;
//   phys_vec3 m_a_vel;
//   phys_vec3 m_last_t_vel;
//   phys_vec3 m_last_a_vel;
//   phys_vec3 m_force_sum;
//   phys_vec3 m_torque_sum;
//   float m_inv_mass;
//   float m_max_avel;
//   float m_max_delta_t;
//   unsigned int m_flags;
//   unsigned int m_tick;
//   pulse_sum_node *m_node;
//   int m_constraint_count;
//   int m_contact_count;
//   int m_stable_min_contact_count;
//   float m_stable_energy_time;
//   float m_largest_vel_sq;
//   float m_t_drag_coef;
//   float m_a_drag_coef;
//   void *m_userdata;
//   rb_inplace_partition_node m_partition_node;
// };

// /* 1639 */
// struct __cppobj __declspec(align(8)) broad_phase_base
// {
//   phys_vec3 m_trace_aabb_min_whace;
//   phys_vec3 m_trace_aabb_max_whace;
//   phys_vec3 m_trace_translation;
//   unsigned int m_flags;
//   broad_phase_base *m_list_bpb_next;
//   broad_phase_base *m_list_bpb_cluster_next;
//   void *m_sap_node;
//   void *m_user_data;
//   unsigned int m_env_collision_flags;
//   unsigned int m_my_collision_type_flags;
// };

// /* 1633 */
// struct __cppobj user_rigid_body : rigid_body
// {
//   const phys_mat44 *m_dictator;
//   __declspec(align(16)) phys_mat44 m_dictator_mat;
// };

// /* 1628 */
// struct phys_link_list_base<pulse_sum_normal>
// {
//   pulse_sum_normal *m_next_link;
// };

// /* 1627 */
// struct __cppobj pulse_sum_normal : phys_link_list_base<pulse_sum_normal>
// {
//   __declspec(align(16)) phys_vec3 m_ud;
//   phys_vec3 m_b1_r;
//   phys_vec3 m_b2_r;
//   phys_vec3 m_b1_ap;
//   phys_vec3 m_b2_ap;
//   float m_pulse_sum_min;
//   float m_pulse_sum_max;
//   float m_pulse_sum;
//   float m_right_side;
//   float m_big_dirt;
//   float m_cfm;
//   float m_denom;
//   float m_pulse_limit_ratio;
//   unsigned int m_flags;
//   pulse_sum_normal *m_pulse_parent;
//   pulse_sum_node *m_b1;
//   pulse_sum_node *m_b2;
//   pulse_sum_cache *m_pulse_sum_cache;
// };

// /* 1564 */
// const struct __cppobj cached_simplex_info
// {
//   phys_vec3 m_indices[3];
// };

// /* 1568 */
// struct __cppobj __declspec(align(16)) phys_contact_manifold
// {
//   phys_vec3 m_feature_normal;
//   phys_vec3 m_feature_hitp;
//   phys_vec3 m_feature_hitn;
//   float m_feature_distance_eps;
//   float m_sin_feautre_angular_eps_sq;
//   int m_close_mesh_point_count;
//   phys_memory_heap *m_allocator;
//   contact_manifold_mesh_point *m_list_mesh_point;
//   int m_list_mesh_point_count;
//   contact_manifold_mesh_point **m_list_sorted_mesh_point;
//   contact_manifold_mesh_point **m_list_contact_point;
//   int m_list_contact_point_count;
// };

// /* 1618 */
// struct phys_link_list_base<pulse_sum_node>
// {
//   pulse_sum_node *m_next_link;
// };

// /* 1617 */
// struct __cppobj pulse_sum_node : phys_link_list_base<pulse_sum_node>
// {
//   __declspec(align(16)) phys_mat44 m_world_inv_inertia;
//   phys_vec3 t_vel;
//   phys_vec3 a_vel;
//   float m_inv_mass;
//   rigid_body *m_rb;
// };

// /* 1622 */
// struct __cppobj rigid_body_constraint_point : rigid_body_constraint
// {
//   __declspec(align(8)) phys_vec3 m_b1_r_loc;
//   phys_vec3 m_b2_r_loc;
//   pulse_sum_cache m_ps_cache_list[3];
//   float m_stress;
//   float m_spring_k;
//   float m_damp_k;
//   bool m_spring_enabled;
// };

// /* 1623 */
// struct __cppobj __declspec(align(16)) rigid_body_constraint_hinge : rigid_body_constraint
// {
//   __declspec(align(8)) phys_vec3 m_b1_r_loc;
//   phys_vec3 m_b2_r_loc;
//   phys_vec3 m_b1_axis_loc;
//   phys_vec3 m_b2_axis_loc;
//   phys_vec3 m_b1_a1_loc;
//   phys_vec3 m_b1_a2_loc;
//   phys_vec3 m_b1_ref_loc;
//   phys_vec3 m_b2_ref_min_loc;
//   phys_vec3 m_b2_ref_max_loc;
//   float m_damp_k;
//   unsigned int m_flags;
//   pulse_sum_cache m_ps_cache[8];
// };

// /* 1624 */
// struct __cppobj __declspec(align(16)) rigid_body_constraint_distance : rigid_body_constraint
// {
//   __declspec(align(8)) phys_vec3 m_b1_r_loc;
//   phys_vec3 m_b2_r_loc;
//   float m_min_distance;
//   float m_max_distance;
//   float m_next_max_distance;
//   float m_max_distance_vel;
//   float m_damp_coef;
//   unsigned int m_flags;
//   pulse_sum_cache m_ps_cache_list[3];
// };

// /* 1625 */
// struct __cppobj __declspec(align(8)) ragdoll_joint_limit_info
// {
//   phys_vec3 m_b1_ud_loc;
//   float m_b1_ud_limit_co_;
//   float m_b1_ud_limit_si_;
//   float m_b1_ud_active_limit_co_;
// };

// /* 1626 */
// struct __cppobj __declspec(align(16)) rigid_body_constraint_ragdoll : rigid_body_constraint
// {
//   __declspec(align(8)) phys_vec3 m_b1_r_loc;
//   phys_vec3 m_b2_r_loc;
//   unsigned int m_flags;
//   pulse_sum_cache m_ps_cache_list[10];
//   __declspec(align(8)) phys_vec3 m_b1_axis_loc;
//   phys_vec3 m_b2_axis_loc;
//   phys_vec3 m_b1_a1_loc;
//   phys_vec3 m_b1_a2_loc;
//   phys_vec3 m_b1_ref_loc;
//   phys_vec3 m_b2_ref_min_loc;
//   phys_vec3 m_b2_ref_max_loc;
//   ragdoll_joint_limit_info m_joint_limits[2];
//   int m_joint_limits_count;
//   float m_damp_k;
// };

// /* 1630 */
// struct __cppobj __declspec(align(16)) rigid_body_constraint_angular_actuator : rigid_body_constraint
// {
//   __declspec(align(8)) phys_mat44 m_target_mat;
//   phys_mat44 m_next_target_mat;
//   phys_vec3 m_a_vel;
//   float m_power;
//   float m_power_scale;
//   bool m_enabled;
//   pulse_sum_cache m_ps_cache_list[3];
// };

// /* 1631 */
// struct __cppobj __declspec(align(16)) rigid_body_constraint_upright : rigid_body_constraint
// {
//   __declspec(align(8)) phys_vec3 m_b1_forward_axis_loc;
//   phys_vec3 m_b1_right_axis_loc;
//   phys_vec3 m_b1_up_axis_loc;
//   phys_vec3 m_b1_lean_axis_loc;
//   phys_vec3 m_b2_up_axis_loc;
//   phys_vec3 m_last_t_vel;
//   phys_vec3 m_last_a_vel;
//   float m_avg_side_force;
//   float m_avg_normal_force;
//   float m_lean_angle_calc_delta_t;
//   float m_lean_angle;
//   float m_lean_angle_multiplier;
//   float m_max_lean_angle;
//   float m_moving_average_total_time;
//   bool m_enabled;
//   pulse_sum_cache m_ps_cache_list[1];
// };

// /* 1644 */
// struct __cppobj phys_simple_link_list<contact_point_info>
// {
//   contact_point_info *m_first;
// };

// /* 1645 */
// struct phys_inplace_avl_tree_node<rigid_body_constraint_contact>
// {
//   rigid_body_constraint_contact *m_left;
//   rigid_body_constraint_contact *m_right;
//   int m_balance;
// };

// /* 1646 */
// struct __cppobj rigid_body_pair_key
// {
//   rigid_body *m_b1;
//   rigid_body *m_b2;
// };

// /* 1643 */
// struct __cppobj rigid_body_constraint_contact : rigid_body_constraint
// {
//   phys_simple_link_list<contact_point_info> m_list_contact_point_info_buffer_1;
//   phys_simple_link_list<contact_point_info> m_list_contact_point_info_buffer_2;
//   unsigned int m_solver_priority;
//   phys_inplace_avl_tree_node<rigid_body_constraint_contact> m_avl_tree_node;
//   rigid_body_pair_key m_avl_key;
// };

// /* 1565 */
// struct __cppobj phys_memory_heap
// {
//   char *m_buffer_start;
//   char *m_buffer_end;
//   char *m_buffer_cur;
//   char *m_user_start;
// };

// /* 1566 */
// struct __cppobj phys_vec2
// {
//   float x;
//   float y;
// };

// /* 1567 */
// struct __cppobj __declspec(align(16)) contact_manifold_mesh_point
// {
//   phys_vec3 m_p;
//   phys_vec2 m_contact_p;
// };

// /* 1636 */
// struct __cppobj __declspec(align(16)) contact_point_info
// {
//   phys_vec3 m_normal;
//   float m_fric_coef;
//   float m_bounce_coef;
//   float m_max_restitution_vel;
//   int m_flags;
//   int m_point_pair_count;
//   phys_vec3 *m_list_b1_r_loc;
//   phys_vec3 *m_list_b2_r_loc;
//   contact_point_info::pulse_sum_cache_info *m_list_pulse_sum_cache_info;
//   contact_point_info *m_next_link;
//   const void *m_rb2_entity;
//   float m_translation_lambda;
//   phys_collision_pair *m_pcp;
//   rigid_body_constraint_contact *m_rbc_contact;
// };

// /* 1635 */
// struct __cppobj contact_point_info::pulse_sum_cache_info
// {
//   pulse_sum_cache m_ps_cache_list[3];
// };

// /* 1638 */
// struct phys_link_list_base<phys_collision_pair>
// {
//   phys_collision_pair *m_next_link;
// };

// /* 1637 */
// struct __cppobj phys_collision_pair : phys_link_list_base<phys_collision_pair>
// {
//   broad_phase_info *m_bpi1;
//   broad_phase_info *m_bpi2;
//   float m_hit_time;
//   phys_gjk_cache_info *m_gjk_ci;
// };

// /* 1640 */
// struct __cppobj __declspec(align(8)) broad_phase_info : broad_phase_base
// {
//   rigid_body *m_rb;
//   const phys_mat44 *m_rb_to_world_xform;
//   const phys_mat44 *m_cg_to_world_xform;
//   const phys_mat44 *m_cg_to_rb_xform;
//   const phys_gjk_geom *m_gjk_geom;
//   unsigned int m_gjk_geom_id;
//   int m_surface_type;
// };

// /* 1641 */
// struct __cppobj phys_gjk_geom_id_pair_key
// {
//   unsigned int m_id1;
//   unsigned int m_id2;
// };

// /* 1642 */
// struct __cppobj phys_gjk_cache_info
// {
//   phys_vec3 m_support_dir;
//   cached_simplex_info m_support_a;
//   cached_simplex_info m_support_b;
//   int m_support_count;
//   phys_gjk_geom_id_pair_key m_key;
//   unsigned int m_flags;
// };

// /* 1558 */
// struct /*VFT*/ colgeom_visitor_t_vtbl
// {
//   void (__thiscall *~visitor_base_t)(visitor_base_t *this);
//   void (__thiscall *prolog)(colgeom_visitor_t *this);
//   void (__thiscall *epilog)(colgeom_visitor_t *this);
//   void (__thiscall *visit)(colgeom_visitor_t *this, const cbrush_t *);
//   void (__thiscall *visit)(colgeom_visitor_t *this, const CollisionAabbTree *);
//   void (__thiscall *update)(colgeom_visitor_t *this, const float *, const float *, int, const float *);
// };

// /* 1562 */
// struct /*VFT*/ colgeom_visitor_inlined_t<200>_vtbl
// {
//   void (__thiscall *~visitor_base_t)(visitor_base_t *this);
//   void (__thiscall *prolog)(colgeom_visitor_t *this);
//   void (__thiscall *epilog)(colgeom_visitor_t *this);
//   void (__thiscall *visit)(colgeom_visitor_t *this, const cbrush_t *);
//   void (__thiscall *visit)(colgeom_visitor_t *this, const CollisionAabbTree *);
//   void (__thiscall *update)(colgeom_visitor_t *this, const float *, const float *, int, const float *);
// };

// /* 1571 */
// struct /*VFT*/ gjk_base_t_vtbl
// {
//   void (__thiscall *support)(phys_gjk_geom *this, const phys_vec3 *, phys_vec3 *, phys_vec3 *);
//   void (__thiscall *get_simplex)(phys_gjk_geom *this, const cached_simplex_info *, const int, phys_vec3 *, phys_vec3 *);
//   void (__thiscall *set_simplex)(phys_gjk_geom *this, const phys_vec3 *, const int, const phys_vec3 *, cached_simplex_info *);
//   const phys_vec3 *(__thiscall *get_center)(phys_gjk_geom *this, const phys_vec3 *result);
//   void (__thiscall *get_feature)(phys_gjk_geom *this, phys_contact_manifold *);
//   float (__thiscall *get_geom_radius)(phys_gjk_geom *this);
//   void (__thiscall *calc_aabb)(phys_gjk_geom *this, const phys_mat44 *, phys_vec3 *, phys_vec3 *);
//   bool (__thiscall *ray_cast)(phys_gjk_geom *this, const phys_vec3 *, const phys_vec3 *, const float, float *, phys_vec3 *);
//   bool (__thiscall *is_polyhedron)(phys_gjk_geom *this);
//   void (__thiscall *comp_aabb_loc)(gjk_base_t *this);
//   unsigned int (__thiscall *get_type)(gjk_base_t *this);
//   bool (__thiscall *is_foot)(gjk_base_t *this, const phys_vec3 *);
//   bool (__thiscall *is_walkable)(gjk_base_t *this, const phys_vec3 *, const phys_vec3 *);
//   const cbrush_t *(__thiscall *get_brush)(gjk_base_t *this);
// };

 /* 1652 */
struct __declspec(align(4)) cLinkInfo_s
{
  float axis[4][3];
  int linkEnt;
  int linkTag;
  float relative_angles[3];
  bool angles_set;
};

/* 1653 */
struct cgVehicleWheelEffect
{
  int surfaceType;
  int lastSurfaceType;
};

/* 1654 */
struct cgVehicle_s
{
  int lastGunnerFire[4];
  int wheelSurfType[6];
  int fireTime;
  int flags;
  float materialTime;
  float materialTime2;
  vehicle_cache_t* vehicle_cache;
  cgVehicleWheelEffect wheelEffects[3];
};

/* 1655 */
struct cached_client_tag_t
{
  int time;
  float lastLocalTagOrigin[3];
  bool visible;
  int predictedTime;
  float predictedPosition[3];
  float predictedAngles[3];
};

/* 1656 */
struct ClientTagCache
{
  cached_client_tag_t aim_head_tag;
  cached_client_tag_t aim_highest_tag;
};

/* 1657 */
struct AimTargetCache
{
  int lastUpdateTime;
  float targetHeight;
};

/* 1658 */
struct cgScriptMover_s
{
  float decelTime;
  float aDecelTime;
  float speed;
  float aSpeed;
  float midTime;
  float aMidTime;
  float pos1[3];
  float pos2[3];
  float pos3[3];
  float apos1[3];
  float apos2[3];
  float apos3[3];
};

/* 1659 */
struct centity_s
{
  cpose_t pose;
  LerpEntityState currentState;
  entityState_s nextState;
  __int16 previousEventSequence;
  int miscTime;
  int lastMuzzleFlash;
  unsigned __int16 attachModelNames[2];
  unsigned __int16 attachTagNames[2];
  XAnimTree_s* tree;
  Destructible* destructible;
  void* /* TODO: NitrousVehicle* */ nitrousVeh;
  cLinkInfo_s* linkInfo;
  cgVehicle_s* vehicle;
  ClientTagCache* clientTagCache;
  AimTargetCache* aimTargetInfo;
  cgScriptMover_s* cScriptMover;
  int numBulletImpacts;
  int nextSlideFX;
  int fireTime;
  unsigned __int16 flagIndex;
  unsigned __int16 flagState;
  Material* compassMaterial;
  int lastTrailTime;
  unsigned int fxTrailHandle;
  unsigned int fxProjExplosion;
  unsigned int fxHeartbeat;
  centity_s* updateDelayedNext;
  unsigned __int32 applyLeftHandIK : 1;
  unsigned __int32 nextValid : 1;
  unsigned __int32 bMuzzleFlash : 1;
  unsigned __int32 bMuzzleFlashLeft : 1;
  unsigned __int32 bTrailMade : 1;
  unsigned __int32 isBurning : 1;
  unsigned __int32 skipBloodImpacts : 1;
  unsigned __int32 heroBloodImpact : 1;
  unsigned __int32 scriptThreaded : 1;
  unsigned __int32 clientRumbleLoop : 1;
  unsigned __int32 didOverheatFx : 1;
  unsigned __int32 leftFootstep : 1;
  unsigned __int32 rightFootstep : 1;
  unsigned __int32 leftRearFootstep : 1;
  unsigned __int32 rightRearFootstep : 1;
  unsigned __int32 bIsTrigger : 1;
  unsigned __int32 bIsTriggerRadius : 1;
  unsigned __int32 bIsOneShot : 1;
  unsigned __int32 bIsPlaneOnRadar : 1;
  unsigned __int32 bFloatLonger : 1;
  unsigned __int32 bForceBuoyancy : 1;
  unsigned __int32 bIgnoreRagdoll : 1;
  unsigned __int32 bClientFlagsNeedProcessing : 1;
  unsigned __int32 bUpdatedSinceReset : 1;
  unsigned __int32 bUpdateToggle : 1;
};

/* 1660 */
struct playerEntity_t
{
  float fLastWeaponPosFrac;
  int bPositionToADS;
  float vPositionLastOrg[3];
  float fLastIdleFactor;
  float baseMoveOrigin[3];
  float baseMoveAngles[3];
};

/* 1661 */
struct GfxFilm
{
  float filmMidStart;
  float filmMidEnd;
  float filmDarkFeather;
  float filmLightFeather;
  float filmBleach[3];
  float filmColorTemp[3];
  float filmHue[3];
  float filmSaturation[3];
  float filmDarkTint[3];
  float filmMidTint[3];
  float filmLightTint[3];
  float filmContrast[3];
  bool enabled;
  float filmLut;
  float sCurveEnable;
  float sCurveShoulderStrength;
  float sCurveLinearStrength;
  float sCurveLinearAngle;
  float sCurveToeStrength;
  float sCurveToeNumerator;
  float sCurveToeDenominator;
};

/* 1662 */
struct GfxBloom
{
  float bloomTintWeights[4];
  float bloomColorScale[4];
  float bloomTintScale[4];
  float bloomCurveBreakpoint[4];
  float bloomCurveLoBlack[4];
  float bloomCurveLoGamma[4];
  float bloomCurveLoWhite[4];
  float bloomCurveLoRemapBlack[4];
  float bloomCurveLoRemapWhite[4];
  float bloomCurveHiBlack[4];
  float bloomCurveHiGamma[4];
  float bloomCurveHiWhite[4];
  float bloomCurveHiRemapBlack[4];
  float bloomCurveHiRemapWhite[4];
  float bloomExpansionControl[4];
  float bloomExpansionWeights[4];
  int bloomExpansionSource;
  float bloomBlurRadius;
  float bloomPersistence;
  float bloomStreakXLevels0[4];
  float bloomStreakXLevels1[4];
  float bloomStreakXInnerTint[3];
  float bloomStreakXOuterTint[3];
  float bloomStreakXTintControl[4];
  float bloomStreakXTint[3];
  float bloomStreakYLevels0[4];
  float bloomStreakYLevels1[4];
  float bloomStreakYInnerTint[3];
  float bloomStreakYOuterTint[3];
  float bloomStreakYTintControl[4];
  float bloomStreakYTint[3];
};

/* 1663 */
struct GfxReviveFx
{
  bool enabled;
  float reviveEdgeColorTemp;
  float reviveEdgeSaturation;
  float reviveEdgeScale[3];
  float reviveEdgeContrast[3];
  float reviveEdgeOffset[3];
  float reviveEdgeMaskAdjust;
  float reviveEdgeAmount;
};

/* 1664 */
struct GfxLightScale
{
  float diffuseScale;
  float specularScale;
};

/* 1665 */
struct GfxVisionSet
{
  GfxFilm film;
  GfxBloom bloom;
  GfxReviveFx reviveFx;
  GfxLightScale charPrimaryLightScale;
};

/* 1666 */
struct GfxDepthOfField
{
  float viewModelStart;
  float viewModelEnd;
  float nearStart;
  float nearEnd;
  float farStart;
  float farEnd;
  float nearBlur;
  float farBlur;
};

/* 1667 */
struct GfxDoubleVision
{
  float direction[3];
  float motionBlurMagnitude;
  float deltaPerMS;
  float cur;
  float targ;
};

/* 1668 */
struct __declspec(align(4)) GfxCompositeFx
{
  float distortionScale[2];
  float blurRadius;
  float distortionMagnitude;
  float frameRate;
  int lastUpdate;
  int frame;
  int startMSec;
  int currentTime;
  int duration;
  bool enabled;
  bool scriptEnabled;
};

/* 1669 */
struct GfxGenericFilter
{
  bool passEnabled[3][16];
  Material* passMaterial[3][16];
  int passTarget[3][16];
  int passSampler0[3][16];
  int passSampler1[3][16];
  float passParam[3][16][16];
  int passQuads[3][16];
  float passFlareOcclusion[3][16];
  float sunPosition[3];
};

/* 1670 */
struct GfxPoison
{
  float curAmountTarget;
  float curAmount;
};

/* 1671 */
struct __declspec(align(4)) GfxSaveScreenParam
{
  float s0;
  float t0;
  float ds;
  float dt;
  int screenTimerId;
  unsigned __int8 mode;
};

/* 1672 */
struct __declspec(align(4)) GfxBlendSaveScreenBlurredParam
{
  int fadeMsec;
  float s0;
  float t0;
  float ds;
  float dt;
  int screenTimerId;
  unsigned __int8 enabled;
};

/* 1673 */
struct __declspec(align(4)) GfxBlendSaveScreenFlashedParam
{
  float intensityWhiteout;
  float intensityScreengrab;
  float s0;
  float t0;
  float ds;
  float dt;
  int screenTimerId;
  unsigned __int8 enabled;
};

/* 1674 */
struct GfxSaveScreenFx
{
  GfxSaveScreenParam saveScreenParam;
  GfxBlendSaveScreenBlurredParam blendBlurredParam;
  GfxBlendSaveScreenFlashedParam blendFlashedParam;
};

/* 1676 */
struct float44
{
  /* 1675 */
  union
  {
    float m[4][4];
    float member[16];
  };
};

static_assert(sizeof(float44) == 0x40, "The size is not correct");

/* 1677 */
struct __declspec(align(4)) GfxLightImage
{
  GfxImage* image;
  unsigned __int8 samplerState;
};

static_assert(sizeof(GfxLightImage) == 0x8, "The size is not correct");

/* 1678 */
struct GfxLightDef
{
  const char* name;
  GfxLightImage attenuation;
  int lmapLookupStart;
};

static_assert(sizeof(GfxLightDef) == 0x10, "The size is not correct");

/* 1679 */
struct __declspec(align(16)) GfxLight
{
  unsigned __int8 type;
  unsigned __int8 canUseShadowMap;
  __int16 cullDist;
  float color[3];
  float dir[3];
  float origin[3];
  float radius;
  float cosHalfFovOuter;
  float cosHalfFovInner;
  int exponent;
  unsigned int spotShadowIndex;
  float angles[3];
  float spotShadowHiDistance;
  float diffuseColor[4];
  float specularColor[4];
  float shadowColor[4];
  float falloff[4];
  float attenuation[4];
  float aAbB[4];
  float cookieControl0[4];
  float cookieControl1[4];
  float cookieControl2[4];
  __declspec(align(8)) float44 viewMatrix;
  float44 projMatrix;
  GfxLightDef* def;
};

static_assert(sizeof(GfxLight) == 0x170, "The size is not correct");

/* 1680 */
struct GfxViewport
{
  int x;
  int y;
  int width;
  int height;
};

/* 1681 */
struct GfxExposureValue
{
  float blackPoint[4];
  float whitePoint[4];
  float linearStart[4];
  float linearEnd[4];
  float remapStart[4];
  float remapEnd[4];
  float scurveStart[4];
  float scurveEnd[4];
  float bloomCurveLDR[4];
  float bloomCurveHDR[4];
  float bloomScale[4];
};

/* 1682 */
struct WaterFogDef
{
  int startTime;
  int finishTime;
  float color[4];
  float fogStart;
  float density;
  float heightDensity;
  float baseHeight;
  float sunFogColor[4];
  float sunFogDir[3];
  float sunFogStartAng;
  float sunFogEndAng;
};

/* 1683 */
struct __declspec(align(16)) refdef_s
{
  unsigned int x;
  unsigned int y;
  unsigned int width;
  unsigned int height;
  float tanHalfFovX;
  float tanHalfFovY;
  float fov_x;
  float vieworg[3];
  float yaw;
  float viewaxis[3][3];
  int time;
  float zNear;
  float zFar;
  GfxVisionSet visionset;
  float blurRadius;
  GfxDepthOfField dof;
  GfxDoubleVision doubleVision;
  GfxCompositeFx flameFx;
  GfxCompositeFx waterSheetingFx;
  GfxGenericFilter genericFilter;
  GfxPoison poisonFx;
  GfxCompositeFx electrifiedFx;
  GfxCompositeFx transportedFx;
  GfxSaveScreenFx saveScreenFx;
  float sunVisibility;
  GfxLight primaryLights[255];
  GfxViewport scissorViewport;
  bool useScissorViewport;
  int localClientNum;
  int hideMatureContent;
  int splitscreen;
  int playerTeleported;
  int oldExposureId;
  int newExposureId;
  GfxExposureValue exposureValue;
  float lerpcount;
  int lastTime;
  unsigned int exposureMode;
  float exposure;
  float postEmissiveBrightening;
  bool noLodCullOut;
  WaterFogDef waterFog;
  float extraCamPos[3];
  bool extraCamPosValid;
  bool extraCamLargeFrame;
  float preExtraCamVieworg[3];
  float preExtraCamViewaxis[3][3];
  float preExtraCamTanHalfFovX;
  float preExtraCamTanHalfFovY;
};

/* 1684 */
struct ScriptCamera
{
  int flags;
  float origin[3];
  float angles[3];
  float lookat[3];
  int originCent;
  int lookAtCent;
};

/* 1685 */
struct __declspec(align(4)) Camera
{
  float lastViewOrg[3];
  float lastViewAngles[3];
  float lastFOV;
  int lastViewInputTime;
  float lastSpringOffset;
  float lastViewTraceFraction;
  int lastTime;
  int lastClientNum;
  float tweenStartOrg[3];
  float tweenStartAngles[3];
  float tweenStartFOV;
  int tweenStartTime;
  float tweenDuration;
  CameraMode lastCamMode;
  int lastVehicleInfoIndex;
  int lastVehicleSeatPos;
  float missileViewAngles[3];
  bool missileWasKillCam;
  ScriptCamera scriptCam;
  int extraCamEntNum;
  float extraCamFov;
  bool useTagCamera;
};

/* 1686 */
struct viewDirectionalHitIndicator_t
{
  int time;
  float entOrigin[3];
};

/* 1687 */
struct viewDamage_t
{
  int time;
  int duration;
  float yaw;
};

/* 1695 */
const struct shellshock_parms_t
{
  /* 1688 */
  struct
  {
    int blurredFadeTime;
    int blurredEffectTime;
    int flashWhiteFadeTime;
    int flashShotFadeTime;
    ShockViewTypes type;
  } screenBlend;

  /* 1689 */
  struct
  {
    int fadeTime;
    float kickRate;
    float kickRadius;
  } view;

  /* 1690 */
  struct
  {
    bool affect;
    char loop[64];
    char loopSilent[64];
    char end[64];
    char endAbort[64];
    int fadeInTime;
    int fadeOutTime;
    float drylevel;
    float wetlevel;
    char roomtype[64];
    int modEndDelay;
    int loopFadeTime;
    int loopEndDelay;
    char snapshot[64];
  } sound;

  /* 1691 */
  struct
  {
    bool affect;
    int fadeTime;
    float mouseSensitivity;
    float maxPitchSpeed;
    float maxYawSpeed;
  } lookControl;

  /* 1692 */
  struct
  {
    float scale;
  } movement;


  /* 1693 */
  struct
  {
    bool affect;
  } animation;

  /* 1694 */
  struct
  {
    char name[32];
    int inTime;
    int outTime;
  } visionSet;
};

/* 1696 */
struct shellshock_t
{
  const shellshock_parms_t* parms;
  int startTime;
  int duration;
  int loopEndTime;
  float sensitivity;
  float viewDelta[2];
  int hasSavedScreen;
  int visionSetStarted;
};

/* 1698 */
struct __declspec(align(8)) animation_s
{
  char name[64];
  int initialLerp;
  int finalLerp;
  float forceAnimRate;
  float moveSpeed;
  float rotSpeed;
  int duration;
  int nameHash;
  int flags;
  __int64 movetype;
  int stance;
  int movestatus;
  int noteType;
};

/* 1699 */
struct animScriptCondition_t
{
  int index;
  unsigned int value;
};

/* 1700 */
struct snd_asset
{
  unsigned int version;
  unsigned int frame_count;
  unsigned int frame_rate;
  unsigned int channel_count;
  unsigned int header_size;
  unsigned int block_size;
  unsigned int buffer_size;
  snd_asset_format format;
  snd_asset_channel channel_flags;
  snd_asset_flags flags;
  unsigned int seek_table_count;
  unsigned int* seek_table;
  unsigned int data_size;
  char* data;
};

static_assert(sizeof(snd_asset) == 0x38, "The size is not correct");

/* 1701 */
struct LoadedSound
{
  const char* name;
  snd_asset sound;
};

static_assert(sizeof(LoadedSound) == 0x3C, "The size is not correct");

/* 1702 */
struct PrimedSound
{
  const char* name;
  char* buffer;
  unsigned int size;
};

static_assert(sizeof(PrimedSound) == 0xC, "The size is not correct");

/* 1703 */
struct StreamedSound
{
  char* filename;
  PrimedSound* primeSnd;
};

static_assert(sizeof(StreamedSound) == 0x8, "The size is not correct");

/* 1704 */
union SoundFileRef
{
  LoadedSound* loadSnd;
  StreamedSound* streamSnd;
};

static_assert(sizeof(SoundFileRef) == 0x4, "The size is not correct");

/* 1705 */
struct __declspec(align(4)) SoundFile
{
  SoundFileRef u;
  unsigned __int8 type;
  unsigned __int8 exists;
};

static_assert(sizeof(SoundFile) == 0x8, "The size is not correct");

/* 1706 */
struct snd_alias_t
{
  const char* name;
  unsigned int id;
  const char* subtitle;
  const char* secondaryname;
  SoundFile* soundFile;
  unsigned int flags;
  unsigned int duck;
  unsigned int contextType;
  unsigned int contextValue;
  unsigned __int16 fluxTime;
  unsigned __int16 startDelay;
  unsigned __int16 reverbSend;
  unsigned __int16 centerSend;
  unsigned __int16 volMin;
  unsigned __int16 volMax;
  unsigned __int16 teamVolMod;
  unsigned __int16 pitchMin;
  unsigned __int16 pitchMax;
  unsigned __int16 teamPitchMod;
  unsigned __int16 distMin;
  unsigned __int16 distMax;
  unsigned __int16 distReverbMax;
  unsigned __int16 envelopMin;
  unsigned __int16 envelopMax;
  unsigned __int16 envelopPercentage;
  unsigned __int8 minPriorityThreshold;
  unsigned __int8 maxPriorityThreshold;
  unsigned __int8 probability;
  unsigned __int8 occlusionLevel;
  unsigned __int8 occlusionWetDry;
  unsigned __int8 minPriority;
  unsigned __int8 maxPriority;
  unsigned __int8 pan;
  unsigned __int8 dryCurve;
  unsigned __int8 wetCurve;
  unsigned __int8 dryMinCurve;
  unsigned __int8 wetMinCurve;
  unsigned __int8 limitCount;
  unsigned __int8 entityLimitCount;
  unsigned __int8 snapshotGroup;
};

static_assert(sizeof(snd_alias_t) == 0x54, "The size is not correct");

/* 1707 */
struct snd_alias_list_t
{
  const char* name;
  unsigned int id;
  snd_alias_t* head;
  int count;
  int sequence;
};

static_assert(sizeof(snd_alias_list_t) == 0x14, "The size is not correct");

/* 1708 */
struct animScriptCommand_t
{
  __int16 bodyPart[2];
  __int16 animIndex[2];
  unsigned __int16 animDuration[2];
  snd_alias_list_t* soundAlias;
  unsigned __int16 tagName;
  unsigned __int16 flags;
};

/* 1709 */
struct animScriptItem_t
{
  int numConditions;
  animScriptCondition_t conditions[4];
  int numCommands;
  animScriptCommand_t commands[8];
};

/* 1710 */
struct animScript_t
{
  int numItems;
  animScriptItem_t* items[128];
};

/* 1711 */
struct scr_animtree_t
{
  XAnim_s* anims;
};

/* 1712 */
struct __declspec(align(8)) animScriptData_t
{
  animation_s animations[1024];
  unsigned int numAnimations;
  animScript_t scriptAnims[1][27];
  animScript_t scriptCannedAnims[1][27];
  animScript_t scriptStateChange[1][1];
  animScript_t scriptEvents[34];
  animScriptItem_t scriptItems[2048];
  int numScriptItems;
  scr_animtree_t animTree;
  unsigned __int16 bodyAnim;
  unsigned __int16 mainAnim;
  unsigned __int16 torsoAnim;
  unsigned __int16 legsAnim;
  unsigned __int16 turningAnim;
  snd_alias_list_t* (__cdecl* soundAlias)(const char*);
  void(__cdecl* playSoundAlias)(int, snd_alias_list_t*);
};

/* 1715 */
struct scr_anim_s
{
  /* 1714 */
  union
  {
    /* 1713 */
    struct
    {
      unsigned __int16 index;
      unsigned __int16 tree;
    };
    const char* linkPointer;
  };
};

/* 1718 */
struct bgsAnim_s
{
  animScriptData_t animScriptData;
  /* 1716 */
  struct
  {
    scr_animtree_t tree;
    scr_anim_s body;
    scr_anim_s main;
    scr_anim_s torso;
    scr_anim_s legs;
  } generic_human;
  /* 1717 */
  struct
  {
    scr_animtree_t tree;
    scr_anim_s main;
  } generic_dog;
  unsigned int done_notify;
};

/* 1719 */
struct DObjModel_s
{
  XModel* model;
  unsigned __int16 boneName;
  bool ignoreCollision;
};

/* 1720 */
struct lerpFrame_t
{
  float yawAngle;
  int yawing;
  float pitchAngle;
  int pitching;
  int animationNumber;
  animation_s* animation;
  int animationTime;
  float oldFramePos[3];
  float oldFrameYaw;
  float animSpeedScale;
  int oldFrameSnapshotTime;
};

/* 1721 */
struct clientInfo_t
{
  int infoValid;
  int nextValid;
  int clientNum;
  char name[32];
  team_t team;
  team_t oldteam;
  ffa_team_t ffaTeam;
  int rank;
  int prestige;
  int needsRevive;
  unsigned int perks[2];
  unsigned __int64 xuid;
  char clanAbbrev[8];
  score_s score;
  Material* hStatusIcon;
  Material* hRankIcon;
  int location;
  int health;
  char model[64];
  char attachModelNames[6][64];
  char attachTagNames[6][64];
  lerpFrame_t legs;
  lerpFrame_t torso;
  float lerpMoveDir;
  float lerpLean;
  float playerAngles[3];
  int leftHandGun;
  int dobjDirty;
  clientControllers_t control;
  int lastDamageTime;
  int lastStandStartTime;
  __int64 moveType;
  __int64 eventType;
  unsigned int clientConditions[23];
  XAnimTree_s* pXAnimTree;
  unsigned int iDObjWeapon;
  unsigned __int8 weaponModel;
  unsigned int iDObjOffhandWeapon;
  unsigned __int8 offhandWeaponModel;
  unsigned int iDObjMeleeWeapon;
  unsigned __int8 meleeWeaponModel;
  int stanceTransitionTime;
  int turnAnimEndTime;
  char turnAnimType;
  int attachedVehEntNum;
  int attachedVehSeat;
  bool hideWeapon;
  unsigned int weaponHideBits[5];
  bool usingKnife;
  bool usingGrenade;
  int nextHideWeaponTime;
  float vehAnimLastOrg[3];
  float vehAnimLastAngle[3];
  int vehAnimLastBone;
  int vehAnimLastTime;
  int vehAnimLerpStartTime;
  int vehAnimLerpEndTime;
  float weaponSpinLerp;
  float lastWeaponSpinLerp;
  float weaponSpin;
  bool minigunWasFiring;
  int clientUIVisibilityFlags;
  int teleportTime;
  bool teleportBit;
};

/* 1722 */
struct DSkelPartBits
{
  int anim[5];
  int control[5];
  int skel[5];
};

/* 1724 */
struct DSkel
{
  DSkelPartBits partBits;
  int timeStamp;
  /* 1723 */
  union
  {
    DObjAnimMat* mat;
    DObjAnimMat* localMat;
  };
};

/* 1727 */
struct DObj
{
  /* 1725 */
  union
  {
    XAnimTree_s* localTree;
    XAnimTree_s* tree;
  };
  unsigned __int16 duplicateParts;
  unsigned __int16 entnum;
  unsigned __int8 duplicatePartsSize;
  unsigned __int8 numModels;
  unsigned __int8 numBones;
  unsigned int ignoreCollision;
  volatile int locked;
  DSkel skel;
  float radius;
  unsigned int hidePartBits[5];
  char localClientIndex;
  unsigned __int8 flags;
  unsigned __int8* ikState;
  /* 1726 */
  union
  {
    XModel** localModels;
    XModel** models;
  };
};

/* 1728 */
struct actorLerpFrame_t
{
  int bAnimating;
  int animationState;
};

/* 1729 */
struct animInfo_t
{
  actorLerpFrame_t lerp;
  lerpFrame_t legs;
};

/* 1730 */
struct actorInfo_t
{
  int infoValid;
  int nextValid;
  int actorNum;
  int entityNum;
  animInfo_t animInfo;
  int dobjDirty;
  XAnimTree_s* pXAnimTree;
};

/* 1731 */
struct bgs_t
{
  bgsAnim_s* animData;
  int time;
  int latestSnapshotTime;
  int frametime;
  int anim_user;
  int proneTime[32];
  XModel* (__cdecl* GetXModel)(const char*);
  void(__cdecl* CreateDObj)(DObjModel_s*, unsigned __int16, XAnimTree_s*, int, int, clientInfo_t*);
  unsigned __int16(__cdecl* AttachWeapon)(DObjModel_s*, unsigned __int16, clientInfo_t*);
  DObj* (__cdecl* GetDObj)(int, int);
  void(__cdecl* SafeDObjFree)(int, int);
  void* (__cdecl* AllocXAnim)(int);
  int(__cdecl* Rand)();
  float(__cdecl* Random)();
  void(__cdecl* AnimCmdRefCount)(__int16, __int16, int);
  void(__cdecl* AnimCmdAddDependent)(__int16, __int16);
  __declspec(align(8)) clientInfo_t clientinfo[32];
  actorInfo_t actorinfo[16];
};

/* 1732 */
struct visionSetVars_t
{
  bool filmEnable;
  float filmMidStart;
  float filmMidEnd;
  float filmDarkFeather;
  float filmLightFeather;
  float filmHue[3];
  float filmSaturation[3];
  float filmColorTemp[3];
  float filmLightTint[3];
  float filmMidTint[3];
  float filmDarkTint[3];
  float filmContrast[3];
  float filmBleach[3];
  float filmLut;
  bool reviveEnable;
  float reviveEdgeColorTemp;
  float reviveEdgeSaturation;
  float reviveEdgeScale[3];
  float reviveEdgeContrast[3];
  float reviveEdgeOffset[3];
  float reviveEdgeMaskAdjust;
  float reviveEdgeAmount;
  bool charPrimaryUseTweaks;
  float charPrimaryDiffuseScale;
  float charPrimarySpecularScale;
  float masterRingmod;
  float reverbRingmod;
  float hiFilter;
  float lowFilter;
  int sCurveEnable;
  float sCurveShoulderStrength;
  float sCurveLinearStrength;
  float sCurveLinearAngle;
  float sCurveToeStrength;
  float sCurveToeNumerator;
  float sCurveToeDenominator;
  float postEmissiveBrightening;
  float bloomBlurRadius;
  float bloomTintWeights[4];
  float bloomColorScale[4];
  float bloomTintScale[4];
  float bloomCurveBreakpoint[4];
  float bloomCurveLoBlack[4];
  float bloomCurveLoGamma[4];
  float bloomCurveLoWhite[4];
  float bloomCurveLoRemapBlack[4];
  float bloomCurveLoRemapWhite[4];
  float bloomCurveHiBlack[4];
  float bloomCurveHiGamma[4];
  float bloomCurveHiWhite[4];
  float bloomCurveHiRemapBlack[4];
  float bloomCurveHiRemapWhite[4];
  float bloomExpansionControl[4];
  float bloomExpansionWeights[4];
  int bloomExpansionSource;
  float bloomPersistence;
  float bloomStreakXLevels0[4];
  float bloomStreakXLevels1[4];
  float bloomStreakXInnerTint[3];
  float bloomStreakXOuterTint[3];
  float bloomStreakXTintControl[4];
  float bloomStreakXTint[3];
  float bloomStreakYLevels0[4];
  float bloomStreakYLevels1[4];
  float bloomStreakYInnerTint[3];
  float bloomStreakYOuterTint[3];
  float bloomStreakYTintControl[4];
  float bloomStreakYTint[3];
  char name[64];
};

/* 1733 */
struct visionSetLerpData_t
{
  int timeStart;
  int timeDuration;
  visionSetLerpStyle_t style;
};

/* 1735 */
struct transPlayerState_t
{
  int otherFlags;
  int damageEvent;
  __int16 predictableEventSequence;
  int predictableEvents[4];
  __int16 unpredictableEventSequence;
  int unpredictableEvents[4];
};

/* 1736 */
struct hudElemSoundInfo_t
{
  int lastPlayedTime;
};

/* 1737 */
struct CompassScrambler
{
  float pos[2];
  int startTime;
  int handle;
};

/* 1738 */
struct __declspec(align(128)) cg_s
{
  int clientNum;
  int localClientNum;
  DemoType demoType;
  CubemapShot cubemapShot;
  int cubemapSize;
  int cameraMode;
  int hiResShotMode;
  int renderScreen;
  int latestSnapshotNum;
  int latestSnapshotTime;
  snapshot_s* snap;
  snapshot_s* nextSnap;
  snapshot_s activeSnapshots[2];
  float frameInterpolation;
  int frametime;
  int time;
  int oldTime;
  int physicsTime;
  int mapRestart;
  thirdPersonType renderingThirdPerson;
  playerState_s predictedPlayerState;
  int lastPlayerStateOverride;
  centity_s predictedPlayerEntity;
  playerEntity_t playerEntity;
  int predictedErrorTime;
  float predictedError[3];
  float landChange;
  int landTime;
  float heightToCeiling;
  int heightToCeilingTS;
  refdef_s refdef;
  float refdefViewAngles[3];
  Camera cameraData;
  float lastPelvisCameraOffset;
  float baseGunAngles[3];
  float swayViewAngles[3];
  float swayAngles[3];
  float swayOffset[3];
  float recoilAngles[3];
  float recoilSpeed[3];
  float movieCameraOrigin[3];
  float movieCameraAngles[3];
  float movieCameraVelocity[3];
  int movieCameraLastInsideHeliPatch;
  float radiantCameraOrigin[3];
  float radiantCameraAngles[3];
  int radiantCamInUse;
  int followCameraClient;
  int iEntityLastType[1536];
  XModel* pEntityLastXModel[1536];
  float zoomSensitivity;
  bool isLoading;
  char objectiveText[1024];
  int vehicleInitView;
  float prevVehicleInvAxis[3][3];
  bool vehicleViewLocked;
  float vehicleViewLockedAngles[3];
  float storedRemoteCameraAngles[3];
  float storedRemoteCameraOrigin[3];
  char scriptMainMenu[256];
  int numScores;
  int teamScores[4];
  int teamPings[4];
  int teamPlayers[4];
  int scoreOrder[32];
  int scoreLimit;
  scoreboardColumnType_t scoreboardColumnTypes[4];
  int matchUIVisibilityFlags;
  unsigned int talkFlags;
  int bombTimer[2];
  int showScores;
  int scoreFadeTime;
  int scoresTop;
  int scoresOffBottom;
  int scoresBottom;
  int drawHud;
  int timeScaleTimeStart;
  int timeScaleTimeEnd;
  float timeScaleStart;
  float timeScaleEnd;
  int crosshairClientNum;
  int crosshairClientLastTime;
  int crosshairClientStartTime;
  int identifyClientNum;
  int cursorHintIcon;
  int cursorHintTime;
  int cursorHintFade;
  int cursorHintString;
  int vehicleHintTime;
  int lastVehicleSeat;
  int driverHintShown;
  int gunnerHintShown;
  int lastClipFlashTime;
  InvalidCmdHintType invalidCmdHintType;
  int invalidCmdHintTime;
  SuccessfulCmdHintType successfulCmdHintType;
  int successfulCmdHintTime;
  int lastHealthPulseTime;
  int lastHealthLerpDelay;
  int lastHealthClient;
  float lastHealth;
  float healthOverlayFromAlpha;
  float healthOverlayToAlpha;
  int healthOverlayPulseTime;
  int healthOverlayPulseDuration;
  int healthOverlayPulsePhase;
  bool healthOverlayHurt;
  int healthOverlayLastHitTime;
  float healthOverlayOldHealth;
  int healthOverlayPulseIndex;
  int proneBlockedEndTime;
  int lastStance;
  int lastStanceChangeTime;
  int lastStanceFlashTime;
  int voiceTime;
  unsigned int weaponSelect;
  int weaponSelectTime;
  bool weaponForcedSelect;
  unsigned int weaponLatestPrimaryIdx;
  unsigned __int16 lastWeaponForAlt[15];
  int prevViewmodelWeapon;
  int equippedOffHand;
  viewDirectionalHitIndicator_t directionalHitIndicator[4];
  viewDamage_t viewDamage[8];
  int damageTime;
  float damageX;
  float damageY;
  float damageValue;
  float viewFade;
  int waterDropCount;
  int waterDropStartTime;
  int waterDropStopTime;
  int weapIdleTime;
  int nomarks;
  int clearMarks;
  int newPlayerViewmodel;
  int v_dmg_time;
  float v_dmg_pitch;
  float v_dmg_roll;
  float fBobCycle;
  float xyspeed;
  float kickAVel[3];
  float kickAngles[3];
  float offsetAngles[3];
  float gunPitch;
  float gunYaw;
  float gunXOfs;
  float gunYOfs;
  float gunZOfs;
  float flamethrowerKickOffset[3];
  float minigunSpinAngle;
  float viewModelAxis[4][3];
  float rumbleScale;
  float compassNorthYaw;
  float compassNorth[2];
  Material* compassMapMaterial;
  float compassMapUpperLeft[2];
  float compassMapWorldSize[2];
  int compassLastTime;
  float compassYaw;
  float compassSpeed;
  int compassFadeTime;
  int healthFadeTime;
  int ammoFadeTime;
  int stanceFadeTime;
  int sprintFadeTime;
  int offhandFadeTime;
  int offhandFlashTime;
  int waypointFadeTime;
  int vehicleControlsFadeTime;
  shellshock_t shellshock;
  /* 1697 */
  struct
  {
    int time;
    int duration;
  } testShock;
  int shellshockSoundActive;
  int holdBreathTime;
  int holdBreathInTime;
  int holdBreathDelay;
  float holdBreathFrac;
  float radarProgress;
  float satelliteProgress;
  int radarType;
  float selectedLocation[2];
  float selectedYaw[2];
  int typewriterStartTime;
  float selectedLocations[3][2];
  int lastTimeSelected;
  SprintState sprintStates;
  int adsViewErrorDone;
  int inKillCam;
  int wasInKillCam;
  bool killCamFirstFrameRan;
  int killCamEntity;
  int invalidKillCamEntity;
  KillCamEntityType killCamEntityType;
  int killCamLastEntityNum;
  float killCamLastEntityOrg[3];
  float killCamLastEntityAngles[3];
  KillCamEntityRestState killCamEntityRestState;
  int killCamLookAtEntity;
  float killCamLookAt[3];
  float killCamHelicopterOffset[3];
  __int16 killCamLastVehicleInfoIndex;
  int killCamStoppedTime;
  float killCamStoppedDecelTime;
  float killCamStoppedPos[3];
  float killCamStoppedVel[3];
  float killCamPrevBombOrigin[3];
  int killCamLerpEndTime;
  float killCamOldViewAngles[3];
  float killCamOldViewOrg[3];
  bgs_t bgs;
  cpose_t viewModelPose;
  visionSetVars_t visionSetPreLoaded[8];
  char visionSetPreLoadedName[8][64];
  visionSetVars_t visionSetFrom[6];
  visionSetVars_t visionSetTo[6];
  visionSetVars_t visionSetCurrent[6];
  visionSetLerpData_t visionSetLerpData[6];
  char visionNameNaked[64];
  char visionNameNight[64];
  char visionNameFlare[64];
  char visionNameInfrared[64];
  char visionNameTvguided[64];
  char visionNameExtraCam[64];
  bitarray<51> extraButton_bits;
  int lastActionSlotTime;
  bool playerTeleported;
  float flareRatioLastFrame;
  int stepViewStart;
  float stepViewChange;
  /* 1734 */
  struct
  {
    float aimSpreadScale;
  } lastFrame;
  int oldCommandTime;
  float oldOrigin[3];
  float oldViewangles[3];
  transPlayerState_t oldTransPlayerState;
  hudElemSoundInfo_t hudElemSound[32];
  int nextRippleTime;
  unsigned int impactEffectsNext;
  unsigned int impactEffects[256];
  float warDesiredMomentumProgress;
  float warCurrentMomentumProgress;
  int warMomentumMultiplier;
  int warMomentumBlitzkriegTime;
  int warMomentumFlashTime;
  float gunnerPitchOffset;
  unsigned int centInNextSnapshot[32];
  centity_s* slideFakeEnt;
  int cameraLinkedEntitiesCount;
  int cameraLinkedEntities[4];
  link_type_e cameraLinkedEntitiesType[4];
  int groundTiltEntNum;
  int poisoned;
  Material* genericMaterialMap[64];
  bool genericFilterPassEnabled[3][16];
  Material* genericFilterPassMaterial[3][16];
  int genericFilterPassTarget[3][16];
  int genericFilterPassSampler0[3][16];
  int genericFilterPassSampler1[3][16];
  float genericFilterPassParam[3][16][16];
  int genericFilterPassQuads[3][16];
  float genericFilterPassFlareOcclusion[3][16];
  bool genericOverlayEnabled[3];
  Material* genericOverlayMaterial[3];
  float genericOverlayParam[3][16];
  int genericOverlaySortIndex[3];
  float genericOverlayParamADS[8];
  bool genericOverlayEnableADS;
  int swimming;
  int swimmingStartTime;
  int missileViewWobbleLastTime;
  float missileViewWobbleFreq[3];
  float missileViewWobbleAmp[3];
  int counterSpinTime;
  float counterSpinTarget;
  float counterSpinAngle;
  unsigned __int8 weaponTracerCount[1024];
  int extraCamEntity;
  int extraCamActive;
  int extraCamStatic;
  float extraCamOrigin[3];
  float extraCamAngles[3];
  int hasLocalRadar;
  float localRadarPos[2];
  float localRadarProgress;
  int globalScramblerActive;
  float scramblerEnemyAlpha;
  float scramblerFriendlyAlpha;
  int popUpSwayStartTime;
  float popupRotationAngle;
  float popUpAngleDelta;
  CompassScrambler compassScrambler[16];
  centity_s* closestEnemyScrambler;
  int alliesFlagAway;
  int axisFlagAway;
  int resetWeaponStateFlag;
};

/* 1739 */
struct MenuCell
{
  int type;
  int maxChars;
  char* stringValue;
};

static_assert(sizeof(MenuCell) == 0xC, "The size is not correct");

/* 1740 */
union operandInternalDataUnion
{
  int intVal;
  float floatVal;
  const char* string;
};

static_assert(sizeof(operandInternalDataUnion) == 0x4, "The size is not correct");

/* 1741 */
struct gameMsgDef_s
{
  int gameMsgWindowIndex;
  int gameMsgWindowMode;
};

static_assert(sizeof(gameMsgDef_s) == 0x8, "The size is not correct");

/* 1742 */
struct Operand
{
  expDataType dataType;
  operandInternalDataUnion internals;
};

static_assert(sizeof(Operand) == 0x8, "The size is not correct");

/* 1743 */
struct MenuRow
{
  MenuCell* cells;
  char* eventName;
  char* onFocusEventName;
  bool disableArg;
  int status;
  int name;
};

static_assert(sizeof(MenuRow) == 0x18, "The size is not correct");

/* 1744 */
struct rectDef_s
{
  float x;
  float y;
  float w;
  float h;
  int horzAlign;
  int vertAlign;
};

static_assert(sizeof(rectDef_s) == 0x18, "The size is not correct");

/* 1745 */
struct columnInfo_s
{
  int elementStyle;
  int maxChars;
  rectDef_s rect;
};

static_assert(sizeof(columnInfo_s) == 0x20, "The size is not correct");

/* 1746 */
union expressionRpnDataUnion
{
  Operand constant;
  void* cmd;
  int cmdIdx;
};

static_assert(sizeof(expressionRpnDataUnion) == 0x8, "The size is not correct");

/* 1747 */
struct expressionRpn
{
  int type;
  expressionRpnDataUnion data;
};

static_assert(sizeof(expressionRpn) == 0xC, "The size is not correct");

/* 1748 */
struct ExpressionStatement
{
  char* filename;
  int line;
  int numRpn;
  expressionRpn* rpn;
};

static_assert(sizeof(ExpressionStatement) == 0x10, "The size is not correct");

/* 1749 */
struct textExp_s
{
  ExpressionStatement textExp;
};

static_assert(sizeof(textExp_s) == 0x10, "The size is not correct");

/* 1750 */
struct multiDef_s
{
  const char* dvarList[32];
  const char* dvarStr[32];
  float dvarValue[32];
  int count;
  int actionOnEnterPressOnly;
  int strDef;
};

static_assert(sizeof(multiDef_s) == 0x18C, "The size is not correct");

/* 1751 */
struct ScriptCondition
{
  bool fireOnTrue;
  int constructID;
  int blockID;
  ScriptCondition* next;
};

static_assert(sizeof(ScriptCondition) == 0x10, "The size is not correct");

/* 1752 */
struct GenericEventScript
{
  ScriptCondition* prerequisites;
  ExpressionStatement condition;
  int type;
  bool fireOnTrue;
  const char* action;
  int blockID;
  int constructID;
  GenericEventScript* next;
};

static_assert(sizeof(GenericEventScript) == 0x2C, "The size is not correct");

/* 1753 */
struct ItemKeyHandler
{
  int key;
  GenericEventScript* keyScript;
  ItemKeyHandler* next;
};

static_assert(sizeof(ItemKeyHandler) == 0xC, "The size is not correct");

/* 1754 */
struct listBoxDef_s
{
  int mousePos;
  int cursorPos[1];
  int startPos[1];
  int endPos[1];
  int drawPadding;
  float elementWidth;
  float elementHeight;
  int numColumns;
  float special;
  columnInfo_s columnInfo[16];
  int notselectable;
  int noScrollBars;
  int usePaging;
  float selectBorder[4];
  float disableColor[4];
  float focusColor[4];
  float elementHighlightColor[4];
  float elementBackgroundColor[4];
  Material* selectIcon;
  Material* backgroundItemListbox;
  Material* highlightTexture;
  int noBlinkingHighlight;
  MenuRow* rows;
  int maxRows;
  int rowCount;
};

static_assert(sizeof(listBoxDef_s) == 0x29C, "The size is not correct");

/* 1755 */
struct editFieldDef_s
{
  int cursorPos[1];
  float minVal;
  float maxVal;
  float defVal;
  float range;
  int maxChars;
  int maxCharsGotoNext;
  int maxPaintChars;
  int paintOffset;
};

static_assert(sizeof(editFieldDef_s) == 0x24, "The size is not correct");

/* 1756 */
struct enumDvarDef_s
{
  const char* enumDvarName;
};

static_assert(sizeof(enumDvarDef_s) == 0x4, "The size is not correct");

/* 1757 */
union focusDefData_t
{
  listBoxDef_s* listBox;
  multiDef_s* multi;
  editFieldDef_s* editField;
  enumDvarDef_s* enumDvar;
  void* data;
};

static_assert(sizeof(focusDefData_t) == 0x4, "The size is not correct");

/* 1758 */
struct focusItemDef_s
{
  const char* mouseEnterText;
  const char* mouseExitText;
  const char* mouseEnter;
  const char* mouseExit;
  ItemKeyHandler* onKey;
  focusDefData_t focusTypeData;
};

static_assert(sizeof(focusItemDef_s) == 0x18, "The size is not correct");

/* 1759 */
union textDefData_t
{
  focusItemDef_s* focusItemDef;
  gameMsgDef_s* gameMsgDef;
  void* data;
};

static_assert(sizeof(textDefData_t) == 0x4, "The size is not correct");

// /* 1774 */
// struct __cppobj bdReference<bdRemoteTask>
// {
//   bdRemoteTask *m_ptr;
// };

// /* 1760 */
// struct __cppobj TaskRecord
// {
//   TaskRecord *next;
//   const TaskDefinition *definition;
//   TaskState state;
//   int controllerIndex;
//   unsigned int lastPoll;
//   unsigned int lastPollMS;
//   int startMS;
//   int timeOut;
//   bdReference<bdRemoteTask> remoteTask;
//   TaskRecord *nestedTask;
//   void *payload;
//   bool isChildTask;
//   int ownerThread;
// };

// /* 1761 */
// const struct __declspec(align(8)) TaskDefinition
// {
//   unsigned __int64 category;
//   const char *name;
//   int payloadSize;
//   void (__cdecl *completed_callback)(TaskRecord *);
//   void (__cdecl *failure_callback)(TaskRecord *);
//   TaskRecord *nestedTask;
// };

// /* 1762 */
// struct __cppobj bdReferencable
// {
//   bdReferencable_vtbl *__vftable /*VFT*/;
//   volatile int m_refCount;
// };

// /* 1764 */
// struct __cppobj bdStopwatch
// {
//   unsigned __int64 m_start;
// };

// /* 1767 */
// struct __cppobj bdReference<bdByteBuffer>
// {
//   bdByteBuffer *m_ptr;
// };

// /* 1772 */
// struct __cppobj bdRemoteTask : bdReferencable
// {
//   bdStopwatch m_timer;
//   float m_timeout;
//   bdRemoteTask::bdStatus m_status;
//   bdReference<bdByteBuffer> m_byteResults;
//   bdTaskResult *m_taskResult;
//   bdTaskResult **m_taskResultList;
//   unsigned int m_numResults;
//   unsigned int m_maxNumResults;
//   unsigned int m_totalNumResults;
//   unsigned __int64 m_transactionID;
//   bdLobbyErrorCode m_errorCode;
//   bdTaskResultProcessor *m_taskResultProcessor;
// };

// /* 1763 */
// struct /*VFT*/ bdReferencable_vtbl
// {
//   void (__thiscall *~bdReferencable)(bdReferencable *this);
// };

// /* 1765 */
// struct __cppobj __declspec(align(2)) bdByteBuffer : bdReferencable
// {
//   unsigned int m_size;
//   unsigned __int8 *m_data;
//   unsigned __int8 *m_readPtr;
//   unsigned __int8 *m_writePtr;
//   bool m_typeChecked;
//   bool m_typeCheckedCopy;
//   bool m_allocatedData;
// };

// /* 1768 */
// struct __cppobj bdTaskResult
// {
//   bdTaskResult_vtbl *__vftable /*VFT*/;
// };

// /* 1770 */
// struct __cppobj bdTaskResultProcessor
// {
//   bdTaskResultProcessor_vtbl *__vftable /*VFT*/;
// };

// /* 1769 */
// struct /*VFT*/ bdTaskResult_vtbl
// {
//   void (__thiscall *~bdTaskResult)(bdTaskResult *this);
//   bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
// };

// /* 1771 */
// struct /*VFT*/ bdTaskResultProcessor_vtbl
// {
//   void (__thiscall *~bdTaskResultProcessor)(bdTaskResultProcessor *this);
//   bool (__thiscall *processResult)(bdTaskResultProcessor *this, bdTaskResult *, unsigned int);
// };

// /* 1766 */
// struct /*VFT*/ bdByteBuffer_vtbl
// {
//   void (__thiscall *~bdReferencable)(bdReferencable *this);
//   void (__thiscall *allocateBuffer)(bdByteBuffer *this);
// };

// /* 1773 */
// struct /*VFT*/ bdRemoteTask_vtbl
// {
//   void (__thiscall *~bdReferencable)(bdReferencable *this);
// };

 /* 1775 */
struct ownerDrawDef_s
{
  ExpressionStatement dataExp;
};

static_assert(sizeof(ownerDrawDef_s) == 0x10, "The size is not correct");

/* 1776 */
struct textDef_s
{
  rectDef_s textRect[1];
  int alignment;
  int fontEnum;
  int itemFlags;
  int textAlignMode;
  float textalignx;
  float textaligny;
  float textscale;
  int textStyle;
  const char* text;
  textExp_s* textExpData;
  textDefData_t textTypeData;
};

static_assert(sizeof(textDef_s) == 0x44, "The size is not correct");

/* 1777 */
struct imageDef_s
{
  ExpressionStatement materialExp;
};

static_assert(sizeof(imageDef_s) == 0x10, "The size is not correct");

/* 1778 */
struct windowDef_t
{
  const char* name;
  rectDef_s rect;
  rectDef_s rectClient;
  const char* group;
  unsigned __int8 style;
  unsigned __int8 border;
  unsigned __int8 modal;
  unsigned __int8 frameSides;
  float frameTexSize;
  float frameSize;
  int ownerDraw;
  int ownerDrawFlags;
  float borderSize;
  int staticFlags;
  int dynamicFlags[1];
  int nextTime;
  float foreColor[4];
  float backColor[4];
  float borderColor[4];
  float outlineColor[4];
  float rotation;
  Material* background;
};

static_assert(sizeof(windowDef_t) == 0xA4, "The size is not correct");

// /* 1779 */
// struct $983F061E0B702DD8AE0B4B955735A6A3
// {
//   unsigned int Lo;
//   int Hi;
// };

// /* 1780 */
// union tagCY
// {
//   $983F061E0B702DD8AE0B4B955735A6A3 __s0;
//   __int64 int64;
// };

// /* 1781 */
// struct __cppobj IDispatch : IUnknown
// {
// };

// /* 1785 */
// union $9AAA75C99DCD4C281F4B5F70234BE3AF
// {
//   tagTYPEDESC *lptdesc;
//   tagARRAYDESC *lpadesc;
//   unsigned int hreftype;
// };

// /* 1782 */
// struct __declspec(align(4)) tagTYPEDESC
// {
//   $9AAA75C99DCD4C281F4B5F70234BE3AF ___u0;
//   unsigned __int16 vt;
// };

// /* 1783 */
// struct tagSAFEARRAYBOUND
// {
//   unsigned int cElements;
//   int lLbound;
// };

// /* 1784 */
// struct __unaligned __declspec(align(4)) tagARRAYDESC
// {
//   tagTYPEDESC tdescElem;
//   unsigned __int16 cDims;
//   __declspec(align(4)) tagSAFEARRAYBOUND rgbounds[1];
// };

// /* 1786 */
// struct __declspec(align(4)) tagIDLDESC
// {
//   unsigned int dwReserved;
//   unsigned __int16 wIDLFlags;
// };

// /* 5861 */
// typedef unsigned __int16 wchar_t;

// /* 1787 */
// struct tagTYPEATTR
// {
//   _GUID guid;
//   unsigned int lcid;
//   unsigned int dwReserved;
//   int memidConstructor;
//   int memidDestructor;
//   wchar_t *lpstrSchema;
//   unsigned int cbSizeInstance;
//   tagTYPEKIND typekind;
//   unsigned __int16 cFuncs;
//   unsigned __int16 cVars;
//   unsigned __int16 cImplTypes;
//   unsigned __int16 cbSizeVft;
//   unsigned __int16 cbAlignment;
//   unsigned __int16 wTypeFlags;
//   unsigned __int16 wMajorVerNum;
//   unsigned __int16 wMinorVerNum;
//   tagTYPEDESC tdescAlias;
//   tagIDLDESC idldescType;
// };

// /* 1788 */
// struct __cppobj ITypeInfo : IUnknown
// {
// };

// /* 1815 */
// struct $E2F13C0D8C7A5E44CBEA2DDC2BADB614
// {
//   unsigned __int16 vt;
//   unsigned __int16 wReserved1;
//   unsigned __int16 wReserved2;
//   unsigned __int16 wReserved3;
//   __int64 llVal;
// };

// /* 1808 */
// struct $12FD4DC4C84824403B0456BCD8AF73C8
// {
//   unsigned __int8 scale;
//   unsigned __int8 sign;
// };

// /* 1809 */
// union $2A9CBA0C268C2E68B257E8263D0A426C
// {
//   $12FD4DC4C84824403B0456BCD8AF73C8 __s0;
//   unsigned __int16 signscale;
// };

// /* 1810 */
// struct $A04CD8C0331024E133CCEC4B0AB36956
// {
//   unsigned int Lo32;
//   unsigned int Mid32;
// };

// /* 1811 */
// union $4B93DFCFB17691F600DD6C43F158396D
// {
//   $A04CD8C0331024E133CCEC4B0AB36956 __s0;
//   unsigned __int64 Lo64;
// };

// /* 1812 */
// struct tagDEC
// {
//   unsigned __int16 wReserved;
//   $2A9CBA0C268C2E68B257E8263D0A426C ___u1;
//   unsigned int Hi32;
//   $4B93DFCFB17691F600DD6C43F158396D ___u3;
// };

// /* 1816 */
// struct $BEF13079123511ED48CCF02389C252E5
// {
//   _BYTE gap0[8];
//   int lVal;
//   IRecordInfo *pRecInfo;
// };

// /* 1817 */
// struct $20D69447C97B677619C52B2E27D3FF49
// {
//   _BYTE gap0[8];
//   unsigned __int8 bVal;
// };

// /* 1818 */
// struct $31126B8528A05AF3606C6D495FD178E8
// {
//   _BYTE gap0[8];
//   __int16 iVal;
// };

// /* 1819 */
// struct $50230A970D9734D4E9774CFC619DF0F6
// {
//   _BYTE gap0[8];
//   float fltVal;
// };

// /* 1820 */
// struct $4C0EC2258454B893CE739DAE89D8DB7B
// {
//   _BYTE gap0[8];
//   long double dblVal;
// };

// /* 1821 */
// struct $6DB36323059316E675433BB10D285009
// {
//   _BYTE gap0[8];
//   __int16 boolVal;
// };

// /* 1822 */
// struct $8E3C8731874D1B3BC66617C4DD3163A6
// {
//   _BYTE gap0[8];
//   int scode;
// };

// /* 1823 */
// struct $66984DDA9F43C466881BAF8D98C635E5
// {
//   _BYTE gap0[8];
//   tagCY cyVal;
// };

// /* 1824 */
// struct $E94952165EEA9EEA990FEB33603E1B19
// {
//   _BYTE gap0[8];
//   long double date;
// };

// /* 1825 */
// struct $7B1C2AA558A72DB3909F7F0B6C8C78B2
// {
//   _BYTE gap0[8];
//   wchar_t *bstrVal;
// };

// /* 1826 */
// struct $B9DBAC295C5397A449C8F4CCA25D1154
// {
//   _BYTE gap0[8];
//   IUnknown *punkVal;
// };

// /* 1827 */
// struct $EB833D5A51943A8F7E153A5CF772A1D2
// {
//   _BYTE gap0[8];
//   IDispatch *pdispVal;
// };

// /* 1828 */
// struct $60B8C71E3322A5959453359CF0E00A11
// {
//   _BYTE gap0[8];
//   tagSAFEARRAY *parray;
// };

// /* 1829 */
// struct $CEB26E30A72A699742605DB617405969
// {
//   _BYTE gap0[8];
//   unsigned __int8 *pbVal;
// };

// /* 1830 */
// struct $76732A64405C0E287FCB302687644550
// {
//   _BYTE gap0[8];
//   __int16 *piVal;
// };

// /* 1831 */
// struct $E5FC128E66C26C95254032BA69D36E74
// {
//   _BYTE gap0[8];
//   int *plVal;
// };

// /* 1832 */
// struct $E9CDCC48CD0BB58E8F361AA17BFDA76E
// {
//   _BYTE gap0[8];
//   __int64 *pllVal;
// };

// /* 1833 */
// struct $BF8CC88CDF129BD6E4FA4ABA13F521AD
// {
//   _BYTE gap0[8];
//   float *pfltVal;
// };

// /* 1834 */
// struct $2CABE618CF1C2625A4479554E4967E0A
// {
//   _BYTE gap0[8];
//   long double *pdblVal;
// };

// /* 1835 */
// struct $AAA92DA1D6E1B0E8462F69216B62027C
// {
//   _BYTE gap0[8];
//   __int16 *pboolVal;
// };

// /* 1836 */
// struct $F7167AE7A8ABA03C094C204FB1564A28
// {
//   _BYTE gap0[8];
//   int *pscode;
// };

// /* 1837 */
// struct $501BA0883F043D53900B8F2D0E150E42
// {
//   _BYTE gap0[8];
//   tagCY *pcyVal;
// };

// /* 1838 */
// struct $6857AE69DB7C952EEFD665431A7B503A
// {
//   _BYTE gap0[8];
//   long double *pdate;
// };

// /* 1839 */
// struct $BE56ADCB97A5F80C4E840DC3FCEE04D4
// {
//   _BYTE gap0[8];
//   wchar_t **pbstrVal;
// };

// /* 1840 */
// struct $166FD67DEEA4501EBE22F137A4F332DC
// {
//   _BYTE gap0[8];
//   IUnknown **ppunkVal;
// };

// /* 1841 */
// struct $33B41755AB628A1E54A56301AE7CDB4D
// {
//   _BYTE gap0[8];
//   IDispatch **ppdispVal;
// };

// /* 1842 */
// struct $305DFF78492FB87930EE2C724277FEB5
// {
//   _BYTE gap0[8];
//   tagSAFEARRAY **pparray;
// };

// /* 1843 */
// struct $B3CF876FBC2742D476256D04BD0634BA
// {
//   _BYTE gap0[8];
//   tagVARIANT *pvarVal;
// };

// /* 1844 */
// struct $6C39A09D97B880131B2C5BB4943CBB45
// {
//   _BYTE gap0[8];
//   void *byref;
// };

// /* 1845 */
// struct $E898A5260D8380431CCAA47FCC291563
// {
//   _BYTE gap0[8];
//   char cVal;
// };

// /* 1846 */
// struct $48802A31D3D0701BC13CEF9CEA041E7B
// {
//   _BYTE gap0[8];
//   unsigned __int16 uiVal;
// };

// /* 1847 */
// struct $B644145F46FF1F932B106BFA6CC3F6D9
// {
//   _BYTE gap0[8];
//   unsigned int ulVal;
// };

// /* 1848 */
// struct $EA00B0D50EAA1933F67C45009B664198
// {
//   _BYTE gap0[8];
//   unsigned __int64 ullVal;
// };

// /* 1849 */
// struct $5CA90CF57237397281FB12BFD52C1905
// {
//   _BYTE gap0[8];
//   int intVal;
// };

// /* 1850 */
// struct $E7F48E2F4EAA3149E57D87E5D1B2C6B8
// {
//   _BYTE gap0[8];
//   unsigned int uintVal;
// };

// /* 1851 */
// struct $8010B05A290F320BFA69624B446FD61E
// {
//   _BYTE gap0[8];
//   tagDEC *pdecVal;
// };

// /* 1852 */
// struct $E1D71D20C3D01115E20D79FAE9629CE8
// {
//   _BYTE gap0[8];
//   char *pcVal;
// };

// /* 1853 */
// struct $5669F5A4AD19EF2CB42A5602080CB0A6
// {
//   _BYTE gap0[8];
//   unsigned __int16 *puiVal;
// };

// /* 1854 */
// struct $886F8AE9D7C8B1B861B6CA58D67B682A
// {
//   _BYTE gap0[8];
//   unsigned int *pulVal;
// };

// /* 1855 */
// struct $ADBB94A21537A8461C6168A5B871A740
// {
//   _BYTE gap0[8];
//   unsigned __int64 *pullVal;
// };

// /* 1856 */
// struct $CDA73A427DD2A30CDA26CA3394C33CF0
// {
//   _BYTE gap0[8];
//   int *pintVal;
// };

// /* 1857 */
// struct $2516E53E690D8CC5659AAB7EDC49E664
// {
//   _BYTE gap0[8];
//   unsigned int *puintVal;
// };

// /* 1858 */
// struct $17B4421FDC73B39569D8A12F584CB67F
// {
//   _BYTE gap0[8];
//   void *pvRecord;
// };

// /* 1859 */
// union $8E3CF4939949A3DA583650AAB502E3EE
// {
//   $E2F13C0D8C7A5E44CBEA2DDC2BADB614 __s0;
//   tagDEC decVal;
//   $BEF13079123511ED48CCF02389C252E5 __s2;
//   $20D69447C97B677619C52B2E27D3FF49 __s3;
//   $31126B8528A05AF3606C6D495FD178E8 __s4;
//   $50230A970D9734D4E9774CFC619DF0F6 __s5;
//   $4C0EC2258454B893CE739DAE89D8DB7B __s6;
//   $6DB36323059316E675433BB10D285009 __s7;
//   $8E3C8731874D1B3BC66617C4DD3163A6 __s8;
//   $66984DDA9F43C466881BAF8D98C635E5 __s9;
//   $E94952165EEA9EEA990FEB33603E1B19 __s10;
//   $7B1C2AA558A72DB3909F7F0B6C8C78B2 __s11;
//   $B9DBAC295C5397A449C8F4CCA25D1154 __s12;
//   $EB833D5A51943A8F7E153A5CF772A1D2 __s13;
//   $60B8C71E3322A5959453359CF0E00A11 __s14;
//   $CEB26E30A72A699742605DB617405969 __s15;
//   $76732A64405C0E287FCB302687644550 __s16;
//   $E5FC128E66C26C95254032BA69D36E74 __s17;
//   $E9CDCC48CD0BB58E8F361AA17BFDA76E __s18;
//   $BF8CC88CDF129BD6E4FA4ABA13F521AD __s19;
//   $2CABE618CF1C2625A4479554E4967E0A __s20;
//   $AAA92DA1D6E1B0E8462F69216B62027C __s21;
//   $F7167AE7A8ABA03C094C204FB1564A28 __s22;
//   $501BA0883F043D53900B8F2D0E150E42 __s23;
//   $6857AE69DB7C952EEFD665431A7B503A __s24;
//   $BE56ADCB97A5F80C4E840DC3FCEE04D4 __s25;
//   $166FD67DEEA4501EBE22F137A4F332DC __s26;
//   $33B41755AB628A1E54A56301AE7CDB4D __s27;
//   $305DFF78492FB87930EE2C724277FEB5 __s28;
//   $B3CF876FBC2742D476256D04BD0634BA __s29;
//   $6C39A09D97B880131B2C5BB4943CBB45 __s30;
//   $E898A5260D8380431CCAA47FCC291563 __s31;
//   $48802A31D3D0701BC13CEF9CEA041E7B __s32;
//   $B644145F46FF1F932B106BFA6CC3F6D9 __s33;
//   $EA00B0D50EAA1933F67C45009B664198 __s34;
//   $5CA90CF57237397281FB12BFD52C1905 __s35;
//   $E7F48E2F4EAA3149E57D87E5D1B2C6B8 __s36;
//   $8010B05A290F320BFA69624B446FD61E __s37;
//   $E1D71D20C3D01115E20D79FAE9629CE8 __s38;
//   $5669F5A4AD19EF2CB42A5602080CB0A6 __s39;
//   $886F8AE9D7C8B1B861B6CA58D67B682A __s40;
//   $ADBB94A21537A8461C6168A5B871A740 __s41;
//   $CDA73A427DD2A30CDA26CA3394C33CF0 __s42;
//   $2516E53E690D8CC5659AAB7EDC49E664 __s43;
//   $17B4421FDC73B39569D8A12F584CB67F __s44;
// };

// /* 1794 */
// struct tagVARIANT
// {
//   $8E3CF4939949A3DA583650AAB502E3EE ___u0;
// };

// /* 1789 */
// struct tagPARAMDESCEX
// {
//   unsigned int cBytes;
//   tagVARIANT varDefaultValue;
// };

// /* 1813 */
// struct __cppobj IRecordInfo : IUnknown
// {
// };

// /* 1807 */
// struct tagSAFEARRAY
// {
//   unsigned __int16 cDims;
//   unsigned __int16 fFeatures;
//   unsigned int cbElements;
//   unsigned int cLocks;
//   void *pvData;
//   tagSAFEARRAYBOUND rgsabound[1];
// };

// /* 1790 */
// struct __declspec(align(4)) tagPARAMDESC
// {
//   tagPARAMDESCEX *pparamdescex;
//   unsigned __int16 wParamFlags;
// };

// /* 1791 */
// union $7A754FF54145B51FCE7684618CE05157
// {
//   tagIDLDESC idldesc;
//   tagPARAMDESC paramdesc;
// };

// /* 1792 */
// struct tagELEMDESC
// {
//   tagTYPEDESC tdesc;
//   $7A754FF54145B51FCE7684618CE05157 ___u1;
// };

// /* 1793 */
// struct __declspec(align(4)) tagFUNCDESC
// {
//   int memid;
//   int *lprgscode;
//   tagELEMDESC *lprgelemdescParam;
//   tagFUNCKIND funckind;
//   tagINVOKEKIND invkind;
//   tagCALLCONV callconv;
//   __int16 cParams;
//   __int16 cParamsOpt;
//   __int16 oVft;
//   __int16 cScodes;
//   tagELEMDESC elemdescFunc;
//   unsigned __int16 wFuncFlags;
// };

// /* 1795 */
// union $A765EFE3674C6DC4FE06841D75AF3F4B
// {
//   unsigned int oInst;
//   tagVARIANT *lpvarValue;
// };

// /* 1796 */
// struct tagVARDESC
// {
//   int memid;
//   wchar_t *lpstrSchema;
//   $A765EFE3674C6DC4FE06841D75AF3F4B ___u2;
//   tagELEMDESC elemdescVar;
//   unsigned __int16 wVarFlags;
//   tagVARKIND varkind;
// };

// /* 1797 */
// struct __cppobj ITypeComp : IUnknown
// {
// };

// /* 1798 */
// union tagBINDPTR
// {
//   tagFUNCDESC *lpfuncdesc;
//   tagVARDESC *lpvardesc;
//   ITypeComp *lptcomp;
// };

// /* 1799 */
// struct /*VFT*/ ITypeComp_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *Bind)(ITypeComp *this, wchar_t *, unsigned int, unsigned __int16, ITypeInfo **, tagDESCKIND *, tagBINDPTR *);
//   HRESULT (__stdcall *BindType)(ITypeComp *this, wchar_t *, unsigned int, ITypeInfo **, ITypeComp **);
// };

// /* 1800 */
// struct tagDISPPARAMS
// {
//   tagVARIANT *rgvarg;
//   int *rgdispidNamedArgs;
//   unsigned int cArgs;
//   unsigned int cNamedArgs;
// };

// /* 1801 */
// struct tagEXCEPINFO
// {
//   unsigned __int16 wCode;
//   unsigned __int16 wReserved;
//   wchar_t *bstrSource;
//   wchar_t *bstrDescription;
//   wchar_t *bstrHelpFile;
//   unsigned int dwHelpContext;
//   void *pvReserved;
//   HRESULT (__stdcall *pfnDeferredFillIn)(tagEXCEPINFO *);
//   int scode;
// };

// /* 1802 */
// struct __cppobj ITypeLib : IUnknown
// {
// };

// /* 1803 */
// struct __declspec(align(4)) tagTLIBATTR
// {
//   _GUID guid;
//   unsigned int lcid;
//   tagSYSKIND syskind;
//   unsigned __int16 wMajorVerNum;
//   unsigned __int16 wMinorVerNum;
//   unsigned __int16 wLibFlags;
// };

// /* 1804 */
// struct /*VFT*/ ITypeLib_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   unsigned int (__stdcall *GetTypeInfoCount)(ITypeLib *this);
//   HRESULT (__stdcall *GetTypeInfo)(ITypeLib *this, unsigned int, ITypeInfo **);
//   HRESULT (__stdcall *GetTypeInfoType)(ITypeLib *this, unsigned int, tagTYPEKIND *);
//   HRESULT (__stdcall *GetTypeInfoOfGuid)(ITypeLib *this, const _GUID *, ITypeInfo **);
//   HRESULT (__stdcall *GetLibAttr)(ITypeLib *this, tagTLIBATTR **);
//   HRESULT (__stdcall *GetTypeComp)(ITypeLib *this, ITypeComp **);
//   HRESULT (__stdcall *GetDocumentation)(ITypeLib *this, int, wchar_t **, wchar_t **, unsigned int *, wchar_t **);
//   HRESULT (__stdcall *IsName)(ITypeLib *this, wchar_t *, unsigned int, int *);
//   HRESULT (__stdcall *FindName)(ITypeLib *this, wchar_t *, unsigned int, ITypeInfo **, int *, unsigned __int16 *);
//   void (__stdcall *ReleaseTLibAttr)(ITypeLib *this, tagTLIBATTR *);
// };

// /* 1805 */
// struct /*VFT*/ ITypeInfo_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetTypeAttr)(ITypeInfo *this, tagTYPEATTR **);
//   HRESULT (__stdcall *GetTypeComp)(ITypeInfo *this, ITypeComp **);
//   HRESULT (__stdcall *GetFuncDesc)(ITypeInfo *this, unsigned int, tagFUNCDESC **);
//   HRESULT (__stdcall *GetVarDesc)(ITypeInfo *this, unsigned int, tagVARDESC **);
//   HRESULT (__stdcall *GetNames)(ITypeInfo *this, int, wchar_t **, unsigned int, unsigned int *);
//   HRESULT (__stdcall *GetRefTypeOfImplType)(ITypeInfo *this, unsigned int, unsigned int *);
//   HRESULT (__stdcall *GetImplTypeFlags)(ITypeInfo *this, unsigned int, int *);
//   HRESULT (__stdcall *GetIDsOfNames)(ITypeInfo *this, wchar_t **, unsigned int, int *);
//   HRESULT (__stdcall *Invoke)(ITypeInfo *this, void *, int, unsigned __int16, tagDISPPARAMS *, tagVARIANT *, tagEXCEPINFO *, unsigned int *);
//   HRESULT (__stdcall *GetDocumentation)(ITypeInfo *this, int, wchar_t **, wchar_t **, unsigned int *, wchar_t **);
//   HRESULT (__stdcall *GetDllEntry)(ITypeInfo *this, int, tagINVOKEKIND, wchar_t **, wchar_t **, unsigned __int16 *);
//   HRESULT (__stdcall *GetRefTypeInfo)(ITypeInfo *this, unsigned int, ITypeInfo **);
//   HRESULT (__stdcall *AddressOfMember)(ITypeInfo *this, int, tagINVOKEKIND, void **);
//   HRESULT (__stdcall *CreateInstance)(ITypeInfo *this, IUnknown *, const _GUID *, void **);
//   HRESULT (__stdcall *GetMops)(ITypeInfo *this, int, wchar_t **);
//   HRESULT (__stdcall *GetContainingTypeLib)(ITypeInfo *this, ITypeLib **, unsigned int *);
//   void (__stdcall *ReleaseTypeAttr)(ITypeInfo *this, tagTYPEATTR *);
//   void (__stdcall *ReleaseFuncDesc)(ITypeInfo *this, tagFUNCDESC *);
//   void (__stdcall *ReleaseVarDesc)(ITypeInfo *this, tagVARDESC *);
// };

// /* 1806 */
// struct /*VFT*/ IDispatch_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetTypeInfoCount)(IDispatch *this, unsigned int *);
//   HRESULT (__stdcall *GetTypeInfo)(IDispatch *this, unsigned int, unsigned int, ITypeInfo **);
//   HRESULT (__stdcall *GetIDsOfNames)(IDispatch *this, const _GUID *, wchar_t **, unsigned int, unsigned int, int *);
//   HRESULT (__stdcall *Invoke)(IDispatch *this, int, const _GUID *, unsigned int, unsigned __int16, tagDISPPARAMS *, tagVARIANT *, tagEXCEPINFO *, unsigned int *);
// };

// /* 1814 */
// struct /*VFT*/ IRecordInfo_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *RecordInit)(IRecordInfo *this, void *);
//   HRESULT (__stdcall *RecordClear)(IRecordInfo *this, void *);
//   HRESULT (__stdcall *RecordCopy)(IRecordInfo *this, void *, void *);
//   HRESULT (__stdcall *GetGuid)(IRecordInfo *this, _GUID *);
//   HRESULT (__stdcall *GetName)(IRecordInfo *this, wchar_t **);
//   HRESULT (__stdcall *GetSize)(IRecordInfo *this, unsigned int *);
//   HRESULT (__stdcall *GetTypeInfo)(IRecordInfo *this, ITypeInfo **);
//   HRESULT (__stdcall *GetField)(IRecordInfo *this, void *, const wchar_t *, tagVARIANT *);
//   HRESULT (__stdcall *GetFieldNoCopy)(IRecordInfo *this, void *, const wchar_t *, tagVARIANT *, void **);
//   HRESULT (__stdcall *PutField)(IRecordInfo *this, unsigned int, void *, const wchar_t *, tagVARIANT *);
//   HRESULT (__stdcall *PutFieldNoCopy)(IRecordInfo *this, unsigned int, void *, const wchar_t *, tagVARIANT *);
//   HRESULT (__stdcall *GetFieldNames)(IRecordInfo *this, unsigned int *, wchar_t **);
//   int (__stdcall *IsMatchingType)(IRecordInfo *this, IRecordInfo *);
//   void *(__stdcall *RecordCreate)(IRecordInfo *this);
//   HRESULT (__stdcall *RecordCreateCopy)(IRecordInfo *this, void *, void **);
//   HRESULT (__stdcall *RecordDestroy)(IRecordInfo *this, void *);
// };

// /* 1860 */
// struct __cppobj bdFastArray<char [64]>
// {
//   char (*m_data)[64];
//   unsigned int m_capacity;
//   unsigned int m_size;
// };

// /* 1861 */
// struct ltc_ecc_set_type
// {
//   int size;
//   char *name;
//   char *prime;
//   char *B;
//   char *order;
//   char *Gx;
//   char *Gy;
// };

// /* 1862 */
// struct __cppobj bdFastArray<bdDispatchInterceptor *>
// {
//   struct bdDispatchInterceptor **m_data;
//   unsigned int m_capacity;
//   unsigned int m_size;
// };

// /* 1865 */
// struct _LIST_ENTRY
// {
//   _LIST_ENTRY *Flink;
//   _LIST_ENTRY *Blink;
// };

// /* 1863 */
// struct _RTL_CRITICAL_SECTION_DEBUG
// {
//   unsigned __int16 Type;
//   unsigned __int16 CreatorBackTraceIndex;
//   _RTL_CRITICAL_SECTION *CriticalSection;
//   _LIST_ENTRY ProcessLocksList;
//   unsigned int EntryCount;
//   unsigned int ContentionCount;
//   unsigned int Flags;
//   unsigned __int16 CreatorBackTraceIndexHigh;
//   unsigned __int16 SpareWORD;
// };

// /* 1864 */
// struct _RTL_CRITICAL_SECTION
// {
//   _RTL_CRITICAL_SECTION_DEBUG *DebugInfo;
//   int LockCount;
//   int RecursionCount;
//   void *OwningThread;
//   void *LockSemaphore;
//   unsigned int SpinCount;
// };

// /* 1866 */
// struct __cppobj bdHashingClass
// {
// };

// /* 1867 */
// struct __cppobj __declspec(align(4)) bdHashMap<unsigned __int64,bdReference<bdByteBuffer>,bdHashingClass>
// {
//   unsigned int m_size;
//   unsigned int m_capacity;
//   float m_loadFactor;
//   unsigned int m_threshold;
//   struct bdHashMap<unsigned __int64,bdReference<bdByteBuffer>,bdHashingClass>::Node **m_map;
//   bdHashingClass m_hashClass;
// };

// /* 1868 */
// struct __cppobj bdLinkedList<bdPendingBufferTransfer>
// {
//   struct bdLinkedList<bdPendingBufferTransfer>::Node *m_head;
//   struct bdLinkedList<bdPendingBufferTransfer>::Node *m_tail;
//   unsigned int m_size;
// };

// /* 1869 */
// struct __cppobj bdPendingBufferTransfer : bdReferencable
// {
//   bdReference<bdByteBuffer> m_buffer;
//   unsigned __int8 *m_txPtr;
//   unsigned int m_txAvail;
// };

// /* 1870 */
// struct /*VFT*/ bdPendingBufferTransfer_vtbl
// {
//   void (__thiscall *~bdReferencable)(bdReferencable *this);
// };

 /* 1871 */
union itemDefData_t
{
  textDef_s* textDef;
  imageDef_s* imageDef;
  focusItemDef_s* blankButtonDef;
  ownerDrawDef_s* ownerDrawDef;
  void* data;
};

static_assert(sizeof(itemDefData_t) == 0x4, "The size is not correct");

// /* 1872 */
// struct __cppobj bdQoSReplyPacket
// {
//   unsigned __int8 m_type;
//   unsigned int m_id;
//   unsigned __int64 m_timestamp;
//   bool m_enabledMode;
//   unsigned __int8 *m_data;
//   unsigned int m_dataSize;
//   unsigned int m_serializedSize;
// };

 /* 1873 */
struct GenericEventHandler
{
  const char* name;
  GenericEventScript* eventScript;
  GenericEventHandler* next;
};

static_assert(sizeof(GenericEventHandler) == 0xC, "The size is not correct");

/* 1874 */
struct animParamsDef_t
{
  const char* name;
  rectDef_s rectClient;
  float borderSize;
  float foreColor[4];
  float backColor[4];
  float borderColor[4];
  float outlineColor[4];
  float textScale;
  float rotation;
  GenericEventHandler* onEvent;
};

static_assert(sizeof(animParamsDef_t) == 0x6C, "The size is not correct");

// /* 1875 */
// struct symmetric_CTR
// {
//   int cipher;
//   int blocklen;
//   int padlen;
//   int mode;
//   int ctrlen;
//   unsigned __int8 ctr[128];
//   unsigned __int8 pad[128];
//   Symmetric_key key;
// };

// /* 1876 */
// struct yarrow_prng
// {
//   int cipher;
//   int hash;
//   unsigned __int8 pool[128];
//   symmetric_CTR ctr;
// };

// /* 1877 */
// struct __cppobj bdFastArray<unsigned __int64>
// {
//   unsigned __int64 *m_data;
//   unsigned int m_capacity;
//   unsigned int m_size;
// };

 /* 1878 */
struct rectData_s
{
  ExpressionStatement rectXExp;
  ExpressionStatement rectYExp;
  ExpressionStatement rectWExp;
  ExpressionStatement rectHExp;
};

static_assert(sizeof(rectData_s) == 0x40, "The size is not correct");

// /* 1879 */
// struct __cppobj __declspec(align(4)) bdHashMap<unsigned int,bdNATTravClientData,bdHashingClass>
// {
//   unsigned int m_size;
//   unsigned int m_capacity;
//   float m_loadFactor;
//   unsigned int m_threshold;
//   struct bdHashMap<unsigned int,bdNATTravClientData,bdHashingClass>::Node **m_map;
//   bdHashingClass m_hashClass;
// };

// /* 1880 */
// struct bdInAddr::<unnamed_type_inUn>::<unnamed_type_m_caddr>
// {
//   unsigned __int8 m_b1;
//   unsigned __int8 m_b2;
//   unsigned __int8 m_b3;
//   unsigned __int8 m_b4;
// };

// /* 1881 */
// union bdInAddr::<unnamed_type_inUn>
// {
//   bdInAddr::<unnamed_type_inUn>::<unnamed_type_m_caddr> m_caddr;
//   unsigned int m_iaddr;
// };

// /* 1882 */
// struct __cppobj bdInAddr
// {
//   bdInAddr::<unnamed_type_inUn> inUn;
// };

// /* 1883 */
// struct __cppobj bdInetAddr
// {
//   bdInAddr m_addr;
// };

// /* 1884 */
// struct __cppobj __declspec(align(4)) bdAddr
// {
//   bdInetAddr m_address;
//   unsigned __int16 m_port;
// };

// /* 1885 */
// struct __cppobj bdArray<bdAddr>
// {
//   bdAddr *m_data;
//   unsigned int m_capacity;
//   unsigned int m_size;
// };

// /* 1886 */
// struct __cppobj __declspec(align(4)) bdCommonAddr : bdReferencable
// {
//   bdArray<bdAddr> m_localAddrs;
//   bdAddr m_publicAddr;
//   bdNATType m_natType;
//   unsigned int m_hash;
//   bool m_isLoopback;
// };

// /* 1887 */
// struct /*VFT*/ bdCommonAddr_vtbl
// {
//   void (__thiscall *~bdReferencable)(bdReferencable *this);
// };

// /* 1888 */
// struct __cppobj bdReference<bdCommonAddr>
// {
//   bdCommonAddr *m_ptr;
// };

// /* 1889 */
// struct __cppobj bdNATTravListener
// {
//   bdNATTravListener_vtbl *__vftable /*VFT*/;
// };

// /* 1890 */
// struct /*VFT*/ bdNATTravListener_vtbl
// {
//   void (__thiscall *~bdNATTravListener)(bdNATTravListener *this);
//   void (__thiscall *onNATAddrDiscovery)(bdNATTravListener *this, bdReference<bdCommonAddr>, const bdAddr *);
//   void (__thiscall *onNATAddrDiscoveryFailed)(bdNATTravListener *this, bdReference<bdCommonAddr>);
// };

// /* 1891 */
// struct __cppobj bdNATTravClientData
// {
//   bdNATTravClientData::bdNATTravClientDataState m_state;
//   bdReference<bdCommonAddr> m_local;
//   bdReference<bdCommonAddr> m_remote;
//   bdNATTravListener *m_listener;
//   bdNATTravListener *m_secondaryListener;
//   unsigned int m_tries;
//   bdStopwatch m_lastSent;
//   bool m_throttled;
//   bdStopwatch m_age;
// };

// /* 1892 */
// struct __cppobj __declspec(align(4)) bdHashMap<unsigned int,bdQoSProbe::bdQoSProbeEntryWrapper,bdHashingClass>
// {
//   unsigned int m_size;
//   unsigned int m_capacity;
//   float m_loadFactor;
//   unsigned int m_threshold;
//   struct bdHashMap<unsigned int,bdQoSProbe::bdQoSProbeEntryWrapper,bdHashingClass>::Node **m_map;
//   bdHashingClass m_hashClass;
// };

 /* 1893 */
struct bdSecurityID
{
  unsigned __int8 ab[8];
};

/* 1894 */
struct bdSecurityKey
{
  unsigned __int8 ab[16];
};

// /* 1895 */
// struct __cppobj bdQoSProbeListener
// {
//   bdQoSProbeListener_vtbl *__vftable /*VFT*/;
// };

// /* 1897 */
// struct /*VFT*/ bdQoSProbeListener_vtbl
// {
//   void (__thiscall *~bdQoSProbeListener)(bdQoSProbeListener *this);
//   void (__thiscall *onQoSProbeSuccess)(bdQoSProbeListener *this, const bdQoSProbeInfo *);
//   void (__thiscall *onQoSProbeFail)(bdQoSProbeListener *this, bdReference<bdCommonAddr>);
// };

// /* 1896 */
// const struct __cppobj bdQoSProbeInfo
// {
//   bdReference<bdCommonAddr> m_addr;
//   bdAddr m_realAddr;
//   float m_latency;
//   unsigned __int8 *m_data;
//   unsigned int m_dataSize;
//   bool m_disabled;
//   unsigned int m_bandwidthDown;
//   unsigned int m_bandwidthUp;
// };

// /* 1898 */
// struct __cppobj bdQoSProbe::bdQoSProbeEntryWrapper
// {
//   bdReference<bdCommonAddr> m_addr;
//   bdSecurityID m_id;
//   bdSecurityKey m_key;
//   bdQoSProbeListener *m_listener;
//   bdAddr m_realAddr;
//   unsigned int m_retries;
//   bdStopwatch m_lastTry;
// };

// /* 1899 */
// struct __cppobj bdAntiCheatChallengeParam
// {
//   bdAntiCheatChallengeParam_vtbl *__vftable /*VFT*/;
//   unsigned __int8 *m_data;
//   unsigned int m_size;
// };

// /* 1900 */
// struct /*VFT*/ bdAntiCheatChallengeParam_vtbl
// {
//   void (__thiscall *~bdAntiCheatChallengeParam)(bdAntiCheatChallengeParam *this);
//   bool (__thiscall *deserialize)(bdAntiCheatChallengeParam *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdAntiCheatChallengeParam *this);
// };

// /* 1901 */
// struct __cppobj bdArray<bdAntiCheatChallengeParam>
// {
//   bdAntiCheatChallengeParam *m_data;
//   unsigned int m_capacity;
//   unsigned int m_size;
// };

// /* 1902 */
// struct ecc_point
// {
//   void *x;
//   void *y;
//   void *z;
// };

// /* 1903 */
// union Prng_state
// {
//   char dummy[1];
//   yarrow_prng yarrow;
// };

// /* 1904 */
// struct __cppobj bdFastArray<__int64>
// {
//   __int64 *m_data;
//   unsigned int m_capacity;
//   unsigned int m_size;
// };

// /* 1905 */
// struct ecc_key
// {
//   int type;
//   int idx;
//   const ltc_ecc_set_type *dp;
//   ecc_point pubkey;
//   void *k;
// };

 /* 1906 */
struct __declspec(align(8)) itemDef_s
{
  windowDef_t window;
  int type;
  int dataType;
  int imageTrack;
  const char* dvar;
  const char* dvarTest;
  const char* enableDvar;
  int dvarFlags;
  itemDefData_t typeData;
  menuDef_t* parent;
  rectData_s* rectExpData;
  ExpressionStatement visibleExp;
  unsigned __int64 showBits;
  unsigned __int64 hideBits;
  ExpressionStatement forecolorAExp;
  int ui3dWindowId;
  GenericEventHandler* onEvent;
  UIAnimInfo* animInfo;
};

static_assert(sizeof(itemDef_s) == 0x110, "The size is not correct");

/* 1907 */
struct __declspec(align(8)) menuDef_t
{
  windowDef_t window;
  const char* font;
  int fullScreen;
  int ui3dWindowId;
  int itemCount;
  int fontIndex;
  int cursorItem[1];
  int fadeCycle;
  int priority;
  float fadeClamp;
  float fadeAmount;
  float fadeInAmount;
  float blurRadius;
  int openSlideSpeed;
  int closeSlideSpeed;
  int openSlideDirection;
  int closeSlideDirection;
  rectDef_s initialRectInfo;
  int openFadingTime;
  int closeFadingTime;
  int fadeTimeCounter;
  int slideTimeCounter;
  GenericEventHandler* onEvent;
  ItemKeyHandler* onKey;
  ExpressionStatement visibleExp;
  unsigned __int64 showBits;
  unsigned __int64 hideBits;
  const char* allowedBinding;
  const char* soundName;
  int imageTrack;
  int control;
  float focusColor[4];
  float disableColor[4];
  ExpressionStatement rectXExp;
  ExpressionStatement rectYExp;
  itemDef_s** items;
};

static_assert(sizeof(menuDef_t) == 0x190, "The size is not correct");

/* 1908 */
struct UIAnimInfo
{
  int animStateCount;
  animParamsDef_t** animStates;
  animParamsDef_t currentAnimState;
  animParamsDef_t nextAnimState;
  int animating;
  int animStartTime;
  int animDuration;
};

static_assert(sizeof(UIAnimInfo) == 0xEC, "The size is not correct");

// /* 1909 */
// struct __cppobj bdNonce<16>
// {
//   unsigned __int8 m_nonce[16];
//   bool m_initialised;
// };

// /* 1910 */
// struct __cppobj bdReference<bdPendingBufferTransfer>
// {
//   bdPendingBufferTransfer *m_ptr;
// };

 /* 1911 */
struct ddlMemberDef_t
{
  const char* name;
  int size;
  int offset;
  int type;
  int externalIndex;
  unsigned int min;
  unsigned int max;
  unsigned int serverDelta;
  unsigned int clientDelta;
  int arraySize;
  int enumIndex;
  int permission;
};

static_assert(sizeof(ddlMemberDef_t) == 0x30, "The size is not correct");

/* 1912 */
struct ddlStructDef_t
{
  const char* name;
  int size;
  int memberCount;
  ddlMemberDef_t* members;
};

static_assert(sizeof(ddlStructDef_t) == 0x10, "The size is not correct");

// /* 1913 */
// struct _ULARGE_INTEGER::<unnamed_type_u>
// {
//   unsigned int LowPart;
//   unsigned int HighPart;
// };

// /* 1914 */
// struct $B950AFB169DC87688B328897744C612F
// {
//   unsigned int LowPart;
//   unsigned int HighPart;
// };

// /* 1915 */
// union _ULARGE_INTEGER
// {
//   $B950AFB169DC87688B328897744C612F __s0;
//   _ULARGE_INTEGER::<unnamed_type_u> u;
//   unsigned __int64 QuadPart;
// };

// /* 1916 */
// struct _FILETIME
// {
//   unsigned int dwLowDateTime;
//   unsigned int dwHighDateTime;
// };

// /* 1917 */
// struct tagSTATSTG
// {
//   wchar_t *pwcsName;
//   unsigned int type;
//   _ULARGE_INTEGER cbSize;
//   _FILETIME mtime;
//   _FILETIME ctime;
//   _FILETIME atime;
//   unsigned int grfMode;
//   unsigned int grfLocksSupported;
//   _GUID clsid;
//   unsigned int grfStateBits;
//   unsigned int reserved;
// };

// /* 1918 */
// struct _PMD
// {
//   int mdisp;
//   int pdisp;
//   int vdisp;
// };

// /* 1919 */
// struct __cppobj bdEndpoint
// {
//   bdReference<bdCommonAddr> m_ca;
//   bdSecurityID m_secID;
// };

// /* 1920 */
// struct __cppobj bdAddrHandle : bdReferencable
// {
//   bdEndpoint m_endpoint;
//   bdAddrHandle::bdAddrHandleStatus m_status;
//   bdAddr m_realAddr;
// };

// /* 1921 */
// struct /*VFT*/ bdAddrHandle_vtbl
// {
//   void (__thiscall *~bdReferencable)(bdReferencable *this);
// };

// /* 1922 */
// struct __cppobj bdReference<bdAddrHandle>
// {
//   bdAddrHandle *m_ptr;
// };

// /* 1923 */
// struct __cppobj bdArray<bdReference<bdAddrHandle> >
// {
//   bdReference<bdAddrHandle> *m_data;
//   unsigned int m_capacity;
//   unsigned int m_size;
// };

// /* 1924 */
// struct __cppobj __declspec(align(4)) bdHashMap<bdReference<bdCommonAddr>,bdArray<bdQoSProbe::bdQoSProbeEntryWrapper>,bdHashingClass>
// {
//   unsigned int m_size;
//   unsigned int m_capacity;
//   float m_loadFactor;
//   unsigned int m_threshold;
//   struct bdHashMap<bdReference<bdCommonAddr>,bdArray<bdQoSProbe::bdQoSProbeEntryWrapper>,bdHashingClass>::Node **m_map;
//   bdHashingClass m_hashClass;
// };

// /* 1925 */
// struct netProfilePacket_t
// {
//   int iTime;
//   int iSize;
//   int bFragment;
// };

// /* 1926 */
// struct netProfileStream_t
// {
//   netProfilePacket_t packets[60];
//   int iCurrPacket;
//   int iBytesPerSecond;
//   int iLastBPSCalcTime;
//   int iCountedPackets;
//   int iCountedFragments;
//   int iFragmentPercentage;
//   int iLargestPacket;
//   int iSmallestPacket;
// };

// /* 1927 */
// struct __cppobj bdSingleton<bdTrulyRandomImpl>
// {
// };

// /* 1928 */
// struct __cppobj bdTrulyRandomImpl
// {
// };

// /* 1929 */
// struct __cppobj bdSingleton<bdNetImpl>
// {
// };

// /* 1935 */
// struct __cppobj bdArray<bdString>
// {
//   bdString *m_data;
//   unsigned int m_capacity;
//   unsigned int m_size;
// };

// /* 1936 */
// struct __cppobj bdArray<bdInetAddr>
// {
//   bdInetAddr *m_data;
//   unsigned int m_capacity;
//   unsigned int m_size;
// };

// /* 1937 */
// struct __cppobj bdGetHostByNameConfig
// {
//   float m_timeout;
// };

// /* 1938 */
// struct __cppobj bdUPnPConfig
// {
//   float m_discoveryTimeout;
//   float m_responseTimeout;
//   float m_connectTimeout;
//   bdUPnPConfig::bdUPnPRunMode m_runMode;
//   unsigned int m_discoveryRetries;
//   bool m_disabled;
//   bdInetAddr m_gatewayAddr;
// };

// /* 1939 */
// struct __cppobj __declspec(align(4)) bdNetStartParams
// {
//   bool m_onlineGame;
//   unsigned __int16 m_gamePort;
//   bdSocket *m_socket;
//   bdArray<bdString> m_natTravHosts;
//   unsigned __int16 m_natTravPort;
//   bdArray<bdInetAddr> m_localAddresses;
//   bdGetHostByNameConfig m_hostNameLookupConfig;
//   bdUPnPConfig m_UPnPConfig;
//   bool m_useAnyIP;
// };

// /* 1960 */
// struct __cppobj bdAddrHandleRefWrapper
// {
//   bdReference<bdAddrHandle> m_handle;
// };

// /* 1961 */
// struct __cppobj bdHashMap<bdAddrHandleRefWrapper,bdReference<bdConnection>,bdAddrHandleRefWrapper>
// {
//   unsigned int m_size;
//   unsigned int m_capacity;
//   float m_loadFactor;
//   unsigned int m_threshold;
//   struct bdHashMap<bdAddrHandleRefWrapper,bdReference<bdConnection>,bdAddrHandleRefWrapper>::Node **m_map;
//   bdAddrHandleRefWrapper m_hashClass;
// };

// /* 1962 */
// struct __cppobj bdDispatcher
// {
//   bdFastArray<bdDispatchInterceptor *> m_interceptors;
// };

// /* 1963 */
// struct __cppobj bdConnectionStoreConfig
// {
//   unsigned int m_maxReceiveIterations;
//   float m_maxShutdownDuration;
//   unsigned int m_maxFlushIterations;
// };

// /* 1964 */
// struct __cppobj bdConnectionStore
// {
//   bdSocketRouter *m_socket;
//   bdHashMap<bdAddrHandleRefWrapper,bdReference<bdConnection>,bdAddrHandleRefWrapper> m_connectionMap;
//   bdConnectionStore::bdConnectionStoreStatus m_status;
//   bdDispatcher m_dispatcher;
//   bdStopwatch m_shutdownTimer;
//   bdAddressMap *m_addrMap;
//   bdConnectionStoreConfig m_config;
// };

// /* 1932 */
// struct __cppobj bdSocket
// {
//   bdSocket_vtbl *__vftable /*VFT*/;
//   int m_handle;
// };

// /* 1975 */
// struct __cppobj bdStreamSocket
// {
//   int m_handle;
// };

// /* 1976 */
// struct __cppobj bdUPnPDevice
// {
//   bdUPnPDevice::bdUPnPDeviceState m_state;
//   bool m_shutdownRequested;
//   bdUPnPDevice::bdUPnPDeviceShutdownType m_shutdownType;
//   bdUPnPDevice::bdUPnPPortStatus m_portStatus;
//   bdAddr m_deviceAddr;
//   bdArray<bdInetAddr> *m_localAddrs;
//   bdInetAddr m_localConnectedAddr;
//   bdStreamSocket m_streamSocket;
//   bool m_isIp;
//   bdUPnPConfig m_config;
//   unsigned __int16 m_gamePort;
//   bdInetAddr m_externalDeviceAddr;
//   char m_requestBuffer[2048];
//   unsigned int m_requestSize;
//   char m_readBuffer[6144];
//   unsigned int m_bytesReceived;
//   char m_fetchLocation[64];
//   char m_controlURL[128];
//   bdStopwatch m_connectTimer;
//   bdStopwatch m_responseTimer;
// };

// /* 1977 */
// struct __cppobj __declspec(align(4)) bdUPnP
// {
//   bdUPnP::bdUPnPState m_state;
//   unsigned __int16 m_gamePort;
//   bdArray<bdInetAddr> *m_localAddrs;
//   bdUPnPConfig m_config;
//   bdSocket m_discoverySocket;
//   char m_readBuffer[1025];
//   unsigned int m_bytesReceived;
//   bdUPnPDevice m_device;
//   bdUPnPDevice m_cachedDevice;
//   bdStopwatch m_discoveryTimer;
//   unsigned int m_numDiscoveryAttempts;
//   bool m_shutdownRequested;
// };

// /* 1930 */
// struct __cppobj bdNetImpl
// {
//   bdNetImpl_vtbl *__vftable /*VFT*/;
//   __declspec(align(8)) bdNetStartParams m_params;
//   bdConnectionStore m_connectionStore;
//   bdSocketRouter *m_socketRouter;
//   bdNetImpl::bdNetStatus m_status;
//   bdIPDiscoveryClient *m_ipDiscClient;
//   bdNATTypeDiscoveryClient *m_natTypeDiscClient;
//   bdGetHostByName *m_getHostByName;
//   __declspec(align(8)) bdUPnP m_UPnP;
//   bdArray<bdAddr> m_natTravAddrs;
//   unsigned int m_currentNatTravAddrIndex;
//   unsigned int m_currentNatTravHostIndex;
//   unsigned int m_upnpCollisionRetryCount;
// };

// /* 1931 */
// struct /*VFT*/ bdNetImpl_vtbl
// {
//   void (__thiscall *~bdNetImpl)(bdNetImpl *this);
// };

// /* 1934 */
// struct __cppobj bdString
// {
//   char *m_string;
// };

// /* 1940 */
// struct __cppobj bdSecurityKeyMapListener
// {
//   bdSecurityKeyMapListener_vtbl *__vftable /*VFT*/;
// };

// /* 1945 */
// struct __cppobj bdFastArray<bdPacketInterceptor *>
// {
//   bdPacketInterceptor **m_data;
//   unsigned int m_capacity;
//   unsigned int m_size;
// };

// /* 1946 */
// struct __cppobj bdSocketRouterConfig
// {
//   bool m_ignoreConnectionReset;
//   float m_DTLSAssociationReceiveTimeout;
//   unsigned int m_maxConnectionResets;
// };

// /* 1947 */
// struct __cppobj bdAddressMap
// {
//   bdArray<bdReference<bdAddrHandle> > m_addrHandles;
// };

// /* 1948 */
// struct __cppobj __declspec(align(4)) bdHashMap<bdSecurityID,bdSecurityKey,bdHashingClass>
// {
//   unsigned int m_size;
//   unsigned int m_capacity;
//   float m_loadFactor;
//   unsigned int m_threshold;
//   struct bdHashMap<bdSecurityID,bdSecurityKey,bdHashingClass>::Node **m_map;
//   bdHashingClass m_hashClass;
// };

// /* 1949 */
// struct __cppobj bdSecurityKeyMap
// {
//   bdSecurityKeyMapListener *m_listener;
//   bdHashMap<bdSecurityID,bdSecurityKey,bdHashingClass> m_map;
// };

// /* 1943 */
// struct __cppobj bdPacketInterceptor
// {
//   bdPacketInterceptor_vtbl *__vftable /*VFT*/;
// };

// /* 1953 */
// struct __cppobj bdQoSProbe : bdNATTravListener, bdPacketInterceptor
// {
//   unsigned int m_maxBandwidth;
//   bdSocket *m_socket;
//   bdNATTravClient *m_natTrav;
//   bdServiceBandwidthArbitrator *m_bandArb;
//   unsigned int m_lastProbeId;
//   bdStopwatch m_probingTimer;
//   unsigned int m_secid;
//   bdQoSReplyPacket m_replyData;
//   bdQoSProbe::bdQoSListenerState m_listenState;
//   bdQoSProbe::bdQoSProbeStatus m_status;
//   bdHashMap<bdReference<bdCommonAddr>,bdArray<bdQoSProbe::bdQoSProbeEntryWrapper>,bdHashingClass> m_probesResolving;
//   bdHashMap<unsigned int,bdQoSProbe::bdQoSProbeEntryWrapper,bdHashingClass> m_probesProbbing;
// };

// /* 1951 */
// struct __cppobj __declspec(align(8)) bdNATTravClient : bdPacketInterceptor
// {
//   bdServiceBandwidthArbitrator *m_bandArb;
//   bdArray<bdAddr> m_introducers;
//   bdSocket *m_socket;
//   bdHashMap<unsigned int,bdNATTravClientData,bdHashingClass> m_callbacks;
//   bdStopwatch m_keepAliveTimer;
//   unsigned __int8 m_secretKey[28];
//   bdNATTravClient::bdNATTravClientStatus m_status;
//   bdReference<bdCommonAddr> m_localCommonAddr;
// };

// /* 1955 */
// struct __cppobj bdECCKey
// {
//   bdECCKey::bdECCKeyStatus m_status;
//   ecc_key m_key;
// };

// /* 1950 */
// struct __cppobj __declspec(align(4)) bdServiceBandwidthArbitrator
// {
//   int m_allowedSend;
//   bool m_sentThisSlice;
// };

// /* 1956 */
// struct __cppobj bdEndpointHashingClass
// {
// };

// /* 1957 */
// struct __cppobj __declspec(align(4)) bdHashMap<bdEndpoint,bdDTLSAssociation *,bdEndpointHashingClass>
// {
//   unsigned int m_size;
//   unsigned int m_capacity;
//   float m_loadFactor;
//   unsigned int m_threshold;
//   struct bdHashMap<bdEndpoint,bdDTLSAssociation *,bdEndpointHashingClass>::Node **m_map;
//   bdEndpointHashingClass m_hashClass;
// };

// /* 1958 */
// struct __cppobj __declspec(align(4)) bdHashMap<bdEndpoint,bdReference<bdAddrHandle>,bdEndpointHashingClass>
// {
//   unsigned int m_size;
//   unsigned int m_capacity;
//   float m_loadFactor;
//   unsigned int m_threshold;
//   struct bdHashMap<bdEndpoint,bdReference<bdAddrHandle>,bdEndpointHashingClass>::Node **m_map;
//   bdEndpointHashingClass m_hashClass;
// };

// /* 1942 */
// struct __cppobj bdSocketRouter : bdNATTravListener, bdSecurityKeyMapListener
// {
//   bdSocket *m_socket;
//   bdFastArray<bdPacketInterceptor *> m_interceptors;
//   bdSocketRouter::bdSocketRouterStatus m_status;
//   bdSocketRouterConfig m_config;
//   bdReference<bdCommonAddr> m_localCommonAddr;
//   bdAddressMap m_addrMap;
//   bdSecurityKeyMap m_keyStore;
//   bdQoSProbe m_qosProber;
//   bdNATTravClient m_natTrav;
//   bdECCKey m_ECCKey;
//   bdServiceBandwidthArbitrator m_qosBandwidth;
//   bdHashMap<bdEndpoint,bdDTLSAssociation *,bdEndpointHashingClass> m_dtls;
//   bdHashMap<bdEndpoint,bdReference<bdAddrHandle>,bdEndpointHashingClass> m_endpointToAddrMap;
// };

// /* 1965 */
// struct __cppobj bdIPDiscoveryConfig
// {
//   unsigned __int8 m_retries;
//   float m_requestTimeout;
// };

// /* 1966 */
// struct __cppobj bdIPDiscoveryClient
// {
//   bdSocket *m_socket;
//   bdAddr m_serverAddr;
//   bdAddr m_publicAddr;
//   bdStopwatch m_timer;
//   bdIPDiscoveryClient::bdIPDiscoveryClientStatus m_status;
//   bdIPDiscoveryConfig m_config;
//   unsigned int m_retries;
// };

// /* 1967 */
// struct __cppobj bdNATTypeDiscoveryConfig
// {
//   unsigned int m_NtdcsMaxResends;
//   float m_NtdcsSendTimeout;
// };

// /* 1968 */
// struct __cppobj bdNATTypeDiscoveryClient
// {
//   bdSocket *m_socket;
//   bdAddr m_serverAddr1;
//   bdAddr m_serverAddr2;
//   bdAddr m_mappedAddr;
//   bdNATType m_NATType;
//   bdNATTypeDiscoveryClient::bdNATTypeDiscoveryClientState m_state;
//   unsigned __int8 m_resends;
//   bdStopwatch m_timer;
//   bdNATTypeDiscoveryConfig m_config;
// };

// /* 1969 */
// struct __cppobj __declspec(align(4)) bdRunnable
// {
//   bdRunnable_vtbl *__vftable /*VFT*/;
//   bool m_stop;
// };

// /* 1973 */
// struct __cppobj __declspec(align(8)) bdGetHostByName : bdRunnable
// {
//   bdStopwatch m_timer;
//   bdGetHostByName::bdStatus m_status;
//   bdThread *m_thread;
//   bdGetHostByNameConfig m_config;
//   bdInAddr m_adresses[4];
//   unsigned int m_numAddresses;
//   int m_handle;
// };

// /* 1933 */
// struct /*VFT*/ bdSocket_vtbl
// {
//   void (__thiscall *~bdSocket)(bdSocket *this);
//   bool (__thiscall *create)(bdSocket *this, const bool, const bool, const bool);
//   bdSocketStatusCode (__thiscall *bind)(bdSocket *this, const bdAddr *);
//   bdSocketStatusCode (__thiscall *bind)(bdSocket *this, const unsigned __int16);
//   int (__thiscall *sendTo)(bdSocket *this, const bdAddr *, const void *, const unsigned int);
//   int (__thiscall *receiveFrom)(bdSocket *this, bdAddr *, void *, const unsigned int);
//   bool (__thiscall *close)(bdSocket *this);
// };

// /* 1941 */
// struct /*VFT*/ bdSecurityKeyMapListener_vtbl
// {
//   void (__thiscall *onSecurityKeyRemove)(bdSecurityKeyMapListener *this, const bdSecurityID *);
//   void (__thiscall *~bdSecurityKeyMapListener)(bdSecurityKeyMapListener *this);
// };

// /* 1944 */
// struct /*VFT*/ bdPacketInterceptor_vtbl
// {
//   void (__thiscall *~bdPacketInterceptor)(bdPacketInterceptor *this);
//   bool (__thiscall *acceptPacket)(bdPacketInterceptor *this, bdSocket *, bdAddr, void *, const unsigned int, const unsigned __int8);
// };

// /* 1970 */
// struct /*VFT*/ bdRunnable_vtbl
// {
//   void (__thiscall *~bdRunnable)(bdRunnable *this);
//   unsigned int (__thiscall *run)(bdRunnable *this, void *);
//   void (__thiscall *stop)(bdRunnable *this);
// };

// /* 1972 */
// struct __cppobj bdThreadArgs
// {
//   void *m_args;
//   bdRunnable *m_runnable;
//   bdThread *m_thread;
// };

// /* 1971 */
// struct __cppobj bdThread
// {
//   bdRunnable *m_runnable;
//   bdThreadArgs m_threadArgs;
//   void *m_handle;
//   bool m_isRunning;
//   unsigned int m_stackSize;
//   unsigned int m_priority;
// };

// /* 1952 */
// struct /*VFT*/ bdNATTravClient_vtbl
// {
//   void (__thiscall *~bdPacketInterceptor)(bdPacketInterceptor *this);
//   bool (__thiscall *acceptPacket)(bdPacketInterceptor *this, bdSocket *, bdAddr, void *, const unsigned int, const unsigned __int8);
// };

// /* 1954 */
// struct /*VFT*/ bdQoSProbe_vtbl
// {
//   void (__thiscall *~bdNATTravListener)(bdNATTravListener *this);
//   void (__thiscall *onNATAddrDiscovery)(bdNATTravListener *this, bdReference<bdCommonAddr>, const bdAddr *);
//   void (__thiscall *onNATAddrDiscoveryFailed)(bdNATTravListener *this, bdReference<bdCommonAddr>);
// };

// /* 1959 */
// struct /*VFT*/ bdSocketRouter_vtbl
// {
//   void (__thiscall *~bdNATTravListener)(bdNATTravListener *this);
//   void (__thiscall *onNATAddrDiscovery)(bdNATTravListener *this, bdReference<bdCommonAddr>, const bdAddr *);
//   void (__thiscall *onNATAddrDiscoveryFailed)(bdNATTravListener *this, bdReference<bdCommonAddr>);
//   void (__thiscall *pump)(bdSocketRouter *this);
//   bool (__thiscall *quit)(bdSocketRouter *this);
//   bool (__thiscall *connect)(bdSocketRouter *this, bdReference<bdAddrHandle> *);
//   bool (__thiscall *disconnect)(bdSocketRouter *this, bdReference<bdAddrHandle> *);
//   bdDTLSAssociationStatus (__thiscall *getStatus)(bdSocketRouter *this, const bdReference<bdAddrHandle>);
//   int (__thiscall *sendTo)(bdSocketRouter *this, const bdReference<bdAddrHandle>, void *, const unsigned int);
//   int (__thiscall *receiveFrom)(bdSocketRouter *this, bdReference<bdAddrHandle> *, void *, const unsigned int);
//   bool (__thiscall *isRelayEnabled)(bdSocketRouter *this);
// };

// /* 1974 */
// struct /*VFT*/ bdGetHostByName_vtbl
// {
//   void (__thiscall *~bdRunnable)(bdRunnable *this);
//   unsigned int (__thiscall *run)(bdRunnable *this, void *);
//   void (__thiscall *stop)(bdRunnable *this);
// };

// /* 1978 */
// struct _TypeDescriptor
// {
//   const void *pVFTable;
//   void *spare;
//   char name[];
// };

// /* 1979 */
// struct _s__RTTIBaseClassDescriptor2
// {
//   _TypeDescriptor *pTypeDescriptor;
//   unsigned int numContainedBases;
//   _PMD where;
//   unsigned int attributes;
//   const _s__RTTIClassHierarchyDescriptor *pClassDescriptor;
// };

// /* 1981 */
// const struct _s__RTTIClassHierarchyDescriptor
// {
//   unsigned int signature;
//   unsigned int attributes;
//   unsigned int numBaseClasses;
//   const _s__RTTIBaseClassArray *pBaseClassArray;
// };

// /* 1980 */
// const struct __unaligned __declspec(align(1)) _s__RTTIBaseClassArray
// {
//   const _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[];
// };

// /* 1982 */
// struct __cppobj bdLinkedList<bdReference<bdRemoteTask> >
// {
//   struct bdLinkedList<bdReference<bdRemoteTask> >::Node *m_head;
//   struct bdLinkedList<bdReference<bdRemoteTask> >::Node *m_tail;
//   unsigned int m_size;
// };

// /* 1983 */
// struct __cppobj __declspec(align(2)) bdAuthTicket
// {
//   unsigned int m_magicNumber;
//   unsigned __int8 m_type;
//   unsigned int m_titleID;
//   unsigned int m_timeIssued;
//   unsigned int m_timeExpires;
//   unsigned __int64 m_licenseID;
//   unsigned __int64 m_userID;
//   char m_username[64];
//   unsigned __int8 m_sessionKey[24];
//   unsigned __int8 m_usingHashMagicNumber[3];
//   unsigned __int8 m_hash[4];
// };

// /* 1984 */
// struct tagTHREADNAME_INFO
// {
//   unsigned int dwType;
//   const char *szName;
//   unsigned int dwThreadID;
//   unsigned int dwFlags;
// };

// /* 1985 */
// union __m128i
// {
//   char m128i_i8[16];
//   __int16 m128i_i16[8];
//   int m128i_i32[4];
//   __int64 m128i_i64[2];
//   unsigned __int8 m128i_u8[16];
//   unsigned __int16 m128i_u16[8];
//   unsigned int m128i_u32[4];
//   unsigned __int64 m128i_u64[2];
// };

// /* 1986 */
// struct __cppobj M128
// {
//   __m128i vec;
// };

// /* 1987 */
// struct __cppobj I128vec1 : M128
// {
// };

// /* 1988 */
// struct fake_centity_s
// {
//   unsigned int flags;
//   centity_s cent;
// };

// /* 1989 */
// struct __cppobj PIXProfile
// {
// };

/* 1991 */
union SndEntHandle
{
  struct
  {
    unsigned __int32 entIndex : 12;
    unsigned __int32 useCount : 7;
    unsigned __int32 localClientNum : 2;
    unsigned __int32 isStationary : 1;
    unsigned __int32 isInKillCam : 1;
    unsigned __int32 team : 3;
    unsigned __int32 tag : 6;
  } field;
  int handle;
};

// /* 1992 */
// struct tagCABSTR
// {
//   unsigned int cElems;
//   wchar_t **pElems;
// };

// /* 1993 */
// struct __cppobj bdQoSRemoteAddr
// {
//   bdReference<bdCommonAddr> m_addr;
//   bdSecurityID m_id;
//   bdSecurityKey m_key;
// };

// /* 1994 */
// struct __cppobj bdLobbyConnectionListener
// {
//   bdLobbyConnectionListener_vtbl *__vftable /*VFT*/;
// };

// /* 2006 */
// struct __cppobj bdReference<bdLobbyConnection>
// {
//   bdLobbyConnection *m_ptr;
// };

// /* 2007 */
// struct /*VFT*/ bdLobbyConnectionListener_vtbl
// {
//   void (__thiscall *~bdLobbyConnectionListener)(bdLobbyConnectionListener *this);
//   void (__thiscall *onConnect)(bdLobbyConnectionListener *this, bdReference<bdLobbyConnection>);
//   void (__thiscall *onConnectFailed)(bdLobbyConnectionListener *this, bdReference<bdLobbyConnection>);
//   void (__thiscall *onDisconnect)(bdLobbyConnectionListener *this, bdReference<bdLobbyConnection>);
// };

// /* 1997 */
// struct __cppobj bdReference<bdTaskByteBuffer>
// {
//   bdTaskByteBuffer *m_ptr;
// };

// /* 1999 */
// struct __cppobj bdQueue<bdPendingBufferTransfer>
// {
//   bdLinkedList<bdPendingBufferTransfer> m_list;
// };

// /* 2000 */
// struct __cppobj bdCypher
// {
//   bdCypher_vtbl *__vftable /*VFT*/;
// };

// /* 2002 */
// struct symmetric_CBC
// {
//   int cipher;
//   int blocklen;
//   unsigned __int8 IV[128];
//   Symmetric_key key;
// };

// /* 2003 */
// struct __cppobj bdCypher3Des : bdCypher
// {
//   symmetric_CBC m_cbc;
// };

// /* 1998 */
// struct __cppobj bdLobbyConnection : bdReferencable
// {
//   bdReference<bdCommonAddr> m_addr;
//   unsigned int m_maxSendMessageSize;
//   unsigned int m_maxRecvMessageSize;
//   bdLobbyConnection::RecvState m_recvState;
//   unsigned __int8 m_msgSizeBuffer[4];
//   unsigned int m_recvCount;
//   unsigned __int8 m_recvEncryptType;
//   unsigned int m_messageSize;
//   bdReference<bdTaskByteBuffer> m_recvMessage;
//   bdReference<bdPendingBufferTransfer> m_recvTransfer;
//   bdQueue<bdPendingBufferTransfer> m_outgoingBuffers;
//   bdStreamSocket m_socket;
//   bdLobbyConnection::Status m_status;
//   bdLobbyConnectionListener *m_connectionListener;
//   bdCypher3Des m_cypher;
//   unsigned __int8 m_sessionKey[24];
//   unsigned int m_messageCount;
//   bdStopwatch m_keepAliveTimer;
//   bdStopwatch m_lastReceivedTimer;
//   bdStopwatch m_asyncConnectTimer;
// };

// /* 1995 */
// struct __cppobj bdTaskByteBuffer : bdByteBuffer
// {
//   unsigned __int8 *m_taskData;
//   unsigned int m_taskDataSize;
//   unsigned int m_validHeaderSize;
//   unsigned int m_paddingSize;
// };

// /* 2001 */
// struct /*VFT*/ bdCypher_vtbl
// {
//   void (__thiscall *~bdCypher)(bdCypher *this);
//   bool (__thiscall *encrypt)(bdCypher *this, const unsigned __int8 *, const unsigned __int8 *, unsigned __int8 *, const unsigned int);
//   bool (__thiscall *decrypt)(bdCypher *this, const unsigned __int8 *, const unsigned __int8 *, unsigned __int8 *, const unsigned int);
// };

// /* 1996 */
// struct /*VFT*/ bdTaskByteBuffer_vtbl
// {
//   void (__thiscall *~bdReferencable)(bdReferencable *this);
//   void (__thiscall *allocateBuffer)(bdByteBuffer *this);
// };

// /* 2004 */
// struct /*VFT*/ bdCypher3Des_vtbl
// {
//   void (__thiscall *~bdCypher)(bdCypher *this);
//   bool (__thiscall *encrypt)(bdCypher *this, const unsigned __int8 *, const unsigned __int8 *, unsigned __int8 *, const unsigned int);
//   bool (__thiscall *decrypt)(bdCypher *this, const unsigned __int8 *, const unsigned __int8 *, unsigned __int8 *, const unsigned int);
// };

// /* 2005 */
// struct /*VFT*/ bdLobbyConnection_vtbl
// {
//   void (__thiscall *~bdReferencable)(bdReferencable *this);
//   bool (__thiscall *sendTask)(bdLobbyConnection *this, bdReference<bdTaskByteBuffer>, unsigned int, const bool);
//   bool (__thiscall *send)(bdLobbyConnection *this, const unsigned __int8 *, unsigned int, const bool);
// };

// /* 2008 */
// struct __cppobj bdFastArray<unsigned char>
// {
//   unsigned __int8 *m_data;
//   unsigned int m_capacity;
//   unsigned int m_size;
// };

// /* 2009 */
// struct __cppobj __declspec(align(4)) bdBitBuffer : bdReferencable
// {
//   bdFastArray<unsigned char> m_data;
//   unsigned int m_writePosition;
//   unsigned int m_maxWritePosition;
//   unsigned int m_readPosition;
//   bool m_failedRead;
//   bool m_typeChecked;
// };

// /* 2010 */
// struct /*VFT*/ bdBitBuffer_vtbl
// {
//   void (__thiscall *~bdReferencable)(bdReferencable *this);
// };

// /* 2011 */
// struct __cppobj bdReference<bdBitBuffer>
// {
//   bdBitBuffer *m_ptr;
// };

// /* 2012 */
// struct __cppobj bdAuthInfo
// {
//   unsigned int m_titleID;
//   unsigned int m_IVSeed;
//   char m_data[128];
//   unsigned __int8 m_sessionKey[24];
// };

// /* 2013 */
// struct Rsa_key
// {
//   int type;
//   void *e;
//   void *d;
//   void *N;
//   void *p;
//   void *q;
//   void *qP;
//   void *dP;
//   void *dQ;
// };

// /* 2014 */
// struct __cppobj bdRSAKey
// {
//   bdRSAKey::bdRSAKeyStatus m_status;
//   Rsa_key m_key;
// };

// /* 2015 */
// struct __cppobj bdAuthService : bdLobbyConnectionListener
// {
//   bdFastArray<char [64]> m_usernamesForLicenseResult;
//   bdReference<bdLobbyConnection> m_connection;
//   unsigned int m_titleID;
//   bdReference<bdCommonAddr> m_authServiceAddr;
//   bdAuthService::bdStatus m_status;
//   bdReference<bdBitBuffer> m_request;
//   bdAuthInfo m_authInfo;
//   __declspec(align(8)) bdAuthTicket m_authTicket;
//   char m_steamCookieKey[88];
//   char m_userKey[24];
//   char m_licenseKey[24];
//   bdLobbyErrorCode m_errorCode;
//   unsigned int m_sendBufSize;
//   unsigned int m_recvBufSize;
//   char m_cdKey[86];
//   int m_cdKeyTimeToLiveSecs;
//   bdRSAKey m_RSAKey;
// };

// /* 2016 */
// struct /*VFT*/ bdAuthService_vtbl
// {
//   void (__thiscall *~bdLobbyConnectionListener)(bdLobbyConnectionListener *this);
//   void (__thiscall *onConnect)(bdLobbyConnectionListener *this, bdReference<bdLobbyConnection>);
//   void (__thiscall *onConnectFailed)(bdLobbyConnectionListener *this, bdReference<bdLobbyConnection>);
//   void (__thiscall *onDisconnect)(bdLobbyConnectionListener *this, bdReference<bdLobbyConnection>);
// };

// /* 2017 */
// struct __cppobj __declspec(align(4)) bdDTLSHeader
// {
//   bdDTLSHeader_vtbl *__vftable /*VFT*/;
//   unsigned __int8 m_type;
//   unsigned __int8 m_version;
//   unsigned __int16 m_vtag;
//   unsigned __int16 m_counter;
// };

// /* 2018 */
// struct /*VFT*/ bdDTLSHeader_vtbl
// {
//   void (__thiscall *~bdDTLSHeader)(bdDTLSHeader *this);
//   bool (__thiscall *serialize)(bdDTLSHeader *this, void *, const unsigned int, const unsigned int, unsigned int *);
//   bool (__thiscall *deserialize)(bdDTLSHeader *this, const void *, const unsigned int, const unsigned int, unsigned int *);
// };

// /* 2019 */
// struct __cppobj bdDTLSInitAck : bdDTLSHeader
// {
//   unsigned int m_timestamp;
//   unsigned int m_signature;
//   unsigned __int16 m_initTag;
//   unsigned __int16 m_localTag;
//   unsigned __int16 m_peerTag;
//   unsigned __int16 m_localTieTag;
//   unsigned __int16 m_peerTieTag;
//   bdAddr m_peerAddr;
//   bdSecurityID m_secID;
// };

// /* 2020 */
// struct /*VFT*/ bdDTLSInitAck_vtbl
// {
//   void (__thiscall *~bdDTLSHeader)(bdDTLSHeader *this);
//   bool (__thiscall *serialize)(bdDTLSHeader *this, void *, const unsigned int, const unsigned int, unsigned int *);
//   bool (__thiscall *deserialize)(bdDTLSHeader *this, const void *, const unsigned int, const unsigned int, unsigned int *);
// };

// /* 2021 */
// struct __cppobj bdAntiCheatChallenge
// {
//   bdAntiCheatChallenge_vtbl *__vftable /*VFT*/;
//   __declspec(align(8)) unsigned __int16 m_functionID;
//   unsigned __int64 m_challengeID;
//   bdArray<bdAntiCheatChallengeParam> m_parameters;
// };

// /* 2022 */
// struct /*VFT*/ bdAntiCheatChallenge_vtbl
// {
//   void (__thiscall *~bdAntiCheatChallenge)(bdAntiCheatChallenge *this);
//   bool (__thiscall *deserialize)(bdAntiCheatChallenge *this, bdReference<bdByteBuffer>);
// };

// /* 2023 */
// struct __cppobj bdFastArray<char>
// {
//   char *m_data;
//   unsigned int m_capacity;
//   unsigned int m_size;
// };

// /* 2024 */
// struct __cppobj bdArray<bdQoSRemoteAddr>
// {
//   bdQoSRemoteAddr *m_data;
//   unsigned int m_capacity;
//   unsigned int m_size;
// };

// /* 2025 */
// struct __cppobj bdRichPresence : bdTaskResult
// {
//   unsigned int m_dataSize;
//   void *m_data;
// };

// /* 2026 */
// struct /*VFT*/ bdRichPresence_vtbl
// {
//   void (__thiscall *~bdTaskResult)(bdTaskResult *this);
//   bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
// };

// /* 2027 */
// struct MaterialInfoRaw
// {
//   unsigned int nameOffset;
//   unsigned int refImageNameOffset;
//   unsigned __int8 gameFlags;
//   unsigned __int8 sortKey;
//   unsigned __int8 textureAtlasRowCount;
//   unsigned __int8 textureAtlasColumnCount;
//   float maxDeformMove;
//   unsigned __int8 deformFlags;
//   unsigned __int8 usage;
//   unsigned __int16 toolFlags;
//   unsigned int locale;
//   unsigned __int16 autoTexScaleWidth;
//   unsigned __int16 autoTexScaleHeight;
//   float tessSize;
//   int surfaceFlags;
//   int contents;
// };

// /* 2030 */
// struct __cppobj __declspec(align(4)) bdHashMap<unsigned __int64,bdReference<bdRemoteTask>,bdHashingClass>
// {
//   unsigned int m_size;
//   unsigned int m_capacity;
//   float m_loadFactor;
//   unsigned int m_threshold;
//   struct bdHashMap<unsigned __int64,bdReference<bdRemoteTask>,bdHashingClass>::Node **m_map;
//   bdHashingClass m_hashClass;
// };

// /* 2028 */
// struct __cppobj bdRemoteTaskManager
// {
//   bdRemoteTaskManager_vtbl *__vftable /*VFT*/;
//   __declspec(align(8)) bdLinkedList<bdReference<bdRemoteTask> > m_tasks;
//   bdHashMap<unsigned __int64,bdReference<bdRemoteTask>,bdHashingClass> m_asyncTasks;
//   bdHashMap<unsigned __int64,bdReference<bdByteBuffer>,bdHashingClass> m_asyncResults;
//   bdReference<bdLobbyConnection> m_lobbyConnection;
//   bool m_encryptedConnection;
//   unsigned __int64 m_connectionID;
// };

// /* 2029 */
// struct /*VFT*/ bdRemoteTaskManager_vtbl
// {
//   void (__thiscall *~bdRemoteTaskManager)(bdRemoteTaskManager *this);
// };

// /* 2031 */
// struct __cppobj bdTitleUtilities
// {
//   bdRemoteTaskManager *m_remoteTaskManager;
// };

// /* 2032 */
// struct __cppobj __declspec(align(4)) bdVerifyString : bdTaskResult
// {
//   bool m_verified;
// };

// /* 2033 */
// struct /*VFT*/ bdVerifyString_vtbl
// {
//   void (__thiscall *~bdTaskResult)(bdTaskResult *this);
//   bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
// };

// /* 2034 */
// struct __cppobj __declspec(align(8)) bdOnlineUserInfo : bdTaskResult
// {
//   unsigned __int64 m_userID;
//   bool m_isOnline;
// };

// /* 2035 */
// struct /*VFT*/ bdOnlineUserInfo_vtbl
// {
//   void (__thiscall *~bdTaskResult)(bdTaskResult *this);
//   bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
// };

// /* 2036 */
// struct __cppobj bdTimeStamp : bdTaskResult
// {
//   unsigned int m_timeStamp;
// };

// /* 2037 */
// struct /*VFT*/ bdTimeStamp_vtbl
// {
//   void (__thiscall *~bdTaskResult)(bdTaskResult *this);
//   bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
// };

// /* 2038 */
// struct _s__RTTICompleteObjectLocator
// {
//   unsigned int signature;
//   unsigned int offset;
//   unsigned int cdOffset;
//   _TypeDescriptor *pTypeDescriptor;
//   const _s__RTTIClassHierarchyDescriptor *pClassDescriptor;
// };

// /* 2039 */
// struct tagCACLSID
// {
//   unsigned int cElems;
//   _GUID *pElems;
// };

// /* 2040 */
// union __m64
// {
//   unsigned __int64 m64_u64;
//   float m64_f32[2];
//   char m64_i8[8];
//   __int16 m64_i16[4];
//   int m64_i32[2];
//   __int64 m64_i64;
//   unsigned __int8 m64_u8[8];
//   unsigned __int16 m64_u16[4];
//   unsigned int m64_u32[2];
// };

// /* 2041 */
// struct __cppobj M64
// {
//   __m64 vec;
// };

// /* 2042 */
// struct __cppobj I8vec8 : M64
// {
// };

// /* 2043 */
// struct __cppobj Is8vec8 : I8vec8
// {
// };

// /* 2044 */
// struct tagCADBL
// {
//   unsigned int cElems;
//   long double *pElems;
// };

// /* 2045 */
// struct PredictedVehicleInfo
// {
//   bool inVehicle;
//   float origin[3];
//   float angles[3];
//   float tVel[3];
//   float aVel[3];
// };

// /* 2046 */
// struct __cppobj bdTrulyRandom : bdSingleton<bdTrulyRandomImpl>
// {
// };

// /* 2047 */
// struct __cppobj I8vec16 : M128
// {
// };

// /* 2048 */
// struct __cppobj Is8vec16 : I8vec16
// {
// };

// /* 2049 */
// struct tagLC_ID
// {
//   unsigned __int16 wLanguage;
//   unsigned __int16 wCountry;
//   unsigned __int16 wCodePage;
// };

// /* 2050 */
// struct threadlocaleinfostruct::<unnamed_type_lc_category>
// {
//   char *locale;
//   wchar_t *wlocale;
//   int *refcount;
//   int *wrefcount;
// };

// /* 2051 */
// struct lconv
// {
//   char *decimal_point;
//   char *thousands_sep;
//   char *grouping;
//   char *int_curr_symbol;
//   char *currency_symbol;
//   char *mon_decimal_point;
//   char *mon_thousands_sep;
//   char *mon_grouping;
//   char *positive_sign;
//   char *negative_sign;
//   char int_frac_digits;
//   char frac_digits;
//   char p_cs_precedes;
//   char p_sep_by_space;
//   char n_cs_precedes;
//   char n_sep_by_space;
//   char p_sign_posn;
//   char n_sign_posn;
// };

// /* 2052 */
// struct __lc_time_data
// {
//   char *wday_abbr[7];
//   char *wday[7];
//   char *month_abbr[12];
//   char *month[12];
//   char *ampm[2];
//   char *ww_sdatefmt;
//   char *ww_ldatefmt;
//   char *ww_timefmt;
//   unsigned int ww_lcid;
//   int ww_caltype;
//   int refcount;
// };

// /* 2053 */
// struct threadlocaleinfostruct
// {
//   int refcount;
//   unsigned int lc_codepage;
//   unsigned int lc_collate_cp;
//   unsigned int lc_handle[6];
//   tagLC_ID lc_id[6];
//   threadlocaleinfostruct::<unnamed_type_lc_category> lc_category[6];
//   int lc_clike;
//   int mb_cur_max;
//   int *lconv_intl_refcount;
//   int *lconv_num_refcount;
//   int *lconv_mon_refcount;
//   lconv *lconv;
//   int *ctype1_refcount;
//   unsigned __int16 *ctype1;
//   const unsigned __int16 *pctype;
//   const unsigned __int8 *pclmap;
//   const unsigned __int8 *pcumap;
//   __lc_time_data *lc_time_curr;
// };

// /* 2054 */
// struct __declspec(align(4)) threadmbcinfostruct
// {
//   int refcount;
//   int mbcodepage;
//   int ismbcodepage;
//   int mblcid;
//   unsigned __int16 mbulinfo[6];
//   unsigned __int8 mbctype[257];
//   unsigned __int8 mbcasemap[256];
// };

// /* 2055 */
// struct localeinfo_struct
// {
//   threadlocaleinfostruct *locinfo;
//   threadmbcinfostruct *mbcinfo;
// };

// /* 2056 */
// struct __cppobj bdTag : bdTaskResult
// {
//   unsigned __int64 m_priTag;
//   unsigned __int64 m_secTag;
// };

// /* 2057 */
// struct /*VFT*/ bdTag_vtbl
// {
//   void (__thiscall *~bdTaskResult)(bdTaskResult *this);
//   bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
//   void (__thiscall *serialize)(bdTag *this, bdByteBuffer *);
// };

// /* 2058 */
// struct __cppobj bdMemory
// {
// };

// /* 2059 */
// struct tagCAUB
// {
//   unsigned int cElems;
//   unsigned __int8 *pElems;
// };

// /* 2060 */
// struct _SECURITY_ATTRIBUTES
// {
//   unsigned int nLength;
//   void *lpSecurityDescriptor;
//   int bInheritHandle;
// };

// /* 2063 */
// struct __cppobj bdFastArray<void (__cdecl*)(void)>
// {
//   void (__cdecl **m_data)();
//   unsigned int m_capacity;
//   unsigned int m_size;
// };

// /* 2061 */
// struct __cppobj __declspec(align(4)) bdSingletonRegistryImpl
// {
//   bdSingletonRegistryImpl_vtbl *__vftable /*VFT*/;
//   bdFastArray<void (__cdecl*)(void)> m_destroyFunctions;
//   bool m_cleaningUp;
// };

// /* 2062 */
// struct /*VFT*/ bdSingletonRegistryImpl_vtbl
// {
//   void (__thiscall *~bdSingletonRegistryImpl)(bdSingletonRegistryImpl *this);
// };

// /* 2064 */
// struct __cppobj std::exception
// {
//   std::exception_vtbl *__vftable /*VFT*/;
//   const char *_m_what;
//   int _m_doFree;
// };

// /* 2065 */
// struct /*VFT*/ std::exception_vtbl
// {
//   void (__thiscall *~exception)(std::exception *this);
//   const char *(__thiscall *what)(std::exception *this);
// };

// /* 2066 */
// struct __cppobj std::bad_exception : std::exception
// {
// };

// /* 2067 */
// struct /*VFT*/ std::bad_exception_vtbl
// {
//   void (__thiscall *~exception)(std::exception *this);
//   const char *(__thiscall *what)(std::exception *this);
// };

// /* 2068 */
// struct __cppobj std::bad_alloc : std::exception
// {
// };

// /* 2069 */
// struct /*VFT*/ std::bad_alloc_vtbl
// {
//   void (__thiscall *~exception)(std::exception *this);
//   const char *(__thiscall *what)(std::exception *this);
// };

// /* 2070 */
// struct tagCACY
// {
//   unsigned int cElems;
//   tagCY *pElems;
// };

// /* 2071 */
// struct __cppobj bdStatsInfo : bdTaskResult
// {
//   unsigned int m_leaderboardID;
//   unsigned __int64 m_entityID;
//   bdStats::bdWriteType m_writeType;
//   __int64 m_rating;
//   unsigned __int64 m_rank;
//   char m_entityName[65];
//   unsigned int m_secondsSinceUpdate;
// };

// /* 2072 */
// struct /*VFT*/ bdStatsInfo_vtbl
// {
//   void (__thiscall *~bdTaskResult)(bdTaskResult *this);
//   bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
//   void (__thiscall *serialize)(bdStatsInfo *this, bdByteBuffer *);
// };

// /* 2073 */
// struct __cppobj bdURL : bdTaskResult
// {
//   char m_url[384];
//   unsigned __int16 m_serverType;
//   char m_serverIndex[128];
//   unsigned __int64 m_fileID;
// };

// /* 2074 */
// struct /*VFT*/ bdURL_vtbl
// {
//   void (__thiscall *~bdTaskResult)(bdTaskResult *this);
//   bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
// };

// /* 2075 */
// struct __cppobj bdPreCopyResult : bdTaskResult
// {
//   bdURL *m_source;
//   char m_destination[384];
//   unsigned int m_fileSize;
// };

// /* 2076 */
// struct /*VFT*/ bdPreCopyResult_vtbl
// {
//   void (__thiscall *~bdTaskResult)(bdTaskResult *this);
//   bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
// };

 /* 2077 */
struct ddlEnumDef_t
{
  const char* name;
  int memberCount;
  const char** members;
};

static_assert(sizeof(ddlEnumDef_t) == 0xC, "The size is not correct");

// /* 2078 */
// union __m128
// {
//   float m128_f32[4];
//   unsigned __int64 m128_u64[2];
//   char m128_i8[16];
//   __int16 m128_i16[8];
//   int m128_i32[4];
//   __int64 m128_i64[2];
//   unsigned __int8 m128_u8[16];
//   unsigned __int16 m128_u16[8];
//   unsigned int m128_u32[4];
// };

// /* 2079 */
// struct __cppobj F32vec4
// {
//   __m128 vec;
// };

// /* 2080 */
// struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_21
// {
//   const void *pVFTable;
//   void *spare;
//   char name[21];
// };

// /* 2081 */
// struct __cppobj bdDownloadInterceptor
// {
//   bdDownloadInterceptor_vtbl *__vftable /*VFT*/;
// };

// /* 2082 */
// struct /*VFT*/ bdDownloadInterceptor_vtbl
// {
//   void (__thiscall *~bdDownloadInterceptor)(bdDownloadInterceptor *this);
//   unsigned int (__thiscall *handleDownload)(bdDownloadInterceptor *this, void *, unsigned int);
// };

// /* 2083 */
// struct __cppobj I16vec8 : M128
// {
// };

// /* 2084 */
// struct __cppobj Iu16vec8 : I16vec8
// {
// };

// /* 2085 */
// struct __cppobj bdVoteRank
// {
//   bdRemoteTaskManager *m_remoteTaskManager;
// };

// /* 2086 */
// struct __cppobj __declspec(align(8)) bdRatingInfo : bdTaskResult
// {
//   unsigned __int64 m_entityID;
//   unsigned __int8 m_rating;
// };

// /* 2087 */
// struct /*VFT*/ bdRatingInfo_vtbl
// {
//   void (__thiscall *~bdTaskResult)(bdTaskResult *this);
//   bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
//   void (__thiscall *serialize)(bdRatingInfo *this, bdByteBuffer *);
// };

// /* 2088 */
// struct __cppobj __declspec(align(8)) bdVoteRankStatsInfo : bdStatsInfo
// {
//   unsigned __int64 m_fileOwnerID;
//   char m_fileOwnerName[65];
//   unsigned int m_totalVotes;
//   unsigned int m_avgVoteValue;
// };

// /* 2089 */
// struct /*VFT*/ bdVoteRankStatsInfo_vtbl
// {
//   void (__thiscall *~bdTaskResult)(bdTaskResult *this);
//   bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
//   void (__thiscall *serialize)(bdStatsInfo *this, bdByteBuffer *);
// };

// /* 2092 */
// struct __cppobj bdSequenceNumber
// {
//   int m_seqNum;
// };

// /* 2093 */
// struct __cppobj bdSequenceNumberStore
// {
//   unsigned int m_bitmap;
//   bdSequenceNumber m_lastSeq;
// };

// /* 2090 */
// struct __cppobj bdDTLSAssociation
// {
//   bdDTLSAssociation_vtbl *__vftable /*VFT*/;
//   __declspec(align(8)) bdSocket *m_socket;
//   bdSecurityKeyMap *m_keyMap;
//   bdECCKey *m_ECCKey;
//   bdCypher3Des m_cypher;
//   unsigned __int8 m_sharedKey[24];
//   bdAddr m_addr;
//   bdReference<bdAddrHandle> m_addrHandle;
//   bdDTLSAssociation::bdDTLSStatus m_state;
//   bdStopwatch m_lastReceived;
//   bdStopwatch m_initTimer;
//   unsigned __int8 m_initResends;
//   bdStopwatch m_cookieTimer;
//   unsigned __int8 m_cookieResends;
//   unsigned __int16 m_localTag;
//   unsigned __int16 m_peerTag;
//   bdSequenceNumber m_seqNum;
//   bdSequenceNumberStore m_incomingSeqNums;
//   bdDTLSInitAck m_initAck;
//   bdSecurityID m_localId;
//   bdReference<bdCommonAddr> m_localCommonAddr;
//   bdAddressMap *m_addrMap;
//   float m_receiveTimeout;
// };

// /* 2091 */
// struct /*VFT*/ bdDTLSAssociation_vtbl
// {
//   void (__thiscall *~bdDTLSAssociation)(bdDTLSAssociation *this);
//   int (__thiscall *sendTo)(bdDTLSAssociation *this, const bdAddr *, const void *, const unsigned int, const bdSecurityID *const);
//   int (__thiscall *receiveFrom)(bdDTLSAssociation *this, bdAddr *, const void *, const unsigned int, bdReference<bdAddrHandle> *, void *, const unsigned int);
// };

// /* 2094 */
// struct __cppobj bdKeyValuePair : bdTaskResult
// {
//   unsigned __int8 m_updateType;
//   unsigned __int16 m_index;
//   __int64 m_value;
// };

// /* 2095 */
// struct /*VFT*/ bdKeyValuePair_vtbl
// {
//   void (__thiscall *~bdTaskResult)(bdTaskResult *this);
//   bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
// };

// /* 2096 */
// struct __cppobj I16vec4 : M64
// {
// };

// /* 2097 */
// struct __cppobj Iu16vec4 : I16vec4
// {
// };

// /* 2098 */
// struct vector3
// {
//   float4 x;
//   float4 y;
//   float4 z;
// };

// /* 2099 */
// struct __cppobj vector4 : vector3
// {
//   float4 w;
// };

// /* 2100 */
// struct __cppobj tlNamedEventMarker
// {
// };

// /* 2101 */
// struct __cppobj bdFileData : bdTaskResult
// {
//   void *m_fileData;
//   unsigned int m_fileSize;
// };

// /* 2102 */
// struct /*VFT*/ bdFileData_vtbl
// {
//   void (__thiscall *~bdTaskResult)(bdTaskResult *this);
//   bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
// };

// /* 2103 */
// struct MemoryFile
// {
//   unsigned __int8 *buffer;
//   int bufferSize;
//   int bytesUsed;
//   int cacheBufferUsed;
//   int segmentIndex;
//   int segmentStart;
//   int nonZeroCount;
//   int zeroCount;
//   bool errorOnOverflow;
//   bool memoryOverflow;
//   bool compress_enabled;
//   bool rle_enabled;
//   bool is_writing;
//   int cacheBufferAvail;
//   unsigned __int8 cacheBuffer[32760];
// };

// /* 2104 */
// struct gitem_s
// {
//   itemType_t giType;
// };

// /* 2105 */
// struct weaponInfo_s
// {
//   XModel *handModel;
//   XModel *gogglesModel;
//   XModel *rocketModel;
//   unsigned __int8 weapModelIdx;
//   int registered;
//   const gitem_s *item;
//   const char *translatedDisplayName;
//   const char *translatedModename;
//   const char *translatedAIOverlayDescription;
// };

// /* 2106 */
// struct __cppobj Iu8vec16 : I8vec16
// {
// };

// /* 2107 */
// struct MaterialConstantDefRaw
// {
//   unsigned int nameOffset;
//   float literal[4];
// };

// /* 2108 */
// struct tagCAUL
// {
//   unsigned int cElems;
//   unsigned int *pElems;
// };

// /* 2109 */
// struct __cppobj bdAntiCheat
// {
//   bdRemoteTaskManager *m_remoteTaskManager;
// };

// /* 2110 */
// struct __cppobj __declspec(align(4)) bdAntiCheatResponses
// {
//   bdAntiCheatResponses_vtbl *__vftable /*VFT*/;
//   bdFastArray<unsigned __int64> m_challengeIDs;
//   bdFastArray<__int64> m_responses;
//   unsigned __int16 m_numResponses;
// };

// /* 2111 */
// struct /*VFT*/ bdAntiCheatResponses_vtbl
// {
//   void (__thiscall *~bdAntiCheatResponses)(bdAntiCheatResponses *this);
// };

// /* 2112 */
// struct tagBSTRBLOB
// {
//   unsigned int cbSize;
//   unsigned __int8 *pData;
// };

// /* 2113 */
// struct __cppobj bdHash
// {
//   bdHash_vtbl *__vftable /*VFT*/;
// };

// /* 2114 */
// struct /*VFT*/ bdHash_vtbl
// {
//   void (__thiscall *~bdHash)(bdHash *this);
//   bool (__thiscall *hash)(bdHash *this, const unsigned __int8 *, const unsigned int, unsigned __int8 *, unsigned int *);
// };

// /* 2115 */
// struct tagCAH
// {
//   unsigned int cElems;
//   _LARGE_INTEGER *pElems;
// };

// /* 2116 */
// struct ClientArchiveData
// {
//   int serverTime;
//   float origin[3];
//   float velocity[3];
//   int bobCycle;
//   int movementDir;
//   float viewangles[3];
// };

// /* 2117 */
// struct demoInitialStateBuffer_t
// {
//   unsigned __int8 compressedBuf[65536];
//   int compressedBufSize;
//   int serverMessageSequence;
//   ClientArchiveData archive[256];
//   int lastClientArchiveIndex;
//   int continuousBufferStartingIndex;
// };

// /* 2118 */
// struct _TP_CALLBACK_ENVIRON::<unnamed_type_u>::<unnamed_type_s>
// {
//   unsigned __int32 LongFunction : 1;
//   unsigned __int32 Private : 31;
// };

// /* 2119 */
// union _TP_CALLBACK_ENVIRON::<unnamed_type_u>
// {
//   unsigned int Flags;
//   _TP_CALLBACK_ENVIRON::<unnamed_type_u>::<unnamed_type_s> s;
// };

// /* 2120 */
// struct _TP_CALLBACK_ENVIRON
// {
//   unsigned int Version;
//   _TP_POOL *Pool;
//   _TP_CLEANUP_GROUP *CleanupGroup;
//   void (__stdcall *CleanupGroupCancelCallback)(void *, void *);
//   void *RaceDll;
//   _ACTIVATION_CONTEXT *ActivationContext;
//   void (__stdcall *FinalizationCallback)(_TP_CALLBACK_INSTANCE *, void *);
//   _TP_CALLBACK_ENVIRON::<unnamed_type_u> u;
// };

// /* 2121 */
// struct __cppobj I32vec4 : M128
// {
// };

// /* 2122 */
// struct __cppobj Is32vec4 : I32vec4
// {
// };

// /* 2123 */
// struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_15
// {
//   const void *pVFTable;
//   void *spare;
//   char name[15];
// };

// /* 2124 */
// struct tagCAUI
// {
//   unsigned int cElems;
//   unsigned __int16 *pElems;
// };

// /* 2125 */
// struct ClientVoicePacket_t
// {
//   unsigned __int8 data[256];
//   int dataSize;
// };

// /* 2126 */
// struct tagCAFILETIME
// {
//   unsigned int cElems;
//   _FILETIME *pElems;
// };

// /* 2127 */
// struct __cppobj bdSessionID : bdTaskResult
// {
//   bdSecurityID m_sessionID;
// };

// /* 2128 */
// struct /*VFT*/ bdSessionID_vtbl
// {
//   void (__thiscall *~bdTaskResult)(bdTaskResult *this);
//   bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
//   void (__thiscall *serialize)(bdSessionID *this, bdByteBuffer *);
// };

// /* 2129 */
// struct __cppobj bdSessionInvite : bdTaskResult
// {
//   unsigned __int64 m_senderID;
//   char m_senderName[64];
//   bdSessionID m_sessionID;
//   unsigned __int8 m_attachment[1024];
//   unsigned int m_attachmentSize;
// };

// /* 2130 */
// struct /*VFT*/ bdSessionInvite_vtbl
// {
//   void (__thiscall *~bdTaskResult)(bdTaskResult *this);
//   bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
// };

// /* 2131 */
// struct clSnapshot_t
// {
//   int valid;
//   int snapFlags;
//   int serverTime;
//   int physicsTime;
//   int messageNum;
//   int deltaNum;
//   int ping;
//   int cmdNum;
//   playerState_s ps;
//   int numEntities;
//   int numClients;
//   int parseMatchStateNum;
//   int parseEntitiesNum;
//   int parseClientsNum;
//   int serverCommandNum;
// };

// /* 2132 */
// struct __cppobj bdNet : bdSingleton<bdNetImpl>
// {
// };

// /* 2133 */
// struct $_TypeDescriptor$_extraBytes_24
// {
//   const void *pVFTable;
//   void *spare;
//   char name[24];
// };

// /* 2134 */
// struct tagCLIPDATA
// {
//   unsigned int cbSize;
//   int ulClipFmt;
//   unsigned __int8 *pClipData;
// };

// /* 2135 */
// struct tagBLOB
// {
//   unsigned int cbSize;
//   unsigned __int8 *pBlobData;
// };

// /* 2136 */
// struct __cppobj ISequentialStream : IUnknown
// {
// };

// /* 2137 */
// struct /*VFT*/ ISequentialStream_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *Read)(ISequentialStream *this, void *, unsigned int, unsigned int *);
//   HRESULT (__stdcall *Write)(ISequentialStream *this, const void *, unsigned int, unsigned int *);
// };

// /* 2138 */
// struct __cppobj IStream : ISequentialStream
// {
// };

// /* 2139 */
// struct /*VFT*/ IStream_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *Read)(ISequentialStream *this, void *, unsigned int, unsigned int *);
//   HRESULT (__stdcall *Write)(ISequentialStream *this, const void *, unsigned int, unsigned int *);
//   HRESULT (__stdcall *Seek)(IStream *this, _LARGE_INTEGER, unsigned int, _ULARGE_INTEGER *);
//   HRESULT (__stdcall *SetSize)(IStream *this, _ULARGE_INTEGER);
//   HRESULT (__stdcall *CopyTo)(IStream *this, IStream *, _ULARGE_INTEGER, _ULARGE_INTEGER *, _ULARGE_INTEGER *);
//   HRESULT (__stdcall *Commit)(IStream *this, unsigned int);
//   HRESULT (__stdcall *Revert)(IStream *this);
//   HRESULT (__stdcall *LockRegion)(IStream *this, _ULARGE_INTEGER, _ULARGE_INTEGER, unsigned int);
//   HRESULT (__stdcall *UnlockRegion)(IStream *this, _ULARGE_INTEGER, _ULARGE_INTEGER, unsigned int);
//   HRESULT (__stdcall *Stat)(IStream *this, tagSTATSTG *, unsigned int);
//   HRESULT (__stdcall *Clone)(IStream *this, IStream **);
// };

// /* 2140 */
// struct __cppobj IStorage : IUnknown
// {
// };

// /* 2141 */
// struct __cppobj IEnumSTATSTG : IUnknown
// {
// };

// /* 2142 */
// struct /*VFT*/ IEnumSTATSTG_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *Next)(IEnumSTATSTG *this, unsigned int, tagSTATSTG *, unsigned int *);
//   HRESULT (__stdcall *Skip)(IEnumSTATSTG *this, unsigned int);
//   HRESULT (__stdcall *Reset)(IEnumSTATSTG *this);
//   HRESULT (__stdcall *Clone)(IEnumSTATSTG *this, IEnumSTATSTG **);
// };

// /* 2143 */
// struct /*VFT*/ IStorage_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *CreateStream)(IStorage *this, const wchar_t *, unsigned int, unsigned int, unsigned int, IStream **);
//   HRESULT (__stdcall *OpenStream)(IStorage *this, const wchar_t *, void *, unsigned int, unsigned int, IStream **);
//   HRESULT (__stdcall *CreateStorage)(IStorage *this, const wchar_t *, unsigned int, unsigned int, unsigned int, IStorage **);
//   HRESULT (__stdcall *OpenStorage)(IStorage *this, const wchar_t *, IStorage *, unsigned int, wchar_t **, unsigned int, IStorage **);
//   HRESULT (__stdcall *CopyTo)(IStorage *this, unsigned int, const _GUID *, wchar_t **, IStorage *);
//   HRESULT (__stdcall *MoveElementTo)(IStorage *this, const wchar_t *, IStorage *, const wchar_t *, unsigned int);
//   HRESULT (__stdcall *Commit)(IStorage *this, unsigned int);
//   HRESULT (__stdcall *Revert)(IStorage *this);
//   HRESULT (__stdcall *EnumElements)(IStorage *this, unsigned int, void *, unsigned int, IEnumSTATSTG **);
//   HRESULT (__stdcall *DestroyElement)(IStorage *this, const wchar_t *);
//   HRESULT (__stdcall *RenameElement)(IStorage *this, const wchar_t *, const wchar_t *);
//   HRESULT (__stdcall *SetElementTimes)(IStorage *this, const wchar_t *, const _FILETIME *, const _FILETIME *, const _FILETIME *);
//   HRESULT (__stdcall *SetClass)(IStorage *this, const _GUID *);
//   HRESULT (__stdcall *SetStateBits)(IStorage *this, unsigned int, unsigned int);
//   HRESULT (__stdcall *Stat)(IStorage *this, tagSTATSTG *, unsigned int);
// };

// /* 2144 */
// struct tagVersionedStream
// {
//   _GUID guidVersion;
//   IStream *pStream;
// };

// /* 2145 */
// struct tagCAC
// {
//   unsigned int cElems;
//   char *pElems;
// };

// /* 2146 */
// struct tagCAI
// {
//   unsigned int cElems;
//   __int16 *pElems;
// };

// /* 2147 */
// struct tagCAL
// {
//   unsigned int cElems;
//   int *pElems;
// };

// /* 2148 */
// struct tagCAUH
// {
//   unsigned int cElems;
//   _ULARGE_INTEGER *pElems;
// };

// /* 2149 */
// struct tagCAFLT
// {
//   unsigned int cElems;
//   float *pElems;
// };

// /* 2150 */
// struct tagCABOOL
// {
//   unsigned int cElems;
//   __int16 *pElems;
// };

// /* 2151 */
// struct tagCASCODE
// {
//   unsigned int cElems;
//   int *pElems;
// };

// /* 2152 */
// struct tagCADATE
// {
//   unsigned int cElems;
//   long double *pElems;
// };

// /* 2153 */
// struct tagCACLIPDATA
// {
//   unsigned int cElems;
//   tagCLIPDATA *pElems;
// };

// /* 2154 */
// struct tagCABSTRBLOB
// {
//   unsigned int cElems;
//   tagBSTRBLOB *pElems;
// };

// /* 2155 */
// struct tagCALPSTR
// {
//   unsigned int cElems;
//   char **pElems;
// };

// /* 2156 */
// struct tagCALPWSTR
// {
//   unsigned int cElems;
//   wchar_t **pElems;
// };

// /* 2157 */
// struct tagCAPROPVARIANT
// {
//   unsigned int cElems;
//   tagPROPVARIANT *pElems;
// };

// /* 2159 */
// struct __unaligned __declspec(align(1)) $5DF3780F58367B9F2537DF425A8A812E
// {
//   unsigned __int16 vt;
//   unsigned __int16 wReserved1;
//   unsigned __int16 wReserved2;
//   unsigned __int16 wReserved3;
//   char cVal;
// };

// /* 2160 */
// struct $6D336DA143C556260FF80C12817B08DB
// {
//   _BYTE gap0[8];
//   int lVal;
// };

// /* 2161 */
// struct $916E0BF76659A8313A299FE68EC5D65A
// {
//   _BYTE gap0[8];
//   _LARGE_INTEGER hVal;
// };

// /* 2162 */
// struct $2053C85850C093495DDAF972B22C3A5A
// {
//   _BYTE gap0[8];
//   _ULARGE_INTEGER uhVal;
// };

// /* 2163 */
// struct $2C5C42A2237A87BF4C3E4E0645BD643A
// {
//   _BYTE gap0[8];
//   _FILETIME filetime;
// };

// /* 2164 */
// struct $07FC4151269043D7C626707DB38159A5
// {
//   _BYTE gap0[8];
//   _GUID *puuid;
// };

// /* 2165 */
// struct $7D5FB022A1E3D529F6D35B61ACF62A66
// {
//   _BYTE gap0[8];
//   tagCLIPDATA *pclipdata;
// };

// /* 2166 */
// struct $4C841AEEF817C4532E03979B24013CEA
// {
//   _BYTE gap0[8];
//   tagBSTRBLOB bstrblobVal;
// };

// /* 2167 */
// struct $3009B9E3885B5C3F498D1641F5BE7159
// {
//   _BYTE gap0[8];
//   tagBLOB blob;
// };

// /* 2168 */
// struct $17BA733FE6B8BEB3CC80B954432F0727
// {
//   _BYTE gap0[8];
//   char *pszVal;
// };

// /* 2169 */
// struct $A123DDE5155BABE8656CED1ACF96B10E
// {
//   _BYTE gap0[8];
//   wchar_t *pwszVal;
// };

// /* 2170 */
// struct $45EEE5A11A473A2F6752893E9DBD66A3
// {
//   _BYTE gap0[8];
//   IStream *pStream;
// };

// /* 2171 */
// struct $D33304433586BFFA097D4324EEE28C77
// {
//   _BYTE gap0[8];
//   IStorage *pStorage;
// };

// /* 2172 */
// struct $944011CEDD366304FEB6FD5F2831232B
// {
//   _BYTE gap0[8];
//   tagVersionedStream *pVersionedStream;
// };

// /* 2173 */
// struct $92E42B1870387B55098A29AF0CA7F2A1
// {
//   _BYTE gap0[8];
//   tagCAC cac;
// };

// /* 2174 */
// struct $C4E7C15F13556AF9454A9BC369332D4E
// {
//   _BYTE gap0[8];
//   tagCAUB caub;
// };

// /* 2175 */
// struct $4A1607E50F20ED4520CF3D919713D47D
// {
//   _BYTE gap0[8];
//   tagCAI cai;
// };

// /* 2176 */
// struct $2691A379D8594FA56C81094B9508443F
// {
//   _BYTE gap0[8];
//   tagCAUI caui;
// };

// /* 2177 */
// struct $B1E19B200C00243CAA2DCE85EF2C6EDA
// {
//   _BYTE gap0[8];
//   tagCAL cal;
// };

// /* 2178 */
// struct $D8F22D460D27622CF46089520650D9D7
// {
//   _BYTE gap0[8];
//   tagCAUL caul;
// };

// /* 2179 */
// struct $DBDBB2996FF6C17B65A24A3AF80AFE1B
// {
//   _BYTE gap0[8];
//   tagCAH cah;
// };

// /* 2180 */
// struct $92D7561A8BE05C3809E1E72DD8032BFC
// {
//   _BYTE gap0[8];
//   tagCAUH cauh;
// };

// /* 2181 */
// struct $FB7899EDEAFFDAE3DD8B89D16990AC5D
// {
//   _BYTE gap0[8];
//   tagCAFLT caflt;
// };

// /* 2182 */
// struct $44678C0AEC11289A8ADC6A5E8CAD1EF2
// {
//   _BYTE gap0[8];
//   tagCADBL cadbl;
// };

// /* 2183 */
// struct $D7A7CA4FD486484AFDFDBFF0536B029B
// {
//   _BYTE gap0[8];
//   tagCABOOL cabool;
// };

// /* 2184 */
// struct $3C2E91FCEB9C2C62C314B8A7CE299FAF
// {
//   _BYTE gap0[8];
//   tagCASCODE cascode;
// };

// /* 2185 */
// struct $5D1ADDF5DEAD39AF4122CF370FCC5EE4
// {
//   _BYTE gap0[8];
//   tagCACY cacy;
// };

// /* 2186 */
// struct $627C536959B4DE93ED07053F3A81A43A
// {
//   _BYTE gap0[8];
//   tagCADATE cadate;
// };

// /* 2187 */
// struct $E79067ED1B5BB34A64F50427BA61058C
// {
//   _BYTE gap0[8];
//   tagCAFILETIME cafiletime;
// };

// /* 2188 */
// struct $C859B3D73FEE628A4A9F95B54FAD078A
// {
//   _BYTE gap0[8];
//   tagCACLSID cauuid;
// };

// /* 2189 */
// struct $F7D919A5B5A88E6DC51431F47A53ADF6
// {
//   _BYTE gap0[8];
//   tagCACLIPDATA caclipdata;
// };

// /* 2190 */
// struct $F01B33E83AB01A8B17407FAB3AD2A595
// {
//   _BYTE gap0[8];
//   tagCABSTR cabstr;
// };

// /* 2191 */
// struct $6B435BFAB0017BE05C302655B37ABBD9
// {
//   _BYTE gap0[8];
//   tagCABSTRBLOB cabstrblob;
// };

// /* 2192 */
// struct $59F32D804AF3FFF66BBDB06B5082D12A
// {
//   _BYTE gap0[8];
//   tagCALPSTR calpstr;
// };

// /* 2193 */
// struct $DD17D0B661C53A5229E6EC8E5283D1B9
// {
//   _BYTE gap0[8];
//   tagCALPWSTR calpwstr;
// };

// /* 2194 */
// struct $10ECD818A7591C7F13BA5D237C81CFAC
// {
//   _BYTE gap0[8];
//   tagCAPROPVARIANT capropvar;
// };

// /* 2195 */
// struct $F38EF092E1FA7A2A58F31981D66C2224
// {
//   _BYTE gap0[8];
//   tagPROPVARIANT *pvarVal;
// };

// /* 2196 */
// union $17316F2C9E3D72AC5BB7DDDC80CAFA0E
// {
//   $5DF3780F58367B9F2537DF425A8A812E __s0;
//   tagDEC decVal;
//   $20D69447C97B677619C52B2E27D3FF49 __s2;
//   $31126B8528A05AF3606C6D495FD178E8 __s3;
//   $48802A31D3D0701BC13CEF9CEA041E7B __s4;
//   $6D336DA143C556260FF80C12817B08DB __s5;
//   $B644145F46FF1F932B106BFA6CC3F6D9 __s6;
//   $5CA90CF57237397281FB12BFD52C1905 __s7;
//   $E7F48E2F4EAA3149E57D87E5D1B2C6B8 __s8;
//   $916E0BF76659A8313A299FE68EC5D65A __s9;
//   $2053C85850C093495DDAF972B22C3A5A __s10;
//   $50230A970D9734D4E9774CFC619DF0F6 __s11;
//   $4C0EC2258454B893CE739DAE89D8DB7B __s12;
//   $6DB36323059316E675433BB10D285009 __s13;
//   $8E3C8731874D1B3BC66617C4DD3163A6 __s14;
//   $66984DDA9F43C466881BAF8D98C635E5 __s15;
//   $E94952165EEA9EEA990FEB33603E1B19 __s16;
//   $2C5C42A2237A87BF4C3E4E0645BD643A __s17;
//   $07FC4151269043D7C626707DB38159A5 __s18;
//   $7D5FB022A1E3D529F6D35B61ACF62A66 __s19;
//   $7B1C2AA558A72DB3909F7F0B6C8C78B2 __s20;
//   $4C841AEEF817C4532E03979B24013CEA __s21;
//   $3009B9E3885B5C3F498D1641F5BE7159 __s22;
//   $17BA733FE6B8BEB3CC80B954432F0727 __s23;
//   $A123DDE5155BABE8656CED1ACF96B10E __s24;
//   $B9DBAC295C5397A449C8F4CCA25D1154 __s25;
//   $EB833D5A51943A8F7E153A5CF772A1D2 __s26;
//   $45EEE5A11A473A2F6752893E9DBD66A3 __s27;
//   $D33304433586BFFA097D4324EEE28C77 __s28;
//   $944011CEDD366304FEB6FD5F2831232B __s29;
//   $60B8C71E3322A5959453359CF0E00A11 __s30;
//   $92E42B1870387B55098A29AF0CA7F2A1 __s31;
//   $C4E7C15F13556AF9454A9BC369332D4E __s32;
//   $4A1607E50F20ED4520CF3D919713D47D __s33;
//   $2691A379D8594FA56C81094B9508443F __s34;
//   $B1E19B200C00243CAA2DCE85EF2C6EDA __s35;
//   $D8F22D460D27622CF46089520650D9D7 __s36;
//   $DBDBB2996FF6C17B65A24A3AF80AFE1B __s37;
//   $92D7561A8BE05C3809E1E72DD8032BFC __s38;
//   $FB7899EDEAFFDAE3DD8B89D16990AC5D __s39;
//   $44678C0AEC11289A8ADC6A5E8CAD1EF2 __s40;
//   $D7A7CA4FD486484AFDFDBFF0536B029B __s41;
//   $3C2E91FCEB9C2C62C314B8A7CE299FAF __s42;
//   $5D1ADDF5DEAD39AF4122CF370FCC5EE4 __s43;
//   $627C536959B4DE93ED07053F3A81A43A __s44;
//   $E79067ED1B5BB34A64F50427BA61058C __s45;
//   $C859B3D73FEE628A4A9F95B54FAD078A __s46;
//   $F7D919A5B5A88E6DC51431F47A53ADF6 __s47;
//   $F01B33E83AB01A8B17407FAB3AD2A595 __s48;
//   $6B435BFAB0017BE05C302655B37ABBD9 __s49;
//   $59F32D804AF3FFF66BBDB06B5082D12A __s50;
//   $DD17D0B661C53A5229E6EC8E5283D1B9 __s51;
//   $10ECD818A7591C7F13BA5D237C81CFAC __s52;
//   $E1D71D20C3D01115E20D79FAE9629CE8 __s53;
//   $CEB26E30A72A699742605DB617405969 __s54;
//   $76732A64405C0E287FCB302687644550 __s55;
//   $5669F5A4AD19EF2CB42A5602080CB0A6 __s56;
//   $E5FC128E66C26C95254032BA69D36E74 __s57;
//   $886F8AE9D7C8B1B861B6CA58D67B682A __s58;
//   $CDA73A427DD2A30CDA26CA3394C33CF0 __s59;
//   $2516E53E690D8CC5659AAB7EDC49E664 __s60;
//   $BF8CC88CDF129BD6E4FA4ABA13F521AD __s61;
//   $2CABE618CF1C2625A4479554E4967E0A __s62;
//   $AAA92DA1D6E1B0E8462F69216B62027C __s63;
//   $8010B05A290F320BFA69624B446FD61E __s64;
//   $F7167AE7A8ABA03C094C204FB1564A28 __s65;
//   $501BA0883F043D53900B8F2D0E150E42 __s66;
//   $6857AE69DB7C952EEFD665431A7B503A __s67;
//   $BE56ADCB97A5F80C4E840DC3FCEE04D4 __s68;
//   $166FD67DEEA4501EBE22F137A4F332DC __s69;
//   $33B41755AB628A1E54A56301AE7CDB4D __s70;
//   $305DFF78492FB87930EE2C724277FEB5 __s71;
//   $F38EF092E1FA7A2A58F31981D66C2224 __s72;
// };

// /* 2158 */
// struct tagPROPVARIANT
// {
//   $17316F2C9E3D72AC5BB7DDDC80CAFA0E ___u0;
// };

// /* 2197 */
// struct AuthData
// {
//   const unsigned __int8 *data;
//   int length;
// };

// /* 2198 */
// struct __cppobj I64vec2 : M128
// {
// };

// /* 2199 */
// struct __cppobj bdCounter
// {
//   bdRemoteTaskManager *m_remoteTaskManager;
// };

// /* 2200 */
// struct __cppobj bdCounterValue : bdTaskResult
// {
//   unsigned int m_counterID;
//   __int64 m_counterValue;
// };

// /* 2201 */
// struct /*VFT*/ bdCounterValue_vtbl
// {
//   void (__thiscall *~bdTaskResult)(bdTaskResult *this);
//   bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
//   void (__thiscall *serialize)(bdCounterValue *this, bdByteBuffer *);
// };

// /* 2202 */
// struct __unaligned __declspec(align(1)) $_s__RTTIBaseClassArray$_extraBytes_8
// {
//   const _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[2];
//   _BYTE gap8;
// };

// /* 2203 */
// struct bdStringData
// {
//   unsigned int m_referenceCount;
//   unsigned int m_length;
//   unsigned int m_capacity;
// };

// /* 2204 */
// struct cgs_t
// {
//   int viewX;
//   int viewY;
//   int viewWidth;
//   int viewHeight;
//   float viewAspect;
//   int serverCommandSequence;
//   int processedSnapshotNum;
//   int localServer;
//   char gametype[32];
//   char szHostName[256];
//   int maxclients;
//   char mapname[64];
//   int gameEndTime;
//   int voteTime;
//   int voteYes;
//   int voteNo;
//   char voteString[256];
//   XModel *gameModels[512];
//   const FxEffectDef *fxs[196];
//   const FxEffectDef *grenadeFx[27];
//   const FxEffectDef *playerFireFx[3];
//   shellshock_parms_t holdBreathParams;
//   char teamChatMsgs[8][241];
//   int teamChatMsgTimes[8];
//   int teamChatPos;
//   int teamLastChatPos;
//   float compassWidth;
//   float compassHeight;
//   float compassY;
//   __declspec(align(8)) _BYTE corpseinfo[5888];
//   actorInfo_t actorCorpseInfo[8];
//   bool entUpdateToggleContextKey;
// };

// /* 2205 */
// struct __cppobj I64vec1 : M64
// {
// };

 /* 2206 */
struct flameTable
{
  float flameVar_streamChunkGravityStart;
  float flameVar_streamChunkGravityEnd;
  float flameVar_streamChunkMaxSize;
  float flameVar_streamChunkStartSize;
  float flameVar_streamChunkEndSize;
  float flameVar_streamChunkStartSizeRand;
  float flameVar_streamChunkEndSizeRand;
  float flameVar_streamChunkDistScalar;
  float flameVar_streamChunkDistSwayScale;
  float flameVar_streamChunkDistSwayVelMax;
  float flameVar_streamChunkSpeed;
  float flameVar_streamChunkDecel;
  float flameVar_streamChunkVelocityAddScale;
  float flameVar_streamChunkDuration;
  float flameVar_streamChunkDurationScaleMaxVel;
  float flameVar_streamChunkDurationVelScalar;
  float flameVar_streamChunkSizeSpeedScale;
  float flameVar_streamChunkSizeAgeScale;
  float flameVar_streamChunkSpawnFireIntervalStart;
  float flameVar_streamChunkSpawnFireIntervalEnd;
  float flameVar_streamChunkSpawnFireMinLifeFrac;
  float flameVar_streamChunkSpawnFireMaxLifeFrac;
  float flameVar_streamChunkFireMinLifeFrac;
  float flameVar_streamChunkFireMinLifeFracStart;
  float flameVar_streamChunkFireMinLifeFracEnd;
  float flameVar_streamChunkDripsMinLifeFrac;
  float flameVar_streamChunkDripsMinLifeFracStart;
  float flameVar_streamChunkDripsMinLifeFracEnd;
  float flameVar_streamChunkRotationRange;
  float flameVar_streamSizeRandSinWave;
  float flameVar_streamSizeRandCosWave;
  float flameVar_streamDripsChunkInterval;
  float flameVar_streamDripsChunkMinFrac;
  float flameVar_streamDripsChunkRandFrac;
  float flameVar_streamSmokeChunkInterval;
  float flameVar_streamSmokeChunkMinFrac;
  float flameVar_streamSmokeChunkRandFrac;
  float flameVar_streamChunkCullDistSizeFrac;
  float flameVar_streamChunkCullMinLife;
  float flameVar_streamChunkCullMaxLife;
  float flameVar_streamFuelSizeStart;
  float flameVar_streamFuelSizeEnd;
  float flameVar_streamFuelLength;
  float flameVar_streamFuelNumSegments;
  float flameVar_streamFuelAnimLoopTime;
  float flameVar_streamFlameSizeStart;
  float flameVar_streamFlameSizeEnd;
  float flameVar_streamFlameLength;
  float flameVar_streamFlameNumSegments;
  float flameVar_streamFlameAnimLoopTime;
  float flameVar_streamPrimaryLightRadius;
  float flameVar_streamPrimaryLightRadiusFlutter;
  float flameVar_streamPrimaryLightR;
  float flameVar_streamPrimaryLightG;
  float flameVar_streamPrimaryLightB;
  float flameVar_streamPrimaryLightFlutterR;
  float flameVar_streamPrimaryLightFlutterG;
  float flameVar_streamPrimaryLightFlutterB;
  float flameVar_fireLife;
  float flameVar_fireLifeRand;
  float flameVar_fireSpeedScale;
  float flameVar_fireSpeedScaleRand;
  float flameVar_fireVelocityAddZ;
  float flameVar_fireVelocityAddZRand;
  float flameVar_fireVelocityAddSideways;
  float flameVar_fireGravity;
  float flameVar_fireGravityEnd;
  float flameVar_fireMaxRotVel;
  float flameVar_fireFriction;
  float flameVar_fireEndSizeAdd;
  float flameVar_fireStartSizeScale;
  float flameVar_fireEndSizeScale;
  float flameVar_dripsLife;
  float flameVar_dripsLifeRand;
  float flameVar_dripsSpeedScale;
  float flameVar_dripsSpeedScaleRand;
  float flameVar_dripsVelocityAddZ;
  float flameVar_dripsVelocityAddZRand;
  float flameVar_dripsVelocityAddSideways;
  float flameVar_dripsGravity;
  float flameVar_dripsGravityEnd;
  float flameVar_dripsMaxRotVel;
  float flameVar_dripsFriction;
  float flameVar_dripsEndSizeAdd;
  float flameVar_dripsStartSizeScale;
  float flameVar_dripsEndSizeScale;
  float flameVar_smokeLife;
  float flameVar_smokeLifeRand;
  float flameVar_smokeSpeedScale;
  float flameVar_smokeVelocityAddZ;
  float flameVar_smokeGravity;
  float flameVar_smokeGravityEnd;
  float flameVar_smokeMaxRotation;
  float flameVar_smokeMaxRotVel;
  float flameVar_smokeFriction;
  float flameVar_smokeEndSizeAdd;
  float flameVar_smokeStartSizeAdd;
  float flameVar_smokeOriginSizeOfsZScale;
  float flameVar_smokeOriginOfsZ;
  float flameVar_smokeFadein;
  float flameVar_smokeFadeout;
  float flameVar_smokeMaxAlpha;
  float flameVar_smokeBrightness;
  float flameVar_smokeOriginOffset;
  float flameVar_collisionSpeedScale;
  float flameVar_collisionVolumeScale;
  const char* name;
  Material* fire;
  Material* smoke;
  Material* heat;
  Material* drips;
  Material* streamFuel;
  Material* streamFuel2;
  Material* streamFlame;
  Material* streamFlame2;
  const char* flameOffLoopSound;
  const char* flameIgniteSound;
  const char* flameOnLoopSound;
  const char* flameCooldownSound;
};

static_assert(sizeof(flameTable) == 0x1DC, "The size is not correct");

/* 2207 */
struct cStaticModelWritable
{
  unsigned __int16 nextModelInWorldSector;
};

static_assert(sizeof(cStaticModelWritable) == 0x2, "The size is not correct");

/* 2208 */
struct cStaticModel_s
{
  cStaticModelWritable writable;
  XModel* xmodel;
  float origin[3];
  float invScaledAxis[3][3];
  float absmin[3];
  float absmax[3];
};

static_assert(sizeof(cStaticModel_s) == 0x50, "The size is not correct");

// /* 2209 */
// struct __cppobj trace_t
// {
//   hybrid_vector normal;
//   float fraction;
//   int sflags;
//   int cflags;
//   TraceHitType hitType;
//   unsigned __int16 hitId;
//   unsigned __int16 modelIndex;
//   unsigned __int16 partName;
//   unsigned __int16 boneIndex;
//   unsigned __int16 partGroup;
//   bool allsolid;
//   bool startsolid;
//   bool walkable;
//   cStaticModel_s *staticModel;
//   int hitPartition;
// };

// /* 2210 */
// struct __cppobj bdFileMetaData : bdTaskResult
// {
//   unsigned __int64 m_fileID;
//   unsigned int m_createTime;
//   unsigned int m_modifedTime;
//   unsigned int m_fileSize;
//   unsigned __int64 m_ownerID;
//   char m_ownerName[64];
//   unsigned __int16 m_fileSlot;
//   char m_fileName[128];
//   char m_url[384];
//   unsigned __int16 m_category;
//   unsigned int m_numTags;
//   unsigned __int8 m_metaData[512];
//   unsigned int m_metaDataSize;
//   unsigned int m_summaryFileSize;
//   bdTag m_tags[40];
// };

// /* 2211 */
// struct /*VFT*/ bdFileMetaData_vtbl
// {
//   void (__thiscall *~bdTaskResult)(bdTaskResult *this);
//   bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
// };

// /* 2212 */
// struct __cppobj bdMatchMaking
// {
//   bdRemoteTaskManager *m_remoteTaskManager;
// };

// /* 2213 */
// struct __cppobj bdMatchMakingInfo : bdTaskResult
// {
//   bdSecurityID m_sessionID;
//   unsigned __int8 m_hostAddr[255];
//   unsigned int m_hostAddrSize;
//   unsigned int m_gameType;
//   unsigned int m_maxPlayers;
//   unsigned int m_numPlayers;
// };

// /* 2214 */
// struct /*VFT*/ bdMatchMakingInfo_vtbl
// {
//   void (__thiscall *~bdTaskResult)(bdTaskResult *this);
//   bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
//   void (__thiscall *serialize)(bdMatchMakingInfo *this, bdByteBuffer *);
// };

// /* 2215 */
// struct __cppobj bdSessionParams
// {
//   bdSessionParams_vtbl *__vftable /*VFT*/;
// };

// /* 2216 */
// struct /*VFT*/ bdSessionParams_vtbl
// {
//   void (__thiscall *~bdSessionParams)(bdSessionParams *this);
//   void (__thiscall *serialize)(bdSessionParams *this, bdByteBuffer *);
//   unsigned int (__thiscall *sizeOf)(bdSessionParams *this);
// };

// /* 2217 */
// struct __cppobj bdPagingToken : bdTaskResultProcessor
// {
//   bdPagingToken::bdStatus m_status;
//   bdSecurityID m_sessionID;
//   unsigned int m_numResultsPerPage;
// };

// /* 2218 */
// struct /*VFT*/ bdPagingToken_vtbl
// {
//   void (__thiscall *~bdTaskResultProcessor)(bdTaskResultProcessor *this);
//   bool (__thiscall *processResult)(bdTaskResultProcessor *this, bdTaskResult *, unsigned int);
// };

// /* 2219 */
// struct __cppobj bdPerformanceValue : bdTaskResult
// {
//   unsigned __int64 m_entityID;
//   __int64 m_performanceValue;
// };

// /* 2220 */
// struct /*VFT*/ bdPerformanceValue_vtbl
// {
//   void (__thiscall *~bdTaskResult)(bdTaskResult *this);
//   bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
//   void (__thiscall *serialize)(bdPerformanceValue *this, bdByteBuffer *);
// };

// /* 2221 */
// struct __cppobj bdMutex
// {
//   void *m_handle;
// };

// /* 2222 */
// struct __unaligned __declspec(align(1)) $_s__RTTIBaseClassArray$_extraBytes_4
// {
//   const _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[1];
//   _BYTE gap4;
// };

// /* 2223 */
// struct __m128d
// {
//   long double m128d_f64[2];
// };

// /* 2224 */
// struct __cppobj F64vec2
// {
//   __m128d vec;
// };

// /* 2225 */
// struct __cppobj bdSemaphore
// {
//   void *m_handle;
// };

// /* 2226 */
// struct __cppobj Smp_CriticalSectionBlock
// {
//   CriticalSection mCS;
// };

// /* 2227 */
// struct __cppobj tlAtomicMutex
// {
//   unsigned __int64 ThreadId;
//   int LockCount;
//   tlAtomicMutex *ThisPtr;
// };

// /* 2228 */
// struct __cppobj tlAtomicMutexLocker
// {
//   tlAtomicMutex *Mutex;
// };

// /* 2229 */
// struct ViewModelHand
// {
//   int iPrevAnim;
//   int iHandAnimIndex;
// };

// /* 2230 */
// struct ViewModelInfo
// {
//   DObj *viewModelDObj;
//   int hasAnimTree;
//   XAnimTree_s *tree;
//   XAnim_s *anims;
//   unsigned int partBits[5];
//   ViewModelHand hand[2];
// };

// /* 2231 */
// struct __cppobj SmpSpServer_CriticalSectionBlock
// {
//   CriticalSection mCS;
// };

// /* 2232 */
// struct __cppobj bdProfiles
// {
//   bdRemoteTaskManager *m_remoteTaskManager;
// };

// /* 2233 */
// struct __cppobj bdMessaging
// {
//   bdRemoteTaskManager *m_remoteTaskManager;
// };

// /* 2234 */
// struct __cppobj bdStats
// {
//   bdRemoteTaskManager *m_remoteTaskManager;
// };

// /* 2235 */
// struct __cppobj bdFriends
// {
//   bdRemoteTaskManager *m_remoteTaskManager;
// };

// /* 2236 */
// struct __cppobj bdStorage
// {
//   bdRemoteTaskManager *m_remoteTaskManager;
// };

// /* 2237 */
// struct __cppobj bdKeyArchive
// {
//   bdRemoteTaskManager *m_remoteTaskManager;
// };

// /* 2238 */
// struct __cppobj bdGroup
// {
//   bdRemoteTaskManager *m_remoteTaskManager;
// };

// /* 2245 */
// struct __cppobj bdSummaryMetaHandler : bdFileMetaData
// {
// };

// /* 2247 */
// struct __cppobj bdHTTPWrapperBase : bdRunnable
// {
//   bool m_threadExiting;
//   bdMutex m_threadMutex;
//   bdSemaphore *m_httpSema;
//   bdThread *m_thread;
//   bdHTTPWrapperBase::bdStatus m_status;
//   bdHTTPWrapperBase::bdOperation m_operation;
// };

// /* 2249 */
// struct bdHTTPBuffer
// {
//   void *m_contentReceiveBuffer;
//   unsigned int m_contentReceiveBufferSize;
//   const void *m_contentSendBuffer;
//   unsigned int m_contentSendBufferSize;
//   char m_httpCommonBuffer[1024];
//   unsigned int m_httpCommonBufferSize;
//   char m_responseStatusBuffer[128];
//   unsigned int m_responseStatusBufferSize;
// };

// /* 2250 */
// struct __cppobj __declspec(align(8)) bdHTTPClient
// {
//   char m_serverName[128];
//   unsigned __int16 m_port;
//   bdDownloadInterceptor *m_downloadHandler;
//   bdUploadInterceptor *m_uploadHandler;
//   bdHTTPClient::BD_HTTP_OPERATION m_operation;
//   bdHTTPClient::BD_HTTP_STATUS m_status;
//   bdHTTPBuffer m_buffer;
//   bool m_chunked;
//   bool m_verboseOutput;
//   bool m_progressMeter;
//   unsigned int m_httpResponseCode;
//   unsigned __int64 m_expectedContentSize;
//   __int64 m_socketErrorCode;
//   float m_dataRate;
//   unsigned __int64 m_bytesTransfered;
//   bool m_abort;
// };

// /* 2251 */
// struct __cppobj bdHTTPWrapper : bdHTTPWrapperBase
// {
//   bdHTTPClient m_httpClient;
// };

// /* 2253 */
// struct __cppobj bdHashMD5 : bdHash
// {
// };

// /* 2239 */
// struct __cppobj bdContentStreamingBase
// {
//   bdContentStreamingBase_vtbl *__vftable /*VFT*/;
//   __declspec(align(8)) unsigned int m_operation;
//   bdContentStreamingBase::bdStatus m_state;
//   bdUploadInterceptor *m_uploadHandler;
//   bdFileMetaData m_taskData;
//   const void *m_uploadData;
//   bdFileID *m_uploadFileID;
//   bdURL m_URLs[3];
//   const void *m_thumbData;
//   unsigned int m_thumbDataSize;
//   unsigned __int16 m_httpSite;
//   bool m_sendChecksum;
//   unsigned __int8 m_checksum[33];
//   bdDownloadInterceptor *m_downloadHandler;
//   bdFileMetaData *m_downloadMetaData;
//   void *m_downloadData;
//   unsigned int m_downloadDataSize;
//   unsigned int m_startByte;
//   unsigned int m_endByte;
//   bdPreCopyResult m_preCopyResults[3];
//   bool m_uploadSummary;
//   bdSummaryMetaHandler m_summaryMeta;
//   bdReference<bdRemoteTask> m_overallTask;
//   bdReference<bdRemoteTask> m_remoteTask;
//   bdHTTPWrapper m_http;
//   bdHashMD5 m_md5Hash;
//   const bdURL *m_testURLs;
//   unsigned int m_testAddressCount;
//   bool m_useTestAddresses;
//   bool m_finalizeOnComplete;
//   bdRemoteTaskManager *m_remoteTaskManager;
// };

// /* 2240 */
// struct /*VFT*/ bdContentStreamingBase_vtbl
// {
//   void (__thiscall *~bdContentStreamingBase)(bdContentStreamingBase *this);
//   bdReference<bdRemoteTask> *(__thiscall *_postUploadFile)(bdContentStreamingBase *this, bdReference<bdRemoteTask> *result);
//   bdReference<bdRemoteTask> *(__thiscall *_postUploadSummary)(bdContentStreamingBase *this, bdReference<bdRemoteTask> *result);
//   bdReference<bdRemoteTask> *(__thiscall *_postCopy)(bdContentStreamingBase *this, bdReference<bdRemoteTask> *result);
//   unsigned int (__thiscall *getMaxMetaDataSize)(bdContentStreamingBase *this);
// };

// /* 2241 */
// struct __cppobj bdUploadInterceptor
// {
//   bdUploadInterceptor_vtbl *__vftable /*VFT*/;
// };

// /* 2243 */
// struct __cppobj bdFileID : bdTaskResult
// {
//   unsigned __int64 m_fileID;
// };

// /* 2242 */
// struct /*VFT*/ bdUploadInterceptor_vtbl
// {
//   void (__thiscall *~bdUploadInterceptor)(bdUploadInterceptor *this);
//   unsigned int (__thiscall *handleUpload)(bdUploadInterceptor *this, void *, unsigned int, unsigned int);
// };

// /* 2244 */
// struct /*VFT*/ bdFileID_vtbl
// {
//   void (__thiscall *~bdTaskResult)(bdTaskResult *this);
//   bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
//   void (__thiscall *serialize)(bdFileID *this, bdByteBuffer *);
// };

// /* 2246 */
// struct /*VFT*/ bdSummaryMetaHandler_vtbl
// {
//   void (__thiscall *~bdTaskResult)(bdTaskResult *this);
//   bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
// };

// /* 2248 */
// struct /*VFT*/ bdHTTPWrapperBase_vtbl
// {
//   void (__thiscall *~bdRunnable)(bdRunnable *this);
//   unsigned int (__thiscall *run)(bdRunnable *this, void *);
//   void (__thiscall *stop)(bdRunnable *this);
// };

// /* 2252 */
// struct /*VFT*/ bdHTTPWrapper_vtbl
// {
//   void (__thiscall *~bdRunnable)(bdRunnable *this);
//   unsigned int (__thiscall *run)(bdRunnable *this, void *);
//   void (__thiscall *stop)(bdRunnable *this);
// };

// /* 2254 */
// struct /*VFT*/ bdHashMD5_vtbl
// {
//   void (__thiscall *~bdHash)(bdHash *this);
//   bool (__thiscall *hash)(bdHash *this, const unsigned __int8 *, const unsigned int, unsigned __int8 *, unsigned int *);
// };

// /* 2255 */
// struct __cppobj bdContentStreaming : bdContentStreamingBase
// {
// };

// /* 2256 */
// struct /*VFT*/ bdContentStreaming_vtbl
// {
//   void (__thiscall *~bdContentStreamingBase)(bdContentStreamingBase *this);
//   bdReference<bdRemoteTask> *(__thiscall *_postUploadFile)(bdContentStreamingBase *this, bdReference<bdRemoteTask> *result);
//   bdReference<bdRemoteTask> *(__thiscall *_postUploadSummary)(bdContentStreamingBase *this, bdReference<bdRemoteTask> *result);
//   bdReference<bdRemoteTask> *(__thiscall *_postCopy)(bdContentStreamingBase *this, bdReference<bdRemoteTask> *result);
//   unsigned int (__thiscall *getMaxMetaDataSize)(bdContentStreamingBase *this);
// };

// /* 2257 */
// struct __cppobj bdPooledStorage : bdContentStreamingBase
// {
// };

// /* 2258 */
// struct /*VFT*/ bdPooledStorage_vtbl
// {
//   void (__thiscall *~bdContentStreamingBase)(bdContentStreamingBase *this);
//   bdReference<bdRemoteTask> *(__thiscall *_postUploadFile)(bdContentStreamingBase *this, bdReference<bdRemoteTask> *result);
//   bdReference<bdRemoteTask> *(__thiscall *_postUploadSummary)(bdContentStreamingBase *this, bdReference<bdRemoteTask> *result);
//   bdReference<bdRemoteTask> *(__thiscall *_postCopy)(bdContentStreamingBase *this, bdReference<bdRemoteTask> *result);
//   unsigned int (__thiscall *getMaxMetaDataSize)(bdContentStreamingBase *this);
// };

// /* 2259 */
// struct __cppobj bdTags
// {
//   bdRemoteTaskManager *m_remoteTaskManager;
// };

// /* 2260 */
// struct __cppobj bdDML
// {
//   bdRemoteTaskManager *m_remoteTaskManager;
// };

// /* 2261 */
// struct __cppobj bdLobbyEventHandler
// {
//   bdLobbyEventHandler_vtbl *__vftable /*VFT*/;
// };

// /* 2262 */
// struct /*VFT*/ bdLobbyEventHandler_vtbl
// {
//   void (__thiscall *~bdLobbyEventHandler)(bdLobbyEventHandler *this);
//   void (__thiscall *onPlayerStatusUpdate)(bdLobbyEventHandler *this, unsigned __int64, char *, unsigned __int8);
//   void (__thiscall *onTeamMemberStatusUpdate)(bdLobbyEventHandler *this, unsigned __int64, char *, unsigned __int64, char *, unsigned __int8);
//   void (__thiscall *onRichPresenceUpdate)(bdLobbyEventHandler *this, unsigned __int64, char *, void *, unsigned int, unsigned __int64);
//   void (__thiscall *onChatChannelUpdate)(bdLobbyEventHandler *this, unsigned __int64, unsigned __int64, char *, unsigned __int8);
//   void (__thiscall *onChatChannelMessage)(bdLobbyEventHandler *this, unsigned __int64, unsigned __int64, char *, void *, unsigned int);
//   void (__thiscall *onInstantMessage)(bdLobbyEventHandler *this, unsigned __int64, char *, void *, unsigned int, unsigned __int64);
//   void (__thiscall *onSessionInvite)(bdLobbyEventHandler *this, bdSessionInvite *);
//   void (__thiscall *onNotifyLeave)(bdLobbyEventHandler *this, unsigned __int64, bdSessionID);
//   void (__thiscall *onFriendshipProposal)(bdLobbyEventHandler *this);
//   void (__thiscall *onTeamProposal)(bdLobbyEventHandler *this);
//   void (__thiscall *onNewNotification)(bdLobbyEventHandler *this);
//   void (__thiscall *onNewMail)(bdLobbyEventHandler *this);
//   void (__thiscall *onMultipleLogon)(bdLobbyEventHandler *this, unsigned __int64);
//   void (__thiscall *onChallengesReceived)(bdLobbyEventHandler *this, bdReference<bdAntiCheatChallenges>);
//   void (__thiscall *onPlayerBanned)(bdLobbyEventHandler *this, unsigned __int64);
//   void (__thiscall *onGlobalInstantMessage)(bdLobbyEventHandler *this, unsigned __int64, char *, void *, unsigned int);
// };

// /* 2263 */
// struct __cppobj bdLobbyService : bdLobbyConnectionListener
// {
//   bdRemoteTaskManager *m_taskManager;
//   bdProfiles *m_profiles;
//   bdMessaging *m_messaging;
//   bdMatchMaking *m_matchMaking;
//   bdStats *m_statsManager;
//   bdFriends *m_friendsManager;
//   struct bdTeams *m_teamsManager;
//   bdStorage *m_storageManager;
//   struct bdContentUnlock *m_contentUnlockManager;
//   bdTitleUtilities *m_titleUtilitiesManager;
//   bdKeyArchive *m_keyArchive;
//   bdCounter *m_counter;
//   bdGroup *m_group;
//   bdContentStreaming *m_contentStreamingManager;
//   bdPooledStorage *m_pooledStorageManager;
//   bdTags *m_tags;
//   bdVoteRank *m_voteRankManager;
//   struct bdTwitter *m_twitter;
//   struct bdFacebook *m_facebook;
//   struct bdLinkCode *m_linkCode;
//   bdAntiCheat *m_antiCheat;
//   bdDML *m_DML;
//   struct bdCRUX *m_crux;
//   struct bdActivityTracker *m_activityTracker;
//   unsigned int m_titleID;
//   bdLobbyEventHandler *m_eventHandler;
//   bdReference<bdLobbyConnection> m_lobbyConnection;
//   bdAuthInfo m_authInfo;
//   bool m_encryptedConnection;
//   unsigned int m_errorCode;
// };

// /* 6917 */
// struct bdContentUnlock;

// /* 6927 */
// struct bdFacebook;

// /* 2264 */
// struct /*VFT*/ bdLobbyService_vtbl
// {
//   void (__thiscall *~bdLobbyConnectionListener)(bdLobbyConnectionListener *this);
//   void (__thiscall *onConnect)(bdLobbyConnectionListener *this, bdReference<bdLobbyConnection>);
//   void (__thiscall *onConnectFailed)(bdLobbyConnectionListener *this, bdReference<bdLobbyConnection>);
//   void (__thiscall *onDisconnect)(bdLobbyConnectionListener *this, bdReference<bdLobbyConnection>);
// };

// /* 2265 */
// struct outPacket_t
// {
//   int p_cmdNumber;
//   int p_serverTime;
//   int p_realtime;
// };

// /* 2266 */
// struct __cppobj SmpScriptString_CriticalSectionBlock
// {
//   CriticalSection mCS;
// };

 /* 2267 */
struct WeaponDef
{
  const char* szOverlayName;
  XModel** gunXModel;
  XModel* handXModel;
  const char* szModeName;
  unsigned __int16* notetrackSoundMapKeys;
  unsigned __int16* notetrackSoundMapValues;
  int playerAnimType;
  weapType_t weapType;
  weapClass_t weapClass;
  PenetrateType penetrateType;
  ImpactType impactType;
  weapInventoryType_t inventoryType;
  weapFireType_t fireType;
  weapClipType_t clipType;
  int itemIndex;
  const char* parentWeaponName;
  int iJamFireTime;
  int tracerFrequency;
  float tracerWidth;
  float tracerLength;
  int overheatWeapon;
  float overheatRate;
  float cooldownRate;
  float overheatEndVal;
  bool coolWhileFiring;
  bool fuelTankWeapon;
  int iTankLifeTime;
  OffhandClass offhandClass;
  OffhandSlot offhandSlot;
  weapStance_t stance;
  const FxEffectDef* viewFlashEffect;
  const FxEffectDef* worldFlashEffect;
  const char* pickupSound;
  const char* pickupSoundPlayer;
  const char* ammoPickupSound;
  const char* ammoPickupSoundPlayer;
  const char* projectileSound;
  const char* pullbackSound;
  const char* pullbackSoundPlayer;
  const char* fireSound;
  const char* fireSoundPlayer;
  const char* fireLoopSound;
  const char* fireLoopSoundPlayer;
  const char* fireLoopEndSound;
  const char* fireLoopEndSoundPlayer;
  const char* fireStopSound;
  const char* fireStopSoundPlayer;
  const char* fireLastSound;
  const char* fireLastSoundPlayer;
  const char* emptyFireSound;
  const char* emptyFireSoundPlayer;
  const char* crackSound;
  const char* whizbySound;
  const char* meleeSwipeSound;
  const char* meleeSwipeSoundPlayer;
  const char* meleeHitSound;
  const char* meleeMissSound;
  const char* rechamberSound;
  const char* rechamberSoundPlayer;
  const char* reloadSound;
  const char* reloadSoundPlayer;
  const char* reloadEmptySound;
  const char* reloadEmptySoundPlayer;
  const char* reloadStartSound;
  const char* reloadStartSoundPlayer;
  const char* reloadEndSound;
  const char* reloadEndSoundPlayer;
  const char* rotateLoopSound;
  const char* rotateLoopSoundPlayer;
  const char* deploySound;
  const char* deploySoundPlayer;
  const char* finishDeploySound;
  const char* finishDeploySoundPlayer;
  const char* breakdownSound;
  const char* breakdownSoundPlayer;
  const char* finishBreakdownSound;
  const char* finishBreakdownSoundPlayer;
  const char* detonateSound;
  const char* detonateSoundPlayer;
  const char* nightVisionWearSound;
  const char* nightVisionWearSoundPlayer;
  const char* nightVisionRemoveSound;
  const char* nightVisionRemoveSoundPlayer;
  const char* altSwitchSound;
  const char* altSwitchSoundPlayer;
  const char* raiseSound;
  const char* raiseSoundPlayer;
  const char* firstRaiseSound;
  const char* firstRaiseSoundPlayer;
  const char* putawaySound;
  const char* putawaySoundPlayer;
  const char* overheatSound;
  const char* overheatSoundPlayer;
  const char* adsZoomSound;
  const char** bounceSound;
  const char* standMountedWeapdef;
  const char* crouchMountedWeapdef;
  const char* proneMountedWeapdef;
  int standMountedIndex;
  int crouchMountedIndex;
  int proneMountedIndex;
  const FxEffectDef* viewShellEjectEffect;
  const FxEffectDef* worldShellEjectEffect;
  const FxEffectDef* viewLastShotEjectEffect;
  const FxEffectDef* worldLastShotEjectEffect;
  Material* reticleCenter;
  Material* reticleSide;
  int iReticleCenterSize;
  int iReticleSideSize;
  int iReticleMinOfs;
  activeReticleType_t activeReticleType;
  float vStandMove[3];
  float vStandRot[3];
  float vDuckedOfs[3];
  float vDuckedMove[3];
  float vDuckedSprintOfs[3];
  float vDuckedSprintRot[3];
  float vDuckedSprintBob[2];
  float fDuckedSprintCycleScale;
  float vSprintOfs[3];
  float vSprintRot[3];
  float vSprintBob[2];
  float fSprintCycleScale;
  float vLowReadyOfs[3];
  float vLowReadyRot[3];
  float vDtpOfs[3];
  float vDtpRot[3];
  float vDtpBob[2];
  float fDtpCycleScale;
  float vMantleOfs[3];
  float vMantleRot[3];
  float vSlideOfs[3];
  float vSlideRot[3];
  float vDuckedRot[3];
  float vProneOfs[3];
  float vProneMove[3];
  float vProneRot[3];
  float vStrafeMove[3];
  float vStrafeRot[3];
  float fPosMoveRate;
  float fPosProneMoveRate;
  float fStandMoveMinSpeed;
  float fDuckedMoveMinSpeed;
  float fProneMoveMinSpeed;
  float fPosRotRate;
  float fPosProneRotRate;
  float fStandRotMinSpeed;
  float fDuckedRotMinSpeed;
  float fProneRotMinSpeed;
  XModel** worldModel;
  XModel* worldClipModel;
  XModel* rocketModel;
  XModel* mountedModel;
  XModel* additionalMeleeModel;
  Material* hudIcon;
  weaponIconRatioType_t hudIconRatio;
  Material* indicatorIcon;
  weaponIconRatioType_t indicatorIconRatio;
  Material* ammoCounterIcon;
  weaponIconRatioType_t ammoCounterIconRatio;
  ammoCounterClipType_t ammoCounterClip;
  int iStartAmmo;
  int iHeatIndex;
  int iMaxAmmo;
  int shotCount;
  const char* szSharedAmmoCapName;
  int iSharedAmmoCapIndex;
  int iSharedAmmoCap;
  bool unlimitedAmmo;
  bool ammoCountClipRelative;
  int damage;
  float damageDuration;
  float damageInterval;
  int playerDamage;
  int iMeleeDamage;
  int iDamageType;
  unsigned __int16 explosionTag;
  int iFireDelay;
  int iMeleeDelay;
  int meleeChargeDelay;
  int iDetonateDelay;
  int iSpinUpTime;
  int iSpinDownTime;
  float spinRate;
  const char* spinLoopSound;
  const char* spinLoopSoundPlayer;
  const char* startSpinSound;
  const char* startSpinSoundPlayer;
  const char* stopSpinSound;
  const char* stopSpinSoundPlayer;
  int iFireTime;
  int iLastFireTime;
  int iRechamberTime;
  int iRechamberBoltTime;
  int iHoldFireTime;
  int iDetonateTime;
  int iMeleeTime;
  int meleeChargeTime;
  int iReloadTimeRight;
  int iReloadTimeLeft;
  int reloadShowRocketTime;
  int iReloadEmptyTimeLeft;
  int iReloadAddTime;
  int iReloadEmptyAddTime;
  int iReloadQuickAddTime;
  int iReloadQuickEmptyAddTime;
  int iReloadStartTime;
  int iReloadStartAddTime;
  int iReloadEndTime;
  int iDropTime;
  int iRaiseTime;
  int iAltDropTime;
  int quickDropTime;
  int quickRaiseTime;
  int iFirstRaiseTime;
  int iEmptyRaiseTime;
  int iEmptyDropTime;
  int sprintInTime;
  int sprintLoopTime;
  int sprintOutTime;
  int lowReadyInTime;
  int lowReadyLoopTime;
  int lowReadyOutTime;
  int contFireInTime;
  int contFireLoopTime;
  int contFireOutTime;
  int dtpInTime;
  int dtpLoopTime;
  int dtpOutTime;
  int slideInTime;
  int deployTime;
  int breakdownTime;
  int nightVisionWearTime;
  int nightVisionWearTimeFadeOutEnd;
  int nightVisionWearTimePowerUp;
  int nightVisionRemoveTime;
  int nightVisionRemoveTimePowerDown;
  int nightVisionRemoveTimeFadeInStart;
  int fuseTime;
  int aiFuseTime;
  int lockOnRadius;
  int lockOnSpeed;
  bool requireLockonToFire;
  bool noAdsWhenMagEmpty;
  bool avoidDropCleanup;
  unsigned int stackFire;
  float stackFireSpread;
  float stackFireAccuracyDecay;
  const char* stackSound;
  float autoAimRange;
  float aimAssistRange;
  bool mountableWeapon;
  float aimPadding;
  float enemyCrosshairRange;
  bool crosshairColorChange;
  float moveSpeedScale;
  float adsMoveSpeedScale;
  float sprintDurationScale;
  weapOverlayReticle_t overlayReticle;
  WeapOverlayInteface_t overlayInterface;
  float overlayWidth;
  float overlayHeight;
  float fAdsBobFactor;
  float fAdsViewBobMult;
  float fHipSpreadStandMin;
  float fHipSpreadDuckedMin;
  float fHipSpreadProneMin;
  float hipSpreadStandMax;
  float hipSpreadDuckedMax;
  float hipSpreadProneMax;
  float fHipSpreadDecayRate;
  float fHipSpreadFireAdd;
  float fHipSpreadTurnAdd;
  float fHipSpreadMoveAdd;
  float fHipSpreadDuckedDecay;
  float fHipSpreadProneDecay;
  float fHipReticleSidePos;
  float fAdsIdleAmount;
  float fHipIdleAmount;
  float adsIdleSpeed;
  float hipIdleSpeed;
  float fIdleCrouchFactor;
  float fIdleProneFactor;
  float fGunMaxPitch;
  float fGunMaxYaw;
  float swayMaxAngle;
  float swayLerpSpeed;
  float swayPitchScale;
  float swayYawScale;
  float swayHorizScale;
  float swayVertScale;
  float swayShellShockScale;
  float adsSwayMaxAngle;
  float adsSwayLerpSpeed;
  float adsSwayPitchScale;
  float adsSwayYawScale;
  bool sharedAmmo;
  bool bRifleBullet;
  bool armorPiercing;
  bool bBoltAction;
  bool bUseAltTagFlash;
  bool bUseAntiLagRewind;
  bool bIsCarriedKillstreakWeapon;
  bool aimDownSight;
  bool bRechamberWhileAds;
  bool bReloadWhileAds;
  float adsViewErrorMin;
  float adsViewErrorMax;
  bool bCookOffHold;
  bool bClipOnly;
  bool bCanUseInVehicle;
  bool bNoDropsOrRaises;
  bool adsFireOnly;
  bool cancelAutoHolsterWhenEmpty;
  bool suppressAmmoReserveDisplay;
  bool laserSightDuringNightvision;
  bool bHideThirdPerson;
  bool bHasBayonet;
  bool bDualWield;
  bool bExplodeOnGround;
  bool bThrowBack;
  bool bRetrievable;
  bool bDieOnRespawn;
  bool bNoThirdPersonDropsOrRaises;
  bool bContinuousFire;
  bool bNoPing;
  bool bForceBounce;
  bool bUseDroppedModelAsStowed;
  bool bNoQuickDropWhenEmpty;
  bool bKeepCrosshairWhenADS;
  bool bUseOnlyAltWeaoponHideTagsInAltMode;
  Material* killIcon;
  weaponIconRatioType_t killIconRatio;
  bool flipKillIcon;
  bool bNoPartialReload;
  bool bSegmentedReload;
  bool bNoADSAutoReload;
  int iReloadAmmoAdd;
  int iReloadStartAdd;
  const char* szSpawnedGrenadeWeaponName;
  const char* szDualWieldWeaponName;
  unsigned int dualWieldWeaponIndex;
  int iDropAmmoMin;
  int iDropAmmoMax;
  int iDropClipAmmoMin;
  int iDropClipAmmoMax;
  bool blocksProne;
  bool bShowIndicator;
  int isRollingGrenade;
  int iExplosionRadius;
  int iExplosionRadiusMin;
  int iIndicatorRadius;
  int iExplosionInnerDamage;
  int iExplosionOuterDamage;
  float damageConeAngle;
  int iProjectileSpeed;
  int iProjectileSpeedUp;
  int iProjectileSpeedRelativeUp;
  int iProjectileSpeedForward;
  int iProjectileActivateDist;
  float projLifetime;
  float timeToAccelerate;
  float projectileCurvature;
  XModel* projectileModel;
  weapProjExposion_t projExplosion;
  const FxEffectDef* projExplosionEffect;
  bool projExplosionEffectForceNormalUp;
  const FxEffectDef* projExplosionEffect2;
  bool projExplosionEffect2ForceNormalUp;
  const FxEffectDef* projExplosionEffect3;
  bool projExplosionEffect3ForceNormalUp;
  const FxEffectDef* projExplosionEffect4;
  bool projExplosionEffect4ForceNormalUp;
  const FxEffectDef* projExplosionEffect5;
  bool projExplosionEffect5ForceNormalUp;
  const FxEffectDef* projDudEffect;
  const char* projExplosionSound;
  const char* projDudSound;
  const char* mortarShellSound;
  const char* tankShellSound;
  bool bProjImpactExplode;
  bool bBulletImpactExplode;
  WeapStickinessType stickiness;
  WeapRotateType rotateType;
  bool plantable;
  bool hasDetonator;
  bool timedDetonation;
  bool bNoCrumpleMissile;
  bool rotate;
  bool bKeepRolling;
  bool holdButtonToThrow;
  bool offhandHoldIsCancelable;
  bool freezeMovementWhenFiring;
  float lowAmmoWarningThreshold;
  float meleeChargeRange;
  bool bUseAsMelee;
  bool isCameraSensor;
  bool isAcousticSensor;
  float* parallelBounce;
  float* perpendicularBounce;
  const FxEffectDef* projTrailEffect;
  float vProjectileColor[3];
  guidedMissileType_t guidedMissileType;
  float maxSteeringAccel;
  int projIgnitionDelay;
  const FxEffectDef* projIgnitionEffect;
  const char* projIgnitionSound;
  float fAdsAimPitch;
  float fAdsCrosshairInFrac;
  float fAdsCrosshairOutFrac;
  int adsGunKickReducedKickBullets;
  float adsGunKickReducedKickPercent;
  float fAdsGunKickPitchMin;
  float fAdsGunKickPitchMax;
  float fAdsGunKickYawMin;
  float fAdsGunKickYawMax;
  float fAdsGunKickAccel;
  float fAdsGunKickSpeedMax;
  float fAdsGunKickSpeedDecay;
  float fAdsGunKickStaticDecay;
  float fAdsViewKickPitchMin;
  float fAdsViewKickPitchMax;
  float fAdsViewKickYawMin;
  float fAdsViewKickYawMax;
  float fAdsViewScatterMin;
  float fAdsViewScatterMax;
  float fAdsSpread;
  int hipGunKickReducedKickBullets;
  float hipGunKickReducedKickPercent;
  float fHipGunKickPitchMin;
  float fHipGunKickPitchMax;
  float fHipGunKickYawMin;
  float fHipGunKickYawMax;
  float fHipGunKickAccel;
  float fHipGunKickSpeedMax;
  float fHipGunKickSpeedDecay;
  float fHipGunKickStaticDecay;
  float fHipViewKickPitchMin;
  float fHipViewKickPitchMax;
  float fHipViewKickYawMin;
  float fHipViewKickYawMax;
  float fHipViewScatterMin;
  float fHipViewScatterMax;
  float fightDist;
  float maxDist;
  const char* accuracyGraphName[2];
  float(*accuracyGraphKnots[2])[2];
  float(*originalAccuracyGraphKnots[2])[2];
  int accuracyGraphKnotCount[2];
  int originalAccuracyGraphKnotCount[2];
  int iPositionReloadTransTime;
  float leftArc;
  float rightArc;
  float topArc;
  float bottomArc;
  float accuracy;
  float aiSpread;
  float playerSpread;
  float minTurnSpeed[2];
  float maxTurnSpeed[2];
  float pitchConvergenceTime;
  float yawConvergenceTime;
  float suppressTime;
  float maxRange;
  float fAnimHorRotateInc;
  float fPlayerPositionDist;
  const char* szUseHintString;
  const char* dropHintString;
  int iUseHintStringIndex;
  int dropHintStringIndex;
  float horizViewJitter;
  float vertViewJitter;
  const char* szScript;
  int minDamage;
  int minPlayerDamage;
  float fMaxDamageRange;
  float fMinDamageRange;
  float destabilizationRateTime;
  float destabilizationCurvatureMax;
  int destabilizeDistance;
  float* locationDamageMultipliers;
  const char* fireRumble;
  const char* meleeImpactRumble;
  const char* reloadRumble;
  float adsDofStart;
  float adsDofEnd;
  float hipDofStart;
  float hipDofEnd;
  float scanSpeed;
  float scanAccel;
  int scanPauseTime;
  const char* flameTableFirstPerson;
  const char* flameTableThirdPerson;
  flameTable* flameTableFirstPersonPtr;
  flameTable* flameTableThirdPersonPtr;
  const FxEffectDef* tagFx_preparationEffect;
  const FxEffectDef* tagFlash_preparationEffect;
  bool doGibbing;
  float maxGibDistance;
};

static_assert(sizeof(WeaponDef) == 0x808, "The size is not correct");

/* 2268 */
struct WeaponVariantDef
{
  const char* szInternalName;
  int iVariantCount;
  WeaponDef* weapDef;
  const char* szDisplayName;
  const char** szXAnims;
  const char* szAltWeaponName;
  unsigned __int16* hideTags;
  unsigned int altWeaponIndex;
  int iClipSize;
  int iReloadTime;
  int iReloadEmptyTime;
  int iReloadQuickTime;
  int iReloadQuickEmptyTime;
  int iAdsTransInTime;
  int iAdsTransOutTime;
  int iAltRaiseTime;
  const char* szAmmoName;
  int iAmmoIndex;
  const char* szClipName;
  int iClipIndex;
  float fAimAssistRangeAds;
  float fAdsSwayHorizScale;
  float fAdsSwayVertScale;
  float fAdsViewKickCenterSpeed;
  float fHipViewKickCenterSpeed;
  float fAdsZoomFov1;
  float fAdsZoomFov2;
  float fAdsZoomFov3;
  float fAdsZoomInFrac;
  float fAdsZoomOutFrac;
  float fOverlayAlphaScale;
  float fOOPosAnimLength[2];
  bool bSilenced;
  bool bDualMag;
  bool bFullMetalJacket;
  bool bHollowPoint;
  bool bRapidFire;
  Material* overlayMaterial;
  Material* overlayMaterialLowRes;
  Material* dpadIcon;
  weaponIconRatioType_t dpadIconRatio;
  float ikLeftHandOffset[3];
  float ikLeftHandRotation[3];
  float ikLeftHandProneOffset[3];
  float ikLeftHandProneRotation[3];
  float ikLeftHandUiViewerOffset[3];
  float ikLeftHandUiViewerRotation[3];
};

static_assert(sizeof(WeaponVariantDef) == 0xE4, "The size is not correct");

// /* 2269 */
// struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_30
// {
//   const void *pVFTable;
//   void *spare;
//   char name[30];
// };

 /* 2270 */
struct ddlDef_t
{
  int version;
  int size;
  ddlStructDef_t* structList;
  int structCount;
  ddlEnumDef_t* enumList;
  int enumCount;
  ddlDef_t* next;
};

static_assert(sizeof(ddlDef_t) == 0x1C, "The size is not correct");

/* 2271 */
struct ddlState_t
{
  int absoluteOffset;
  int arrayIndex;
  ddlMemberDef_t* member;
  ddlDef_t* ddl;
};

// /* 2272 */
// struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_19
// {
//   const void *pVFTable;
//   void *spare;
//   char name[19];
// };

// /* 2273 */
// struct __cppobj bdSingleton<bdSingletonRegistryImpl>
// {
// };

 /* 2274 */
struct cLeafBrushNodeLeaf_t
{
  unsigned __int16* brushes;
};

static_assert(sizeof(cLeafBrushNodeLeaf_t) == 0x4, "The size is not correct");

/* 2275 */
struct cLeafBrushNodeChildren_t
{
  float dist;
  float range;
  unsigned __int16 childOffset[2];
};

static_assert(sizeof(cLeafBrushNodeChildren_t) == 0xC, "The size is not correct");

/* 2276 */
union cLeafBrushNodeData_t
{
  cLeafBrushNodeLeaf_t leaf;
  cLeafBrushNodeChildren_t children;
};

static_assert(sizeof(cLeafBrushNodeData_t) == 0xC, "The size is not correct");

/* 2277 */
struct cLeafBrushNode_s
{
  unsigned __int8 axis;
  __int16 leafBrushCount;
  int contents;
  cLeafBrushNodeData_t data;
};

static_assert(sizeof(cLeafBrushNode_s) == 0x14, "The size is not correct");

// /* 2278 */
// struct __cppobj vc_attributes::PreAttribute
// {
//   unsigned int Deref;
//   vc_attributes::YesNoMaybe Valid;
//   vc_attributes::YesNoMaybe Null;
//   vc_attributes::YesNoMaybe Tainted;
//   vc_attributes::AccessType Access;
//   unsigned int ValidElementsConst;
//   unsigned int ValidBytesConst;
//   const wchar_t *ValidElements;
//   const wchar_t *ValidBytes;
//   const wchar_t *ValidElementsLength;
//   const wchar_t *ValidBytesLength;
//   unsigned int WritableElementsConst;
//   unsigned int WritableBytesConst;
//   const wchar_t *WritableElements;
//   const wchar_t *WritableBytes;
//   const wchar_t *WritableElementsLength;
//   const wchar_t *WritableBytesLength;
//   unsigned int ElementSizeConst;
//   const wchar_t *ElementSize;
//   vc_attributes::YesNoMaybe NullTerminated;
//   const wchar_t *Condition;
// };

// /* 2279 */
// struct __cppobj vc_attributes::PostAttribute
// {
//   unsigned int Deref;
//   vc_attributes::YesNoMaybe Valid;
//   vc_attributes::YesNoMaybe Null;
//   vc_attributes::YesNoMaybe Tainted;
//   vc_attributes::AccessType Access;
//   unsigned int ValidElementsConst;
//   unsigned int ValidBytesConst;
//   const wchar_t *ValidElements;
//   const wchar_t *ValidBytes;
//   const wchar_t *ValidElementsLength;
//   const wchar_t *ValidBytesLength;
//   unsigned int WritableElementsConst;
//   unsigned int WritableBytesConst;
//   const wchar_t *WritableElements;
//   const wchar_t *WritableBytes;
//   const wchar_t *WritableElementsLength;
//   const wchar_t *WritableBytesLength;
//   unsigned int ElementSizeConst;
//   const wchar_t *ElementSize;
//   vc_attributes::YesNoMaybe NullTerminated;
//   vc_attributes::YesNoMaybe MustCheck;
//   const wchar_t *Condition;
// };

// /* 2280 */
// struct __cppobj vc_attributes::FormatStringAttribute
// {
//   const wchar_t *Style;
//   const wchar_t *UnformattedAlternative;
// };

// /* 2281 */
// struct __cppobj bdNATTypeDiscoveryPacket
// {
//   unsigned __int8 m_type;
//   unsigned __int16 m_protocolVersion;
//   bdNATTypeDiscoveryPacket::bdNATTypeDiscoveryPacketRequest m_request;
// };

// /* 2282 */
// struct __cppobj DiskBurnableSample
// {
//   unsigned __int8 state;
// };

// /* 2283 */
// struct DObjSkelMat
// {
//   float axis[3][4];
//   float origin[4];
// };

// /* 2284 */
// struct _ldiv_t
// {
//   int quot;
//   int rem;
// };

// /* 2285 */
// struct _iobuf
// {
//   char *_ptr;
//   int _cnt;
//   char *_base;
//   int _flag;
//   int _file;
//   int _charbuf;
//   int _bufsiz;
//   char *_tmpfname;
// };

// /* 2286 */
// struct stat
// {
//   unsigned int st_dev;
//   unsigned __int16 st_ino;
//   unsigned __int16 st_mode;
//   __int16 st_nlink;
//   __int16 st_uid;
//   __int16 st_gid;
//   unsigned int st_rdev;
//   int st_size;
//   __int64 st_atime;
//   __int64 st_mtime;
//   __int64 st_ctime;
// };

/* 2287 */
struct CmdArgs
{
  int nesting;
  int localClientNum[8];
  int controllerIndex[8];
  itemDef_s* itemDef[8];
  int argshift[8];
  int argc[8];
  const char** argv[8];
  char textPool[8192];
  const char* argvPool[512];
  int usedTextPool[8];
  int totalUsedArgvPool;
  int totalUsedTextPool;
};

static_assert(sizeof(CmdArgs) == 0x28EC, "The size is not correct");

// /* 2288 */
// struct __cppobj Is16vec8 : I16vec8
// {
// };

// /* 2289 */
// struct __cppobj clientActive_t
// {
//   bool usingAds;
//   int timeoutcount;
//   clSnapshot_t snap;
//   bool alwaysFalse;
//   int serverTime;
//   int oldServerTime;
//   int oldFrameServerTime;
//   int serverTimeDelta;
//   int oldSnapServerTime;
//   int extrapolatedSnapshot;
//   int newSnapshots;
//   int serverId;
//   char mapname[64];
//   int parseMatchStateNum;
//   int parseEntitiesNum;
//   int parseClientsNum;
//   int mouseDx[2];
//   int mouseDy[2];
//   int mouseIndex;
//   bool stanceHeld;
//   StanceState stance;
//   StanceState stancePosition;
//   int stanceTime;
//   int cgameUserCmdWeapon;
//   int cgameUserCmdOffHandIndex;
//   int cgameUserCmdLastWeaponForAlt;
//   float cgameFOVSensitivityScale;
//   float cgameMaxPitchSpeed;
//   float cgameMaxYawSpeed;
//   float cgameKickAngles[3];
//   float cgameOrigin[3];
//   float cgameVelocity[3];
//   float cgameViewangles[3];
//   int cgameBobCycle;
//   int cgameMovementDir;
//   bitarray<51> cgameExtraButton_bits;
//   int cgamePredictedDataServerTime;
//   PredictedVehicleInfo cgameVehicle;
//   float viewangles[3];
//   int skelTimeStamp;
//   volatile int skelMemPos;
//   char skelMemory[262144];
//   char *skelMemoryStart;
//   bool allowedAllocSkel;
//   __declspec(align(4)) usercmd_s cmds[128];
//   int cmdNumber;
//   ClientArchiveData clientArchive[256];
//   int clientArchiveIndex;
//   outPacket_t outPackets[32];
//   clSnapshot_t snapshots[32];
//   entityState_s entityBaselines[1024];
//   __declspec(align(128)) MatchState parseMatchStates[32];
//   entityState_s parseEntities[2048];
//   clientState_s parseClients[2048];
//   int corruptedTranslationFile;
//   char translationVersion[256];
//   int lastFireTime;
//   bool useHeld;
//   int useTime;
//   int useCount;
//   int wasInVehicle;
// };

// /* 2290 */
// struct MaterialRaw
// {
//   MaterialInfoRaw info;
//   unsigned int refStateBits[2];
//   unsigned __int16 textureCount;
//   unsigned __int16 constantCount;
//   unsigned int techSetNameOffset;
//   unsigned int textureTableOffset;
//   unsigned int constantTableOffset;
// };

// /* 2291 */
// struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_31
// {
//   const void *pVFTable;
//   void *spare;
//   char name[31];
// };

// /* 2293 */
// struct __cppobj bdFastArray<bdConnectionListener *>
// {
//   struct bdConnectionListener **m_data;
//   unsigned int m_capacity;
//   unsigned int m_size;
// };

// /* 2292 */
// struct __cppobj bdConnection : bdReferencable
// {
//   bdReference<bdCommonAddr> m_addr;
//   bdReference<bdAddrHandle> m_addrHandle;
//   bdFastArray<bdConnectionListener *> m_listeners;
//   unsigned int m_maxTransmissionRate;
//   bdConnection::Status m_status;
// };

// /* 2294 */
// struct /*VFT*/ bdConnection_vtbl
// {
//   void (__thiscall *~bdReferencable)(bdReferencable *this);
//   bool (__thiscall *receive)(bdConnection *this, const unsigned __int8 *, const unsigned int);
//   bool (__thiscall *send)(bdConnection *this, const struct bdReference<bdMessage>, const bool);
//   bool (__thiscall *getMessageToDispatch)(bdConnection *this, struct bdReference<bdMessage> *);
//   bdConnection::Status (__thiscall *getStatus)(bdConnection *this);
//   bool (__thiscall *connect)(bdConnection *this);
//   void (__thiscall *disconnect)(bdConnection *this);
//   void (__thiscall *close)(bdConnection *this);
//   unsigned int (__thiscall *getDataToSend)(bdConnection *this, unsigned __int8 *const, const unsigned int);
// };

// /* 2295 */
// struct __cppobj tlSharedAtomicMutex
// {
//   volatile unsigned __int64 ThreadId;
//   volatile int LockCount;
//   tlSharedAtomicMutex *ThisPtr;
// };

// /* 2296 */
// struct __cppobj bdGroupID : bdTaskResult
// {
//   unsigned int m_groupID;
// };

// /* 2297 */
// struct /*VFT*/ bdGroupID_vtbl
// {
//   void (__thiscall *~bdTaskResult)(bdTaskResult *this);
//   bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
//   void (__thiscall *serialize)(bdGroupID *this, bdByteBuffer *);
// };

// /* 2298 */
// struct __cppobj bdGroupCount : bdTaskResult
// {
//   unsigned int m_groupID;
//   unsigned int m_groupCount;
// };

// /* 2299 */
// struct /*VFT*/ bdGroupCount_vtbl
// {
//   void (__thiscall *~bdTaskResult)(bdTaskResult *this);
//   bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
//   void (__thiscall *serialize)(bdGroupCount *this, bdByteBuffer *);
// };

// /* 2300 */
// struct __cppobj I32vec2 : M64
// {
// };

// /* 2301 */
// struct __cppobj MemTrackInst
// {
// };

// /* 2302 */
// struct __cppobj bdDTLSError : bdDTLSHeader
// {
//   bdDTLSError::bdDTLSErrorType m_etype;
//   bdSecurityID m_secID;
// };

// /* 2303 */
// struct /*VFT*/ bdDTLSError_vtbl
// {
//   void (__thiscall *~bdDTLSHeader)(bdDTLSHeader *this);
//   bool (__thiscall *serialize)(bdDTLSHeader *this, void *, const unsigned int, const unsigned int, unsigned int *);
//   bool (__thiscall *deserialize)(bdDTLSHeader *this, const void *, const unsigned int, const unsigned int, unsigned int *);
// };

// /* 2304 */
// struct __cppobj bdAddrHash
// {
// };

// /* 2305 */
// struct __cppobj bdBitOperations
// {
// };

// /* 2306 */
// struct __cppobj F32vec1
// {
//   __m128 vec;
// };

// /* 2307 */
// struct __cppobj Iu32vec2 : I32vec2
// {
// };

// /* 2308 */
// struct __cppobj bdCommonAddrHash
// {
// };

// /* 2309 */
// struct __cppobj Iu32vec4 : I32vec4
// {
// };

 /* 2310 */
struct msg_t
{
  int overflowed;
  int readOnly;
  unsigned __int8* data;
  unsigned __int8* splitData;
  int maxsize;
  int cursize;
  int splitSize;
  int readcount;
  int bit;
  int lastEntityRef;
  int flush;
  netsrc_t targetLocalNetID;
};

// /* 2311 */
// struct netProfileInfo_t
// {
//   netProfileStream_t send;
//   netProfileStream_t recieve;
// };

// /* 2312 */
// struct clientUIActive_t
// {
//   int flags;
//   int keyCatchers;
//   connstate_t connectionState;
//   int nextScrollTime;
// };

// /* 2313 */
// struct __cppobj Is32vec2 : I32vec2
// {
// };

// /* 2314 */
// struct tm
// {
//   int tm_sec;
//   int tm_min;
//   int tm_hour;
//   int tm_mday;
//   int tm_mon;
//   int tm_year;
//   int tm_wday;
//   int tm_yday;
//   int tm_isdst;
// };

// /* 2315 */
// struct __cppobj bdSingletonRegistry : bdSingleton<bdSingletonRegistryImpl>
// {
// };

// /* 2316 */
// struct $_TypeDescriptor$_extraBytes_20
// {
//   const void *pVFTable;
//   void *spare;
//   char name[20];
// };

// /* 2317 */
// struct __cppobj static_colgeom_visitor_t : colgeom_visitor_t
// {
//   int ntrees;
//   const CollisionAabbTree *trees[512];
//   int nbrushes;
//   const cbrush_t *brushes[512];
// };

// /* 2318 */
// struct /*VFT*/ static_colgeom_visitor_t_vtbl
// {
//   void (__thiscall *~visitor_base_t)(visitor_base_t *this);
//   void (__thiscall *prolog)(colgeom_visitor_t *this);
//   void (__thiscall *epilog)(colgeom_visitor_t *this);
//   void (__thiscall *visit)(colgeom_visitor_t *this, const cbrush_t *);
//   void (__thiscall *visit)(colgeom_visitor_t *this, const CollisionAabbTree *);
//   void (__thiscall *update)(colgeom_visitor_t *this, const float *, const float *, int, const float *);
// };

// /* 2319 */
// struct __cppobj bdCommonAddrInfo
// {
// };

// /* 2320 */
// union MaterialTextureDefRaw::<unnamed_type_u>
// {
//   unsigned int imageNameOffset;
//   unsigned int waterDefOffset;
// };

// /* 2321 */
// struct MaterialTextureDefRaw
// {
//   unsigned int nameOffset;
//   unsigned __int8 samplerState;
//   unsigned __int8 semantic;
//   MaterialTextureDefRaw::<unnamed_type_u> u;
// };

 /* 2322 */
struct netadr_t
{
  netadrtype_t type;
  unsigned __int8 ip[4];
  unsigned __int16 port;
  int addrHandleIndex;
};

// /* 2323 */
// struct netchan_t
// {
//   int outgoingSequence;
//   netsrc_t sock;
//   int dropped;
//   int incomingSequence;
//   netadr_t remoteAddress;
//   int qport;
//   int fragmentSequence;
//   int fragmentLength;
//   unsigned __int8 *fragmentBuffer;
//   int fragmentBufferSize;
//   int unsentFragments;
//   int unsentFragmentStart;
//   int unsentLength;
//   unsigned __int8 *unsentBuffer;
//   int unsentBufferSize;
//   int reliable_fragments;
//   unsigned __int8 fragment_send_count[128];
//   unsigned int fragment_ack[4];
//   int lowest_send_count;
//   netProfileInfo_t prof;
// };

// /* 2324 */
// struct demoContinuousStateBuffer_t
// {
//   int serverMessageSequence;
//   unsigned __int8 *msgData;
//   int msgLen;
//   unsigned __int8 *archive;
//   int startClientArchiveIndex;
//   int endClientArchiveIndex;
//   int intialBufferStateIndex;
// };

// /* 2325 */
// struct __declspec(align(8)) clientConnection_t
// {
//   int qport;
//   int clientNum;
//   int lastPacketSentTime;
//   int lastPacketTime;
//   netadr_t serverAddress;
//   int connectTime;
//   int connectPacketCount;
//   char serverMessage[256];
//   int challenge;
//   int checksumFeed;
//   int reliableSequence;
//   int reliableAcknowledge;
//   char *reliableCommands[128];
//   int reliableCommandBufferNext;
//   char reliableCommandBuffer[16384];
//   int serverMessageSequence;
//   int serverCommandSequence;
//   int lastExecutedServerCommand;
//   char serverCommands[128][1024];
//   bool isServerRestarting;
//   int lastClientArchiveIndex;
//   char demoName[64];
//   int demorecording;
//   int demoplaying;
//   int isTimeDemo;
//   int demowaiting;
//   int firstDemoFrameSkipped;
//   int demofile;
//   int demoRecordStartTime;
//   int demoUseMemoryBuffer;
//   int demoMemoryPoolBegin;
//   int demoMemoryPoolEnd;
//   unsigned __int8 demoMemoryPool[262144];
//   int demoRequestUncompressedPacket;
//   int demoRequestUncompressedPacketTime;
//   int demoReceivedUncompressedPacket;
//   demoInitialStateBuffer_t demoInitialStateBuffer[3];
//   demoContinuousStateBuffer_t demoContinuousStateBuffer[200];
//   int demoInitialStateBufferIndex;
//   int demoContinuousStateBufferIndex;
//   int demoCoolRecordExtendedCapture;
//   int demoCoolRecordProcessingExtendedCapture;
//   int demoCoolRecordProcessingTime;
//   int demoLiveStream;
//   int demoPrevServerTime;
//   int timeDemoLog;
//   int timeDemoFrames;
//   int timeDemoStart;
//   int timeDemoPrev;
//   int timeDemoBaseTime;
//   netchan_t netchan;
//   char netchanOutgoingBuffer[2048];
//   char netchanIncomingBuffer[65536];
//   netProfileInfo_t OOBProf;
//   __int64 statPacketsToSend;
//   int statPacketSendTime[34];
//   unsigned int serverChallenge;
//   unsigned int clientChallenge;
//   unsigned int nonce;
// };

// /* 2326 */
// struct __cppobj __declspec(align(8)) bdFileInfo : bdTaskResult
// {
//   unsigned __int64 m_fileID;
//   unsigned int m_createTime;
//   unsigned int m_modifedTime;
//   bdFileInfo::bdVisibility m_visibility;
//   unsigned __int64 m_ownerID;
//   char m_fileName[128];
//   unsigned int m_fileSize;
// };

// /* 2327 */
// struct /*VFT*/ bdFileInfo_vtbl
// {
//   void (__thiscall *~bdTaskResult)(bdTaskResult *this);
//   bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
// };

// /* 2328 */
// struct NetField
// {
//   const char *name;
//   int offset;
//   int size;
//   int bits;
//   unsigned __int8 changeHints;
//   const char *bitsStr;
//   const char *changeHintsStr;
// };

// /* 2329 */
// struct __cppobj __declspec(align(8)) tlAtomicReadWriteMutex
// {
//   volatile unsigned __int64 WriteThreadId;
//   volatile int ReadLockCount;
//   volatile int WriteLockCount;
//   tlAtomicReadWriteMutex *ThisPtr;
// };

// /* 2330 */
// struct __cppobj bdRandom
// {
//   unsigned int m_val;
// };

// /* 2331 */
// struct __cppobj tlThread
// {
//   tlThread_vtbl *__vftable /*VFT*/;
//   __declspec(align(8)) const char *Name;
//   int Priority;
//   unsigned int StackSize;
//   unsigned int Flags;
//   unsigned __int64 Handle;
//   int ExitCode;
// };

// /* 2332 */
// struct /*VFT*/ tlThread_vtbl
// {
//   void (__thiscall *~tlThread)(tlThread *this);
//   int (__thiscall *Entry)(tlThread *this);
// };

// /* 2333 */
// struct __cppobj Is16vec4 : I16vec4
// {
// };

// /* 2334 */
// struct __cppobj __declspec(align(4)) dwFileTask
// {
//   char *m_filename;
//   bdFileData m_fileData;
//   bdLobbyErrorCode m_error;
//   unsigned __int64 m_fileID;
//   unsigned int m_fileSize;
//   unsigned int m_bufferSize;
//   bdFileInfo m_fileInfo;
//   void *m_buffer;
//   bool m_optional;
// };

// /* 2335 */
// struct __cppobj bdAntiCheatChallenges : bdReferencable
// {
//   struct bdArray<bdAntiCheatChallenge> *m_challenges;
// };

// /* 2336 */
// struct /*VFT*/ bdAntiCheatChallenges_vtbl
// {
//   void (__thiscall *~bdReferencable)(bdReferencable *this);
// };

// /* 2337 */
// struct __cppobj XAnimClientNotifyAdder
// {
// };

// /* 2338 */
// struct __cppobj XAnimClientNotifyList
// {
//   unsigned __int8 m_clientNotifyMemory[1536];
//   int m_numNotifies;
// };

// /* 2339 */
// struct voiceCommunication_t
// {
//   ClientVoicePacket_t voicePackets[10];
//   int voicePacketCount;
//   int voicePacketLastTransmit;
// };

// /* 2340 */
// struct _stat64i32
// {
//   unsigned int st_dev;
//   unsigned __int16 st_ino;
//   unsigned __int16 st_mode;
//   __int16 st_nlink;
//   __int16 st_uid;
//   __int16 st_gid;
//   unsigned int st_rdev;
//   int st_size;
//   __int64 st_atime;
//   __int64 st_mtime;
//   __int64 st_ctime;
// };

// /* 2341 */
// struct __cppobj Iu8vec8 : I8vec8
// {
// };

// /* 2342 */
// struct pregameClient
// {
//   team_t pregame_team;
//   char pregame_class[32];
// };

// /* 2343 */
// struct pregameStateGlobal
// {
//   pregameStateEnum state;
//   pregameClient clients[32];
// };

// /* 2344 */
// struct HunkUser
// {
//   HU_ALLOCATION_SCHEME scheme;
//   unsigned int flags;
//   const char *name;
//   int type;
// };

// /* 2345 */
// struct scrVarPub_t
// {
//   const char *fieldBuffer;
//   unsigned __int16 canonicalStrCount;
//   bool developer;
//   bool developer_script;
//   bool evaluate;
//   const char *error_message;
//   int error_index;
//   unsigned int time;
//   unsigned int timeArrayId;
//   unsigned int pauseArrayId;
//   unsigned int levelId;
//   unsigned int gameId;
//   unsigned int animId;
//   unsigned int freeEntList;
//   unsigned int tempVariable;
//   bool bInited;
//   unsigned __int16 savecount;
//   unsigned int checksum;
//   unsigned int entId;
//   unsigned int entFieldName;
//   HunkUser *programHunkUser;
//   const char *programBuffer;
//   const char *endScriptBuffer;
//   unsigned __int16 *saveIdMap;
//   unsigned __int16 *saveIdMapRev;
//   unsigned int numScriptThreads;
//   unsigned int numScriptValues;
//   unsigned int numScriptObjects;
//   const char *varUsagePos;
//   int ext_threadcount;
//   int totalObjectRefCount;
//   volatile int totalVectorRefCount;
// };

// /* 2346 */
// union Variable::<unnamed_type_u>
// {
//   unsigned int prev;
//   unsigned int prevSibling;
// };

// /* 2347 */
// struct Variable
// {
//   unsigned int id;
//   Variable::<unnamed_type_u> u;
// };

 /* 2348 */
struct __declspec(align(4)) VariableStackBuffer
{
  const char* pos;
  unsigned __int16 size;
  unsigned __int16 bufLen;
  unsigned int localId;
  unsigned __int8 time;
  char buf[1];
};

/* 2349 */
union VariableUnion
{
  int intValue;
  float floatValue;
  unsigned int stringValue;
  const float* vectorValue;
  const char* codePosValue;
  unsigned int pointerValue;
  VariableStackBuffer* stackValue;
  unsigned int entityOffset;
};

// /* 2350 */
// union ObjectInfo::<unnamed_type_u>
// {
//   unsigned __int16 entnum;
//   unsigned __int16 size;
//   unsigned int nextEntId;
//   unsigned int self;
// };

// /* 2351 */
// struct ObjectInfo
// {
//   unsigned __int16 refCount;
//   ObjectInfo::<unnamed_type_u> u;
// };

// /* 2352 */
// union VariableValueInternal::<unnamed_type_u>
// {
//   unsigned int next;
//   VariableUnion u;
//   ObjectInfo o;
// };

// /* 2353 */
// union VariableValueInternal::<unnamed_type_w>
// {
//   unsigned int status;
//   unsigned int type;
//   unsigned int name;
//   unsigned int classnum;
//   unsigned int notifyName;
//   unsigned int waitTime;
//   unsigned int parentLocalId;
// };

// /* 2354 */
// union VariableValueInternal::<unnamed_type_v>
// {
//   unsigned int next;
//   unsigned int index;
// };

// /* 2355 */
// struct VariableValueInternal
// {
//   Variable hash;
//   VariableValueInternal::<unnamed_type_u> u;
//   VariableValueInternal::<unnamed_type_w> w;
//   VariableValueInternal::<unnamed_type_v> v;
//   unsigned int nextSibling;
// };

// /* 2356 */
// struct __declspec(align(128)) scrVarGlob_t
// {
//   VariableValueInternal *variableList;
// };

// /* 2357 */
// struct archivedEntityShared_t
// {
//   int svFlags;
//   int clientMask[1];
//   float absmin[3];
//   float absmax[3];
// };

// /* 2358 */
// struct scrMemTreePub_t
// {
//   char *mt_buffer;
// };

// /* 2359 */
// struct archivedEntity_s
// {
//   entityState_s s;
//   archivedEntityShared_t r;
// };

// /* 2360 */
// struct VariableValue
// {
//   VariableUnion u;
//   int type;
// };

// /* 2361 */
// struct svEntity_s
// {
//   unsigned __int16 worldSector;
//   unsigned __int16 nextEntityInWorldSector;
//   archivedEntity_s baseline;
//   int numClusters;
//   int clusternums[16];
//   int lastCluster;
//   int linkcontents;
//   float linkmin[3];
//   float linkmax[3];
// };

// /* 2362 */
// struct scrStringDebugGlob_t
// {
//   volatile int refCount[65536];
//   volatile int totalRefCount;
//   int ignoreLeaks;
// };

// /* 2363 */
// struct __declspec(align(4)) server_t
// {
//   serverState_t state;
//   int physicsTime;
//   int timeResidual;
//   bool inFrame;
//   bool smp;
//   bool allowNetPackets;
//   int restarting;
//   int start_frameTime;
//   int checksumFeed;
//   cmodel_t *models[512];
//   unsigned __int16 emptyConfigString;
//   unsigned __int16 configstrings[3228];
//   svEntity_s svEntities[1024];
//   gentity_s *gentities;
//   int gentitySize;
//   int num_entities;
//   playerState_s *gameClients;
//   int gameClientSize;
//   int checksum;
//   int skelTimeStamp;
//   int skelMemPos;
//   int bpsWindow[20];
//   int bpsWindowSteps;
//   int bpsTotalBytes;
//   int bpsMaxBytes;
//   int ubpsWindow[20];
//   int ubpsTotalBytes;
//   int ubpsMaxBytes;
//   float ucompAve;
//   int ucompNum;
//   volatile int serverFrameTime;
//   volatile int serverFrameTimeMin;
//   volatile int serverFrameTimeMax;
//   char gametype[64];
//   bool killServer;
//   const char *killReason;
//   unsigned __int8 xpmods;
// };

// /* 2364 */
// struct __declspec(align(4)) scrVarDebugPub_t
// {
//   const char **varUsage;
//   unsigned __int16 *extRefCount;
//   int *leakCount;
//   bool dummy;
// };

// /* 2365 */
// struct FastCriticalSection
// {
//   volatile int readCount;
//   volatile int writeCount;
// };

// /* 2366 */
// struct NetFieldList
// {
//   const NetField *array;
//   unsigned int count;
//   const char *fieldArrayName;
// };

// /* 2367 */
// struct demoGameSettings
// {
//   bool onlinegame;
//   bool xblive_privatematch;
//   bool xblive_wagermatch;
//   bool systemlink;
//   bool combatTraining;
//   bool customGameMode;
// };

// /* 2368 */
// struct __declspec(align(2)) demoHeader
// {
//   int version;
//   int maxClients;
//   bool isDemoClip;
//   demoGameSettings settings;
// };

// /* 2369 */
// struct demoKeyboardData
// {
//   int mode;
//   const char *title;
//   const char *defaultText;
//   int textSize;
//   int currentProcessingSegmentIndex;
// };

// /* 2370 */
// struct demoConnectedPlayersInfo
// {
//   unsigned __int8 playerIndex;
//   unsigned __int8 clientNum;
//   unsigned __int64 xuid;
//   int connectTime;
//   int disconnectTime;
// };

// /* 2371 */
// struct __declspec(align(4)) demoDefaultBookmarkInfo
// {
//   unsigned __int8 type;
//   int time;
//   unsigned __int8 clientNum1;
//   unsigned __int8 clientNum2;
// };

// /* 2372 */
// struct demoHeliPatchesInfo
// {
//   int brushmodel;
//   float origin[3];
//   unsigned __int16 targetname;
//   int enabled;
// };

// /* 2373 */
// struct demoMetaInfo
// {
//   bool type;
//   int startTime;
//   int endTime;
//   char gameType[256];
//   char mapName[256];
//   char author[32];
//   char name[22];
//   char description[22];
//   bool isModifiedName;
//   bool isModifiedDescription;
//   int week;
//   int month;
//   int year;
//   int day;
//   int hour;
//   int min;
//   unsigned int createTime;
//   int numConnectedPlayersInfoCount;
//   demoConnectedPlayersInfo connectedPlayers[50];
//   int numDefaultBookmarksCount;
//   demoDefaultBookmarkInfo defaultBookmarks[1000];
//   int numHeliPatchesCount;
//   demoHeliPatchesInfo heliPatches[32];
// };

// /* 2374 */
// struct demoMemBlock
// {
//   int compressedSize;
//   int uncompressedSize;
//   unsigned __int8 compressedMsgBuf[49152];
// };

// /* 2375 */
// struct buttonHoldCmd
// {
//   bool active;
//   int key;
//   int activatedTime;
// };

// /* 2376 */
// struct demoTagPlayers
// {
//   int count;
//   unsigned __int64 playerXuids[30];
// };

// /* 2377 */
// struct __declspec(align(8)) screenshotMetaInfo
// {
//   demoTagPlayers screenshotPlayers;
//   char gameType[256];
//   char mapName[256];
//   char name[22];
//   char description[22];
//   bool isModifiedName;
//   bool isModifiedDescription;
//   int createTime;
//   int week;
//   int month;
//   int year;
//   int day;
//   int hour;
//   int min;
// };

// /* 2378 */
// struct __declspec(align(4)) msg_bookmark_t
// {
//   int overflowed;
//   int cursize;
//   int bit;
//   int lastEntityRef;
//   int readcount;
//   unsigned __int8 bitByte;
// };

// /* 2379 */
// struct demoKeyFrame
// {
//   int keyframeBufferStart;
//   int demoFileMemoryBlockStart;
//   int keyframeSnapshotTime;
//   int keyframeClipServerTime;
//   int firstCmdSequence;
//   int size;
//   msg_bookmark_t msgBookmark;
// };

// /* 2380 */
// struct clipSegment
// {
//   char name[22];
//   int clipBufferIndex;
//   int size;
//   int transition;
//   int duration;
//   demoTagPlayers taggedPlayers;
// };

// /* 2381 */
// struct __declspec(align(4)) demoPlayback
// {
//   bool overridePause;
//   int transition;
//   int transitionScreenTime;
//   bool jumpTimeFlag;
//   bool switchedPlayers;
//   int metaInformationScreenTime;
//   buttonHoldCmd holdCmd;
//   int buttonPressTime[10];
//   int screenshotSize;
//   screenshotMetaInfo screenshotInfo;
//   bool displayPartyScoreboard;
//   msg_t keyframeMsg;
//   int keyframeIndex;
//   int keyframeBufferIndex;
//   int lastProcessedCmd;
//   bool keyframeGenerated;
//   int lastJumpedKeyframe;
//   int keyframeJumpCount;
//   demoKeyFrame keyFrame[250];
//   int demoCmdInProgress;
//   bool completed;
//   bool hideGameHud;
//   bool hideDemoHud;
//   int cameraMode;
//   float clipCameraOrigin[3];
//   float clipCameraAngles[3];
//   float prevClipCameraOrigin[3];
//   float prevClipCameraAngles[3];
//   bool clipPausedState;
//   msg_t clipRecordingMsg;
//   int prevClipRecordBufIndex;
//   int clipRecordBufIndex;
//   unsigned __int8 mainClipRecordingBuf[1048576];
//   unsigned __int8 subClipRecordingBuf[49152];
//   playerState_s clipRecordPS;
//   unsigned __int8 clipRecordClient;
//   float clipRecordTimescale;
//   unsigned __int8 clipCameraMode;
//   bool clipHudHidden;
//   demoMetaInfo clipRecordInfo;
//   bool forceWriteClipCommands;
//   int clipState;
//   int clipTime;
//   int clipServerTime;
//   int prevClipTime;
//   int originalFilmTime;
//   bool clipModified;
//   bool pendingSegmentSave;
//   bool previewAllSegments;
//   bool cancelPreview;
//   bool forceTeleportClipCamera;
//   clipSegment segments[10];
//   int segmentCount;
//   int segmentGameStateSize;
//   int defaultSegmentTag;
//   int clipPreviewBufferIndex;
//   int clipPreviewSegmentNumber;
//   unsigned __int8 demoPreviewBuf[2][49152];
//   demoKeyFrame demoPreview[2];
//   bool demoCompleteStateForRestorationPoint[2];
// };

// /* 2382 */
// struct demoProfile
// {
//   int memUsed[8];
//   int count[8];
// };

// /* 2383 */
// struct __declspec(align(128)) demoMain
// {
//   char demoName[128];
//   int demoFileHandle;
//   int state;
//   msg_t msg;
//   unsigned __int8 msgBuf0[49152];
//   unsigned __int8 msgBuf1[49152];
//   bool msgBufFlag;
//   int totalSize;
//   int sessionFlags;
//   demoHeader header;
//   demoKeyboardData keyboard;
//   bool shutdownInProgress;
//   int lastProcessedTime;
//   int lastProcessedMsgNum;
//   int lastReliableCommandRecorded[32];
//   MatchState matchState;
//   playerState_s ps[32];
//   entityState_s ent[1024];
//   int entClientMask[1024][2];
//   int prevNumEntities;
//   clientState_s client[32];
//   int prevNumClients;
//   int prevNumParsedEntities;
//   int prevNumParsedClients;
//   int playerSessionState[32];
//   float intermissionPointOrigin[3];
//   float intermissionPointAngles[3];
//   demoMetaInfo info;
//   bool renderingMovie;
//   demoMemBlock memBlock;
//   demoPlayback *playback;
//   bool playbackInited;
//   demoProfile profile;
// };

 /* 2384 */
struct Glyph
{
  unsigned __int16 letter;
  char x0;
  char y0;
  unsigned __int8 dx;
  unsigned __int8 pixelWidth;
  unsigned __int8 pixelHeight;
  float s0;
  float t0;
  float s1;
  float t1;
};

static_assert(sizeof(Glyph) == 0x18, "The size is not correct");

/* 2385 */
struct Font_s
{
  const char* fontName;
  int pixelHeight;
  int glyphCount;
  Material* material;
  Material* glowMaterial;
  Glyph* glyphs;
};

static_assert(sizeof(Font_s) == 0x18, "The size is not correct");

// /* 2386 */
// struct pinglist_t
// {
//   char adrstr[64];
//   int start;
// };

// /* 2387 */
// struct pendingServer_t
// {
//   char adrstr[64];
//   char name[64];
//   int startTime;
//   int serverNum;
//   int valid;
// };

// /* 2388 */
// struct serverStatus_s
// {
//   pinglist_t pingList[16];
//   int numqueriedservers;
//   int currentping;
//   int nextpingtime;
//   int maxservers;
//   int refreshtime;
//   int numServers;
//   int sortKey;
//   int sortDir;
//   int lastCount;
//   int refreshActive;
//   int currentServer;
//   int displayServers[20000];
//   int numDisplayServers;
//   int serverCount;
//   int numPlayersOnServers;
//   int nextDisplayRefresh;
//   int nextSortTime;
//   Material *currentServerPreview;
//   int motdLen;
//   int motdWidth;
//   int motdPaintX;
//   int motdPaintX2;
//   int motdOffset;
//   int motdTime;
//   char motd[1024];
//   unsigned __int8 displayServersFriendNameInd[100];
// };

// /* 2389 */
// struct modInfo_t
// {
//   const char *modName;
//   const char *modDescr;
// };

// /* 2390 */
// struct customGameTypeInfo
// {
//   char gameType[12];
//   char gameTypeName[32];
//   char gameTypeDesc[128];
//   char fileName[32];
//   char gameTypeNameCaps[32];
//   int splitscreen;
// };

// /* 2391 */
// struct pendingServerStatus_t
// {
//   int num;
//   pendingServer_t server[16];
// };

// /* 2392 */
// struct CachedAssets_t
// {
//   Material *scrollBarArrowUp;
//   Material *scrollBarArrowDown;
//   Material *scrollBarArrowLeft;
//   Material *scrollBarArrowRight;
//   Material *scrollBar;
//   Material *scrollBarThumb;
//   Material *sliderBar;
//   Material *sliderThumb;
//   Material *whiteMaterial;
//   Material *cursor;
//   Material *dvarlistArrowLeft;
//   Material *dvarlistArrowRight;
//   Material *line;
//   Material *blur;
//   Material *lineGraph;
//   Font_s *bigFont;
//   Font_s *smallFont;
//   Font_s *consoleFont;
//   Font_s *boldFont;
//   Font_s *textFont;
//   Font_s *extraBigFont;
//   snd_alias_list_t *itemFocusSound;
// };

// /* 2393 */
// struct gameTypeInfo
// {
//   char gameType[12];
//   char gameTypeName[32];
//   char gameTypeShortName[32];
//   char gameTypeNameCaps[32];
//   int splitscreen;
//   int basictraining;
// };

// /* 2394 */
// struct mapInfo
// {
//   char mapName[32];
//   char mapLoadName[24];
//   char mapNameCaps[32];
//   int splitscreen;
//   char mapPackType[16];
//   int mapPackTypeIndex;
//   char imageName[42];
//   const char *opponentName;
//   int teamMembers;
//   int typeBits;
//   int timeToBeat[32];
//   Material *levelShot;
//   int active;
// };

// /* 2395 */
// struct contentPackInfo
// {
//   char mapPackName[16];
// };

// /* 2396 */
// struct serverStatusInfo_s
// {
//   char address[64];
//   const char *lines[128][8];
//   char text[1024];
//   char pings[96];
//   int numLines;
// };

// /* 2397 */
// struct $C49762E94BFBD11FBB822E5603B176DD
// {
//   _BYTE gap0[82304];
//   char serverStatusAddress[64];
//   char serverStatusSecurityID[8];
//   serverStatusInfo_s serverStatusInfo;
// };

// /* 2398 */
// union $A48C1D473939E002B61DABFCB910C7B1
// {
//   _BYTE serverStatus[82460];
//   $C49762E94BFBD11FBB822E5603B176DD __s1;
// };

// /* 2399 */
// struct sharedUiInfo_t
// {
//   CachedAssets_t assets;
//   _BYTE gap58[4];
//   int playerCount;
//   char playerNames[32][32];
//   char teamNames[32][32];
//   int playerClientNums[32];
//   int numGameTypes;
//   gameTypeInfo gameTypes[32];
//   int numCustomGameTypes;
//   customGameTypeInfo customGameTypes[32];
//   int numCustomMatchGameTypes;
//   gameTypeInfo customMatchGameTypes[32];
//   int gameTypeMapCount[32];
//   int numJoinGameTypes;
//   gameTypeInfo joinGameTypes[32];
//   int mapCount;
//   mapInfo mapList[128];
//   contentPackInfo contentPackList[8];
//   Material *serverHardwareIconList[10];
//   modInfo_t modList[64];
//   int modCount;
//   int modIndex;
//   int itemIndex;
//   int itemNum;
//   float itemColor[4];
//   int attachmentNum;
//   int numAttachments;
//   int numItemsInSlot;
//   int optionIndex;
//   int sortedItemPivot;
//   int numSortedItems;
//   int clanTagFeature;
//   $A48C1D473939E002B61DABFCB910C7B1 ___u31;
//   serverStatusInfo_s serverStatusInfoScoreBoard;
//   int nextServerStatusRefresh;
//   int nextServerStatusScoreBoardRefresh;
//   pendingServerStatus_t pendingServerStatus;
//   unsigned __int64 visibilityBits[1];
//   unsigned __int64 localVisibilityBits[1];
//   int contractIndex;
//   Material *loadingScreen;
// };

// /* 2400 */
// struct cursor_t
// {
//   float x;
//   float y;
// };

// /* 2401 */
// struct BlurStackEntry
// {
//   char menuName[64];
// };

// /* 2402 */
// struct menuClientNum_t
// {
//   menuDef_t *menu;
//   int localClientNum;
// };

// /* 2403 */
// union UILocalVar::<unnamed_type_u>
// {
//   int integer;
//   float value;
//   const char *string;
// };

// /* 2404 */
// struct UILocalVar
// {
//   UILocalVarType type;
//   const char *name;
//   UILocalVar::<unnamed_type_u> u;
// };

// /* 2405 */
// struct UILocalVarContext
// {
//   UILocalVar table[256];
// };

// /* 2406 */
// struct UiContext
// {
//   int contextIndex;
//   float bias;
//   int realTime;
//   int frameTime;
//   cursor_t cursor;
//   cursor_t prevCursor;
//   int isCursorVisible;
//   int screenWidth;
//   int screenHeight;
//   float screenAspect;
//   float FPS;
//   float blurRadiusOut;
//   BlurStackEntry blurMenuStack[8];
//   int blurMenuStackIndex;
//   menuDef_t *Menus[600];
//   int menuCount;
//   menuClientNum_t menuStack[16];
//   int openMenuCount;
//   bool enableSlideAndFadeEffectForMenu;
//   UILocalVarContext localVars;
// };

// /* 2407 */
// struct ScreenPlacement
// {
//   float scaleVirtualToReal[2];
//   float scaleVirtualToFull[2];
//   float scaleRealToVirtual[2];
//   float virtualViewableMin[2];
//   float virtualViewableMax[2];
//   float virtualTweakableMin[2];
//   float virtualTweakableMax[2];
//   float realViewportBase[2];
//   float realViewportSize[2];
//   float realViewportMid[2];
//   float realViewableMin[2];
//   float realViewableMax[2];
//   float realTweakableMin[2];
//   float realTweakableMax[2];
//   float subScreen[2];
// };

// /* 2408 */
// struct uiInfo_s
// {
//   UiContext uiDC;
//   int playerRefresh;
//   int playerIndex;
//   int timeIndex;
//   int previousTimes[4];
//   uiMenuCommand_t currentMenuType;
//   bool allowScriptMenuResponse;
//   char toastPopupTitle[256];
//   char toastPopupDesc[256];
//   char toastPopupIconName[256];
//   int toastPopupDuration;
//   int toastPopupTimeCounter;
//   bool toastPopupOpened;
//   int contractIndex;
//   char findPlayerName[1024];
//   char foundPlayerServerAddresses[16][64];
//   char foundPlayerServerNames[16][64];
//   int numFoundPlayerServers;
//   int nextFindPlayerRefresh;
// };

// /* 2410 */
// struct $2BD02F38FBEBD854EF9A531D8B9F9671
// {
//   int QueuedBatchCount;
//   int ExecutingBatchCount;
// };

// /* 2411 */
// union $F761E618955D9ED935731AE37AFEF266
// {
//   $2BD02F38FBEBD854EF9A531D8B9F9671 __s0;
//   unsigned __int64 BatchCount;
// };

// /* 2412 */
// struct __cppobj jqBatchGroup
// {
//   $F761E618955D9ED935731AE37AFEF266 ___u0;
// };

// /* 2409 */
// struct __cppobj jqModule
// {
//   const char *Name;
//   jqWorkerType Type;
//   int (__cdecl *Code)(jqBatch *);
//   jqBatchGroup Group;
// };

// /* 2413 */
// struct __cppobj _jqBatch
// {
// };

// /* 2414 */
// struct __cppobj __declspec(align(4)) jqBatch
// {
//   void *p3x_info;
//   void *Input;
//   void *Output;
//   jqModule *Module;
//   jqBatchGroup *GroupID;
//   void *ConditionalAddress;
//   unsigned int ConditionalValue;
//   unsigned int ParamData[23];
//   _jqBatch _Batch;
// };

// /* 2415 */
// struct __cppobj jqQueue
// {
//   jqQueue *ThisPtr;
//   jqAtomicQueue<jqBatch,32> Queue;
//   int QueuedBatchCount;
//   unsigned int ProcessorsMask;
// };

// /* 2418 */
// struct __cppobj __declspec(align(8)) jqAtomicQueue<jqBatch,32>
// {
//   jqAtomicQueue<jqBatch,32>::NodeType **FreeListPtr;
//   jqAtomicQueue<jqBatch,32>::NodeType *_FreeList;
//   jqAtomicQueue<jqBatch,32>::NodeBlockEntry *NodeBlockListHead;
//   jqAtomicQueue<jqBatch,32>::NodeType *Head;
//   jqAtomicQueue<jqBatch,32>::NodeType *Tail;
//   tlSharedAtomicMutex FreeLock;
//   tlAtomicMutex HeadLock;
//   tlAtomicMutex TailLock;
//   jqAtomicQueue<jqBatch,32> *ThisPtr;
// };

// /* 2416 */
// struct __cppobj jqAtomicQueue<jqBatch,32>::NodeType
// {
//   jqAtomicQueue<jqBatch,32>::NodeType *Next;
//   jqBatch Data;
// };

// /* 2417 */
// struct jqAtomicQueue<jqBatch,32>::NodeBlockEntry
// {
//   void *Addr;
//   jqAtomicQueue<jqBatch,32>::NodeBlockEntry *Next;
// };

// /* 2419 */
// struct __declspec(align(8)) jqWorkerCmd
// {
//   jqModule *module;
//   unsigned int dataSize;
//   volatile int ppu_fence;
//   volatile int spu_fence;
//   volatile int *spuThreadLimit;
//   jqQueue *queue;
//   unsigned int string_table;
// };

// /* 2420 */
// struct clientHeader_t
// {
//   int state;
//   int sendAsActive;
//   int deltaMessage;
//   int rateDelayed;
//   netchan_t netchan;
//   float predictedOrigin[3];
//   int predictedOriginServerTime;
//   PredictedVehicleInfo vehicle;
// };

// /* 2421 */
// struct __declspec(align(4)) SnapshotInfo_s
// {
//   int clientNum;
//   const clientHeader_t *client;
//   int snapshotDeltaTime;
//   bool fromBaseline;
//   bool archived;
//   bool entJustUnlinked;
//   bool demoSnapshot;
//   PacketEntityType packetEntityType;
//   bool packetEntityTypeArchived;
// };

// /* 2422 */
// struct uploadSendInfo
// {
//   int ms;
//   unsigned int size;
// };

// /* 2423 */
// struct uploadStreamData_t
// {
//   int controllerIndex;
//   unsigned __int8 buffer[393216];
//   volatile int writer;
//   volatile int reader;
//   volatile bool active;
//   volatile int lastWrite;
//   bool overflow;
//   uploadSendInfo sendHistory[100];
//   int sendHistoryIndex;
// };

// /* 2424 */
// struct uploadStreamDebugData_t
// {
//   bool isDataAdded;
//   int value;
// };

// /* 2425 */
// struct uploadStreamHistory_t
// {
//   uploadStreamDebugData_t history[60];
//   bool changed;
//   int highwater;
// };

// /* 2426 */
// struct svscmd_info_t
// {
//   char *cmd;
//   int time;
//   int type;
// };

// /* 2427 */
// struct clientSnapshot_t
// {
//   playerState_s ps;
//   int num_entities;
//   int num_clients;
//   int matchState;
//   int first_entity;
//   int first_client;
//   int messageSent;
//   int messageAcked;
//   int messageSize;
//   int serverTime;
//   int physicsTime;
// };

// /* 2428 */
// struct __unaligned __declspec(align(1)) VoicePacket_t
// {
//   unsigned __int8 talker;
//   unsigned __int8 data[256];
//   int dataSize;
// };

// /* 2429 */
// struct __cppobj client_t
// {
//   clientHeader_t header;
//   const char *dropReason;
//   char userinfo[1024];
//   char reliableCommandBuffer[16384];
//   int reliableCommandBufferNext;
//   svscmd_info_t reliableCommandInfo[128];
//   int reliableSequence;
//   int reliableAcknowledge;
//   int reliableSent;
//   int messageAcknowledge;
//   int gamestateMessageNum;
//   int challenge;
//   usercmd_s lastUsercmd;
//   int lastClientCommand;
//   char lastClientCommandString[1024];
//   gentity_s *gentity;
//   char name[32];
//   char clanAbbrev[5];
//   unsigned __int64 xuid;
//   int downloading;
//   char downloadName[64];
//   int download;
//   int downloadSize;
//   int downloadCount;
//   int downloadClientBlock;
//   int downloadCurrentBlock;
//   int downloadXmitBlock;
//   unsigned __int8 *downloadBlocks[8];
//   int downloadBlockSize[8];
//   int downloadEOF;
//   int downloadSendTime;
//   char downloadURL[256];
//   int wwwOk;
//   int downloadingWWW;
//   int clientDownloadingWWW;
//   int wwwFallback;
//   int nextReliableTime;
//   int nextReliableCount;
//   char reservedSlot;
//   int lastPacketTime;
//   int lastConnectTime;
//   int nextSnapshotTime;
//   int lastSnapshotTime;
//   int timeoutCount;
//   clientSnapshot_t frames[32];
//   int ping;
//   int rate;
//   int snapshotMsec;
//   int pureAuthentic;
//   char netchanOutgoingBuffer[65536];
//   char netchanIncomingBuffer[2048];
//   int guid;
//   unsigned int scriptId;
//   bool bIsSplitscreenClient;
//   int bIsTestClient;
//   int bIsDemoClient;
//   int serverId;
//   VoicePacket_t voicePackets[40];
//   int voicePacketCount;
//   bool muteList[32];
//   bool sendVoice;
//   unsigned __int8 stats[40168];
//   unsigned __int8 purchasedItems[32];
//   unsigned __int8 globalStats[40168];
//   unsigned __int8 globalStatsStable[40168];
//   unsigned __int8 modifiedStatBytes[5021];
//   int statsSentIndex;
//   int statsModified;
//   __int64 statPacketsReceived;
//   int statsValidated;
//   char PBguid[33];
//   char clientPBguid[33];
//   bool steamAuthorized;
//   unsigned __int8 steamAuthFailCount;
//   unsigned __int64 steamID;
//   bool tempPacketDebugging;
//   int snapshotHistoryTime;
//   int snapshotHistoryFrames;
//   int messageHistorySize;
//   unsigned __int64 dw_userID;
//   int notifyJoin;
//   unsigned int dwchallenge;
// };

// /* 2430 */
// struct __declspec(align(8)) cachedClient_s
// {
//   int playerStateExists;
//   clientState_s cs;
//   playerState_s ps;
// };

// /* 2431 */
// struct cachedSnapshot_t
// {
//   int archivedFrame;
//   int time;
//   int physicsTime;
//   int matchState;
//   int num_entities;
//   int first_entity;
//   int num_clients;
//   int first_client;
//   int usesDelta;
// };

// /* 2432 */
// struct serverStaticHeader_t
// {
//   client_t *clients;
//   int time;
//   int physicsTime;
//   int snapFlagServerBit;
//   int numCachedSnapshotMatchStates;
//   int numCachedSnapshotEntities;
//   int numCachedSnapshotClients;
//   int numSnapshotMatchStates;
//   int numSnapshotEntities;
//   int numSnapshotClients;
//   int nextSnapshotMatchStates;
//   int nextSnapshotEntities;
//   MatchState *snapshotMatchStates;
//   entityState_s *snapshotEntities;
//   clientState_s *snapshotClients;
//   svEntity_s *svEntities;
//   float mapCenter[3];
//   MatchState *cachedSnapshotMatchStates;
//   archivedEntity_s *cachedSnapshotEntities;
//   cachedClient_s *cachedSnapshotClients;
//   unsigned __int8 *archivedSnapshotBuffer;
//   cachedSnapshot_t *cachedSnapshotFrames;
//   int nextCachedSnapshotFrames;
//   int nextArchivedSnapshotFrames;
//   int nextCachedSnapshotMatchStates;
//   int nextCachedSnapshotEntities;
//   int nextCachedSnapshotClients;
//   int archivedEntityCount;
//   int num_entities;
//   int maxclients;
//   int fps;
//   int clientArchive;
//   gentity_s *gentities;
//   int gentitySize;
//   clientState_s *firstClientState;
//   playerState_s *firstPlayerState;
//   MatchState *matchState;
//   int clientSize;
// };

// /* 2433 */
// struct archivedSnapshot_s
// {
//   int start;
//   int size;
// };

// /* 2434 */
// struct __declspec(align(4)) challenge_t
// {
//   netadr_t adr;
//   int challenge;
//   int time;
//   int pingTime;
//   int firstTime;
//   int firstPing;
//   int connected;
//   int guid;
//   char PBguid[33];
//   char clientPBguid[33];
// };

// /* 2435 */
// struct tempBanSlot_t
// {
//   int guid;
//   int banTime;
// };

// /* 2436 */
// struct __declspec(align(128)) serverStatic_t
// {
//   cachedSnapshot_t *cachedSnapshotFrames;
//   archivedEntity_s *cachedSnapshotEntities;
//   int initialized;
//   int time;
//   int physicsTime;
//   int oldestArchiveTime;
//   int snapFlagServerBit;
//   client_t *clients;
//   int numCachedSnapshotMatchStates;
//   int numCachedSnapshotEntities;
//   int numCachedSnapshotClients;
//   int numSnapshotMatchStates;
//   int numSnapshotEntities;
//   int numSnapshotClients;
//   int nextSnapshotMatchStates;
//   int nextSnapshotEntities;
//   int nextSnapshotClients;
//   MatchState *snapshotMatchStates;
//   entityState_s *snapshotEntities;
//   clientState_s *snapshotClients;
//   int nextArchivedSnapshotFrames;
//   archivedSnapshot_s *archivedSnapshotFrames;
//   unsigned __int8 *archivedSnapshotBuffer;
//   int nextArchivedSnapshotBuffer;
//   int nextCachedSnapshotMatchStates;
//   int nextCachedSnapshotEntities;
//   int nextCachedSnapshotClients;
//   int nextCachedSnapshotFrames;
//   MatchState *cachedSnapshotMatchStates;
//   cachedClient_s *cachedSnapshotClients;
//   int nextHeartbeatTime;
//   int nextStatusResponseTime;
//   challenge_t challenges[1024];
//   netadr_t redirectAddress;
//   netProfileInfo_t OOBProf;
//   tempBanSlot_t tempBans[16];
//   unsigned __int64 xuids[32];
//   float mapCenter[3];
//   int dataSentLastSec;
//   int activeEntities;
//   int archivedEntityCount;
// };

// /* 2437 */
// struct __cppobj jqMiniProfiler
// {
//   unsigned int *Var;
//   unsigned int Start;
// };

// /* 2439 */
// struct jqAtomicHeap::LevelInfo
// {
//   unsigned int BlockSize;
//   int NBlocks;
//   int NCells;
//   unsigned __int64 *CellAvailable;
//   unsigned __int64 *CellAllocated;
// };

// /* 2438 */
// struct __cppobj jqAtomicHeap
// {
//   jqAtomicHeap *ThisPtr;
//   tlAtomicMutex Mutex;
//   unsigned __int8 *HeapBase;
//   unsigned int HeapSize;
//   unsigned int BlockSize;
//   volatile unsigned int TotalUsed;
//   volatile unsigned int TotalBlocks;
//   int NLevels;
//   jqAtomicHeap::LevelInfo Levels[11];
//   unsigned __int8 *LevelData;
// };

// /* 2440 */
// struct __cppobj jqMemBaseMarker
// {
//   void *MemBaseRestore;
// };

// /* 2441 */
// struct WorkerCmdConditional
// {
//   void *address;
//   unsigned int value;
// };

// /* 2442 */
// struct __declspec(align(4)) demoSaveCmd
// {
//   unsigned __int8 *data;
//   int size;
//   bool writeInfoFile;
// };

// /* 2443 */
// struct qtime_s
// {
//   int tm_sec;
//   int tm_min;
//   int tm_hour;
//   int tm_mday;
//   int tm_mon;
//   int tm_year;
//   int tm_wday;
//   int tm_yday;
//   int tm_isdst;
// };

// /* 2444 */
// struct __cppobj jqBatchPool
// {
//   jqBatchPool *ThisPtr;
//   jqQueue BaseQueue;
//   $F761E618955D9ED935731AE37AFEF266 ___u2;
//   jqAtomicHeap BatchDataHeap;
// };

// /* 2445 */
// struct __declspec(align(4)) streamingState_s
// {
//   unsigned __int8 *buffer;
//   int bufferSize;
//   int phase;
//   int segmentNo;
//   int byteOffset;
//   int totalDuration;
//   bool isEnteringState;
// };

 /* 2446 */
struct FxImpactEntry
{
  const FxEffectDef* nonflesh[31];
  const FxEffectDef* flesh[4];
};

static_assert(sizeof(FxImpactEntry) == 0x8C, "The size is not correct");

/* 2447 */
struct FxImpactTable
{
  const char* name;
  FxImpactEntry* table;
};

static_assert(sizeof(FxImpactTable) == 0x8, "The size is not correct");

// /* 2448 */
// struct cgMedia_t
// {
//   Material *whiteMaterial;
//   Material *teamStatusBar;
//   Material *afkLightbulb;
//   Material *connectionMaterial;
//   Material *youInKillCamMaterial;
//   Material *redTracerMaterial;
//   Material *greenTracerMaterial;
//   Material *bulletMaterial;
//   Material *laserMaterial;
//   Material *laserLightMaterial;
//   Material *lagometerMaterial;
//   Material *ropeMaterial;
//   Material *hintMaterials[2056];
//   Material *stanceMaterials[5];
//   Material *objectiveMaterials[1];
//   Material *friendMaterials[3];
//   Material *damageMaterial;
//   Material *mantleHint;
//   Material *graphline;
//   Font_s *smallDevFont;
//   Font_s *bigDevFont;
//   unsigned int grenadeExplodeSound[31];
//   unsigned int rifleGrenadeSound[31];
//   unsigned int rocketExplodeSound[31];
//   unsigned int rocketExplodeXtremeSound[31];
//   unsigned int mortarShellExplodeSound[31];
//   unsigned int tankShellExplodeSound[31];
//   unsigned int weaponImpactsTankArmorSound[16];
//   unsigned int weaponImpactsTankTreadSound[16];
//   unsigned int bulletHitSmallSound[31];
//   unsigned int bulletHitLargeSound[31];
//   unsigned int bulletHitAPSound[31];
//   unsigned int bulletHitXTremeSound[31];
//   unsigned int shotgunHitSound[31];
//   unsigned int boltHitSound[31];
//   unsigned int bladeHitSound[31];
//   unsigned int bulletExitSmallSound[31];
//   unsigned int bulletExitLargeSound[31];
//   unsigned int bulletExitAPSound[31];
//   unsigned int bulletExitXTremeSound[31];
//   unsigned int shotgunExitSound[31];
//   unsigned int boltExitSound[31];
//   unsigned int mantleSound;
//   unsigned int mantleSoundPlayer;
//   unsigned int dtpLaunchSound;
//   unsigned int dtpLaunchSoundPlayer;
//   unsigned int dtpLandSound[9];
//   unsigned int dtpLandSoundPlayer[9];
//   char dtpSlideLoopSound[9][64];
//   char dtpSlideLoopSoundPlayer[9][64];
//   unsigned int dtpSlideStopSound[9];
//   unsigned int dtpSlideStopSoundPlayer[9];
//   unsigned int dtpCollideSound;
//   unsigned int dtpCollideSoundPlayer;
//   unsigned int playerSlidingStart_1p[9];
//   unsigned int playerSlidingStart_3p[9];
//   unsigned int playerSlidingStop_1p[9];
//   unsigned int playerSlidingStop_3p[9];
//   unsigned int bulletWhizby;
//   unsigned int bulletCrack;
//   unsigned int underwaterWhizby;
//   unsigned int deathGurgle;
//   unsigned int meleeHit;
//   unsigned int meleeHitOther;
//   unsigned int meleeKnifeHit;
//   unsigned int meleeKnifeHitOther;
//   unsigned int meleeDogHit;
//   unsigned int meleeDogHitOther;
//   unsigned int nightVisionOn;
//   unsigned int nightVisionOff;
//   unsigned int playerSprintGasp;
//   unsigned int playerHeartBeatSound;
//   unsigned int playerBreathInSound;
//   unsigned int playerBreathOutSound;
//   unsigned int playerBreathGaspSound;
//   unsigned int playerSwapOffhand;
//   Material *compassping_player;
//   Material *compassping_friendlyfiring;
//   Material *compassping_friendlyyelling;
//   Material *compassping_friendlyfakefire;
//   Material *compassping_enemy;
//   Material *compassping_enemydirectional;
//   Material *compassping_enemyfiring;
//   Material *compassping_enemyyelling;
//   Material *compassping_enemysatellite;
//   Material *compassping_grenade;
//   Material *compassping_explosion;
//   Material *compassping_firstplace;
//   Material *watch_face;
//   Material *watch_hour;
//   Material *watch_minute;
//   Material *watch_second;
//   Material *acoustic_ping;
//   Material *acoustic_wedge;
//   Material *acoustic_grid;
//   Material *compass_scrambler_large;
//   Material *compass_mortar_selector;
//   Material *compass_acoustic_ping;
//   Material *compass_radarline;
//   Material *compass_artillery_friendly;
//   Material *compass_artillery_enemy;
//   Material *compass_mortar_friendly;
//   Material *compass_mortar_enemy;
//   Material *compass_dogs_enemy;
//   Material *compass_incoming_artillery;
//   Material *compass_sentry_friendly;
//   Material *compass_sentry_friendly_firing;
//   Material *compass_sentry_enemy;
//   Material *compass_sentry_enemy_firing;
//   Material *compass_tow_turret_friendly;
//   Material *compass_tow_turret_friendly_firing;
//   Material *compass_tow_turret_enemy;
//   Material *compass_tow_turret_enemy_firing;
//   Material *compass_guided_missile;
//   Material *grenadeIconFrag;
//   Material *grenadeIconFlash;
//   Material *grenadeIconThrowBack;
//   Material *grenadePointer;
//   Material *offscreenObjectivePointer;
//   Material *demoTimelineFaded;
//   Material *demoTimelineSolid;
//   Material *demoTimelineCursor;
//   Material *demoTimelineBookmark;
//   Material *demoStatePaused;
//   Material *demoStatePlay;
//   Material *demoStateStop;
//   Material *demoStateJump;
//   Material *demoStateForwardFast;
//   Material *demoStateForwardSlow;
//   FxImpactTable *fx;
//   const FxEffectDef *fxNoBloodFleshHit;
//   const FxEffectDef *fxKnifeBlood;
//   const FxEffectDef *fxKnifeNoBlood;
//   const FxEffectDef *fxDogBlood;
//   const FxEffectDef *fxDogNoBlood;
//   const FxEffectDef *fxNonFatalHero;
//   const FxEffectDef *fxBodyArmorSmall;
//   const FxEffectDef *fxBodyArmorLarge;
//   const FxEffectDef *fxDtpArmSlide1;
//   const FxEffectDef *fxDtpArmSlide2;
//   const FxEffectDef *fxPlayerSliding;
//   const FxEffectDef *fxPuff;
//   const FxEffectDef *heliDustEffect;
//   const FxEffectDef *heliWaterEffect;
//   const FxEffectDef *helicopterLightSmoke;
//   const FxEffectDef *helicopterHeavySmoke;
//   const FxEffectDef *helicopterOnFire;
//   const FxEffectDef *jetAfterburner;
//   Material *nightVisionOverlay;
//   Material *hudIconNVG;
//   Material *hudDpadArrow;
//   Material *hudDpadCircle;
//   Material *hudDpadLeftHighlight;
//   Material *ammoCounterBullet;
//   Material *ammoCounterBeltBullet;
//   Material *ammoCounterRifleBullet;
//   Material *ammoCounterRocket;
//   Material *ammoCounterShotgunShell;
//   Material *ammoCounterSingle;
//   Material *lifeCounterAlive;
//   Material *lifeCounterDead;
//   Material *textDecodeCharacters;
//   Material *textDecodeCharactersGlow;
//   const FxEffectDef *physicsWaterEffects[8];
//   const FxEffectDef *infraredHeartbeat;
// };

// /* 2449 */
// struct heli_height_lock_patches_t
// {
//   int brushmodel;
//   float origin[3];
//   unsigned __int16 targetname;
//   int enabled;
// };

 /* 2450 */
struct clientLogo_t
{
  int startTime;
  int duration;
  int fadein;
  int fadeout;
  Material* material[2];
};

/* 2451 */
struct XNADDR
{
  unsigned __int8 addrBuff[25];
};

/* 2452 */
struct serverInfo_t
{
  XNADDR xnaddr;
  bdSecurityKey xnkey;
  bdSecurityID xnkid;
  int publicSlots;
  int publicSlotsUsed;
  int privateSlots;
  int privateSlotsUsed;
  unsigned __int64 nonce;
  netadr_t adr;
  unsigned __int8 allowAnonymous;
  unsigned __int8 bPassword;
  unsigned __int8 pure;
  char consoleDisabled;
  unsigned __int8 netType;
  unsigned __int8 clients;
  unsigned __int8 maxClients;
  unsigned __int8 dirty;
  char friendlyfire;
  char killcam;
  char hardcore;
  unsigned __int8 hardware;
  unsigned __int8 mod;
  unsigned __int8 voice;
  unsigned __int8 punkbuster;
  unsigned __int8 requestCount;
  __int16 minPing;
  __int16 maxPing;
  __int16 ping;
  int pingedTime;
  unsigned __int8 gotInfo;
  char hostName[32];
  char mapName[32];
  char game[64];
  char gameType[16];
  unsigned __int64 bdUserID;
  int lastRequestTime;
  int region;
  int score;
  int wagerBet;
  int playlist;
  int licensetype;
  unsigned __int8 basictraining;
  unsigned __int8 customclassmode;
  char city[64];
  char countrycode[3];
};

/* 2453 */
struct __declspec(align(4)) vidConfig_t
{
  unsigned int sceneWidth;
  unsigned int sceneHeight;
  unsigned int displayWidth;
  unsigned int displayHeight;
  unsigned __int16 outputDisplayWidth;
  unsigned __int16 outputDisplayHeight;
  unsigned int displayFrequency;
  bool isToolMode;
  int isFullscreen;
  float aspectRatioWindow;
  float aspectRatioScenePixel;
  float aspectRatioDisplayPixel;
  unsigned int maxTextureSize;
  unsigned int maxTextureMaps;
  bool deviceSupportsGamma;
};

/* 2454 */
struct trDebugString_t
{
  float xyz[3];
  float color[4];
  float scale;
  char text[96];
};

/* 2455 */
struct clientDebugStringInfo_t
{
  int max;
  int num;
  trDebugString_t* strings;
  int* durations;
};

/* 2456 */
struct trDebugLine_t
{
  float start[3];
  float end[3];
  float color[4];
  int depthTest;
};

/* 2457 */
struct clientDebugLineInfo_t
{
  int max;
  int num;
  trDebugLine_t* lines;
  int* durations;
};

/* 2458 */
struct trDebugSphere_t
{
  float center[3];
  float radius;
  int sideCount;
  float color[4];
  int depthTest;
};

/* 2459 */
struct clientDebugSphereInfo_t
{
  int max;
  int num;
  trDebugSphere_t* spheres;
  int* durations;
};

/* 2460 */
struct clientDebug_t
{
  int prevFromServer;
  int fromServer;
  clientDebugStringInfo_t clStrings;
  clientDebugStringInfo_t svStringsBuffer;
  clientDebugStringInfo_t svStrings;
  clientDebugLineInfo_t clLines;
  clientDebugLineInfo_t svLinesBuffer;
  clientDebugLineInfo_t svLines;
  clientDebugSphereInfo_t clSpheres;
  clientDebugSphereInfo_t svSpheresBuffer;
  clientDebugSphereInfo_t svSpheres;
};

/* 2461 */
struct gameState_t
{
  int stringOffsets[3260];
  char stringData[65536];
  int dataCount;
  int matchUIVisibilityFlags;
};

/* 2462 */
struct clientStatic_t
{
  int hunkUsersStarted;
  char servername[256];
  unsigned __int64 serveruid;
  int rendererStarted;
  int soundStarted;
  int uiStarted;
  int devGuiStarted;
  int frametime;
  int inputRealMsec;
  int realtime;
  int realFrametime;
  clientLogo_t logo;
  float mapCenter[3];
  int numlocalservers;
  serverInfo_t localServers[128];
  int lastServerPinged;
  int pingedServerCount;
  int totalServersParsed;
  int waitdwfindsessionsresponse;
  int numrankedservers;
  __declspec(align(8)) serverInfo_t rankedServers[20000];
  int numunrankedservers;
  __declspec(align(8)) serverInfo_t unrankedServers[20000];
  int numwagerservers;
  __declspec(align(8)) serverInfo_t wagerServers[20000];
  int numfriendsservers;
  __declspec(align(8)) serverInfo_t friendsServers[256];
  int numrecentservers;
  __declspec(align(8)) serverInfo_t recentServers[20000];
  int lastFindSessionsTime;
  int numfavoriteservers;
  serverInfo_t favoriteServers[128];
  int pingUpdateSource;
  Material* whiteMaterial;
  Material* consoleMaterial;
  Material* spinnerMaterial;
  Font_s* consoleFont;
  vidConfig_t vidConfig;
  clientDebug_t debug;
  int download;
  char downloadTempName[256];
  char downloadName[256];
  int downloadNumber;
  int downloadBlock;
  int downloadCount;
  int downloadSize;
  char downloadList[1024];
  int downloadRestart;
  int doVidRestart;
  int wwwDlDisconnected;
  int wwwDlInProgress;
  int downloadFlags;
  char originalDownloadName[64];
  volatile int scriptError;
  float debugRenderForward[3];
  float debugRenderPos[3];
  int serverId;
  gameState_t gameState;
};

// /* 2463 */
// struct cscr_mp_data_t
// {
//   int dogstep;
//   int airsupport;
//   int demo_jump;
//   int demo_playerSwitch;
// };

// /* 2464 */
// struct __cppobj Destructible_BonePose
// {
//   int boneid;
//   int pieceIndex;
//   float angles_original[3];
//   float angles_offset[3];
//   float angles_vel[3];
// };

// /* 2465 */
// struct __cppobj DestructiblePose
// {
//   Destructible_BonePose bones[32];
//   __int16 numBones;
//   __int16 destructibleID;
// };

// /* 2466 */
// struct pulse_sum_constraint_solver::solver_info
// {
//   int m_max_vel_iters;
//   int m_max_vel_pos_iters;
//   float m_max_vel_error_sq;
//   float m_max_vel_pos_error_sq;
//   float m_delta_t;
// };

// /* 2467 */
// struct phys_transient_allocator::block_header
// {
//   unsigned int m_block_size;
//   unsigned int m_block_alignment;
//   phys_transient_allocator::block_header *m_next_block;
// };

// /* 2468 */
// struct __cppobj minspec_read_write_mutex
// {
//   volatile unsigned int m_count;
// };

// /* 2469 */
// struct __cppobj phys_transient_allocator
// {
//   phys_transient_allocator::block_header *m_first_block;
//   char *m_cur;
//   char *m_end;
//   unsigned int m_total_memory_allocated;
//   minspec_read_write_mutex m_mutex;
//   void *m_slot_pool;
// };

// /* 2470 */
// struct __cppobj phys_link_list<pulse_sum_node>
// {
//   pulse_sum_node *m_first;
//   pulse_sum_node **m_last_next_ptr;
//   int m_alloc_count;
// };

// /* 2471 */
// struct __cppobj phys_link_list<pulse_sum_normal>
// {
//   pulse_sum_normal *m_first;
//   pulse_sum_normal **m_last_next_ptr;
//   int m_alloc_count;
// };

// /* 2473 */
// struct phys_link_list_base<pulse_sum_point>
// {
//   pulse_sum_point *m_next_link;
// };

// /* 2472 */
// struct __cppobj pulse_sum_point : phys_link_list_base<pulse_sum_point>
// {
//   __declspec(align(16)) phys_vec3 m_b1_r;
//   phys_vec3 m_b2_r;
//   phys_vec3 m_b1_apx;
//   phys_vec3 m_b2_apx;
//   phys_vec3 m_b1_apy;
//   phys_vec3 m_b2_apy;
//   phys_vec3 m_b1_apz;
//   phys_vec3 m_b2_apz;
//   phys_vec3 m_pulse_sum;
//   phys_vec3 m_right_side;
//   phys_vec3 m_big_dirt;
//   phys_vec3 m_cr23;
//   phys_vec3 m_cr31;
//   phys_vec3 m_cr12;
//   phys_vec3 m_denom;
//   float m_cfm;
//   pulse_sum_node *m_b1;
//   pulse_sum_node *m_b2;
//   pulse_sum_cache *m_pulse_sum_cache;
// };

// /* 2474 */
// struct __cppobj phys_link_list<pulse_sum_point>
// {
//   pulse_sum_point *m_first;
//   pulse_sum_point **m_last_next_ptr;
//   int m_alloc_count;
// };

// /* 2476 */
// struct phys_link_list_base<pulse_sum_angular>
// {
//   pulse_sum_angular *m_next_link;
// };

// /* 2475 */
// struct __cppobj pulse_sum_angular : phys_link_list_base<pulse_sum_angular>
// {
//   __declspec(align(16)) phys_vec3 m_ud;
//   phys_vec3 m_b1_r;
//   phys_vec3 m_b2_r;
//   phys_vec3 m_b1_ap;
//   phys_vec3 m_b2_ap;
//   float m_pulse_sum_min;
//   float m_pulse_sum_max;
//   float m_pulse_sum;
//   float m_right_side;
//   float m_big_dirt;
//   float m_cfm;
//   float m_denom;
//   unsigned int m_flags;
//   pulse_sum_node *m_b1;
//   pulse_sum_node *m_b2;
//   pulse_sum_cache *m_pulse_sum_cache;
// };

// /* 2477 */
// struct __cppobj phys_link_list<pulse_sum_angular>
// {
//   pulse_sum_angular *m_first;
//   pulse_sum_angular **m_last_next_ptr;
//   int m_alloc_count;
// };

// /* 2479 */
// struct phys_link_list_base<pulse_sum_wheel>
// {
//   pulse_sum_wheel *m_next_link;
// };

// /* 2478 */
// struct __cppobj __declspec(align(8)) pulse_sum_wheel : phys_link_list_base<pulse_sum_wheel>
// {
//   pulse_sum_normal m_suspension;
//   pulse_sum_normal *m_side;
//   pulse_sum_normal *m_fwd;
//   float m_side_fric_max;
// };

// /* 2480 */
// struct __cppobj phys_link_list<pulse_sum_wheel>
// {
//   pulse_sum_wheel *m_first;
//   pulse_sum_wheel **m_last_next_ptr;
//   int m_alloc_count;
// };

// /* 2482 */
// struct phys_link_list_base<pulse_sum_contact>
// {
//   pulse_sum_contact *m_next_link;
// };

// /* 2481 */
// struct __cppobj pulse_sum_contact : phys_link_list_base<pulse_sum_contact>
// {
//   __declspec(align(16)) phys_vec3 m_ud_n;
//   phys_vec3 m_ud_f1;
//   phys_vec3 m_ud_f2;
//   float m_fric_coef;
//   pulse_sum_node *m_b1;
//   pulse_sum_node *m_b2;
//   pulse_sum_contact_point *m_list_pscp;
//   void *m_pulse_sum_cache_list;
//   int m_list_pscp_count;
// };

// /* 2483 */
// struct __cppobj __declspec(align(16)) pulse_sum_contact_point
// {
//   phys_vec3 m_b1_r;
//   phys_vec3 m_b2_r;
//   phys_vec3 m_b1_ap_n;
//   phys_vec3 m_b2_ap_n;
//   phys_vec3 m_b1_ap_f1;
//   phys_vec3 m_b2_ap_f1;
//   phys_vec3 m_b1_ap_f2;
//   phys_vec3 m_b2_ap_f2;
//   phys_vec3 m_pulse_sum;
//   phys_vec3 m_right_side;
//   float m_big_dirt;
//   float m_denom_xx;
//   float m_denom_yy;
//   float m_denom_zz;
//   float m_denom_xy;
//   float m_denom_xz;
//   float m_inv_yy;
//   float m_inv_yz;
//   float m_inv_zz;
// };

// /* 2484 */
// struct __cppobj phys_link_list<pulse_sum_contact>
// {
//   pulse_sum_contact *m_first;
//   pulse_sum_contact **m_last_next_ptr;
//   int m_alloc_count;
// };

// /* 2485 */
// struct __cppobj pulse_sum_constraint_solver
// {
//   float m_outside_delta_t;
//   int m_psys_max_vel_iters;
//   int m_psys_max_vel_pos_iters;
//   pulse_sum_constraint_solver::solver_info m_si;
//   phys_transient_allocator m_solver_memory_allocator;
//   phys_link_list<pulse_sum_node> m_list_pulse_sum_node;
//   int m_memory_high_water;
//   phys_link_list<pulse_sum_normal> m_list_pulse_sum_normal;
//   phys_link_list<pulse_sum_point> m_list_pulse_sum_point;
//   phys_link_list<pulse_sum_angular> m_list_pulse_sum_angular;
//   phys_link_list<pulse_sum_wheel> m_list_pulse_sum_wheel;
//   phys_link_list<pulse_sum_contact> m_list_pulse_sum_contact;
// };

// /* 2486 */
// struct __cppobj avi::RIFF_s::LIST_hdrl_s::avih_s
// {
//   char header[4];
//   unsigned int size;
//   unsigned int MicroSecPerFrame;
//   unsigned int MaxBytesPerSec;
//   unsigned int PaddingGranularity;
//   unsigned int Flags;
//   unsigned int TotalFrames;
//   unsigned int InitialFrames;
//   unsigned int Streams;
//   unsigned int SuggestedBufferSize;
//   unsigned int Width;
//   unsigned int Height;
//   unsigned int Reserved[4];
// };

// /* 2487 */
// struct __cppobj avi::RIFF_s::LIST_hdrl_s::LIST_vid_strl_s::strh_s
// {
//   char header[4];
//   unsigned int size;
//   char type[4];
//   char format[4];
//   unsigned int Flags;
//   unsigned __int16 Priority;
//   unsigned __int16 Language;
//   unsigned int InitialFrames;
//   unsigned int Scale;
//   unsigned int Rate;
//   unsigned int Start;
//   unsigned int Length;
//   unsigned int SuggestedBufferSize;
//   unsigned int Quality;
//   unsigned int SampleSize;
//   unsigned __int16 rLeft;
//   unsigned __int16 rTop;
//   unsigned __int16 rRight;
//   unsigned __int16 rBottom;
// };

// /* 2488 */
// struct __cppobj avi::RIFF_s::LIST_hdrl_s::LIST_vid_strl_s::strf_s
// {
//   char header[4];
//   unsigned int size;
//   unsigned int sizeBi;
//   unsigned int width;
//   unsigned int height;
//   unsigned __int16 planes;
//   unsigned __int16 bit_count;
//   char compression[4];
//   unsigned int size_image;
//   unsigned int horizontal_ppm;
//   unsigned int vertical_ppm;
//   unsigned int colors_used;
//   unsigned int colors_important;
// };

// /* 2489 */
// struct __cppobj avi::RIFF_s::LIST_hdrl_s::LIST_vid_strl_s
// {
//   char header[4];
//   unsigned int size;
//   char type[4];
//   avi::RIFF_s::LIST_hdrl_s::LIST_vid_strl_s::strh_s strh;
//   avi::RIFF_s::LIST_hdrl_s::LIST_vid_strl_s::strf_s strf;
// };

// /* 2490 */
// struct __cppobj avi::RIFF_s::LIST_hdrl_s::LIST_aud_strl_s::strh_s
// {
//   char header[4];
//   unsigned int size;
//   char type[4];
//   char format[4];
//   unsigned int Flags;
//   unsigned __int16 Priority;
//   unsigned __int16 Language;
//   unsigned int InitialFrames;
//   unsigned int Scale;
//   unsigned int Rate;
//   unsigned int Start;
//   unsigned int Length;
//   unsigned int SuggestedBufferSize;
//   unsigned int Quality;
//   unsigned int SampleSize;
//   unsigned __int16 rLeft;
//   unsigned __int16 rTop;
//   unsigned __int16 rRight;
//   unsigned __int16 rBottom;
// };

// /* 2491 */
// struct __cppobj avi::RIFF_s::LIST_hdrl_s::LIST_aud_strl_s::strf_s
// {
//   char header[4];
//   unsigned int size;
//   unsigned __int16 format;
//   unsigned __int16 channels;
//   unsigned int samples_per_sec;
//   unsigned int avg_bytes_per_sec;
//   unsigned __int16 block_align;
//   unsigned __int16 bits_per_sample;
// };

// /* 2492 */
// struct __cppobj avi::RIFF_s::LIST_hdrl_s::LIST_aud_strl_s
// {
//   char header[4];
//   unsigned int size;
//   char type[4];
//   avi::RIFF_s::LIST_hdrl_s::LIST_aud_strl_s::strh_s strh;
//   avi::RIFF_s::LIST_hdrl_s::LIST_aud_strl_s::strf_s strf;
// };

// /* 2493 */
// struct __cppobj avi::RIFF_s::LIST_hdrl_s
// {
//   char header[4];
//   unsigned int size;
//   char type[4];
//   avi::RIFF_s::LIST_hdrl_s::avih_s avih;
//   avi::RIFF_s::LIST_hdrl_s::LIST_vid_strl_s strl_vid;
//   avi::RIFF_s::LIST_hdrl_s::LIST_aud_strl_s strl_aud;
// };

// /* 2494 */
// struct avi::idx1_s
// {
//   int count;
//   int offsets[8192];
//   int sizes[8192];
// };

// /* 2495 */
// struct __cppobj avi::RIFF_s
// {
//   char header[4];
//   unsigned int size;
//   char type[4];
//   avi::RIFF_s::LIST_hdrl_s list;
//   avi::idx1_s idx1;
// };

// /* 2496 */
// struct __cppobj Phys_UnitQuaternion
// {
//   float x;
//   float y;
//   float z;
//   float w;
// };

// /* 2497 */
// struct __cppobj nuge
// {
// };

// /* 2498 */
// struct __cppobj minspec_mutex
// {
//   volatile unsigned int m_token;
// };

// /* 2499 */
// struct __cppobj phys_simple_link_list<contact_point_info>::iterator
// {
//   contact_point_info *m_ptr;
// };

// /* 2500 */
// struct __declspec(align(4)) jpeg_encode_state
// {
//   unsigned __int16 *qt;
//   unsigned __int16 *DcCode;
//   unsigned __int16 *DcSize;
//   unsigned __int16 *AcCode;
//   unsigned __int16 *AcSize;
//   __int16 ldc;
// };

// /* 2501 */
// struct __cppobj phys_assert_info
// {
//   int m_hits_total_count;
//   int m_hits_frame_count;
//   int m_max_hits_total;
//   int m_max_hits_per_frame;
//   bool m_use_warnings_only;
//   phys_assert_info *m_next;
// };

// /* 2502 */
// struct __cppobj overlappedTask
// {
//   bdReference<bdRemoteTask> overlappedIO;
//   bdRemoteTask::bdStatus finalStatus;
//   bdLobbyErrorCode errorCode;
//   int type;
//   bool active;
//   int controllerIndex;
//   void *data;
//   void *miscData;
//   float startMS;
// };

// /* 2503 */
// struct fileShareWriteFileInfo
// {
//   unsigned __int16 fileSlot;
//   void *fileData;
//   unsigned int fileSize;
//   const char *fileName;
//   unsigned __int16 category;
//   const void *thumbData;
//   unsigned int thumbDataSize;
//   unsigned int numTags;
//   fileShareLocation location;
//   bdTag *tags;
//   unsigned int (__cdecl *dataCallback)(void *, unsigned int, unsigned int);
//   void (__cdecl *successCallback)(int, unsigned __int64);
//   void (__cdecl *failureCallback)(int);
// };

// /* 2504 */
// struct scr_classStruct_t
// {
//   unsigned int id;
//   unsigned int entArrayId;
//   char charId;
//   const char *name;
// };

// /* 2505 */
// struct phys_transient_allocator::allocator_state
// {
//   phys_transient_allocator::block_header *m_first_block;
//   char *m_cur;
//   char *m_end;
//   unsigned int m_total_memory_allocated;
// };

// /* 2506 */
// struct jpeg_exif
// {
//   float gpsLat;
//   float gpsLon;
//   float gpsOffsetLat;
//   float gpsOffsetLon;
// };

// /* 2507 */
// struct _CustomClassData::modifierDef
// {
//   const char *modifierName;
//   int modifierOffset;
// };

// /* 2508 */
// struct __cppobj _CustomClassData
// {
//   int isActive;
//   unsigned __int8 primary;
//   unsigned __int8 primaryattachment;
//   unsigned __int8 primaryattachmenttop;
//   unsigned __int8 primaryattachmentbottom;
//   unsigned __int8 primaryattachmenttrigger;
//   unsigned __int8 primaryattachmentmuzzle;
//   unsigned __int8 primarycamo;
//   unsigned __int8 primaryreticle;
//   unsigned __int8 primaryreticlecolor;
//   unsigned __int8 primarylens;
//   unsigned __int8 primaryemblem;
//   unsigned __int8 primarytag;
//   unsigned __int8 secondary;
//   unsigned __int8 secondaryattachment;
//   unsigned __int8 secondaryattachmenttop;
//   unsigned __int8 secondaryattachmentbottom;
//   unsigned __int8 secondaryattachmenttrigger;
//   unsigned __int8 secondaryattachmentmuzzle;
//   unsigned __int8 secondarycamo;
//   unsigned __int8 secondaryreticle;
//   unsigned __int8 secondaryreticlecolor;
//   unsigned __int8 secondarylens;
//   unsigned __int8 secondaryemblem;
//   unsigned __int8 secondarytag;
//   unsigned __int8 specialty1;
//   unsigned __int8 specialty2;
//   unsigned __int8 specialty3;
//   unsigned __int8 classbonus;
//   unsigned __int8 head;
//   unsigned __int8 body;
//   unsigned __int8 primarygrenade;
//   unsigned __int8 specialgrenade;
//   unsigned __int8 equipment;
//   unsigned __int8 facepaintpattern;
//   unsigned __int8 facepaintcolor;
//   unsigned __int8 killstreak1;
//   unsigned __int8 killstreak2;
//   unsigned __int8 killstreak3;
//   unsigned __int8 deathstreak;
//   int team;
//   int character;
//   int health;
//   int healthRegeneration;
//   int healthVampirism;
//   int movementSpeed;
//   int movementSprintSpeed;
//   int damage;
//   int damageExplosive;
// };

// /* 2509 */
// struct __cppobj _CustomClassDescription
// {
//   char name[16];
// };

/* 2510 */
struct scr_entref_t
{
  unsigned __int16 entnum;
  unsigned __int16 classnum;
  unsigned __int16 client;
};

// /* 2511 */
// struct __cppobj rigid_body_constraint_contact::avl_tree_accessor
// {
// };

// /* 2512 */
// struct jpeg_encode
// {
//   unsigned __int8 jpeg_Lqt[64];
//   unsigned __int8 jpeg_Cqt[64];
//   unsigned __int16 jpeg_ILqt[64];
//   unsigned __int16 jpeg_ICqt[64];
//   unsigned int jpeg_lcode;
//   unsigned __int16 jpeg_bitindex;
//   jpeg_encode_state jpeg_encode_block_state_y;
//   jpeg_encode_state jpeg_encode_block_state_u;
//   jpeg_encode_state jpeg_encode_block_state_v;
// };

// /* 2513 */
// struct demoFileHandler
// {
//   unsigned __int8 *ptr;
//   int size;
//   int offset;
// };

// /* 2514 */
// struct __cppobj XSESSION_INFO
// {
//   bdSecurityID sessionID;
//   XNADDR hostAddress;
//   bdSecurityKey keyExchangeKey;
// };

// /* 2515 */
// struct RegisteredUser
// {
//   bool active;
//   unsigned __int64 xuid;
//   netadr_t addr;
//   bool privateSlot;
//   int performanceValue;
// };

// /* 2516 */
// struct __declspec(align(4)) RemoteTalkerInfo
// {
//   bool registered;
//   unsigned __int64 xuid;
//   int natType;
//   int voiceConnectivityBits;
//   int lastConnectivityTestTime[1];
//   bool muted;
// };

// /* 2517 */
// struct LocalTalkerInfo
// {
//   bool enabled;
// };

// /* 2518 */
// struct __cppobj __declspec(align(8)) SessionData_s
// {
//   char *sessionName;
//   bool sessionHandle;
//   XSESSION_INFO sessionInfo;
//   bool keysGenerated;
//   bool sessionStartCalled;
//   bool registerUsersWithVoice;
//   unsigned __int64 sessionNonce;
//   int privateSlots;
//   int publicSlots;
//   int flags;
//   PS3VoiceEngine *voiceEngine;
//   bool qosListenEnabled;
//   RegisteredUser registeredUsers[32];
//   RemoteTalkerInfo remoteTalkers[32];
//   LocalTalkerInfo localTalkers[4];
//   int voiceConnectivityBits;
//   int sessionCreateController;
//   int ackedMeetBits;
//   int lastMeetSendTime;
// };

// /* 2519 */
// struct demoClient_s
// {
//   int state;
// };

// /* 2520 */
// struct __cppobj __declspec(align(8)) demoRecordedFileUploadInfo
// {
//   unsigned __int64 fileID;
//   char metaData[512];
//   int metaDataSize;
//   bdTag tags[40];
//   int numTags;
// };

 /* 2521 */
struct __declspec(align(4)) cmd_function_s
{
  cmd_function_s* next;
  const char* name;
  const char* autoCompleteDir;
  const char* autoCompleteExt;
  void(__cdecl* function)();
  bool consoleAccess;
};

static_assert(sizeof(cmd_function_s) == 0x18, "The size is not correct");

// /* 2522 */
// struct __cppobj dwFileShareReadFileTask
// {
//   fileShareLocation location;
//   unsigned __int64 fileID;
//   unsigned int fileSize;
//   bdFileMetaData descriptor;
//   const char *menuDef;
//   void *buffer;
//   void *cacheBuffer;
//   unsigned int bufferSize;
//   unsigned int bytesDownloaded;
//   bdDownloadInterceptor *downloadHandler;
//   bool loadedFromCache;
//   void (__cdecl *dataCallback)(void *, unsigned int, unsigned int, unsigned int);
//   void (__cdecl *successCallback)(dwFileShareReadFileTask *);
//   void (__cdecl *failureCallback)(dwFileShareReadFileTask *);
// };

// /* 2523 */
// struct __declspec(align(8)) fileShareReadFileInfo
// {
//   unsigned __int64 fileID;
//   unsigned int fileSize;
//   fileShareLocation location;
//   char *buffer;
//   unsigned int bufferSize;
//   bool isStreamed;
//   void *cacheBuffer;
//   void (__cdecl *dataCallback)(void *, unsigned int, unsigned int, unsigned int);
//   void (__cdecl *successCallback)(dwFileShareReadFileTask *);
//   void (__cdecl *failureCallback)(dwFileShareReadFileTask *);
// };

// /* 2524 */
// struct SpawnVar
// {
//   bool spawnVarsValid;
//   int numSpawnVars;
//   char *spawnVars[64][2];
//   int numSpawnVarChars;
//   char spawnVarChars[2048];
// };

// /* 2525 */
// struct cached_tag_mat_t
// {
//   int time;
//   int entnum;
//   unsigned __int16 name;
//   float tagMat[4][3];
// };

// /* 2526 */
// struct trigger_info_t
// {
//   unsigned __int16 entnum;
//   unsigned __int16 otherEntnum;
//   int useCount;
//   int otherUseCount;
// };

// /* 2527 */
// struct com_parse_mark_t
// {
//   int lines;
//   const char *text;
//   int ungetToken;
//   int backup_lines;
//   const char *backup_text;
// };

// /* 2528 */
// struct __declspec(align(64)) level_locals_t
// {
//   gclient_s *clients;
//   gentity_s *gentities;
//   int gentitySize;
//   int num_entities;
//   gentity_s *firstFreeEnt;
//   gentity_s *lastFreeEnt;
//   scr_vehicle_s *vehicles;
//   gentity_s *firstFreeActor;
//   gentity_s *lastFreeActor;
//   int num_actors;
//   sentient_s *sentients;
//   actor_s *actors;
//   int actorCorpseCount;
//   TurretInfo *turrets;
//   int logFile;
//   int initializing;
//   int clientIsSpawning;
//   int maxclients;
//   objective_t objectives[32];
//   int objectivesClientMask[32][2];
//   int framenum;
//   int time;
//   int previousTime;
//   int frametime;
//   int startTime;
//   SpawnVar spawnVar;
//   EntHandle droppedWeaponCue[32];
//   int savepersist;
//   float fFogOpaqueDist;
//   float fFogOpaqueDistSqrd;
//   int bPlayerIgnoreRadiusDamage;
//   int bPlayerIgnoreRadiusDamageLatched;
//   int currentEntityThink;
//   int registerWeapons;
//   int bRegisterItems;
//   cached_tag_mat_t cachedTagMat;
//   cached_tag_mat_t cachedEntTargetTagMat;
//   trigger_info_t pendingTriggerList[256];
//   trigger_info_t currentTriggerList[256];
//   int pendingTriggerListSize;
//   int currentTriggerListSize;
//   int openScriptIOFileHandles[1];
//   char *openScriptIOFileBuffers[1];
//   com_parse_mark_t currentScriptIOLineMark[1];
//   int scriptPrintChannel;
//   float compassMapUpperLeft[2];
//   float compassMapWorldSize[2];
//   float compassNorth[2];
//   int finished;
//   int manualNameChange;
//   unsigned __int16 modelMap[512];
//   int numConnectedClients;
//   int sortedClients[32];
//   int bUpdateScoresForIntermission;
//   int numVotingClients;
//   MatchState matchState;
//   int teamScores[4];
//   int lastTeammateHealthTime;
//   unsigned int teamHasSpyplane[4];
//   unsigned int teamHasSatellite[4];
//   char voteString[1024];
//   char voteDisplayString[1024];
//   int voteTime;
//   int voteExecuteTime;
//   int voteYes;
//   int voteNo;
//   int currentActorClone;
//   int iSearchFrame;
//   int currentPlayerClone;
// };

 /* 2529 */
struct IgnoreEntParams
{
  int baseEntity;
  int parentEntity;
  bool ignoreSelf;
  bool ignoreParent;
  bool ignoreSiblings;
  bool ignoreChildren;
};

 /* 2530 */
struct /*__cppobj */ col_context_t
{
  int mask;
  const col_prim_t* prims;
  int nprims;
  IgnoreEntParams* ignoreEntParams;
  int passEntityNum0;
  int passEntityNum1;
  int staticmodels;
  int locational;
  unsigned __int8* priorityMap;
  int(__cdecl* collide_entity_func)(int, col_context_t*);
};

// /* 2531 */
// struct __cppobj I_spuDmaSave
// {
// };

// /* 2532 */
// union CgEntCollTree::<unnamed_type_u>
// {
//   unsigned __int16 parent;
//   unsigned __int16 nextFree;
// };

// /* 2533 */
// struct CgEntCollTree
// {
//   float dist;
//   unsigned __int16 axis;
//   CgEntCollTree::<unnamed_type_u> u;
//   unsigned __int16 child[2];
// };

// /* 2534 */
// struct __declspec(align(4)) CgEntCollSector
// {
//   CgEntCollTree tree;
//   unsigned __int16 entListHead;
// };

// /* 2535 */
// struct CgEntCollWorld
// {
//   float mins[3];
//   float maxs[3];
//   unsigned __int16 freeHead;
//   CgEntCollSector sectors[1024];
// };

// /* 2536 */
// struct CgEntCollNode
// {
//   unsigned __int16 sector;
//   unsigned __int16 nextEntInSector;
//   float linkMins[3];
//   float linkMaxs[3];
// };

// /* 2537 */
// struct HINSTANCE__
// {
//   int unused;
// };

// /* 2538 */
// struct GfxWindowTarget
// {
//   HWND__ *hwnd;
//   IDirect3DSwapChain9 *swapChain;
//   int width;
//   int height;
// };

// /* 2539 */
// struct __declspec(align(8)) DxGlobals
// {
//   HINSTANCE__ *hinst;
//   IDirect3D9 *d3d9;
//   IDirect3DDevice9 *device;
//   unsigned int adapterIndex;
//   unsigned int vendorId;
//   bool adapterNativeIsValid;
//   int adapterNativeWidth;
//   int adapterNativeHeight;
//   int adapterFullscreenWidth;
//   int adapterFullscreenHeight;
//   bool supportsSceneNullRenderTarget;
//   bool supportsIntZ;
//   bool nvInitialized;
//   bool nvStereoActivated;
//   void *nvStereoHandle;
//   void *nvDepthBufferHandle;
//   void *nvFloatZBufferHandle;
//   bool resizeWindow;
//   _D3DFORMAT depthStencilFormat;
//   unsigned int displayModeCount;
//   _D3DDISPLAYMODE displayModes[256];
//   const char *resolutionNameTable[257];
//   const char *refreshRateNameTable[257];
//   char modeText[5120];
//   IDirect3DQuery9 *fencePool[8];
//   unsigned int nextFence;
//   int gpuSync;
//   int gpuCount;
//   _D3DMULTISAMPLE_TYPE multiSampleType;
//   unsigned int multiSampleQuality;
//   int sunSpriteSamples;
//   IDirect3DSurface9 *singleSampleDepthStencilSurface;
//   bool inScene;
//   int targetWindowIndex;
//   int windowCount;
//   GfxWindowTarget windows[1];
//   IDirect3DQuery9 *flushGpuQuery;
//   unsigned __int64 gpuSyncDelay;
//   unsigned __int64 gpuSyncStart;
//   unsigned __int64 gpuSyncEnd;
//   _D3DTEXTUREFILTERTYPE linearNonMippedMinFilter;
//   _D3DTEXTUREFILTERTYPE linearNonMippedMagFilter;
//   _D3DTEXTUREFILTERTYPE linearMippedMinFilter;
//   _D3DTEXTUREFILTERTYPE linearMippedMagFilter;
//   _D3DTEXTUREFILTERTYPE anisotropicMinFilter;
//   _D3DTEXTUREFILTERTYPE anisotropicMagFilter;
//   int linearMippedAnisotropy;
//   int anisotropyFor2x;
//   int anisotropyFor4x;
//   int mipFilterMode;
//   unsigned int mipBias;
//   IDirect3DQuery9 *swapFence[4];
// };

// /* 2540 */
// struct GfxCmdBufPrimState::<unnamed_type_streams>
// {
//   unsigned int stride;
//   IDirect3DVertexBuffer9 *vb;
//   unsigned int offset;
// };

// /* 2541 */
// struct GfxPrimStats
// {
//   int primCount;
//   int triCount;
//   int staticIndexCount;
//   int staticVertexCount;
//   int dynamicIndexCount;
//   int dynamicVertexCount;
// };

// /* 2542 */
// struct GfxViewStats
// {
//   GfxPrimStats primStats[10];
//   int drawSurfCount;
//   int drawMatCount;
//   int drawPrimHistogram[16];
// };

// /* 2543 */
// struct GfxFrameStats
// {
//   GfxViewStats viewStats[2];
//   int gfxEntCount;
//   int geoIndexCount;
//   int fxIndexCount;
// };

// /* 2544 */
// union $0548B6ED447A4690AAB8EE4D4B1790A5
// {
//   IDirect3DDevice9 *device;
//   IDirect3DDevice9 *localDevice;
// };

// /* 2545 */
// struct GfxCmdBufPrimState
// {
//   $0548B6ED447A4690AAB8EE4D4B1790A5 ___u0;
//   IDirect3DIndexBuffer9 *indexBuffer;
//   MaterialVertexDeclType vertDeclType;
//   GfxCmdBufPrimState::<unnamed_type_streams> streams[3];
//   IDirect3DVertexDeclaration9 *vertexDecl;
//   GfxFrameStats frameStats;
//   GfxPrimStats *primStats;
//   GfxPrimStats *backupPrimStats;
//   GfxViewStats *viewStats;
// };

// /* 2546 */
// struct GfxCmdBufState
// {
//   unsigned __int8 refSamplerState[16];
//   unsigned int samplerState[16];
//   const GfxTexture *samplerTexture[16];
//   GfxCmdBufPrimState prim;
//   const Material *material;
//   unsigned __int8 techType;
//   const MaterialTechnique *technique;
//   const MaterialPass *pass;
//   unsigned int passIndex;
//   GfxDepthRangeType depthRangeType;
//   float depthRangeNear;
//   float depthRangeFar;
//   unsigned __int64 vertexShaderConstState[256];
//   unsigned __int64 pixelShaderConstState[256];
//   unsigned __int8 alphaRef;
//   unsigned int refStateBits[2];
//   unsigned int activeStateBits[2];
//   const MaterialPixelShader *pixelShader;
//   const MaterialVertexShader *vertexShader;
//   unsigned int pixPrimarySortKey;
//   const Material *pixMaterial;
//   const MaterialTechnique *pixTechnique;
//   int pixCombine;
//   GfxViewport viewport;
//   GfxViewport scissor;
//   int scissorEnabled;
//   unsigned __int8 renderTargetId;
//   const Material *origMaterial;
//   unsigned __int8 origTechType;
//   int stateOverride;
// };

// /* 2547 */
// struct GfxRenderTargetSurface
// {
//   IDirect3DSurface9 *color;
//   IDirect3DSurface9 *depthStencil;
// };

// /* 2548 */
// struct __declspec(align(4)) GfxRenderTarget
// {
//   GfxImage *image;
//   GfxRenderTargetSurface surface;
//   unsigned __int16 width;
//   unsigned __int16 height;
//   bool cleared;
// };

// /* 2549 */
// struct $6526D9CDBB05EF7DD63886BD807A3E2E
// {
//   bool init;
//   int width;
//   int height;
//   unsigned __int8 *outY;
//   unsigned __int8 *outU;
//   unsigned __int8 *outV;
//   IDirect3DTexture9 *renderTarget;
//   IDirect3DTexture9 *srcTexture;
//   IDirect3DTexture9 *dstTexture;
//   IDirect3DPixelShader9 *pixelShader;
//   IDirect3DVertexShader9 *vertexShader;
//   IDirect3DVertexBuffer9 *vertexBuffer;
//   IDirect3DVertexDeclaration9 *vertexDeclaration;
// };

// /* 2550 */
// struct __declspec(align(4)) GfxMetrics
// {
//   unsigned __int16 cubemapShotRes;
//   unsigned __int16 cubemapShotPixelBorder;
//   unsigned __int16 feedbackWidth;
//   unsigned __int16 feedbackHeight;
//   bool hasAnisotropicMinFilter;
//   bool hasAnisotropicMagFilter;
//   int maxAnisotropy;
//   int maxClipPlanes;
//   bool hasHardwareShadowmap;
//   _D3DFORMAT shadowmapFormatPrimary;
//   _D3DFORMAT shadowmapFormatSecondary;
//   unsigned __int8 shadowmapBuildTechType;
//   unsigned __int8 shadowmapSamplerState;
//   bool slopeScaleDepthBias;
//   bool canMipCubemaps;
//   bool hasTransparencyMsaa;
// };

// /* 2551 */
// struct StreamFrontendGlob
// {
//   void *mainBuffer;
//   int mainBufferSize;
//   void *extraBuffer;
//   int extraBufferSize;
//   unsigned int frame;
//   __declspec(align(128)) float materialImportance[4096];
//   unsigned int materialImportanceBits[128];
//   unsigned int materialTouchBits[128];
//   unsigned int materialPreventBits[128];
//   float modelDistance[1000];
//   __declspec(align(128)) unsigned int modelDistanceBits[32];
//   float dynamicModelDistance[1000];
//   __declspec(align(128)) unsigned int dynamicModelDistanceBits[32];
//   unsigned int modelTouchBits[32];
//   unsigned int imageInSortedListBits[128];
//   float imageImportance[4096];
//   unsigned int imageImportanceBits[128];
//   float dynamicImageImportance[4096];
//   unsigned int dynamicImageImportanceBits[128];
//   unsigned int dummy;
//   unsigned int imageLoading[128];
//   unsigned int imageUseBits[128];
//   unsigned int imageForceBits[128];
//   unsigned int imageInitialBits[128];
//   unsigned int imageTouchBits[2][128];
//   int activeImageTouchBits;
//   float touchedImageImportance;
//   float initialImageImportance;
//   float forcedImageImportance;
//   bool imageInitialBitsSet;
//   int initialLoadAllocFailures;
//   bool preloadCancelled;
//   bool diskOrderImagesNeedSorting;
//   __declspec(align(128)) int sortedImages[4096];
//   int sortedImageCount;
//   bool calculateTotalBytesWanted;
//   int totalBytesWanted;
//   volatile int queryClient;
//   volatile int queryInProgress;
//   bool diskOrder;
//   bool forceDiskOrder;
//   bool outputImageList;
//   bool ignoreMainView;
// };

// /* 2552 */
// struct GfxCodeImageRenderTargetFields
// {
//   unsigned __int64 renderTargetId : 8;
//   unsigned __int64 enable : 1;
//   unsigned __int64 fbufferTexture : 3;
//   unsigned __int64 filtering : 20;
// };

// /* 2553 */
// union GfxCodeImageRenderTarget
// {
//   GfxCodeImageRenderTargetFields fields;
//   unsigned int packed;
// };

 /* 2554 */
struct GfxPlacement
{
  float quat[4];
  float origin[3];
};

static_assert(sizeof(GfxPlacement) == 0x1C, "The size is not correct");

/* 2555 */
struct GfxScaledPlacement
{
  GfxPlacement base;
  float scale;
};

/* 2556 */
struct GfxSceneDef
{
  int time;
  float floatTime;
  float viewOffset[3];
};

/* 2557 */
struct GfxMatrix
{
  float m[4][4];
};

/* 2558 */
struct GfxCodeMatrices
{
  GfxMatrix matrix[32];
};

/* 2559 */
struct FxCodeMeshData
{
  unsigned int triCount;
  unsigned __int16* indices;
  unsigned __int16 argOffset;
  unsigned __int16 argCount;
  unsigned int lightHandle;
};

/* 2560 */
struct GfxViewParms
{
  GfxMatrix viewMatrix;
  GfxMatrix projectionMatrix;
  GfxMatrix viewProjectionMatrix;
  GfxMatrix inverseViewProjectionMatrix;
  float origin[4];
  float axis[3][3];
  float depthHackNearClip;
  float zNear;
  float zFar;
};

// /* 2561 */
// struct GfxParticleCloud
// {
//   GfxScaledPlacement placement;
//   float endpos[3];
//   GfxColor color;
//   float radius[2];
//   unsigned __int16 count;
//   unsigned __int16 offset;
//   unsigned __int8 gaussian;
//   unsigned __int8 pad[3];
// };

// /* 2563 */
// struct GfxVertexBufferState
// {
//   volatile int used;
//   int total;
//   IDirect3DVertexBuffer9 *buffer;
//   unsigned __int8 *verts;
// };

// /* 2562 */
// struct GfxMeshData
// {
//   GfxMeshData *thisPtr;
//   unsigned int indexCount;
//   unsigned int totalIndexCount;
//   unsigned __int16 *indices;
//   GfxVertexBufferState vb;
//   unsigned int vertSize;
// };

// /* 2564 */
// union PackedLightingCoords
// {
//   unsigned int packed;
//   unsigned __int8 array[4];
// };

// /* 2565 */
// struct GfxSModelCachedVertex
// {
//   float xyz[3];
//   GfxColor color;
//   PackedTexCoords texCoord;
//   PackedUnitVec normal;
//   PackedUnitVec tangent;
//   PackedLightingCoords baseLighting;
// };

// /* 2566 */
// struct GfxModelLightingPatch
// {
//   unsigned __int16 modelLightingIndex;
//   float primaryLightWeight;
//   unsigned __int8 useHeroLighting;
//   unsigned __int8 colorsCount;
//   unsigned __int8 groundLighting[4];
//   float colorsWeight[8];
//   unsigned __int16 colorsIndex[8];
//   float heroPos[3];
// };

// /* 2567 */
// struct GfxBackEndPrimitiveData
// {
//   int hasSunDirChanged;
// };

// /* 2568 */
// struct GfxEntity
// {
//   unsigned int renderFxFlags;
//   float materialTime;
//   float destructibleBurnAmount;
//   float destructibleFadeAmount;
//   float wetness;
//   int textureOverrideIndex;
// };

// /* 2569 */
// struct GfxTextureOverride
// {
//   const Material *material;
//   const GfxImage *img1;
//   const GfxImage *img2;
//   unsigned __int16 dobjModelMask;
//   __int16 prev;
// };

// /* 2570 */
// struct FxMarkMeshData
// {
//   unsigned int triCount;
//   unsigned __int16 *indices;
//   float normal[3];
//   unsigned __int16 modelIndex;
//   unsigned __int8 modelTypeAndSurf;
//   unsigned __int8 pad0;
// };

// /* 2571 */
// struct GfxIndexBufferState
// {
//   volatile int used;
//   int total;
//   IDirect3DIndexBuffer9 *buffer;
//   unsigned __int16 *indices;
// };

 /* 2572 */
struct GfxFog
{
  int startTime;
  int finishTime;
  float color[4];
  float fogStart;
  float density;
  float heightDensity;
  float baseHeight;
  float sunFogColor[4];
  float sunFogDir[3];
  float sunFogStartAng;
  float sunFogEndAng;
  float maxDensity;
};

// /* 2573 */
// struct GfxCmdHeader
// {
//   unsigned __int16 byteCount;
//   unsigned __int8 id;
//   unsigned __int8 ui3d;
// };

// /* 2574 */
// struct GfxCmdArray
// {
//   unsigned __int8 *cmds;
//   int usedTotal;
//   int usedCritical;
//   GfxCmdHeader *lastCmd;
//   int byteSize;
//   int warnSize;
// };

// /* 2575 */
// struct GfxCullViewInfo
// {
//   GfxViewParms viewParms;
//   GfxViewport sceneViewport;
//   GfxViewport displayViewport;
//   GfxViewport scissorViewport;
// };

// /* 2587 */
// struct $FED4BC5DDB3EC43BBC2EB57FD171E8A4
// {
//   GfxViewParms viewParms;
//   GfxViewport sceneViewport;
//   GfxViewport displayViewport;
//   GfxViewport scissorViewport;
// };

// /* 2588 */
// union $29D6D5D109C236443008C80F9E8DF0DC
// {
//   GfxCullViewInfo cullViewInfo;
//   $FED4BC5DDB3EC43BBC2EB57FD171E8A4 __s1;
// };

// /* 2577 */
// struct __cppobj __declspec(align(4)) GfxDrawSurfListInfo
// {
//   const GfxDrawSurf *drawSurfs;
//   unsigned int drawSurfCount;
//   unsigned __int8 baseTechType;
//   const GfxViewInfo *viewInfo;
//   unsigned int viewInfoIndex;
//   float viewOrigin[4];
//   const GfxLight *light;
//   int cameraView;
//   jqBatchGroup group[3];
//   int shaderHDRmode;
//   bool isMissileCamera;
// };

// /* 2578 */
// struct __cppobj PointLightPartition
// {
//   GfxLight light;
//   GfxDrawSurfListInfo info;
// };

// /* 2580 */
// struct __declspec(align(16)) GfxCmdBufInput
// {
//   float consts[197][4];
//   const GfxImage *codeImages[43];
//   unsigned __int8 codeImageSamplerStates[43];
//   GfxCodeImageRenderTarget codeImageRenderTargetControl[43];
//   const GfxBackEndData *data;
// };

// /* 2581 */
// struct GfxExposureShaderRemap
// {
//   float remapMul[3];
//   float remapAdd[3];
// };

// /* 2582 */
// struct GfxViewRenderControl
// {
//   unsigned __int8 mainSceneMSAA;
//   unsigned __int8 mainScene;
//   unsigned __int8 mainSceneFinal;
//   unsigned __int8 mainSceneSaved;
//   unsigned __int8 extraCam;
//   unsigned __int8 ui3d;
//   unsigned __int8 seeThruDecal;
//   unsigned __int8 frameBuffer;
//   float sceneWindowU0;
//   float sceneWindowV0;
//   float sceneWindowU1;
//   float sceneWindowV1;
//   float framebufferWindowY0;
//   float framebufferWindowX1;
//   float framebufferWindowY1;
//   int opaqueShaderRemap;
//   int alphaShaderRemap;
//   int emissiveShaderRemap;
//   unsigned int renderingMode;
//   unsigned int additionalPostFX;
// };

// /* 2583 */
// struct GfxUI3DBackend
// {
//   GfxViewport viewport[6];
//   float uvSetup[6][4];
//   int renderCmdCount[6];
//   int totalRenderCmds;
//   float blurRadius;
// };

// /* 2576 */
// struct __cppobj __declspec(align(16)) GfxViewInfo
// {
//   $29D6D5D109C236443008C80F9E8DF0DC ___u0;
//   GfxSceneDef sceneDef;
//   ShadowType dynamicShadowType;
//   int localClientNum;
//   int isRenderingFullScreen;
//   int playerTeleported;
//   bool needsFloatZ;
//   bool renderingFloatZ;
//   PointLightPartition pointLightPartitions[4];
//   GfxMeshData pointLightMeshData[4];
//   int pointLightCount;
//   GfxLight visibleLights[4];
//   int visibleLightCount;
//   float blurRadius;
//   float frustumPlanes[4][4];
//   GfxLightScale charPrimaryLightScale;
//   GfxDepthOfField dof;
//   GfxFilm film;
//   GfxCompositeFx flameFx;
//   GfxReviveFx reviveFx;
//   GfxCompositeFx waterSheetingFx;
//   GfxDoubleVision doubleVision;
//   GfxGenericFilter genericFilter;
//   GfxPoison poisonFx;
//   GfxCompositeFx electrifiedFx;
//   GfxCompositeFx transportedFx;
//   GfxSaveScreenFx saveScreenFx;
//   const void *cmds;
//   float sunVisibility;
//   GfxQuadMeshData *fullSceneViewMesh;
//   __declspec(align(8)) GfxDrawSurfListInfo drawList[14];
//   GfxCmdBufInput input;
//   int renderSeeThruDecals;
//   unsigned __int8 hdrRenderingMode;
//   GfxExposureValue exposureValue;
//   GfxExposureShaderRemap exposureRemap;
//   GfxViewRenderControl sceneComposition;
//   GfxBloom bloom;
//   float bloomExpansionXpos;
//   float bloomExpansionYpos;
//   GfxUI3DBackend rbUI3D;
//   bool isMissileCamera;
//   bool hasCmdBuf;
//   float postEmissiveBrightening;
//   bool noLodCullOut;
//   DynSModelClientView *dynSModelView;
//   DynSModelGfxState *dynSModelState;
// };

// /* 2579 */
// struct GfxQuadMeshData
// {
//   float x;
//   float y;
//   float width;
//   float height;
//   GfxMeshData meshData;
// };

// /* 2590 */
// struct PolySet
// {
//   float (*verts)[3];
//   int vertCount;
//   int vertLimit;
//   GfxDebugPoly *polys;
//   int polyCount;
//   int polyLimit;
// };

// /* 2592 */
// struct DebugGlobals
// {
//   PolySet polySet;
//   trDebugString_t *strings;
//   int stringCount;
//   int stringLimit;
//   trDebugString_t *externStrings;
//   int externStringCount;
//   int externMaxStringCount;
//   trDebugLine_t *lines;
//   int lineCount;
//   int lineLimit;
//   trDebugLine_t *externLines;
//   int externLineCount;
//   int externMaxLineCount;
//   GfxDebugPlume *plumes;
//   int plumeCount;
//   int plumeLimit;
//   trDebugSphere_t *spheres;
//   int sphereCount;
//   int sphereLimit;
//   trDebugSphere_t *externSpheres;
//   int externSphereCount;
//   int externMaxSphereCount;
// };

// /* 2593 */
// struct GfxSunShadowProjection
// {
//   float viewMatrix[4][4];
//   float switchPartition[4];
//   float shadowmapScale[4];
// };

// /* 2594 */
// struct GfxSunShadowBoundingPoly
// {
//   float snapDelta[2];
//   int pointCount;
//   float points[9][2];
//   int pointIsNear[9];
// };

// /* 2595 */
// struct __declspec(align(8)) GfxSunShadowPartition
// {
//   GfxViewParms shadowViewParms;
//   int partitionIndex;
//   GfxViewport viewport;
//   GfxSunShadowBoundingPoly boundingPoly;
// };

// /* 2596 */
// struct GfxSunShadow
// {
//   GfxMatrix lookupMatrix;
//   GfxSunShadowProjection sunProj;
//   int sunShadowCount;
//   __declspec(align(16)) GfxSunShadowPartition partition[2];
// };

// /* 2597 */
// struct __declspec(align(16)) GfxSpotShadow
// {
//   GfxViewParms shadowViewParms;
//   GfxMatrix lookupMatrix;
//   unsigned __int8 shadowableLightIndex;
//   unsigned __int8 flags;
//   unsigned __int8 pad[2];
//   const GfxLight *light;
//   float fade;
//   GfxCodeImageRenderTarget spotShadowRenderTarget;
//   unsigned __int8 renderTargetId;
//   GfxViewport viewport;
//   GfxImage *image;
//   float pixelAdjust[4];
//   int clearScreen;
//   GfxMeshData *clearMesh;
// };

// /* 2585 */
// struct DynSModelDrawState
// {
//   float squash;
//   float windForceStrength;
//   unsigned __int16 force0Index;
//   unsigned __int16 force1Index;
// };

// /* 2586 */
// struct DynSModelGfxState
// {
//   unsigned int maxDynSModelIndex;
//   unsigned int maxDynSModelIndexInMap;
//   volatile int drawStateCount;
//   DynSModelDrawState drawState[512];
// };

// /* 2598 */
// const struct __declspec(align(32)) GfxBackEndData
// {
//   unsigned __int8 surfsBuffer[262144];
//   FxCodeMeshData codeMeshes[2048];
//   unsigned int primDrawSurfsBuf[65536];
//   GfxViewParms viewParms[4];
//   unsigned __int8 primaryLightTechType[16][2][2][256];
//   float codeMeshArgs[256][4];
//   GfxParticleCloud clouds[256];
//   GfxDrawSurf drawSurfs[32768];
//   GfxMeshData *codeMeshPtr;
//   __declspec(align(16)) GfxMeshData markMesh;
//   __declspec(align(16)) GfxMeshData glassMesh;
//   __declspec(align(16)) GfxSModelCachedVertex smcPatchVerts[8192];
//   unsigned __int16 smcPatchList[256];
//   unsigned int smcPatchCount;
//   unsigned int smcPatchVertsUsed;
//   GfxModelLightingPatch modelLightingPatchList[4096];
//   volatile int modelLightingPatchCount;
//   GfxBackEndPrimitiveData prim;
//   unsigned int shadowableLightHasShadowMap[8];
//   unsigned int frameCount;
//   int drawSurfCount;
//   volatile int surfPos;
//   volatile int gfxEntCount;
//   GfxEntity gfxEnts[256];
//   volatile int shaderConstantSetCount;
//   ShaderConstantSet shaderConstantSets[128];
//   volatile int textureOverrideCount;
//   GfxTextureOverride textureOverrides[256];
//   volatile int cloudCount;
//   volatile int codeMeshCount;
//   volatile int codeMeshArgsCount;
//   volatile int markMeshCount;
//   FxMarkMeshData markMeshes[1536];
//   volatile unsigned int *dynamicBufferCurrentFrame;
//   GfxVertexBufferState *skinnedCacheVb;
//   IDirect3DQuery9 *endFence;
//   unsigned __int8 *tempSkinBuf;
//   volatile int tempSkinPos;
//   GfxIndexBufferState *preTessIb;
//   int viewParmCount;
//   GfxFog fogSettings;
//   GfxCmdArray *commands;
//   unsigned int viewInfoIndex;
//   unsigned int viewInfoCount;
//   GfxViewInfo *viewInfo;
//   GfxUI3DBackend rbUI3D;
//   const void *cmds;
//   const void *compositingCmds;
//   GfxLight sunLight;
//   int hasApproxSunDirChanged;
//   volatile int primDrawSurfPos;
//   DebugGlobals debugGlobals;
//   unsigned int drawType;
//   int hideMatureContent;
//   int splitscreen;
//   GfxLight shadowableLights[255];
//   unsigned int shadowableLightCount;
//   unsigned int emissiveSpotLightIndex;
//   GfxLight emissiveSpotLight;
//   int emissiveSpotDrawSurfCount;
//   GfxDrawSurf *emissiveSpotDrawSurfs;
//   unsigned int emissiveSpotLightCount;
//   bool extraCamLargeFrameSize;
//   GfxSunShadow sunShadow;
//   unsigned int spotShadowCount;
//   GfxSpotShadow spotShadows[4];
//   DynSModelGfxState dynSModelState;
//   DynSModelClientView *dynSModelClientViewArray;
// };

// /* 2584 */
// struct DynSModelClientView
// {
//   unsigned __int16 drawStateIndex[2048];
//   float grassForceConstants[25][4];
//   float forceFrequency[25];
// };

// /* 2589 */
// struct GfxDebugPoly
// {
//   float faceColor[4];
//   bool faceDepthTest;
//   float edgeColor[4];
//   bool edgeDepthTest;
//   int firstVert;
//   int vertCount;
// };

// /* 2591 */
// struct GfxDebugPlume
// {
//   float origin[3];
//   float color[4];
//   int score;
//   int startTime;
//   int duration;
// };

// /* 2599 */
// struct $06231EE10D0F91021439FD113FD611A2
// {
//   _BYTE gap0[3680];
//   GfxViewParms viewParms;
// };

// /* 2600 */
// union $26AC422158757CD6FC73CEC8E4188A45
// {
//   GfxCmdBufInput input;
//   $06231EE10D0F91021439FD113FD611A2 __s1;
// };

// /* 2601 */
// struct GfxCmdBufSourceState
// {
//   GfxCodeMatrices matrices;
//   $26AC422158757CD6FC73CEC8E4188A45 ___u1;
//   GfxMatrix shadowLookupMatrix;
//   unsigned __int16 constVersions[226];
//   unsigned __int16 matrixVersions[8];
//   __declspec(align(16)) float eyeOffset[4];
//   unsigned int shadowableLightForShadowLookupMatrix;
//   const GfxScaledPlacement *objectPlacement;
//   const GfxViewParms *viewParms3D;
//   unsigned int depthHackFlags;
//   GfxScaledPlacement skinnedPlacement;
//   int cameraView;
//   GfxViewMode viewMode;
//   GfxSceneDef sceneDef;
//   GfxViewport sceneViewport;
//   GfxViewport scissorViewport;
//   float materialTime;
//   float destructibleBurnAmount;
//   float destructibleFadeAmount;
//   float wetness;
//   GfxViewportBehavior viewportBehavior;
//   int renderTargetWidth;
//   int renderTargetHeight;
//   bool viewportIsDirty;
//   bool scissorEnabled;
//   unsigned int shadowableLightIndex;
// };

// /* 2602 */
// struct GfxGlobals
// {
//   bool startedRenderThread;
//   bool isMultiplayer;
//   volatile int endFrameFence;
//   bool isRenderingRemoteUpdate;
//   volatile int screenUpdateNotify;
//   volatile int remoteScreenUpdateNesting;
//   volatile int remoteScreenUpdateInGame;
//   unsigned __int8 remoteScreenLastSceneResolveTarget;
//   int backEndFrameCount;
//   unsigned __int8 frameBuffer;
//   unsigned __int8 displayBuffer;
//   unsigned __int8 ui3dUseFrameBuffer;
//   unsigned __int8 ui3dRenderTarget;
// };

// /* 2603 */
// struct vpx_rational
// {
//   int num;
//   int den;
// };

// /* 2604 */
// struct vpx_fixed_buf
// {
//   void *buf;
//   unsigned int sz;
// };

// /* 2605 */
// struct vpx_codec_enc_cfg
// {
//   unsigned int g_usage;
//   unsigned int g_threads;
//   unsigned int g_profile;
//   unsigned int g_w;
//   unsigned int g_h;
//   vpx_rational g_timebase;
//   unsigned int g_error_resilient;
//   vpx_enc_pass g_pass;
//   unsigned int g_lag_in_frames;
//   unsigned int rc_dropframe_thresh;
//   unsigned int rc_resize_allowed;
//   unsigned int rc_resize_up_thresh;
//   unsigned int rc_resize_down_thresh;
//   vpx_rc_mode rc_end_usage;
//   vpx_fixed_buf rc_twopass_stats_in;
//   unsigned int rc_target_bitrate;
//   unsigned int rc_min_quantizer;
//   unsigned int rc_max_quantizer;
//   unsigned int rc_undershoot_pct;
//   unsigned int rc_overshoot_pct;
//   unsigned int rc_buf_sz;
//   unsigned int rc_buf_initial_sz;
//   unsigned int rc_buf_optimal_sz;
//   unsigned int rc_2pass_vbr_bias_pct;
//   unsigned int rc_2pass_vbr_minsection_pct;
//   unsigned int rc_2pass_vbr_maxsection_pct;
//   vpx_kf_mode kf_mode;
//   unsigned int kf_min_dist;
//   unsigned int kf_max_dist;
// };

// /* 2606 */
// union vpx_codec_ctx::<unnamed_type_config>
// {
//   struct vpx_codec_dec_cfg *dec;
//   vpx_codec_enc_cfg *enc;
//   void *raw;
// };

// /* 2607 */
// struct vpx_codec_ctx
// {
//   const char *name;
//   const vpx_codec_iface *iface;
//   vpx_codec_err_t err;
//   const char *err_detail;
//   int init_flags;
//   vpx_codec_ctx::<unnamed_type_config> config;
//   struct vpx_codec_priv *priv;
// };

// /* 2608 */
// struct vpx_image
// {
//   vpx_img_fmt fmt;
//   unsigned int w;
//   unsigned int h;
//   unsigned int d_w;
//   unsigned int d_h;
//   unsigned int x_chroma_shift;
//   unsigned int y_chroma_shift;
//   unsigned __int8 *planes[4];
//   int stride[4];
//   int bps;
//   void *user_priv;
//   unsigned __int8 *img_data;
//   int img_data_owner;
//   int self_allocd;
// };

// /* 2609 */
// struct $0A669EED672D0614AB086EF67B48703D
// {
//   bool init;
//   _iobuf *outfile;
//   vpx_codec_ctx codec;
//   vpx_codec_enc_cfg cfg;
//   int frame_cnt;
//   unsigned __int8 file_hdr[32];
//   unsigned __int8 frame_hdr[12];
//   vpx_image raw;
//   int width;
//   int height;
//   int flags;
// };

// /* 2610 */
// struct vpx_ref_frame
// {
//   vpx_ref_frame_type frame_type;
//   vpx_image img;
// };

// /* 2611 */
// struct vp8_postproc_cfg
// {
//   int post_proc_flag;
//   int deblocking_level;
//   int noise_level;
// };

// /* 2612 */
// struct vpx_roi_map
// {
//   unsigned __int8 *roi_map;
//   unsigned int rows;
//   unsigned int cols;
//   int delta_q[4];
//   int delta_lf[4];
//   unsigned int static_threshold[4];
// };

// /* 2613 */
// struct vpx_scaling_mode
// {
//   vpx_scaling_mode_1d h_scaling_mode;
//   vpx_scaling_mode_1d v_scaling_mode;
// };

// /* 2614 */
// struct vpx_active_map
// {
//   unsigned __int8 *active_map;
//   unsigned int rows;
//   unsigned int cols;
// };

// /* 2615 */
// struct vpx_codec_cx_pkt::<unnamed_type_data>::<unnamed_type_frame>
// {
//   void *buf;
//   unsigned int sz;
//   __int64 pts;
//   unsigned int duration;
//   unsigned int flags;
// };

// /* 2616 */
// struct vpx_codec_cx_pkt::<unnamed_type_data>::vpx_psnr_pkt
// {
//   unsigned int samples[4];
//   unsigned __int64 sse[4];
//   long double psnr[4];
// };

// /* 2617 */
// union __declspec(align(8)) vpx_codec_cx_pkt::<unnamed_type_data>
// {
//   vpx_codec_cx_pkt::<unnamed_type_data>::<unnamed_type_frame> frame;
//   vpx_fixed_buf twopass_stats;
//   vpx_codec_cx_pkt::<unnamed_type_data>::vpx_psnr_pkt psnr;
//   vpx_fixed_buf raw;
//   char pad[124];
// };

// /* 2618 */
// struct vpx_codec_cx_pkt
// {
//   vpx_codec_cx_pkt_kind kind;
//   vpx_codec_cx_pkt::<unnamed_type_data> data;
// };

// /* 2619 */
// struct __cppobj mjpeg_render
// {
// };

// /* 2620 */
// struct __cppobj mjpeg_d3d_s
// {
// };

// /* 2621 */
// struct capture_d3d_s
// {
//   int width;
//   int height;
//   int yOffset;
//   int tiles;
//   float tileX;
//   float tileY;
//   void *backBuffer;
//   float progress;
//   float yAspect;
// };

// /* 2622 */
// struct __cppobj __declspec(align(4)) avi_s
// {
//   avi::RIFF_s riff;
//   void *hFile;
//   unsigned __int8 buffer[262144];
//   unsigned __int8 encodeBuff[262144];
//   unsigned __int8 audioBufferHeaders[8];
//   __int16 audioBuffer[48000];
//   int audioBufferCount;
//   unsigned __int8 *outputPtr;
//   unsigned __int8 *flushToPtr;
//   unsigned __int8 *writePtr;
//   unsigned int fileSize;
//   void *hOutput;
//   void *hOutputLock;
//   void *hOutputThread;
//   void *hOutputAddLock;
//   bool threadQuit;
// };

// /* 2623 */
// union $A5A483E05FC9B52B872A8DCFA58CFF52
// {
//   unsigned int Offset;
//   void *Pointer;
// };

// /* 2624 */
// struct _OVERLAPPED
// {
//   unsigned int Internal;
//   unsigned int InternalHigh;
//   $A5A483E05FC9B52B872A8DCFA58CFF52 ___u2;
//   unsigned int OffsetHigh;
//   void *hEvent;
// };

// /* 2625 */
// struct sockaddr
// {
//   unsigned __int16 sa_family;
//   char sa_data[14];
// };

// /* 2626 */
// struct fd_set
// {
//   unsigned int fd_count;
//   unsigned int fd_array[64];
// };

// /* 2627 */
// struct WSAData
// {
//   unsigned __int16 wVersion;
//   unsigned __int16 wHighVersion;
//   char szDescription[257];
//   char szSystemStatus[129];
//   unsigned __int16 iMaxSockets;
//   unsigned __int16 iMaxUdpDg;
//   char *lpVendorInfo;
// };

// /* 2628 */
// struct in_addr::<unnamed_type_S_un>::<unnamed_type_S_un_b>
// {
//   unsigned __int8 s_b1;
//   unsigned __int8 s_b2;
//   unsigned __int8 s_b3;
//   unsigned __int8 s_b4;
// };

// /* 2629 */
// struct in_addr::<unnamed_type_S_un>::<unnamed_type_S_un_w>
// {
//   unsigned __int16 s_w1;
//   unsigned __int16 s_w2;
// };

// /* 2630 */
// union in_addr::<unnamed_type_S_un>
// {
//   in_addr::<unnamed_type_S_un>::<unnamed_type_S_un_b> S_un_b;
//   in_addr::<unnamed_type_S_un>::<unnamed_type_S_un_w> S_un_w;
//   unsigned int S_addr;
// };

// /* 2631 */
// struct in_addr
// {
//   in_addr::<unnamed_type_S_un> S_un;
// };

// /* 2632 */
// struct sockaddr_in
// {
//   __int16 sin_family;
//   unsigned __int16 sin_port;
//   in_addr sin_addr;
//   char sin_zero[8];
// };

// /* 2633 */
// struct timeval
// {
//   int tv_sec;
//   int tv_usec;
// };

 /* 2634 */
struct GfxStreamingAabbTree
{
  unsigned __int16 firstItem;
  unsigned __int16 itemCount;
  unsigned __int16 firstChild;
  unsigned __int16 childCount;
  float mins[3];
  float maxs[3];
};

static_assert(sizeof(GfxStreamingAabbTree) == 0x20, "The size is not correct");

/* 2635 */
struct GfxWorldStreamInfo
{
  int aabbTreeCount;
  GfxStreamingAabbTree* aabbTrees;
  int leafRefCount;
  int* leafRefs;
};

static_assert(sizeof(GfxWorldStreamInfo) == 0x10, "The size is not correct");

/* 2636 */
struct GfxWorldSunColor
{
  unsigned int control;
  float angles[3];
  float ambientColor[4];
  float sunDiffuseColor[4];
  float sunSpecularColor[4];
  float skyColor[4];
  float groundColor[4];
  float exposure;
  float sunShadowSampleSizeNear;
  float skyboxHDRScale;
};

static_assert(sizeof(GfxWorldSunColor) == 0x6C, "The size is not correct");

/* 2637 */
struct SunLightParseParams
{
  char name[64];
  float treeScatterIntensity;
  float treeScatterAmount;
  GfxWorldSunColor sunSettings[1];
};

static_assert(sizeof(SunLightParseParams) == 0xB4, "The size is not correct");

/* 2638 */
struct GfxLightCorona
{
  float origin[3];
  float radius;
  float color[3];
  float intensity;
};

static_assert(sizeof(GfxLightCorona) == 0x20, "The size is not correct");

/* 2639 */
struct GfxShadowMapVolume
{
  unsigned int control;
  unsigned int padding1;
  unsigned int padding2;
  unsigned int padding3;
};

static_assert(sizeof(GfxShadowMapVolume) == 0x10, "The size is not correct");

/* 2640 */
struct GfxVolumePlane
{
  float plane[4];
};

static_assert(sizeof(GfxVolumePlane) == 0x10, "The size is not correct");

/* 2641 */
struct GfxExposureVolume
{
  unsigned int control;
  float exposure;
  float luminanceIncreaseScale;
  float luminanceDecreaseScale;
  float featherRange;
  float featherAdjust;
};

static_assert(sizeof(GfxExposureVolume) == 0x18, "The size is not correct");

/* 2642 */
struct GfxSkyDynamicIntensity
{
  float angle0;
  float angle1;
  float factor0;
  float factor1;
};

static_assert(sizeof(GfxSkyDynamicIntensity) == 0x10, "The size is not correct");

/* 2643 */
struct GfxWorldDpvsPlanes
{
  int cellCount;
  cplane_s* planes;
  unsigned __int16* nodes;
  unsigned int* sceneEntCellBits;
};

static_assert(sizeof(GfxWorldDpvsPlanes) == 0x10, "The size is not correct");

/* 2644 */
struct GfxAabbTree
{
  float mins[3];
  float maxs[3];
  unsigned __int16 childCount;
  unsigned __int16 surfaceCount;
  unsigned __int16 startSurfIndex;
  unsigned __int16 smodelIndexCount;
  unsigned __int16* smodelIndexes;
  int childrenOffset;
};

static_assert(sizeof(GfxAabbTree) == 0x28, "The size is not correct");

/* 2646 */
struct GfxPortalWritable
{
  bool isQueued;
  bool isAncestor;
  unsigned __int8 recursionDepth;
  unsigned __int8 hullPointCount;
  float(*hullPoints)[2];
  GfxPortal* queuedParent;
};

static_assert(sizeof(GfxPortalWritable) == 0xC, "The size is not correct");

/* 2647 */
struct DpvsPlane
{
  float coeffs[4];
  unsigned __int8 side[3];
  unsigned __int8 pad;
};

static_assert(sizeof(DpvsPlane) == 0x14, "The size is not correct");

/* 2645 */
struct GfxPortal
{
  GfxPortalWritable writable;
  DpvsPlane plane;
  GfxCell* cell;
  float(*vertices)[3];
  unsigned __int8 vertexCount;
  float hullAxis[2][3];
};

static_assert(sizeof(GfxPortal) == 0x44, "The size is not correct");

/* 2648 */
struct GfxCell
{
  float mins[3];
  float maxs[3];
  int aabbTreeCount;
  GfxAabbTree* aabbTree;
  int portalCount;
  GfxPortal* portals;
  int cullGroupCount;
  int* cullGroups;
  unsigned __int8 reflectionProbeCount;
  unsigned __int8* reflectionProbes;
};

static_assert(sizeof(GfxCell) == 0x38, "The size is not correct");

/* 2649 */
struct GfxReflectionProbeVolumeData
{
  float volumePlanes[6][4];
};

static_assert(sizeof(GfxReflectionProbeVolumeData) == 0x60, "The size is not correct");

/* 2650 */
struct GfxReflectionProbe
{
  float origin[3];
  GfxImage* reflectionImage;
  GfxReflectionProbeVolumeData* probeVolumes;
  unsigned int probeVolumeCount;
};

static_assert(sizeof(GfxReflectionProbe) == 0x18, "The size is not correct");

/* 2651 */
struct GfxLightmapArray
{
  GfxImage* primary;
  GfxImage* secondary;
  GfxImage* secondaryB;
};

static_assert(sizeof(GfxLightmapArray) == 0xC, "The size is not correct");

/* 2652 */
struct GfxWorldVertex
{
  float xyz[3];
  float binormalSign;
  GfxColor color;
  float texCoord[2];
  float lmapCoord[2];
  PackedUnitVec normal;
  PackedUnitVec tangent;
};

static_assert(sizeof(GfxWorldVertex) == 0x2C, "The size is not correct");

/* 2653 */
struct GfxWorldVertexData
{
  GfxWorldVertex* vertices;
  IDirect3DVertexBuffer9* worldVb;
};

static_assert(sizeof(GfxWorldVertexData) == 0x8, "The size is not correct");

/* 2654 */
struct GfxWorldVertexLayerData
{
  unsigned __int8* data;
  IDirect3DVertexBuffer9* layerVb;
};

static_assert(sizeof(GfxWorldVertexLayerData) == 0x8, "The size is not correct");

/* 2655 */
struct GfxWorldDraw
{
  unsigned int reflectionProbeCount;
  GfxReflectionProbe* reflectionProbes;
  GfxTexture* reflectionProbeTextures;
  int lightmapCount;
  GfxLightmapArray* lightmaps;
  GfxTexture* lightmapPrimaryTextures;
  GfxTexture* lightmapSecondaryTextures;
  GfxTexture* lightmapSecondaryTexturesB;
  GfxImage* terrainScorchImages[31];
  unsigned int vertexCount;
  GfxWorldVertexData vd;
  unsigned int vertexLayerDataSize;
  GfxWorldVertexLayerData vld;
  unsigned int vertexStream2DataSize;
  int indexCount;
  unsigned __int16* indices;
};

static_assert(sizeof(GfxWorldDraw) == 0xC0, "The size is not correct");

/* 2656 */
struct GfxLightGridEntry
{
  unsigned __int16 colorsIndex;
  unsigned __int8 primaryLightIndex;
  unsigned __int8 needsTrace;
};

static_assert(sizeof(GfxLightGridEntry) == 0x4, "The size is not correct");

/* 2657 */
struct GfxCompressedLightGridColors
{
  unsigned __int8 rgb[56][3];
};

static_assert(sizeof(GfxCompressedLightGridColors) == 0xA8, "The size is not correct");

/* 2658 */
struct GfxLightGrid
{
  bool hasLightRegions;
  unsigned int sunPrimaryLightIndex;
  unsigned __int16 mins[3];
  unsigned __int16 maxs[3];
  unsigned int rowAxis;
  unsigned int colAxis;
  unsigned __int16* rowDataStart;
  unsigned int rawRowDataSize;
  unsigned __int8* rawRowData;
  unsigned int entryCount;
  GfxLightGridEntry* entries;
  unsigned int colorCount;
  GfxCompressedLightGridColors* colors;
};

static_assert(sizeof(GfxLightGrid) == 0x38, "The size is not correct");

/* 2659 */
struct GfxBrushModelWritable
{
  float mins[3];
  float maxs[3];
  float mip1radiusSq;
};

static_assert(sizeof(GfxBrushModelWritable) == 0x1C, "The size is not correct");

/* 2660 */
struct GfxBrushModel
{
  GfxBrushModelWritable writable;
  float bounds[2][3];
  unsigned int surfaceCount;
  unsigned int startSurfIndex;
};

static_assert(sizeof(GfxBrushModel) == 0x3C, "The size is not correct");

/* 2661 */
struct MaterialMemory
{
  Material* material;
  int memory;
};

static_assert(sizeof(MaterialMemory) == 0x8, "The size is not correct");

/* 2662 */
struct sunflare_t
{
  bool hasValidData;
  Material* spriteMaterial;
  Material* flareMaterial;
  float spriteSize;
  float flareMinSize;
  float flareMinDot;
  float flareMaxSize;
  float flareMaxDot;
  float flareMaxAlpha;
  int flareFadeInTime;
  int flareFadeOutTime;
  float blindMinDot;
  float blindMaxDot;
  float blindMaxDarken;
  int blindFadeInTime;
  int blindFadeOutTime;
  float glareMinDot;
  float glareMaxDot;
  float glareMaxLighten;
  int glareFadeInTime;
  int glareFadeOutTime;
  float sunFxPosition[3];
};

static_assert(sizeof(sunflare_t) == 0x60, "The size is not correct");

/* 2663 */
struct XModelDrawInfo
{
  unsigned __int16 lod;
  unsigned __int16 surfId;
};

static_assert(sizeof(XModelDrawInfo) == 0x4, "The size is not correct");

/* 2664 */
struct GfxSceneDynModel
{
  XModelDrawInfo info;
  unsigned __int16 dynEntId;
};

static_assert(sizeof(GfxSceneDynModel) == 0x6, "The size is not correct");

/* 2665 */
struct BModelDrawInfo
{
  unsigned __int16 surfId;
};

static_assert(sizeof(BModelDrawInfo) == 0x2, "The size is not correct");

/* 2666 */
struct GfxSceneDynBrush
{
  BModelDrawInfo info;
  unsigned __int16 dynEntId;
};

static_assert(sizeof(GfxSceneDynBrush) == 0x4, "The size is not correct");

/* 2667 */
struct GfxShadowGeometry
{
  unsigned __int16 surfaceCount;
  unsigned __int16 smodelCount;
  unsigned __int16* sortedSurfIndex;
  unsigned __int16* smodelIndex;
};

static_assert(sizeof(GfxShadowGeometry) == 0xC, "The size is not correct");

/* 2668 */
struct GfxLightRegionAxis
{
  float dir[3];
  float midPoint;
  float halfSize;
};

static_assert(sizeof(GfxLightRegionAxis) == 0x14, "The size is not correct");

/* 2669 */
struct GfxLightRegionHull
{
  float kdopMidPoint[9];
  float kdopHalfSize[9];
  unsigned int axisCount;
  GfxLightRegionAxis* axis;
};

static_assert(sizeof(GfxLightRegionHull) == 0x50, "The size is not correct");

/* 2670 */
struct GfxLightRegion
{
  unsigned int hullCount;
  GfxLightRegionHull* hulls;
};

static_assert(sizeof(GfxLightRegion) == 0x8, "The size is not correct");

/* 2671 */
struct GfxStaticModelInst
{
  float mins[3];
  float maxs[3];
  float lightingOrigin[3];
  GfxColor groundLighting;
};

static_assert(sizeof(GfxStaticModelInst) == 0x28, "The size is not correct");

/* 2672 */
struct srfTriangles_t
{
  float mins[3];
  int vertexLayerData;
  float maxs[3];
  int firstVertex;
  unsigned __int16 vertexCount;
  unsigned __int16 triCount;
  int baseIndex;
  float himipRadiusSq;
  int stream2ByteOffset;
};

static_assert(sizeof(srfTriangles_t) == 0x30, "The size is not correct");

/* 2673 */
struct GfxSurface
{
  srfTriangles_t tris;
  Material* material;
  unsigned __int8 lightmapIndex;
  unsigned __int8 reflectionProbeIndex;
  unsigned __int8 primaryLightIndex;
  unsigned __int8 flags;
  float bounds[2][3];
};

static_assert(sizeof(GfxSurface) == 0x50, "The size is not correct");

/* 2674 */
struct GfxCullGroup
{
  float mins[3];
  float maxs[3];
  int surfaceCount;
  int startSurfIndex;
};

static_assert(sizeof(GfxCullGroup) == 0x20, "The size is not correct");

/* 2675 */
struct GfxPackedPlacement
{
  float origin[3];
  float axis[3][3];
  float scale;
};

static_assert(sizeof(GfxPackedPlacement) == 0x34, "The size is not correct");

/* 2676 */
struct GfxStaticModelDrawInst
{
  float cullDist;
  GfxPackedPlacement placement;
  XModel* model;
  int flags;
  unsigned __int16 smodelCacheIndex[4];
  unsigned __int16 lightingHandle;
  unsigned __int8 reflectionProbeIndex;
  unsigned __int8 primaryLightIndex;
};

static_assert(sizeof(GfxStaticModelDrawInst) == 0x4C, "The size is not correct");

/* 2677 */
struct GfxWorldDpvsStatic
{
  unsigned int smodelCount;
  unsigned int dynamicSModelCount;
  unsigned int staticSurfaceCount;
  unsigned int litSurfsBegin;
  unsigned int litSurfsEnd;
  unsigned int decalSurfsBegin;
  unsigned int decalSurfsEnd;
  unsigned int emissiveSurfsBegin;
  unsigned int emissiveSurfsEnd;
  unsigned int smodelVisDataCount;
  unsigned int surfaceVisDataCount;
  unsigned __int8* smodelVisData[3];
  unsigned __int8* surfaceVisData[3];
  unsigned __int8* smodelVisDataCameraSaved;
  unsigned __int8* surfaceVisDataCameraSaved;
  unsigned int* lodData;
  unsigned __int16* sortedSurfIndex;
  GfxStaticModelInst* smodelInsts;
  GfxSurface* surfaces;
  GfxCullGroup* cullGroups;
  GfxStaticModelDrawInst* smodelDrawInsts;
  GfxDrawSurf* surfaceMaterials;
  unsigned int* surfaceCastsSunShadow;
  volatile int usageCount;
};

static_assert(sizeof(GfxWorldDpvsStatic) == 0x70, "The size is not correct");

/* 2678 */
struct GfxWorldDpvsDynamic
{
  unsigned int dynEntClientWordCount[2];
  unsigned int dynEntClientCount[2];
  unsigned int* dynEntCellBits[2];
  unsigned __int8* dynEntVisData[2][3];
};

static_assert(sizeof(GfxWorldDpvsDynamic) == 0x30, "The size is not correct");

/* 2679 */
struct __declspec(align(4)) GfxWorldLodChain
{
  float origin[3];
  float lastDist;
  unsigned int firstLodInfo;
  unsigned __int16 lodInfoCount;
};

static_assert(sizeof(GfxWorldLodChain) == 0x18, "The size is not correct");

/* 2680 */
struct __declspec(align(4)) GfxWorldLodInfo
{
  float dist;
  unsigned int firstSurf;
  unsigned __int16 surfCount;
};

static_assert(sizeof(GfxWorldLodInfo) == 0xC, "The size is not correct");

/* 2681 */
struct GfxWaterBuffer
{
  unsigned int bufferSize;
  float(*buffer)[4];
};

static_assert(sizeof(GfxWaterBuffer) == 0x8, "The size is not correct");

/* 2682 */
struct Occluder
{
  unsigned int flags;
  char name[16];
  float points[4][3];
};

static_assert(sizeof(Occluder) == 0x44, "The size is not correct");

/* 2683 */
struct GfxOutdoorBounds
{
  float bounds[2][3];
};

static_assert(sizeof(GfxOutdoorBounds) == 0x18, "The size is not correct");

/* 2684 */
struct GfxHeroLight
{
  unsigned __int8 type;
  unsigned __int8 unused[3];
  float color[3];
  float dir[3];
  float origin[3];
  float radius;
  float cosHalfFovOuter;
  float cosHalfFovInner;
  int exponent;
};

static_assert(sizeof(GfxHeroLight) == 0x38, "The size is not correct");

/* 2685 */
struct GfxHeroLightTree
{
  float mins[3];
  float maxs[3];
};

static_assert(sizeof(GfxHeroLightTree) == 0x18, "The size is not correct");

/* 2686 */
struct GfxWorld
{
  const char* name;
  const char* baseName;
  int planeCount;
  int nodeCount;
  int surfaceCount;
  GfxWorldStreamInfo streamInfo;
  int skySurfCount;
  int* skyStartSurfs;
  GfxImage* skyImage;
  unsigned __int8 skySamplerState;
  const char* skyBoxModel;
  SunLightParseParams sunParse;
  GfxLight* sunLight;
  float sunColorFromBsp[3];
  unsigned int sunPrimaryLightIndex;
  unsigned int primaryLightCount;
  int cullGroupCount;
  unsigned int coronaCount;
  GfxLightCorona* coronas;
  unsigned int shadowMapVolumeCount;
  GfxShadowMapVolume* shadowMapVolumes;
  unsigned int shadowMapVolumePlaneCount;
  GfxVolumePlane* shadowMapVolumePlanes;
  unsigned int exposureVolumeCount;
  GfxExposureVolume* exposureVolumes;
  unsigned int exposureVolumePlaneCount;
  GfxVolumePlane* exposureVolumePlanes;
  GfxSkyDynamicIntensity skyDynIntensity;
  GfxWorldDpvsPlanes dpvsPlanes;
  int cellBitsCount;
  GfxCell* cells;
  GfxWorldDraw draw;
  GfxLightGrid lightGrid;
  int modelCount;
  GfxBrushModel* models;
  float mins[3];
  float maxs[3];
  unsigned int checksum;
  int materialMemoryCount;
  MaterialMemory* materialMemory;
  sunflare_t sun;
  float outdoorLookupMatrix[4][4];
  GfxImage* outdoorImage;
  unsigned int* cellCasterBits;
  GfxSceneDynModel* sceneDynModel;
  GfxSceneDynBrush* sceneDynBrush;
  unsigned int* primaryLightEntityShadowVis;
  unsigned int* primaryLightDynEntShadowVis[2];
  unsigned __int8* nonSunPrimaryLightForModelDynEnt;
  GfxShadowGeometry* shadowGeom;
  GfxLightRegion* lightRegion;
  GfxWorldDpvsStatic dpvs;
  GfxWorldDpvsDynamic dpvsDyn;
  unsigned int worldLodChainCount;
  GfxWorldLodChain* worldLodChains;
  unsigned int worldLodInfoCount;
  GfxWorldLodInfo* worldLodInfos;
  unsigned int worldLodSurfaceCount;
  unsigned int* worldLodSurfaces;
  float waterDirection;
  GfxWaterBuffer waterBuffers[2];
  const Material* waterMaterial;
  const Material* coronaMaterial;
  const Material* ropeMaterial;
  unsigned int numOccluders;
  Occluder* occluders;
  unsigned int numOutdoorBounds;
  GfxOutdoorBounds* outdoorBounds;
  unsigned int heroLightCount;
  unsigned int heroLightTreeCount;
  GfxHeroLight* heroLights;
  GfxHeroLightTree* heroLightTree;
};

static_assert(sizeof(GfxWorld) == 0x43C, "The size is not correct");

// /* 2687 */
// struct SavedScreenParams
// {
//   float s0;
//   float t0;
//   float ds;
//   float dt;
//   int isSet;
// };

// /* 2688 */
// struct r_global_permap_assets_t
// {
//   Material *flameThrowerFXMaterial;
//   Material *electrifiedFXMaterial;
//   Material *transportedFXMaterial;
// };

// /* 2689 */
// struct __declspec(align(128)) r_global_permanent_t
// {
//   Material *sortedMaterials[4096];
//   int needSortMaterials;
//   int materialCount;
//   int needMaterialPreload;
//   GfxImage *whiteImage;
//   GfxImage *blackImage;
//   GfxImage *blankImage;
//   GfxImage *g16r16Image;
//   GfxImage *r5g6b5Image;
//   GfxImage *grayImage;
//   GfxImage *identityNormalMapImage;
//   GfxImage *whiteTransparentImage;
//   GfxImage *blackTransparentImage;
//   GfxImage *outdoorImage;
//   GfxImage *heatMapImage;
//   GfxImage *pixelCostColorCodeImage;
//   GfxLightDef *dlightDef;
//   GfxLightDef *flashLightDef;
//   Material *defaultMaterial;
//   Material *whiteMaterial;
//   Material *additiveMaterial;
//   Material *additiveMaterialNoDepth;
//   Material *pointMaterial;
//   Material *lineMaterial;
//   Material *lineMaterialNoDepth;
//   Material *blendMaterial;
//   Material *blendMaterialNoDepth;
//   Material *whiteDebugExteriorMaterial;
//   Material *whiteDepthInteriorMaterial;
//   Material *clearAlphaMaterial;
//   Material *clearAlphaStencilMaterial;
//   Material *setAlphaMaterial;
//   Material *shadowClearMaterial;
//   Material *shadowCasterMaterial;
//   Material *shadowOverlayMaterial;
//   Material *depthPrepassMaterial;
//   Material *glareBlindMaterial;
//   Material *lightCoronaMaterial;
//   Material *pixelCostAddDepthAlwaysMaterial;
//   Material *pixelCostAddDepthDisableMaterial;
//   Material *pixelCostAddDepthEqualMaterial;
//   Material *pixelCostAddDepthLessMaterial;
//   Material *pixelCostAddDepthWriteMaterial;
//   Material *pixelCostAddNoDepthWriteMaterial;
//   Material *pixelCostColorCodeMaterial;
//   Material *stencilShadowMaterial;
//   Material *stencilDisplayMaterial;
//   Material *floatZDisplayMaterial;
//   Material *colorChannelMixerMaterial;
//   Material *frameColorDebugMaterial;
//   Material *frameAlphaDebugMaterial;
//   GfxImage *rawImage;
//   GfxWorld *world;
//   Material *feedbackReplaceMaterial;
//   Material *feedbackBlendMaterial;
//   Material *feedbackFilmBlendMaterial;
//   Material *cinematicMaterial;
//   Material *dofDownsampleMaterial;
//   Material *dofDownsampleNvIntzMaterial;
//   Material *dofNearCocMaterial;
//   Material *smallBlurMaterial;
//   Material *postFxDofMaterial;
//   Material *postFxDofNvIntzMaterial;
//   Material *postFxDofColorMaterial;
//   Material *postFxDofColorNvIntzMaterial;
//   Material *motionblur1Material;
//   Material *motionblur2Material;
//   Material *motionblur3Material;
//   Material *motionblur4Material;
//   Material *motionblur5Material;
//   Material *motionblur6Material;
//   Material *motionblur7Material;
//   Material *motionblur8Material;
//   Material *motionblurRadialMaterial;
//   Material *motionblurFrameBasedMaterial;
//   Material *redactMaterial1;
//   Material *redactMaterial2;
//   Material *redactMaterial3;
//   Material *waterSheetingFXMaterial;
//   Material *waterDropletMaterial;
//   Material *reviveFXMaterial;
//   Material *postFxColorMaterial;
//   Material *postFxLutMaterial[10];
//   Material *postFxMaterial;
//   Material *poisonFXMaterial;
//   Material *symmetricFilterMaterial[8];
//   Material *godRaysFilterMaterial;
//   Material *shellShockBlurredMaterial;
//   Material *shellShockFlashedMaterial;
//   Material *glowConsistentSetupMaterial;
//   Material *glowApplyBloomMaterial;
//   Material *ropeMaterial;
//   int savedScreenTimes[4];
//   SavedScreenParams savedScreenParams[4];
//   GfxImage *r32fWhiteImage;
//   Material *resampleFinal;
//   Material *resampleShift;
//   Material *bloomDownsampleLDR;
//   Material *bloomDownsampleHDR;
//   Material *bloomDownsampleConvolution;
//   Material *bloomRemap;
//   Material *bloomExpansion;
//   Material *bloomRemapStreak;
//   Material *bloomStreakX;
//   Material *bloomStreakY;
//   Material *bloomApplyStreak;
//   Material *bloomBlurX;
//   Material *bloomBlurY;
//   Material *bloomMip3Blur;
//   Material *bloomApplyHDR;
//   Material *bloomApplyLDR;
//   Material *bloomSmoothA;
//   Material *bloomSmoothB;
//   Material *superFlareApply;
//   Material *superFlareOccluder;
//   Material *superFlareOccluderDebug;
//   Material *superFlareOccluderNoZ;
//   Material *superFlareOccluderNoZDebug;
//   Material *createLut2d;
//   Material *createLut2dv;
//   Material *applyLut2d;
//   Material *applyLut3d;
//   Material *dummyMaterial;
//   Material *compositeResult;
//   Material *infraredWhite;
//   r_global_permap_assets_t permapAssets;
// };

 /* 2690 */
struct GlassDef
{
  const char* name;
  int maxHealth;
  float thickness;
  float minShardSize;
  float maxShardSize;
  float shardLifeProbablility;
  int maxShards;
  Material* pristineMaterial;
  Material* crackedMaterial;
  Material* shardMaterial;
  const char* crackSound;
  const char* shatterShound;
  const char* autoShatterShound;
  const FxEffectDef* crackEffect;
  const FxEffectDef* shatterEffect;
};

static_assert(sizeof(GlassDef) == 0x3C, "The size is not correct");

/* 2691 */
const struct Glass
{
  GlassDef* glassDef;
  unsigned int index;
  unsigned int brushModel;
  float origin[3];
  float angles[3];
  float absmin[3];
  float absmax[3];
  bool isPlanar;
  unsigned __int8 numOutlineVerts;
  float(*outline)[2];
  float outlineAxis[3][3];
  float outlineOrigin[3];
  float uvScale;
  float thickness;
};

static_assert(sizeof(Glass) == 0x7C, "The size is not correct");

// /* 2692 */
// struct $01920CFBCEBBC7D8417C03082B059610
// {
//   unsigned __int32 state : 4;
//   unsigned __int32 id : 12;
// };

// /* 2693 */
// union GlassState::<unnamed_type_val>
// {
//   unsigned int i;
//   $01920CFBCEBBC7D8417C03082B059610 __s1;
// };

// /* 2694 */
// struct __cppobj GlassState
// {
//   GlassState::<unnamed_type_val> val;
// };

// /* 2695 */
// struct GlassClient::Outlines::Outline
// {
//   unsigned int numVerts;
//   unsigned int edgeFlags;
//   float (*verts)[2];
// };

// /* 2696 */
// struct __cppobj GlassClient::Outlines
// {
//   unsigned int numOutlines;
//   GlassClient::Outlines::Outline *outlines;
// };

// /* 2697 */
// struct __cppobj GlassClient
// {
//   const Glass *glass;
//   GlassState state;
//   GlassClient::Outlines *outlines;
// };

// /* 2698 */
// struct GlassRenderer::<unnamed_type_stat>
// {
//   int numMovingShards;
//   int numVisGroups;
//   int numVisShards;
//   int numOOMGroups;
// };

// /* 2699 */
// struct __cppobj GlassLock
// {
//   volatile int lock;
// };

// /* 2700 */
// struct __cppobj SmallAllocator
// {
//   void *memory;
//   void *freeHead;
//   unsigned int blockSize;
//   unsigned int numBlocks;
//   unsigned int numUsed;
//   unsigned int maxUsed;
// };

// /* 2701 */
// struct Allocator::Memory
// {
//   Allocator::Memory *next;
//   Allocator::Memory *prev;
//   void *userData;
//   Allocator::Memory *nextFree;
//   Allocator::Memory *prevFree;
// };

// /* 2702 */
// struct Allocator
// {
//   void *buffer;
//   Allocator::Memory *head;
//   Allocator::Memory *tail;
//   Allocator::Memory *freeHead;
//   int maxUsed;
// };

// /* 2703 */
// struct __cppobj std::_Container_base_aux
// {
//   std::_Aux_cont *_Myownedaux;
// };

// /* 2704 */
// struct __cppobj std::_Aux_cont
// {
//   const std::_Container_base_aux *_Mycontainer;
// };

// /* 2705 */
// struct __cppobj SmallAllocatorTemplate<std::_Aux_cont>
// {
//   SmallAllocator *alloc;
// };

// /* 2706 */
// struct __cppobj std::_Container_base_aux_alloc_real<SmallAllocatorTemplate<ShardGroup * *> > : std::_Container_base_aux
// {
//   SmallAllocatorTemplate<std::_Aux_cont> _Alaux;
// };

// /* 2707 */
// struct __cppobj SmallAllocatorTemplate<std::_List_nod<ShardGroup *,SmallAllocatorTemplate<ShardGroup * *> >::_Node>
// {
//   SmallAllocator *alloc;
// };

// /* 2708 */
// struct __cppobj std::_List_nod<ShardGroup *,SmallAllocatorTemplate<ShardGroup * *> > : std::_Container_base_aux_alloc_real<SmallAllocatorTemplate<ShardGroup * *> >
// {
//   SmallAllocatorTemplate<std::_List_nod<ShardGroup *,SmallAllocatorTemplate<ShardGroup * *> >::_Node> _Alnod;
// };

// /* 2709 */
// struct __cppobj SmallAllocatorTemplate<std::_List_nod<ShardGroup *,SmallAllocatorTemplate<ShardGroup * *> >::_Node *>
// {
//   SmallAllocator *alloc;
// };

// /* 2710 */
// struct __cppobj std::_List_ptr<ShardGroup *,SmallAllocatorTemplate<ShardGroup * *> > : std::_List_nod<ShardGroup *,SmallAllocatorTemplate<ShardGroup * *> >
// {
//   SmallAllocatorTemplate<std::_List_nod<ShardGroup *,SmallAllocatorTemplate<ShardGroup * *> >::_Node *> _Alptr;
// };

// /* 2711 */
// struct __cppobj SmallAllocatorTemplate<ShardGroup *>
// {
//   SmallAllocator *alloc;
// };

// /* 2712 */
// struct __cppobj std::_List_val<ShardGroup *,SmallAllocatorTemplate<ShardGroup * *> > : std::_List_ptr<ShardGroup *,SmallAllocatorTemplate<ShardGroup * *> >
// {
//   SmallAllocatorTemplate<ShardGroup *> _Alval;
// };

// /* 2713 */
// struct __cppobj std::_List_nod<ShardGroup *,SmallAllocatorTemplate<ShardGroup * *> >::_Node
// {
//   std::_List_nod<ShardGroup *,SmallAllocatorTemplate<ShardGroup * *> >::_Node *_Next;
//   std::_List_nod<ShardGroup *,SmallAllocatorTemplate<ShardGroup * *> >::_Node *_Prev;
//   ShardGroup *_Myval;
// };

// /* 2721 */
// struct GfxLightingInfo
// {
//   unsigned __int8 primaryLightIndex;
//   unsigned __int8 reflectionProbeIndex;
//   unsigned int lightingHandle;
// };

// /* 2720 */
// struct ShardGroup
// {
//   unsigned int packedPos;
//   const GlassDef *glassDef;
//   GlassShard *head;
//   float worldBBoxMin[3];
//   float worldBBoxMax[3];
//   float origin[3];
//   float extent[3];
//   bool invalidBBox;
//   bool visible;
//   bool highLod;
//   __int16 numShards;
//   __int16 numIndices;
//   __int16 numVerts;
//   unsigned __int16 lightingHandle;
//   GfxLightingInfo lightingInfo;
//   unsigned __int16 *renderIndices;
// };

// /* 2717 */
// struct __cppobj __declspec(align(2)) GlassShard::Outline
// {
//   GlassShard::Outline::Vertex *verts;
//   float length;
//   float area;
//   unsigned __int8 numVerts;
//   unsigned __int8 maxVerts;
//   bool isClosed;
// };

// /* 2718 */
// struct __declspec(align(4)) GlassShard::Mesh
// {
//   PackedUnitVec *normArray;
//   unsigned __int8 *indices;
//   unsigned __int8 numNorm;
//   unsigned __int8 numVerts;
//   unsigned __int8 numVertsLow;
//   unsigned __int8 numIndices;
//   unsigned __int8 numIndicesLow;
// };

// /* 2714 */
// struct __cppobj GlassShard
// {
//   GlassShard *groupNext;
//   unsigned __int8 *memoryPtr;
//   unsigned __int16 memorySize;
//   unsigned __int16 glassIndex;
//   GlassShard::Outline outline;
//   float thickness;
//   float uvScale;
//   GlassShard::Mesh mesh;
//   float axis[3][3];
//   float origin[3];
//   int physObjId;
//   GlassPhysics *glassPhysics;
//   float timeUntilAction;
//   float worldBBoxMin[3];
//   float worldBBoxMax[3];
//   ShardGroup *group;
//   bool isOriginalEdge;
//   bool remove;
//   bool inGroupChange;
//   bool delayedDrop;
// };

// /* 2715 */
// struct ray2_t
// {
//   float origin[2];
//   float dir[2];
//   float len;
// };

// /* 2716 */
// struct __declspec(align(4)) GlassShard::Outline::Vertex
// {
//   ray2_t edge;
//   bool isOriginalEdge;
// };

// /* 2719 */
// struct __cppobj __declspec(align(16)) GlassPhysics
// {
//   phys_mat44 m_mat;
//   phys_vec3 m_inv_inertia;
//   phys_vec3 m_t_vel;
//   phys_vec3 m_a_vel;
//   phys_vec3 m_force_sum;
//   phys_vec3 m_torque_sum;
//   float m_inv_mass;
// };

// /* 2722 */
// struct __cppobj std::list<ShardGroup *,SmallAllocatorTemplate<ShardGroup * *> > : std::_List_val<ShardGroup *,SmallAllocatorTemplate<ShardGroup * *> >
// {
//   std::_List_nod<ShardGroup *,SmallAllocatorTemplate<ShardGroup * *> >::_Node *_Myhead;
//   unsigned int _Mysize;
// };

// /* 2723 */
// struct __cppobj FixedSizeAllocator<ShardGroup *>
// {
//   void *memory;
//   std::list<ShardGroup *,SmallAllocatorTemplate<ShardGroup * *> > used;
//   std::list<ShardGroup *,SmallAllocatorTemplate<ShardGroup * *> > free;
//   unsigned int maxUsed;
// };

// /* 2724 */
// struct __cppobj std::_Container_base_aux_alloc_real<SmallAllocatorTemplate<GlassShard * *> > : std::_Container_base_aux
// {
//   SmallAllocatorTemplate<std::_Aux_cont> _Alaux;
// };

// /* 2725 */
// struct __cppobj SmallAllocatorTemplate<std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard * *> >::_Node>
// {
//   SmallAllocator *alloc;
// };

// /* 2726 */
// struct __cppobj std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard * *> > : std::_Container_base_aux_alloc_real<SmallAllocatorTemplate<GlassShard * *> >
// {
//   SmallAllocatorTemplate<std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard * *> >::_Node> _Alnod;
// };

// /* 2727 */
// struct __cppobj SmallAllocatorTemplate<std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard * *> >::_Node *>
// {
//   SmallAllocator *alloc;
// };

// /* 2728 */
// struct __cppobj std::_List_ptr<GlassShard *,SmallAllocatorTemplate<GlassShard * *> > : std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard * *> >
// {
//   SmallAllocatorTemplate<std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard * *> >::_Node *> _Alptr;
// };

// /* 2729 */
// struct __cppobj SmallAllocatorTemplate<GlassShard *>
// {
//   SmallAllocator *alloc;
// };

// /* 2730 */
// struct __cppobj std::_List_val<GlassShard *,SmallAllocatorTemplate<GlassShard * *> > : std::_List_ptr<GlassShard *,SmallAllocatorTemplate<GlassShard * *> >
// {
//   SmallAllocatorTemplate<GlassShard *> _Alval;
// };

// /* 2731 */
// struct __cppobj std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard * *> >::_Node
// {
//   std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard * *> >::_Node *_Next;
//   std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard * *> >::_Node *_Prev;
//   GlassShard *_Myval;
// };

// /* 2732 */
// struct __cppobj std::list<GlassShard *,SmallAllocatorTemplate<GlassShard * *> > : std::_List_val<GlassShard *,SmallAllocatorTemplate<GlassShard * *> >
// {
//   std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard * *> >::_Node *_Myhead;
//   unsigned int _Mysize;
// };

// /* 2733 */
// struct __cppobj FixedSizeAllocator<GlassShard *>
// {
//   void *memory;
//   std::list<GlassShard *,SmallAllocatorTemplate<GlassShard * *> > used;
//   std::list<GlassShard *,SmallAllocatorTemplate<GlassShard * *> > free;
//   unsigned int maxUsed;
// };

// /* 2734 */
// struct __cppobj std::_Container_base_aux_alloc_real<SmallAllocatorTemplate<GlassPhysics * *> > : std::_Container_base_aux
// {
//   SmallAllocatorTemplate<std::_Aux_cont> _Alaux;
// };

// /* 2735 */
// struct __cppobj SmallAllocatorTemplate<std::_List_nod<GlassPhysics *,SmallAllocatorTemplate<GlassPhysics * *> >::_Node>
// {
//   SmallAllocator *alloc;
// };

// /* 2736 */
// struct __cppobj std::_List_nod<GlassPhysics *,SmallAllocatorTemplate<GlassPhysics * *> > : std::_Container_base_aux_alloc_real<SmallAllocatorTemplate<GlassPhysics * *> >
// {
//   SmallAllocatorTemplate<std::_List_nod<GlassPhysics *,SmallAllocatorTemplate<GlassPhysics * *> >::_Node> _Alnod;
// };

// /* 2737 */
// struct __cppobj SmallAllocatorTemplate<std::_List_nod<GlassPhysics *,SmallAllocatorTemplate<GlassPhysics * *> >::_Node *>
// {
//   SmallAllocator *alloc;
// };

// /* 2738 */
// struct __cppobj std::_List_ptr<GlassPhysics *,SmallAllocatorTemplate<GlassPhysics * *> > : std::_List_nod<GlassPhysics *,SmallAllocatorTemplate<GlassPhysics * *> >
// {
//   SmallAllocatorTemplate<std::_List_nod<GlassPhysics *,SmallAllocatorTemplate<GlassPhysics * *> >::_Node *> _Alptr;
// };

// /* 2739 */
// struct __cppobj SmallAllocatorTemplate<GlassPhysics *>
// {
//   SmallAllocator *alloc;
// };

// /* 2740 */
// struct __cppobj std::_List_val<GlassPhysics *,SmallAllocatorTemplate<GlassPhysics * *> > : std::_List_ptr<GlassPhysics *,SmallAllocatorTemplate<GlassPhysics * *> >
// {
//   SmallAllocatorTemplate<GlassPhysics *> _Alval;
// };

// /* 2741 */
// struct __cppobj std::_List_nod<GlassPhysics *,SmallAllocatorTemplate<GlassPhysics * *> >::_Node
// {
//   std::_List_nod<GlassPhysics *,SmallAllocatorTemplate<GlassPhysics * *> >::_Node *_Next;
//   std::_List_nod<GlassPhysics *,SmallAllocatorTemplate<GlassPhysics * *> >::_Node *_Prev;
//   GlassPhysics *_Myval;
// };

// /* 2742 */
// struct __cppobj std::list<GlassPhysics *,SmallAllocatorTemplate<GlassPhysics * *> > : std::_List_val<GlassPhysics *,SmallAllocatorTemplate<GlassPhysics * *> >
// {
//   std::_List_nod<GlassPhysics *,SmallAllocatorTemplate<GlassPhysics * *> >::_Node *_Myhead;
//   unsigned int _Mysize;
// };

// /* 2743 */
// struct __cppobj FixedSizeAllocator<GlassPhysics *>
// {
//   void *memory;
//   std::list<GlassPhysics *,SmallAllocatorTemplate<GlassPhysics * *> > used;
//   std::list<GlassPhysics *,SmallAllocatorTemplate<GlassPhysics * *> > free;
//   unsigned int maxUsed;
// };

// /* 2744 */
// struct __cppobj std::_Container_base_aux_alloc_real<SmallAllocatorTemplate<GlassShard *> > : std::_Container_base_aux
// {
//   SmallAllocatorTemplate<std::_Aux_cont> _Alaux;
// };

// /* 2745 */
// struct __cppobj SmallAllocatorTemplate<std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard *> >::_Node>
// {
//   SmallAllocator *alloc;
// };

// /* 2746 */
// struct __cppobj std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard *> > : std::_Container_base_aux_alloc_real<SmallAllocatorTemplate<GlassShard *> >
// {
//   SmallAllocatorTemplate<std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard *> >::_Node> _Alnod;
// };

// /* 2747 */
// struct __cppobj SmallAllocatorTemplate<std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard *> >::_Node *>
// {
//   SmallAllocator *alloc;
// };

// /* 2748 */
// struct __cppobj std::_List_ptr<GlassShard *,SmallAllocatorTemplate<GlassShard *> > : std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard *> >
// {
//   SmallAllocatorTemplate<std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard *> >::_Node *> _Alptr;
// };

// /* 2749 */
// struct __cppobj std::_List_val<GlassShard *,SmallAllocatorTemplate<GlassShard *> > : std::_List_ptr<GlassShard *,SmallAllocatorTemplate<GlassShard *> >
// {
//   SmallAllocatorTemplate<GlassShard *> _Alval;
// };

// /* 2750 */
// struct __cppobj std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard *> >::_Node
// {
//   std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard *> >::_Node *_Next;
//   std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard *> >::_Node *_Prev;
//   GlassShard *_Myval;
// };

// /* 2751 */
// struct __cppobj std::list<GlassShard *,SmallAllocatorTemplate<GlassShard *> > : std::_List_val<GlassShard *,SmallAllocatorTemplate<GlassShard *> >
// {
//   std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard *> >::_Node *_Myhead;
//   unsigned int _Mysize;
// };

// /* 2752 */
// struct __cppobj GlassRenderer::SortedShardsList : std::list<GlassShard *,SmallAllocatorTemplate<GlassShard *> >
// {
// };

// /* 2753 */
// struct GlassShardMeshVertex
// {
//   unsigned __int8 pos;
//   unsigned __int8 norm;
// };

// /* 2754 */
// struct GlassRenderer::Action::<unnamed_tag>::<unnamed_type_shatter>
// {
//   GlassClient *glass;
//   bool gameState;
//   float hitPos[3];
//   float hitDir[3];
// };

// /* 2755 */
// struct GlassRenderer::Action::<unnamed_tag>::<unnamed_type_trace>
// {
//   float p0[3];
//   float p1[3];
// };

// /* 2756 */
// struct GlassRenderer::Action::<unnamed_tag>::<unnamed_type_explosion>
// {
//   float origin[3];
//   float damageInner;
//   float damageOuter;
//   float radius;
//   int mod;
// };

// /* 2757 */
// struct GlassRenderer::Action::<unnamed_tag>::<unnamed_type_melee>
// {
//   float eyePos[3];
//   float forward[3];
//   float right[3];
//   float up[3];
//   float range;
// };

// /* 2758 */
// union $F8734D8CD8D5548044E567214B041690
// {
//   GlassRenderer::Action::<unnamed_tag>::<unnamed_type_shatter> shatter;
//   GlassRenderer::Action::<unnamed_tag>::<unnamed_type_trace> trace;
//   GlassRenderer::Action::<unnamed_tag>::<unnamed_type_explosion> explosion;
//   GlassRenderer::Action::<unnamed_tag>::<unnamed_type_melee> melee;
// };

// /* 2759 */
// struct GlassRenderer::Action
// {
//   GlassRenderer::Action::<unnamed_type_type> type;
//   $F8734D8CD8D5548044E567214B041690 ___u1;
// };

// /* 2760 */
// struct __cppobj GlassRenderer
// {
//   const dvar_s *cullShards;
//   const dvar_s *drawDebug;
//   const dvar_s *drawBBox;
//   const dvar_s *drawShardOutline;
//   const dvar_s *pickShards;
//   const dvar_s *debugSplit;
//   const dvar_s *freezeShards;
//   const dvar_s *broom;
//   GlassRenderer::<unnamed_type_stat> stat;
//   GlassRenderer::<unnamed_type_stat> prevStat;
//   int minFreeVertsMemory;
//   int minFreeIndicesMemory;
//   int minFreeShardsMemory;
//   int maxCrashShards;
//   unsigned int numShatters;
//   unsigned __int64 shatterTimer;
//   unsigned int numSplits;
//   unsigned __int64 splitTimer;
//   unsigned __int64 triangulateTimer;
//   unsigned int genVertsCount;
//   unsigned __int64 genVertsTimer;
//   const dvar_s *maxShardSplit;
//   const dvar_s *shardShatterSizeLimitScale;
//   const dvar_s *defragMemory;
//   const dvar_s *defragIndices;
//   const dvar_s *freeBuffersDelay;
//   const dvar_s *smpGlass;
//   const dvar_s *shardSplitDir;
//   const dvar_s *shardSplitDir2;
//   const dvar_s *shardEdgeSize;
//   const dvar_s *forceMultiplier;
//   const dvar_s *forceOriginMult;
//   const dvar_s *forceAttenuation;
//   const dvar_s *extraVelocity;
//   const dvar_s *doMaintenance;
//   const dvar_s *lowLodDist;
//   const dvar_s *maxShardLife;
//   const dvar_s *timeUntilDropRange;
//   const dvar_s *narrowShardRatio;
//   const dvar_s *shatterFxMaxDist;
//   const dvar_s *shatterFxMinEdgeLength;
//   unsigned int frame;
//   int timeLastUpdate;
//   float deltaTime;
//   GlassLock rendererLock;
//   SmallAllocator smallAllocator;
//   Allocator shardMemoryAllocator;
//   FixedSizeAllocator<ShardGroup *> *groupsAllocator;
//   FixedSizeAllocator<GlassShard *> *shardsAllocator;
//   FixedSizeAllocator<GlassPhysics *> *physicsAllocator;
//   GlassRenderer::SortedShardsList *colidingShards;
//   GlassRenderer::SortedShardsList *tempShardsList;
//   Material *usedMaterials[32];
//   unsigned int numUsedMaterials;
//   float allBBoxMin[3];
//   float allBBoxMax[3];
//   float coordScale[3];
//   GlassShard *groupChanges[2048];
//   int numGroupChanges;
//   int maxNumGroupChanges;
//   GlassShardMeshVertex *vertexList[22];
//   GlassRenderer::Action actions[200];
//   volatile int actionInputIndex;
//   volatile int actionOutputIndex;
// };

// /* 2761 */
// struct __cppobj GlassesClient
// {
//   GlassClient *glasses;
//   unsigned int numGlasses;
//   GlassRenderer *renderer;
//   unsigned int lastPreShatter;
// };

// /* 2762 */
// struct __cppobj gjk_collision_visitor
// {
//   gjk_collision_visitor_vtbl *__vftable /*VFT*/;
// };

// /* 2763 */
// struct /*VFT*/ gjk_collision_visitor_vtbl
// {
//   void *(__thiscall *allocate)(gjk_collision_visitor *this, const int, const int, const bool);
//   bool (__thiscall *is_query)(gjk_collision_visitor *this);
//   void (__thiscall *get_local_query_aabb)(gjk_collision_visitor *this, float *, float *);
//   bool (__thiscall *query_create_prolog)(gjk_collision_visitor *this, const void *);
//   void (__thiscall *query_create_epilog)(gjk_collision_visitor *this, gjk_base_t *);
//   bool (__thiscall *query_create_prolog_1)(gjk_collision_visitor *this, const float *, const float *, const void *);
//   void (__thiscall *query_create_epilog_1)(gjk_collision_visitor *this, gjk_base_t *);
// };

// /* 2764 */
// struct /*VFT*/ create_gjk_geom_collision_visitor_vtbl
// {
//   void *(__thiscall *allocate)(gjk_collision_visitor *this, const int, const int, const bool);
//   bool (__thiscall *is_query)(gjk_collision_visitor *this);
//   void (__thiscall *get_local_query_aabb)(gjk_collision_visitor *this, float *, float *);
//   bool (__thiscall *query_create_prolog)(gjk_collision_visitor *this, const void *);
//   void (__thiscall *query_create_epilog)(gjk_collision_visitor *this, gjk_base_t *);
//   bool (__thiscall *query_create_prolog_1)(gjk_collision_visitor *this, const float *, const float *, const void *);
//   void (__thiscall *query_create_epilog_1)(gjk_collision_visitor *this, gjk_base_t *);
// };

// /* 2765 */
// struct __cppobj create_gjk_geom_collision_visitor : gjk_collision_visitor
// {
//   gjk_geom_list_t *gjk_geom_list;
// };

// /* 2766 */
// struct __cppobj phys_gjk_collision_info
// {
//   phys_vec3 m_p1;
//   phys_vec3 m_p2;
//   phys_vec3 m_n;
// };

// /* 2767 */
// struct __cppobj broad_phase_memory_info
// {
//   int m_max_num_gjk_ci;
//   int m_max_num_sap_active_pairs;
//   int m_max_num_surface_types;
// };

// /* 2768 */
// struct _s__CatchableType
// {
//   unsigned int properties;
//   _TypeDescriptor *pType;
//   _PMD thisDisplacement;
//   int sizeOrOffset;
//   void (__cdecl *copyFunction)();
// };

// /* 2769 */
// struct _s__CatchableTypeArray
// {
//   int nCatchableTypes;
//   const _s__CatchableType *arrayOfCatchableTypes[];
// };

// /* 2770 */
// struct /*VFT*/ gjk_brush_t_vtbl
// {
//   void (__thiscall *support)(phys_gjk_geom *this, const phys_vec3 *, phys_vec3 *, phys_vec3 *);
//   void (__thiscall *get_simplex)(phys_gjk_geom *this, const cached_simplex_info *, const int, phys_vec3 *, phys_vec3 *);
//   void (__thiscall *set_simplex)(phys_gjk_geom *this, const phys_vec3 *, const int, const phys_vec3 *, cached_simplex_info *);
//   const phys_vec3 *(__thiscall *get_center)(phys_gjk_geom *this, const phys_vec3 *result);
//   void (__thiscall *get_feature)(phys_gjk_geom *this, phys_contact_manifold *);
//   float (__thiscall *get_geom_radius)(phys_gjk_geom *this);
//   void (__thiscall *calc_aabb)(phys_gjk_geom *this, const phys_mat44 *, phys_vec3 *, phys_vec3 *);
//   bool (__thiscall *ray_cast)(phys_gjk_geom *this, const phys_vec3 *, const phys_vec3 *, const float, float *, phys_vec3 *);
//   bool (__thiscall *is_polyhedron)(phys_gjk_geom *this);
//   void (__thiscall *comp_aabb_loc)(gjk_base_t *this);
//   unsigned int (__thiscall *get_type)(gjk_base_t *this);
//   bool (__thiscall *is_foot)(gjk_base_t *this, const phys_vec3 *);
//   bool (__thiscall *is_walkable)(gjk_base_t *this, const phys_vec3 *, const phys_vec3 *);
//   const cbrush_t *(__thiscall *get_brush)(gjk_base_t *this);
// };

// /* 2771 */
// struct __cppobj __declspec(align(8)) gjk_brush_t : gjk_base_t
// {
//   int nverts;
//   const float (*verts)[3];
//   const cbrush_t *brush;
// };

// /* 2772 */
// struct __cppobj GlassShard::Triangles
// {
//   const GlassShard::Outline *outline;
//   unsigned __int8 triangleIndices[256];
//   unsigned int nIndices;
// };

// /* 2773 */
// struct GlassShard::Outline::EdgeDistance
// {
//   unsigned int edgeIndex;
//   float edgeParam;
//   float dist;
//   float closestPoint[2];
// };

// /* 2774 */
// struct $_TypeDescriptor$_extraBytes_28
// {
//   const void *pVFTable;
//   void *spare;
//   char name[28];
// };

 /* 2775 */
struct Glasses
{
  const char* name;
  unsigned int numGlasses;
  Glass* glasses;
  unsigned __int8* workMemory;
  unsigned int workMemorySize;
  unsigned int smallAllocatorBlocks;
  unsigned int maxGroups;
  unsigned int maxShards;
  unsigned int maxPhysics;
  unsigned int shardMemorySize;
  unsigned int maxFreeCmd;
  unsigned int numSlots;
  unsigned int numVerts;
  unsigned int numIndices;
};

static_assert(sizeof(Glasses) == 0x38, "The size is not correct");

// /* 2776 */
// struct __cppobj std::_Iterator_base_universal
// {
// };

// /* 2777 */
// const struct __cppobj std::_Container_base_secure
// {
// };

// /* 2778 */
// struct __cppobj std::_Iterator_base_secure : std::_Iterator_base_universal
// {
//   const std::_Container_base_secure *_Mycont;
// };

// /* 2779 */
// struct __cppobj std::input_iterator_tag
// {
// };

// /* 2780 */
// struct __cppobj std::forward_iterator_tag : std::input_iterator_tag
// {
// };

// /* 2781 */
// struct __cppobj std::bidirectional_iterator_tag : std::forward_iterator_tag
// {
// };

// /* 2782 */
// struct __cppobj std::random_access_iterator_tag : std::bidirectional_iterator_tag
// {
// };

// /* 2783 */
// struct __cppobj std::_Ranit_base<char,int,char const *,char const &,std::_Iterator_base_secure> : std::_Iterator_base_secure
// {
// };

// /* 2784 */
// struct __cppobj std::_Allocator_base<wchar_t>
// {
// };

// /* 2785 */
// struct __cppobj std::_String_base : std::_Container_base_secure
// {
// };

// /* 2786 */
// struct __cppobj std::_Allocator_base<char>
// {
// };

// /* 2787 */
// struct __cppobj std::allocator<char> : std::_Allocator_base<char>
// {
// };

// /* 2788 */
// struct __cppobj std::_String_val<char> : std::_String_base
// {
//   std::allocator<char> _Alval;
// };

// /* 2789 */
// union std::string::_Bxty
// {
//   char _Buf[16];
//   char *_Ptr;
// };

// /* 2790 */
// struct __cppobj std::string : std::_String_val<char>
// {
//   std::string::_Bxty _Bx;
//   unsigned int _Mysize;
//   unsigned int _Myres;
// };

// /* 2791 */
// struct __cppobj std::logic_error : std::exception
// {
//   std::string _Str;
// };

// /* 2792 */
// struct /*VFT*/ std::logic_error_vtbl
// {
//   void (__thiscall *~exception)(std::exception *this);
//   const char *(__thiscall *what)(std::exception *this);
// };

// /* 2793 */
// struct __cppobj std::length_error : std::logic_error
// {
// };

// /* 2794 */
// struct /*VFT*/ std::length_error_vtbl
// {
//   void (__thiscall *~exception)(std::exception *this);
//   const char *(__thiscall *what)(std::exception *this);
// };

// /* 2795 */
// struct __cppobj std::runtime_error : std::exception
// {
//   std::string _Str;
// };

// /* 2796 */
// struct /*VFT*/ std::runtime_error_vtbl
// {
//   void (__thiscall *~exception)(std::exception *this);
//   const char *(__thiscall *what)(std::exception *this);
// };

// /* 2797 */
// struct __cppobj SmallAllocatorTemplate<GlassShard * *>
// {
//   SmallAllocator *alloc;
// };

// /* 2798 */
// struct __cppobj std::allocator<void>
// {
// };

// /* 2799 */
// struct __cppobj std::_Unsecure_char_traits_tag
// {
// };

// /* 2800 */
// struct __cppobj std::_Char_traits_base
// {
// };

// /* 2801 */
// struct __cppobj __declspec(align(8)) std::fpos<int>
// {
//   int _Myoff;
//   __int64 _Fpos;
//   int _Mystate;
// };

// /* 2802 */
// struct __cppobj std::char_traits<wchar_t> : std::_Char_traits_base
// {
// };

// /* 2803 */
// struct __cppobj std::allocator<wchar_t> : std::_Allocator_base<wchar_t>
// {
// };

// /* 2804 */
// struct __cppobj std::_String_val<wchar_t> : std::_String_base
// {
//   std::allocator<wchar_t> _Alval;
// };

// /* 2805 */
// struct __cppobj std::allocator<char>::rebind<char>
// {
// };

// /* 2806 */
// union std::wstring::_Bxty
// {
//   wchar_t _Buf[8];
//   wchar_t *_Ptr;
// };

// /* 2807 */
// struct __cppobj std::wstring : std::_String_val<wchar_t>
// {
//   std::wstring::_Bxty _Bx;
//   unsigned int _Mysize;
//   unsigned int _Myres;
// };

// /* 2808 */
// struct __cppobj std::_Iterator_base_aux : std::_Iterator_base_universal
// {
//   const std::_Aux_cont *_Myaux;
// };

// /* 2809 */
// struct __cppobj std::_Iterator_with_base<std::bidirectional_iterator_tag,GlassShard *,int,GlassShard * const *,GlassShard * const &,std::_Iterator_base_aux> : std::_Iterator_base_aux
// {
// };

// /* 2810 */
// struct __cppobj std::_Bidit<GlassShard *,int,GlassShard * const *,GlassShard * const &> : std::_Iterator_with_base<std::bidirectional_iterator_tag,GlassShard *,int,GlassShard * const *,GlassShard * const &,std::_Iterator_base_aux>
// {
// };

// /* 2811 */
// struct __cppobj std::list<GlassShard *,SmallAllocatorTemplate<GlassShard *> >::_Const_iterator<1> : std::_Bidit<GlassShard *,int,GlassShard * const *,GlassShard * const &>
// {
//   std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard *> >::_Node *_Ptr;
// };

// /* 2812 */
// struct __cppobj std::list<GlassShard *,SmallAllocatorTemplate<GlassShard *> >::_Iterator<1> : std::list<GlassShard *,SmallAllocatorTemplate<GlassShard *> >::_Const_iterator<1>
// {
// };

// /* 2813 */
// struct __cppobj std::char_traits<char> : std::_Char_traits_base
// {
// };

// /* 2814 */
// struct __cppobj std::unary_function<std::wstring,unsigned int>
// {
// };

// /* 2815 */
// struct __cppobj std::_Unchanged_checked_iterator_base_type_tag
// {
// };

// /* 2816 */
// struct __cppobj std::invalid_argument : std::logic_error
// {
// };

// /* 2817 */
// struct /*VFT*/ std::invalid_argument_vtbl
// {
//   void (__thiscall *~exception)(std::exception *this);
//   const char *(__thiscall *what)(std::exception *this);
// };

// /* 2818 */
// struct __cppobj std::underflow_error : std::runtime_error
// {
// };

// /* 2819 */
// struct /*VFT*/ std::underflow_error_vtbl
// {
//   void (__thiscall *~exception)(std::exception *this);
//   const char *(__thiscall *what)(std::exception *this);
// };

// /* 2820 */
// struct __cppobj std::_Unchecked_iterator_tag
// {
// };

// /* 2821 */
// struct __cppobj std::_Undefined_inner_type_tag
// {
// };

// /* 2822 */
// struct __cppobj std::allocator<wchar_t>::rebind<wchar_t>
// {
// };

// /* 2823 */
// struct __cppobj std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > : std::_Ranit_base<char,int,char const *,char const &,std::_Iterator_base_secure>
// {
//   const char *_Myptr;
// };

// /* 2824 */
// struct __cppobj std::_Range_checked_iterator_tag
// {
// };

// /* 2825 */
// struct __cppobj std::tr1::_Ph<9>
// {
// };

// /* 2826 */
// struct __cppobj std::tr1::_Ph<7>
// {
// };

// /* 2827 */
// struct __cppobj std::tr1::_Ph<8>
// {
// };

// /* 2828 */
// struct __cppobj std::tr1::_Ph<10>
// {
// };

// /* 2829 */
// struct __cppobj std::tr1::_Ph<1>
// {
// };

// /* 2830 */
// struct __cppobj std::tr1::_Ph<6>
// {
// };

// /* 2831 */
// struct __cppobj std::tr1::_Ph<5>
// {
// };

// /* 2832 */
// struct __cppobj std::tr1::_Ph<4>
// {
// };

// /* 2833 */
// struct __cppobj std::tr1::_Ph<2>
// {
// };

// /* 2834 */
// struct __cppobj std::tr1::_Ph<3>
// {
// };

// /* 2835 */
// struct __cppobj std::tr1::_Nil
// {
// };

// /* 2836 */
// struct __cppobj std::tr1::bad_function_call : std::exception
// {
// };

// /* 2837 */
// struct /*VFT*/ std::tr1::bad_function_call_vtbl
// {
//   void (__thiscall *~exception)(std::exception *this);
//   const char *(__thiscall *what)(std::exception *this);
// };

// /* 2838 */
// struct __cppobj std::tr1::bad_weak_ptr : std::exception
// {
// };

// /* 2839 */
// struct /*VFT*/ std::tr1::bad_weak_ptr_vtbl
// {
//   void (__thiscall *~exception)(std::exception *this);
//   const char *(__thiscall *what)(std::exception *this);
// };

// /* 2840 */
// struct __cppobj std::unary_function<std::string,unsigned int>
// {
// };

// /* 2841 */
// struct __cppobj std::tr1::hash<std::string > : std::unary_function<std::string,unsigned int>
// {
// };

// /* 2842 */
// struct __cppobj std::tr1::hash<std::wstring > : std::unary_function<std::wstring,unsigned int>
// {
// };

// /* 2843 */
// struct __cppobj std::tr1::_Ref_count_base
// {
//   std::tr1::_Ref_count_base_vtbl *__vftable /*VFT*/;
//   const volatile void *_Ptr;
//   int _Uses;
//   int _Weaks;
// };

// /* 2846 */
// struct /*VFT*/ std::tr1::_Ref_count_base_vtbl
// {
//   void (__thiscall *_Destroy)(std::tr1::_Ref_count_base *this);
//   void (__thiscall *_Delete_this)(std::tr1::_Ref_count_base *this);
//   void (__thiscall *~_Ref_count_base)(std::tr1::_Ref_count_base *this);
//   void *(__thiscall *_Get_deleter)(std::tr1::_Ref_count_base *this, const type_info *);
// };

// /* 2844 */
// const struct __cppobj __declspec(align(4)) type_info
// {
//   type_info_vtbl *__vftable /*VFT*/;
//   void *_m_data;
//   char _m_d_name[1];
// };

// /* 2845 */
// struct /*VFT*/ type_info_vtbl
// {
//   void (__thiscall *~type_info)(type_info *this);
// };

// /* 2847 */
// struct __cppobj std::domain_error : std::logic_error
// {
// };

// /* 2848 */
// struct /*VFT*/ std::domain_error_vtbl
// {
//   void (__thiscall *~exception)(std::exception *this);
//   const char *(__thiscall *what)(std::exception *this);
// };

// /* 2849 */
// struct __cppobj std::overflow_error : std::runtime_error
// {
// };

// /* 2850 */
// struct /*VFT*/ std::overflow_error_vtbl
// {
//   void (__thiscall *~exception)(std::exception *this);
//   const char *(__thiscall *what)(std::exception *this);
// };

// /* 2851 */
// struct __cppobj std::range_error : std::runtime_error
// {
// };

// /* 2852 */
// struct /*VFT*/ std::range_error_vtbl
// {
//   void (__thiscall *~exception)(std::exception *this);
//   const char *(__thiscall *what)(std::exception *this);
// };

// /* 2853 */
// struct __cppobj std::out_of_range : std::logic_error
// {
// };

// /* 2854 */
// struct /*VFT*/ std::out_of_range_vtbl
// {
//   void (__thiscall *~exception)(std::exception *this);
//   const char *(__thiscall *what)(std::exception *this);
// };

// /* 2855 */
// struct __cppobj std::list<GlassShard *,SmallAllocatorTemplate<GlassShard * *> >::_Const_iterator<1> : std::_Bidit<GlassShard *,int,GlassShard * const *,GlassShard * const &>
// {
//   std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard * *> >::_Node *_Ptr;
// };

// /* 2856 */
// struct __cppobj std::list<GlassShard *,SmallAllocatorTemplate<GlassShard * *> >::_Const_iterator<0> : std::_Bidit<GlassShard *,int,GlassShard * const *,GlassShard * const &>
// {
//   std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard * *> >::_Node *_Ptr;
// };

// /* 2857 */
// struct __cppobj std::list<GlassShard *,SmallAllocatorTemplate<GlassShard * *> >::_Iterator<1> : std::list<GlassShard *,SmallAllocatorTemplate<GlassShard * *> >::_Const_iterator<1>
// {
// };

// /* 2858 */
// struct __cppobj std::list<GlassShard *,SmallAllocatorTemplate<GlassShard * *> >::_Iterator<0> : std::list<GlassShard *,SmallAllocatorTemplate<GlassShard * *> >::_Const_iterator<0>
// {
// };

// /* 2859 */
// struct __cppobj std::_Different_checked_iterator_base_type_tag
// {
// };

// /* 2860 */
// struct __cppobj std::_Secure_char_traits_tag
// {
// };

// /* 2861 */
// struct __cppobj phys_simple_allocator<phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal>
// {
//   int m_count;
// };

// /* 2863 */
// struct phys_inplace_avl_tree_node<phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal>
// {
//   phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal *m_left;
//   phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal *m_right;
//   int m_balance;
// };

// /* 2862 */
// struct __cppobj phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal : phys_gjk_cache_info
// {
//   phys_inplace_avl_tree_node<phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal> m_avl_tree_node;
//   phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal *m_next_gjk_ci;
// };

// /* 2864 */
// struct __cppobj __declspec(align(8)) GlassTimer
// {
//   unsigned __int64 start;
//   unsigned __int64 *counter;
// };

// /* 2865 */
// struct __type_info_node
// {
//   void *memPtr;
//   __type_info_node *next;
// };

// /* 2866 */
// struct __cppobj TraceExtents
// {
//   hybrid_vector start;
//   hybrid_vector end;
//   hybrid_vector invDelta;
// };

// /* 2867 */
// struct __cppobj __declspec(align(4)) phys_surface_type_info
// {
//   float m_friction_coef;
//   float m_bounce_coef;
//   unsigned int m_solver_priority;
//   bool m_no_overflow_error;
// };

// /* 2870 */
// struct __cppobj bpei_database_id
// {
//   unsigned int m_id1;
//   unsigned int m_id2;
// };

// /* 2868 */
// struct __cppobj broad_phase_environment_info
// {
//   void *m_data;
//   minspec_mutex m_mutex;
//   unsigned int m_gjk_geom_id;
//   broad_phase_environment_info *m_next_bpei;
//   phys_inplace_avl_tree_node<broad_phase_environment_info> m_avl_tree_node;
//   bpei_database_id m_database_id;
// };

// /* 2869 */
// struct phys_inplace_avl_tree_node<broad_phase_environment_info>
// {
//   broad_phase_environment_info *m_left;
//   broad_phase_environment_info *m_right;
//   int m_balance;
// };

// /* 2871 */
// struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_27
// {
//   const void *pVFTable;
//   void *spare;
//   char name[27];
// };

// /* 2872 */
// struct __cppobj __declspec(align(16)) phys_static_array<rigid_body_constraint_wheel *,4>
// {
//   char m_buffer[16];
//   rigid_body_constraint_wheel **const m_slot_array;
//   int m_alloc_count;
// };

// /* 2873 */
// struct __cppobj rb_vehicle_model
// {
//   phys_vec3 m_right_dir_loc;
//   phys_vec3 m_forward_dir_loc;
//   phys_static_array<rigid_body_constraint_wheel *,4> m_wheels;
//   float m_desired_speed_factor;
//   float m_acceleration_factor;
//   float m_power_braking_factor;
//   float m_braking_factor;
//   float m_coasting_factor;
//   float m_reference_wheel_radius;
//   float m_steer_factor;
//   float m_steer_factor_offset;
//   float m_steer_current_angle;
//   float m_steer_max_angle;
//   float m_steer_speed;
//   __declspec(align(8)) phys_vec3 m_steer_front_pt_loc;
//   float m_steer_front_back_length;
//   unsigned int m_state_flags;
//   rigid_body_constraint_upright *m_rbc_upright;
// };

// /* 2874 */
// struct __cppobj __declspec(align(16)) phys_wheel_collide_info
// {
//   phys_vec3 m_ray_pos;
//   phys_vec3 m_ray_dir;
//   phys_vec3 m_hitn;
//   float m_hit_t;
//   broad_phase_info *m_hit_bpi;
// };

// /* 2875 */
// struct __cppobj broad_phase_group : broad_phase_base
// {
//   broad_phase_info *m_list_bpi_head;
//   int m_bpi_count;
//   rb_vehicle_model *m_rbvm;
//   phys_wheel_collide_info *m_list_wci;
// };

// /* 2876 */
// struct __cppobj broad_phase_environment_info::avl_tree_accessor
// {
// };

// /* 2877 */
// struct __cppobj phys_auto_activate_callback
// {
//   phys_auto_activate_callback_vtbl *__vftable /*VFT*/;
// };

// /* 2878 */
// struct /*VFT*/ phys_auto_activate_callback_vtbl
// {
//   bool (__thiscall *has_auto_activated)(phys_auto_activate_callback *this);
//   void (__thiscall *auto_activate)(phys_auto_activate_callback *this, broad_phase_info *);
// };

// /* 2879 */
// struct __cppobj phys_link_list<phys_collision_pair>
// {
//   phys_collision_pair *m_first;
//   phys_collision_pair **m_last_next_ptr;
//   int m_alloc_count;
// };

// /* 2880 */
// struct __cppobj phys_link_list<phys_collision_pair>::iterator
// {
//   phys_collision_pair *m_ptr;
// };

// /* 2881 */
// struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_26
// {
//   const void *pVFTable;
//   void *spare;
//   char name[26];
// };

// /* 2882 */
// struct /*VFT*/ gjk_cylinder_t_vtbl
// {
//   void (__thiscall *support)(phys_gjk_geom *this, const phys_vec3 *, phys_vec3 *, phys_vec3 *);
//   void (__thiscall *get_simplex)(phys_gjk_geom *this, const cached_simplex_info *, const int, phys_vec3 *, phys_vec3 *);
//   void (__thiscall *set_simplex)(phys_gjk_geom *this, const phys_vec3 *, const int, const phys_vec3 *, cached_simplex_info *);
//   const phys_vec3 *(__thiscall *get_center)(phys_gjk_geom *this, const phys_vec3 *result);
//   void (__thiscall *get_feature)(phys_gjk_geom *this, phys_contact_manifold *);
//   float (__thiscall *get_geom_radius)(phys_gjk_geom *this);
//   void (__thiscall *calc_aabb)(phys_gjk_geom *this, const phys_mat44 *, phys_vec3 *, phys_vec3 *);
//   bool (__thiscall *ray_cast)(phys_gjk_geom *this, const phys_vec3 *, const phys_vec3 *, const float, float *, phys_vec3 *);
//   bool (__thiscall *is_polyhedron)(phys_gjk_geom *this);
//   void (__thiscall *comp_aabb_loc)(gjk_base_t *this);
//   unsigned int (__thiscall *get_type)(gjk_base_t *this);
//   bool (__thiscall *is_foot)(gjk_base_t *this, const phys_vec3 *);
//   bool (__thiscall *is_walkable)(gjk_base_t *this, const phys_vec3 *, const phys_vec3 *);
//   const cbrush_t *(__thiscall *get_brush)(gjk_base_t *this);
// };

// /* 2883 */
// struct __cppobj gjk_cylinder_t : gjk_base_t
// {
//   int direction;
//   float halfHeight;
//   float radius;
//   float m_geom_radius;
//   phys_mat44 xform;
// };

// /* 2884 */
// struct __cppobj SmallAllocatorTemplate<GlassShard *>::rebind<std::_Aux_cont>
// {
// };

// /* 2885 */
// struct __cppobj SmallAllocatorTemplate<GlassShard *>::rebind<std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard *> >::_Node>
// {
// };

// /* 2886 */
// struct __cppobj SmallAllocatorTemplate<GlassShard *>::rebind<std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard *> >::_Node *>
// {
// };

// /* 2887 */
// struct __cppobj SmallAllocatorTemplate<GlassShard *>::rebind<GlassShard *>
// {
// };

// /* 2888 */
// struct __cppobj SmallAllocatorTemplate<GlassShard *>::rebind<std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard * *> >::_Node *>
// {
// };

// /* 2889 */
// struct phys_free_list<broad_phase_collision_pair>::T_internal_base
// {
//   phys_free_list<broad_phase_collision_pair>::T_internal_base *m_prev_T_internal;
//   phys_free_list<broad_phase_collision_pair>::T_internal_base *m_next_T_internal;
// };

// /* 2890 */
// struct broad_phase_collision_pair
// {
//   broad_phase_info *m_bpi1;
//   broad_phase_info *m_bpi2;
//   broad_phase_collision_pair *m_next_bpcp;
// };

// /* 2891 */
// struct __cppobj phys_free_list<broad_phase_collision_pair>::T_internal : phys_free_list<broad_phase_collision_pair>::T_internal_base
// {
//   broad_phase_collision_pair m_data;
//   int m_ptr_list_index;
// };

// /* 2892 */
// struct __cppobj phys_free_list<broad_phase_collision_pair>
// {
//   phys_free_list<broad_phase_collision_pair>::T_internal_base m_dummy_head;
//   int m_list_count;
//   int m_list_count_high_water;
//   broad_phase_collision_pair *m_ptr_list[256];
//   int m_ptr_list_count;
// };

// /* 2893 */
// struct __cppobj phys_free_list<broad_phase_collision_pair>::iterator
// {
//   phys_free_list<broad_phase_collision_pair>::T_internal_base *m_ptr;
// };

 /* 2894 */
struct CollisionBorder
{
  float distEq[3];
  float zBase;
  float zSlope;
  float start;
  float length;
};

static_assert(sizeof(CollisionBorder) == 0x1C, "The size is not correct");

/* 2895 */
const struct CollisionPartition
{
  unsigned __int8 triCount;
  unsigned __int8 borderCount;
  int firstTri;
  int nuinds;
  int fuind;
  CollisionBorder* borders;
};

static_assert(sizeof(CollisionPartition) == 0x14, "The size is not correct");

// /* 2896 */
// struct /*VFT*/ gjk_partition_t_vtbl
// {
//   void (__thiscall *support)(phys_gjk_geom *this, const phys_vec3 *, phys_vec3 *, phys_vec3 *);
//   void (__thiscall *get_simplex)(phys_gjk_geom *this, const cached_simplex_info *, const int, phys_vec3 *, phys_vec3 *);
//   void (__thiscall *set_simplex)(phys_gjk_geom *this, const phys_vec3 *, const int, const phys_vec3 *, cached_simplex_info *);
//   const phys_vec3 *(__thiscall *get_center)(phys_gjk_geom *this, const phys_vec3 *result);
//   void (__thiscall *get_feature)(phys_gjk_geom *this, phys_contact_manifold *);
//   float (__thiscall *get_geom_radius)(phys_gjk_geom *this);
//   void (__thiscall *calc_aabb)(phys_gjk_geom *this, const phys_mat44 *, phys_vec3 *, phys_vec3 *);
//   bool (__thiscall *ray_cast)(phys_gjk_geom *this, const phys_vec3 *, const phys_vec3 *, const float, float *, phys_vec3 *);
//   bool (__thiscall *is_polyhedron)(phys_gjk_geom *this);
//   void (__thiscall *comp_aabb_loc)(gjk_base_t *this);
//   unsigned int (__thiscall *get_type)(gjk_base_t *this);
//   bool (__thiscall *is_foot)(gjk_base_t *this, const phys_vec3 *);
//   bool (__thiscall *is_walkable)(gjk_base_t *this, const phys_vec3 *, const phys_vec3 *);
//   const cbrush_t *(__thiscall *get_brush)(gjk_base_t *this);
// };

// /* 2897 */
// struct __cppobj __declspec(align(16)) gjk_partition_t : gjk_base_t
// {
//   int ninds;
//   const float (*verts)[3];
//   unsigned __int16 *inds;
//   const CollisionPartition *partition;
//   const CollisionAabbTree *tree;
// };

// /* 2898 */
// struct phys_free_list<broad_phase_info>::T_internal_base
// {
//   phys_free_list<broad_phase_info>::T_internal_base *m_prev_T_internal;
//   phys_free_list<broad_phase_info>::T_internal_base *m_next_T_internal;
// };

// /* 2899 */
// struct __cppobj phys_free_list<broad_phase_info>::T_internal : phys_free_list<broad_phase_info>::T_internal_base
// {
//   __declspec(align(16)) broad_phase_info m_data;
//   int m_ptr_list_index;
// };

// /* 2900 */
// struct __cppobj phys_free_list<broad_phase_info>
// {
//   phys_free_list<broad_phase_info>::T_internal_base m_dummy_head;
//   int m_list_count;
//   int m_list_count_high_water;
//   broad_phase_info *m_ptr_list[256];
//   int m_ptr_list_count;
// };

// /* 2901 */
// struct /*VFT*/ gjk_obb_t_vtbl
// {
//   void (__thiscall *support)(phys_gjk_geom *this, const phys_vec3 *, phys_vec3 *, phys_vec3 *);
//   void (__thiscall *get_simplex)(phys_gjk_geom *this, const cached_simplex_info *, const int, phys_vec3 *, phys_vec3 *);
//   void (__thiscall *set_simplex)(phys_gjk_geom *this, const phys_vec3 *, const int, const phys_vec3 *, cached_simplex_info *);
//   const phys_vec3 *(__thiscall *get_center)(phys_gjk_geom *this, const phys_vec3 *result);
//   void (__thiscall *get_feature)(phys_gjk_geom *this, phys_contact_manifold *);
//   float (__thiscall *get_geom_radius)(phys_gjk_geom *this);
//   void (__thiscall *calc_aabb)(phys_gjk_geom *this, const phys_mat44 *, phys_vec3 *, phys_vec3 *);
//   bool (__thiscall *ray_cast)(phys_gjk_geom *this, const phys_vec3 *, const phys_vec3 *, const float, float *, phys_vec3 *);
//   bool (__thiscall *is_polyhedron)(phys_gjk_geom *this);
//   void (__thiscall *comp_aabb_loc)(gjk_base_t *this);
//   unsigned int (__thiscall *get_type)(gjk_base_t *this);
//   bool (__thiscall *is_foot)(gjk_base_t *this, const phys_vec3 *);
//   bool (__thiscall *is_walkable)(gjk_base_t *this, const phys_vec3 *, const phys_vec3 *);
//   const cbrush_t *(__thiscall *get_brush)(gjk_base_t *this);
// };

// /* 2902 */
// struct __cppobj gjk_obb_t : gjk_base_t
// {
//   phys_vec3 m_dims;
//   phys_mat44 m_xform;
// };

// /* 2903 */
// struct /*VFT*/ gjk_aabb_t_vtbl
// {
//   void (__thiscall *support)(phys_gjk_geom *this, const phys_vec3 *, phys_vec3 *, phys_vec3 *);
//   void (__thiscall *get_simplex)(phys_gjk_geom *this, const cached_simplex_info *, const int, phys_vec3 *, phys_vec3 *);
//   void (__thiscall *set_simplex)(phys_gjk_geom *this, const phys_vec3 *, const int, const phys_vec3 *, cached_simplex_info *);
//   const phys_vec3 *(__thiscall *get_center)(phys_gjk_geom *this, const phys_vec3 *result);
//   void (__thiscall *get_feature)(phys_gjk_geom *this, phys_contact_manifold *);
//   float (__thiscall *get_geom_radius)(phys_gjk_geom *this);
//   void (__thiscall *calc_aabb)(phys_gjk_geom *this, const phys_mat44 *, phys_vec3 *, phys_vec3 *);
//   bool (__thiscall *ray_cast)(phys_gjk_geom *this, const phys_vec3 *, const phys_vec3 *, const float, float *, phys_vec3 *);
//   bool (__thiscall *is_polyhedron)(phys_gjk_geom *this);
//   void (__thiscall *comp_aabb_loc)(gjk_base_t *this);
//   unsigned int (__thiscall *get_type)(gjk_base_t *this);
//   bool (__thiscall *is_foot)(gjk_base_t *this, const phys_vec3 *);
//   bool (__thiscall *is_walkable)(gjk_base_t *this, const phys_vec3 *, const phys_vec3 *);
//   const cbrush_t *(__thiscall *get_brush)(gjk_base_t *this);
// };

// /* 2904 */
// struct __cppobj __declspec(align(16)) gjk_aabb_t : gjk_base_t
// {
//   phys_vec3 m_center_local;
//   phys_vec3 m_dims;
//   const cbrush_t *m_brush;
// };

// /* 2905 */
// struct _s__ThrowInfo
// {
//   unsigned int attributes;
//   void (__cdecl *pmfnUnwind)();
//   int (*pForwardCompat)(...);
//   const _s__CatchableTypeArray *pCatchableTypeArray;
// };

// /* 2906 */
// const struct __cppobj __declspec(align(16)) broad_phase_environment_query_input
// {
//   phys_vec3 trace_aabb_min_wace;
//   phys_vec3 trace_aabb_max_wace;
//   phys_vec3 trace_translation;
//   unsigned int env_collision_flags;
// };

// /* 2907 */
// struct broad_phase_base_list::node
// {
//   broad_phase_base *m_bpb;
//   broad_phase_base_list::node *m_next;
// };

// /* 2908 */
// struct __cppobj broad_phase_base_list
// {
//   broad_phase_base_list::node *m_list;
//   broad_phase_base_list::node **m_list_cur;
// };

// /* 2909 */
// struct __cppobj broad_phase_environement_query_results
// {
//   broad_phase_base_list m_list_bpi_env;
//   int m_list_bpi_env_count;
//   int m_thread_id;
//   unsigned int m_env_collision_flags;
// };

// /* 2910 */
// struct __cppobj broad_phase_terrain_query_callback
// {
//   broad_phase_terrain_query_callback_vtbl *__vftable /*VFT*/;
// };

// /* 2911 */
// struct /*VFT*/ broad_phase_terrain_query_callback_vtbl
// {
//   void (__thiscall *query)(broad_phase_terrain_query_callback *this, const broad_phase_environment_query_input *, broad_phase_environement_query_results *);
// };

// /* 2912 */
// struct __cppobj moveclip_t
// {
//   float mins[3];
//   float maxs[3];
//   float outerSize[3];
//   TraceExtents extents;
//   int passEntityNum;
//   int passOwnerNum;
//   int contentmask;
// };

// /* 2913 */
// struct __cppobj phys_contact_manifold_process::bridge
// {
//   phys_vec2 m_intersection_p;
//   contact_manifold_mesh_point **m_left_i;
//   contact_manifold_mesh_point **m_right_i;
// };

// /* 2914 */
// struct __cppobj phys_contact_manifold_process::isect_info
// {
//   phys_contact_manifold *m_cman;
//   contact_manifold_mesh_point **m_i;
//   contact_manifold_mesh_point **m_next_i;
//   contact_manifold_mesh_point **m_last_i;
//   phys_vec2 m_edge;
// };

// /* 2915 */
// struct __cppobj phys_link_list<contact_point_info>
// {
//   contact_point_info *m_first;
//   contact_point_info **m_last_next_ptr;
//   int m_alloc_count;
// };

// /* 2916 */
// struct __cppobj __declspec(align(16)) phys_contact_manifold_process
// {
//   phys_mat44 contact_mat;
//   phys_mat44 cg1_to_rb2_xform;
//   phys_transient_allocator *m_cpi_allocator;
//   phys_link_list<contact_point_info> m_list_cpi;
//   contact_point_info *m_cpi;
//   contact_manifold_mesh_point **m_list_isect_point;
//   rigid_body_constraint_contact *m_rbc_contact_search_tree_root;
//   phys_contact_manifold cman1;
//   phys_contact_manifold cman2;
//   int m_contact_point_count;
//   phys_memory_heap m_allocator;
//   char m_allocator_memory[16384];
// };

// /* 2917 */
// struct phys_gjk_info::phys_gjk_set_info
// {
//   float m_lamda[4];
//   int m_candidate;
// };

// /* 2918 */
// struct __cppobj phys_gjk_info
// {
//   phys_mat44 cg2_to_cg1_xform;
//   phys_vec3 m_cg1_relative_translation_loc;
//   float m_continuous_collision_lambda;
//   __declspec(align(16)) phys_gjk_collision_info cg1_cinfo_loc;
//   phys_vec3 m_gjk_origin;
//   phys_vec3 m_w_verts[4];
//   phys_vec3 m_a_verts[4];
//   phys_vec3 m_b_verts[4];
//   phys_vec3 m_a_inds[4];
//   phys_vec3 m_b_inds[4];
//   phys_vec3 m_support_dir;
//   float m_geom_radii_sum;
//   int m_cc_reset_iter;
//   int m_flags;
//   int m_w_set;
//   int m_last_w_set;
//   int m_gjk_iter;
//   float m_gjk_sep_thresh;
//   float m_gjk_pen_thresh_sq;
//   float m_upper_dist_sq;
//   float m_lower_dist_sq;
//   float m_dot_ij[4][4];
//   phys_gjk_info::phys_gjk_set_info m_set_list[16];
// };

// /* 2919 */
// struct __cppobj phys_inplace_avl_tree<phys_gjk_geom_id_pair_key,phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal,phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal::avl_tree_accessor>
// {
//   phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal *m_tree_root;
// };

// /* 2920 */
// struct phys_inplace_avl_tree<phys_gjk_geom_id_pair_key,phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal,phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal::avl_tree_accessor>::stack_item
// {
//   phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal **m_node;
//   int m_child;
// };

// /* 2921 */
// struct __cppobj gjk_unique_id_database_t
// {
//   unsigned int m_counter;
// };

// /* 2922 */
// struct /*VFT*/ gjk_polygon_cylinder_t_vtbl
// {
//   void (__thiscall *support)(phys_gjk_geom *this, const phys_vec3 *, phys_vec3 *, phys_vec3 *);
//   void (__thiscall *get_simplex)(phys_gjk_geom *this, const cached_simplex_info *, const int, phys_vec3 *, phys_vec3 *);
//   void (__thiscall *set_simplex)(phys_gjk_geom *this, const phys_vec3 *, const int, const phys_vec3 *, cached_simplex_info *);
//   const phys_vec3 *(__thiscall *get_center)(phys_gjk_geom *this, const phys_vec3 *result);
//   void (__thiscall *get_feature)(phys_gjk_geom *this, phys_contact_manifold *);
//   float (__thiscall *get_geom_radius)(phys_gjk_geom *this);
//   void (__thiscall *calc_aabb)(phys_gjk_geom *this, const phys_mat44 *, phys_vec3 *, phys_vec3 *);
//   bool (__thiscall *ray_cast)(phys_gjk_geom *this, const phys_vec3 *, const phys_vec3 *, const float, float *, phys_vec3 *);
//   bool (__thiscall *is_polyhedron)(phys_gjk_geom *this);
//   void (__thiscall *comp_aabb_loc)(gjk_base_t *this);
//   unsigned int (__thiscall *get_type)(gjk_base_t *this);
//   bool (__thiscall *is_foot)(gjk_base_t *this, const phys_vec3 *);
//   bool (__thiscall *is_walkable)(gjk_base_t *this, const phys_vec3 *, const phys_vec3 *);
//   const cbrush_t *(__thiscall *get_brush)(gjk_base_t *this);
// };

// /* 2923 */
// struct __cppobj __declspec(align(8)) gjk_polygon_cylinder_t : gjk_base_t
// {
//   phys_vec3 m_center;
//   float m_polygon_cylinder_radius;
//   float m_capsule_radius;
//   float m_half_height;
//   float m_geom_radius;
//   float m_head_offset;
//   float m_foot_offset;
//   int m_mode;
// };

// /* 2924 */
// struct __cppobj gjk_polygon_cylinder_t::poly_verts
// {
//   float m_co[4];
//   float m_si[4];
// };

// /* 2925 */
// struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_22
// {
//   const void *pVFTable;
//   void *spare;
//   char name[22];
// };

// /* 2926 */
// struct __cppobj phys_simple_allocator<broad_phase_environment_info>
// {
//   int m_count;
// };

// /* 2927 */
// struct __cppobj pointtrace_t
// {
//   TraceExtents extents;
//   const IgnoreEntParams *ignoreEntParams;
//   int contentmask;
//   int bLocational;
//   unsigned __int8 *priorityMap;
// };

// /* 2928 */
// struct __cppobj phys_inplace_avl_tree<bpei_database_id,broad_phase_environment_info,broad_phase_environment_info::avl_tree_accessor>
// {
//   broad_phase_environment_info *m_tree_root;
// };

// /* 2929 */
// struct phys_inplace_avl_tree<bpei_database_id,broad_phase_environment_info,broad_phase_environment_info::avl_tree_accessor>::stack_item
// {
//   broad_phase_environment_info **m_node;
//   int m_child;
// };

// /* 2930 */
// struct __cppobj __declspec(align(8)) phys_gjk_input
// {
//   phys_vec3 m_cg1_translation;
//   phys_vec3 m_cg2_translation;
//   float m_start_time;
//   float m_end_time;
//   const phys_gjk_geom *gjk_cg1;
//   const phys_gjk_geom *gjk_cg2;
//   const phys_mat44 *cg1_to_world_xform;
//   const phys_mat44 *cg2_to_world_xform;
//   phys_gjk_cache_info *gjk_ci;
//   float cg1_radius;
//   float cg2_radius;
//   float m_sep_thresh;
//   bool m_intersection_test_only;
//   bool m_continuous_collision;
// };

/* 2931 */
struct XModelPiece
{
  XModel* model;
  float offset[3];
};

static_assert(sizeof(XModelPiece) == 0x10, "The size is not correct");

/* 2932 */
struct XModelPieces
{
  const char* name;
  int numpieces;
  XModelPiece* pieces;
};

static_assert(sizeof(XModelPieces) == 0xC, "The size is not correct");

/* 2933 */
const struct DynEntityDef
{
  DynEntityType type;
  GfxPlacement pose;
  XModel* xModel;
  XModel* destroyedxModel;
  unsigned __int16 brushModel;
  unsigned __int16 physicsBrushModel;
  const FxEffectDef* destroyFx;
  unsigned int destroySound;
  XModelPieces* destroyPieces;
  PhysPreset* physPreset;
  __int16 physConstraints[4];
  int health;
  int flags;
  int contents;
  unsigned __int16 targetname;
  unsigned __int16 target;
};

static_assert(sizeof(DynEntityDef) == 0x54, "The size is not correct");

// /* 2934 */
// struct /*VFT*/ gjk_physics_collision_visitor_vtbl
// {
//   void *(__thiscall *allocate)(gjk_collision_visitor *this, const int, const int, const bool);
//   bool (__thiscall *is_query)(gjk_collision_visitor *this);
//   void (__thiscall *get_local_query_aabb)(gjk_collision_visitor *this, float *, float *);
//   bool (__thiscall *query_create_prolog)(gjk_collision_visitor *this, const void *);
//   void (__thiscall *query_create_epilog)(gjk_collision_visitor *this, gjk_base_t *);
//   bool (__thiscall *query_create_prolog_1)(gjk_collision_visitor *this, const float *, const float *, const void *);
//   void (__thiscall *query_create_epilog_1)(gjk_collision_visitor *this, gjk_base_t *);
// };

// /* 2935 */
// struct __cppobj gjk_physics_collision_visitor : gjk_collision_visitor
// {
//   bpei_database_id m_local_database_id;
//   broad_phase_environment_info *m_local_bpei;
//   const void *m_local_entity;
//   __declspec(align(16)) phys_vec3 m_local_query_trace_aabb_min;
//   phys_vec3 m_local_query_trace_aabb_max;
//   phys_vec3 m_local_query_trace_translation;
//   const centity_s *cent;
//   const DynEntityDef *dynEntDef;
//   const Glass *glass;
//   rigid_body *rb;
//   const phys_mat44 *rb_to_world_xform;
//   const phys_mat44 *cg_to_world_xform;
//   const phys_mat44 *cg_to_rb_xform;
//   unsigned int env_collision_flags;
//   const broad_phase_environment_query_input *bpeqi;
//   broad_phase_environement_query_results *bpeqr;
//   phys_auto_activate_callback *auto_activate_callback;
// };

// /* 2936 */
// struct __cppobj bpei_database_t
// {
//   phys_inplace_avl_tree<bpei_database_id,broad_phase_environment_info,broad_phase_environment_info::avl_tree_accessor> m_bpei_map;
//   phys_simple_allocator<broad_phase_environment_info> m_bpei_allocator;
//   broad_phase_environment_info *m_bpei_list;
//   minspec_read_write_mutex m_mutex;
// };

// /* 2937 */
// struct phys_free_list<broad_phase_group>::T_internal_base
// {
//   phys_free_list<broad_phase_group>::T_internal_base *m_prev_T_internal;
//   phys_free_list<broad_phase_group>::T_internal_base *m_next_T_internal;
// };

// /* 2938 */
// struct __cppobj phys_free_list<broad_phase_group>::T_internal : phys_free_list<broad_phase_group>::T_internal_base
// {
//   __declspec(align(16)) broad_phase_group m_data;
//   int m_ptr_list_index;
// };

// /* 2939 */
// struct __cppobj phys_free_list<broad_phase_group>
// {
//   phys_free_list<broad_phase_group>::T_internal_base m_dummy_head;
//   int m_list_count;
//   int m_list_count_high_water;
//   broad_phase_group *m_ptr_list[256];
//   int m_ptr_list_count;
// };

// /* 2940 */
// struct $_TypeDescriptor$_extraBytes_40
// {
//   const void *pVFTable;
//   void *spare;
//   char name[40];
// };

// /* 2941 */
// struct mnode_t
// {
//   unsigned __int16 cellIndex;
//   unsigned __int16 rightChildOffset;
// };

// /* 2942 */
// struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_23
// {
//   const void *pVFTable;
//   void *spare;
//   char name[23];
// };

// /* 2943 */
// struct StackAllocator
// {
//   unsigned __int8 *memory;
//   unsigned int size;
//   unsigned int pos;
// };

// /* 2944 */
// struct __unaligned __declspec(align(1)) $_s__RTTIBaseClassArray$_extraBytes_12
// {
//   const _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[3];
//   _BYTE gapC;
// };

// /* 2945 */
// struct __cppobj SmallAllocatorTemplate<GlassShard * *>::rebind<std::_Aux_cont>
// {
// };

// /* 2946 */
// struct __cppobj SmallAllocatorTemplate<GlassShard * *>::rebind<std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard * *> >::_Node>
// {
// };

// /* 2947 */
// struct __cppobj SmallAllocatorTemplate<GlassShard * *>::rebind<std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard * *> >::_Node *>
// {
// };

// /* 2948 */
// struct __cppobj SmallAllocatorTemplate<GlassShard * *>::rebind<GlassShard *>
// {
// };

// /* 2949 */
// struct __cppobj GlassAutoLock
// {
//   GlassLock *lock;
// };

// /* 2950 */
// struct __cppobj TempOutline : GlassShard::Outline
// {
//   GlassShard::Outline::Vertex v[64];
// };

// /* 2951 */
// struct __cppobj phys_heap_gjk_cache_system_avl_tree
// {
//   phys_simple_allocator<phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal> m_list_phys_gjk_cache_info_internal;
//   phys_inplace_avl_tree<phys_gjk_geom_id_pair_key,phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal,phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal::avl_tree_accessor> m_search_tree;
//   int m_max_num_gjk_ci;
//   phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal *m_list_head;
// };

// /* 2952 */
// struct __cppobj broad_phase_memory
// {
//   tlAtomicMutex g_bp_auto_activate_mutex;
//   tlAtomicReadWriteMutex g_bp_gjk_cache_mutex;
//   phys_heap_gjk_cache_system_avl_tree g_phys_gjk_cache_system;
//   phys_free_list<broad_phase_info> g_list_broad_phase_info;
//   phys_free_list<broad_phase_group> g_list_broad_phase_group;
//   phys_free_list<broad_phase_collision_pair> g_list_broad_phase_collision_pair;
//   bpei_database_t g_bpei_database;
//   broad_phase_terrain_query_callback *g_broad_phase_terrain_query_callback;
//   broad_phase_base *g_list_bpb;
//   int g_list_bpb_count;
//   broad_phase_info *m_list_bpi_env;
//   int m_bpi_env_count;
//   int m_bpg_env_count;
//   int m_bpg_env_bpi_count;
//   int m_bpi_env_no_database_count;
//   int m_memory_high_water;
//   phys_link_list<phys_collision_pair> g_list_phys_collide_data;
//   phys_transient_allocator g_collision_memory_buffer;
//   phys_surface_type_info *g_surface_type_info_database;
//   int m_max_num_surface_types;
//   int m_max_num_surface_type_infos;
// };

// /* 2953 */
// struct __cppobj phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal::avl_tree_accessor
// {
// };

// /* 2954 */
// struct /*VFT*/ gjk_double_sphere_t_vtbl
// {
//   void (__thiscall *support)(phys_gjk_geom *this, const phys_vec3 *, phys_vec3 *, phys_vec3 *);
//   void (__thiscall *get_simplex)(phys_gjk_geom *this, const cached_simplex_info *, const int, phys_vec3 *, phys_vec3 *);
//   void (__thiscall *set_simplex)(phys_gjk_geom *this, const phys_vec3 *, const int, const phys_vec3 *, cached_simplex_info *);
//   const phys_vec3 *(__thiscall *get_center)(phys_gjk_geom *this, const phys_vec3 *result);
//   void (__thiscall *get_feature)(phys_gjk_geom *this, phys_contact_manifold *);
//   float (__thiscall *get_geom_radius)(phys_gjk_geom *this);
//   void (__thiscall *calc_aabb)(phys_gjk_geom *this, const phys_mat44 *, phys_vec3 *, phys_vec3 *);
//   bool (__thiscall *ray_cast)(phys_gjk_geom *this, const phys_vec3 *, const phys_vec3 *, const float, float *, phys_vec3 *);
//   bool (__thiscall *is_polyhedron)(phys_gjk_geom *this);
//   void (__thiscall *comp_aabb_loc)(gjk_base_t *this);
//   unsigned int (__thiscall *get_type)(gjk_base_t *this);
//   bool (__thiscall *is_foot)(gjk_base_t *this, const phys_vec3 *);
//   bool (__thiscall *is_walkable)(gjk_base_t *this, const phys_vec3 *, const phys_vec3 *);
//   const cbrush_t *(__thiscall *get_brush)(gjk_base_t *this);
// };

// /* 2955 */
// struct __cppobj gjk_double_sphere_t : gjk_base_t
// {
//   phys_vec3 m_list_center[2];
//   phys_vec3 m_center;
//   float m_list_radius[2];
//   float m_geom_radius;
//   int m_count;
// };

// /* 2956 */
// struct __cppobj __declspec(align(8)) gjk_double_sphere_t::csi
// {
//   phys_vec3 m_normal;
//   int m_indices[3];
// };

// /* 2957 */
// struct __cppobj GlassServer
// {
//   GlassState state;
//   Glass *glass;
//   int stateChangeTime;
//   float health;
//   float crackedDamageRate;
//   float hitPos[3];
//   float hitDir[3];
// };

// /* 2958 */
// struct __cppobj GlassesServer
// {
//   int nextShatterTime;
//   int shatterIntervalsMS;
//   bool inited;
//   unsigned int numGlasses;
//   GlassServer glasses[1000];
//   const dvar_s *damageMultiplier;
//   const dvar_s *crackedDamageRateRange;
// };

/* 2959 */
struct scr_const_t
{
  unsigned __int16 _;
  unsigned __int16 active;
  unsigned __int16 spawn;
  unsigned __int16 exit;
  unsigned __int16 aim_bone;
  unsigned __int16 aim_highest_bone;
  unsigned __int16 aim_vis_bone;
  unsigned __int16 all;
  unsigned __int16 allies;
  unsigned __int16 angles;
  unsigned __int16 axis;
  unsigned __int16 bad_path;
  unsigned __int16 begin_firing;
  unsigned __int16 unknown_location;
  unsigned __int16 cancel_location;
  unsigned __int16 confirm_location;
  unsigned __int16 deployed_turret;
  unsigned __int16 crouch;
  unsigned __int16 current;
  unsigned __int16 damage;
  unsigned __int16 damage_afterdeath;
  unsigned __int16 dead;
  unsigned __int16 death;
  unsigned __int16 disconnect;
  unsigned __int16 death_or_disconnect;
  unsigned __int16 detonate;
  unsigned __int16 direct;
  unsigned __int16 dlight;
  unsigned __int16 done;
  unsigned __int16 dropweapon;
  unsigned __int16 empty;
  unsigned __int16 end_firing;
  unsigned __int16 enter_vehicle;
  unsigned __int16 entity;
  unsigned __int16 exit_vehicle;
  unsigned __int16 change_seat;
  unsigned __int16 vehicle_death;
  unsigned __int16 explode;
  unsigned __int16 failed;
  unsigned __int16 free;
  unsigned __int16 fraction;
  unsigned __int16 goal;
  unsigned __int16 goal_changed;
  unsigned __int16 goal_yaw;
  unsigned __int16 grenade;
  unsigned __int16 grenadedanger;
  unsigned __int16 grenade_flee;
  unsigned __int16 grenade_fire;
  unsigned __int16 grenade_launcher_fire;
  unsigned __int16 grenade_pullback;
  unsigned __int16 grenade_throwback;
  unsigned __int16 stationary;
  unsigned __int16 grenade_stuck;
  unsigned __int16 grenade_bounce;
  unsigned __int16 hero;
  unsigned __int16 info_notnull;
  unsigned __int16 invisible;
  unsigned __int16 key1;
  unsigned __int16 key2;
  unsigned __int16 killanimscript;
  unsigned __int16 left;
  unsigned __int16 left_tread;
  unsigned __int16 light;
  unsigned __int16 missile_fire;
  unsigned __int16 movedone;
  unsigned __int16 multikill;
  unsigned __int16 noclass;
  unsigned __int16 none;
  unsigned __int16 normal;
  unsigned __int16 origin;
  unsigned __int16 player;
  unsigned __int16 point_relative;
  unsigned __int16 position;
  unsigned __int16 projectile_impact;
  unsigned __int16 prone;
  unsigned __int16 result;
  unsigned __int16 right;
  unsigned __int16 right_tread;
  unsigned __int16 tank_armor;
  unsigned __int16 reload;
  unsigned __int16 reload_start;
  unsigned __int16 rocket;
  unsigned __int16 rotatedone;
  unsigned __int16 script_brushmodel;
  unsigned __int16 script_model;
  unsigned __int16 script_origin;
  unsigned __int16 snd_enveffectsprio_level;
  unsigned __int16 snd_enveffectsprio_shellshock;
  unsigned __int16 snd_busvolprio_holdbreath;
  unsigned __int16 snd_busvolprio_pain;
  unsigned __int16 snd_busvolprio_shellshock;
  unsigned __int16 stand;
  unsigned __int16 suppression;
  unsigned __int16 suppression_end;
  unsigned __int16 surfacetype;
  unsigned __int16 tag_aim_pitch;
  unsigned __int16 tag_aim;
  unsigned __int16 tag_aim_animated;
  unsigned __int16 tag_brass;
  unsigned __int16 tag_brass1;
  unsigned __int16 tag_brass_2;
  unsigned __int16 tag_butt;
  unsigned __int16 tag_clip;
  unsigned __int16 tag_flash;
  unsigned __int16 tag_explosive;
  unsigned __int16 tag_flash_11;
  unsigned __int16 tag_flash_2;
  unsigned __int16 tag_flash_22;
  unsigned __int16 tag_flash_3;
  unsigned __int16 tag_flash1;
  unsigned __int16 tag_flash_alt;
  unsigned __int16 tag_fx;
  unsigned __int16 tag_inhand;
  unsigned __int16 tag_knife_attach;
  unsigned __int16 tag_knife_fx;
  unsigned __int16 tag_bayonet;
  unsigned __int16 tag_laser;
  unsigned __int16 tag_origin;
  unsigned __int16 tag_weapon;
  unsigned __int16 tag_weapon1;
  unsigned __int16 tag_player;
  unsigned __int16 tag_camera;
  unsigned __int16 tag_weapon_right;
  unsigned __int16 tag_weapon_left;
  unsigned __int16 tag_stowed_back;
  unsigned __int16 tag_weapon_chest;
  unsigned __int16 tag_gasmask;
  unsigned __int16 tag_gasmask2;
  unsigned __int16 tag_sync;
  unsigned __int16 tag_wake;
  unsigned __int16 target_script_trigger;
  unsigned __int16 tempEntity;
  unsigned __int16 top;
  unsigned __int16 touch;
  unsigned __int16 trigger;
  unsigned __int16 trigger_use;
  unsigned __int16 trigger_use_touch;
  unsigned __int16 trigger_damage;
  unsigned __int16 trigger_lookat;
  unsigned __int16 trigger_radius;
  unsigned __int16 trigger_radius_use;
  unsigned __int16 truck_cam;
  unsigned __int16 turret_return_default_pos;
  unsigned __int16 turret_scan_start;
  unsigned __int16 turret_scan_stop;
  unsigned __int16 turret_tow_fire;
  unsigned __int16 turret_tow_unlink;
  unsigned __int16 weapon_change_on_turret;
  unsigned __int16 weapon_change;
  unsigned __int16 weapon_change_complete;
  unsigned __int16 weapon_fired;
  unsigned __int16 worldspawn;
  unsigned __int16 flashbang;
  unsigned __int16 flash;
  unsigned __int16 smoke;
  unsigned __int16 night_vision_on;
  unsigned __int16 night_vision_off;
  unsigned __int16 back;
  unsigned __int16 back_low;
  unsigned __int16 back_mid;
  unsigned __int16 back_up;
  unsigned __int16 head;
  unsigned __int16 j_mainroot;
  unsigned __int16 neck;
  unsigned __int16 pelvis;
  unsigned __int16 j_head;
  unsigned __int16 mod_unknown;
  unsigned __int16 mod_pistol_bullet;
  unsigned __int16 mod_rifle_bullet;
  unsigned __int16 mod_grenade;
  unsigned __int16 mod_grenade_splash;
  unsigned __int16 mod_projectile;
  unsigned __int16 mod_projectile_splash;
  unsigned __int16 mod_melee;
  unsigned __int16 mod_bayonet;
  unsigned __int16 mod_head_shot;
  unsigned __int16 mod_crush;
  unsigned __int16 mod_telefrag;
  unsigned __int16 mod_falling;
  unsigned __int16 mod_suicide;
  unsigned __int16 mod_trigger_hurt;
  unsigned __int16 mod_explosive;
  unsigned __int16 mod_impact;
  unsigned __int16 mod_burned;
  unsigned __int16 mod_hit_by_object;
  unsigned __int16 mod_drown;
  unsigned __int16 mod_gas;
  unsigned __int16 face;
  unsigned __int16 face_casual;
  unsigned __int16 face_alert;
  unsigned __int16 face_cqb;
  unsigned __int16 face_running;
  unsigned __int16 face_shoot_single;
  unsigned __int16 face_shoot_burst;
  unsigned __int16 face_melee;
  unsigned __int16 face_react;
  unsigned __int16 face_talk;
  unsigned __int16 face_talk_long;
  unsigned __int16 face_pain;
  unsigned __int16 face_death;
  unsigned __int16 melee;
  unsigned __int16 script_vehicle;
  unsigned __int16 script_vehicle_collision;
  unsigned __int16 script_vehicle_collmap;
  unsigned __int16 script_vehicle_corpse;
  unsigned __int16 turret_fire;
  unsigned __int16 turret_on_target;
  unsigned __int16 gunner_turret_on_target;
  unsigned __int16 turret_not_on_target;
  unsigned __int16 turret_on_vistarget;
  unsigned __int16 turret_no_vis;
  unsigned __int16 turret_rotate_stopped;
  unsigned __int16 turret_deactivate;
  unsigned __int16 turretstatechange;
  unsigned __int16 turretownerchange;
  unsigned __int16 reached_node;
  unsigned __int16 reached_end_node;
  unsigned __int16 reached_wait_node;
  unsigned __int16 reached_wait_speed;
  unsigned __int16 near_goal;
  unsigned __int16 veh_collision;
  unsigned __int16 veh_predictedcollision;
  unsigned __int16 veh_inair;
  unsigned __int16 veh_landed;
  unsigned __int16 veh_suspension_limit_activated;
  unsigned __int16 veh_engine_stutter;
  unsigned __int16 veh_ejectoccupants;
  unsigned __int16 veh_usespecialability;
  unsigned __int16 veh_usespecialabilityend;
  unsigned __int16 veh_firepickup;
  unsigned __int16 veh_firepickupend;
  unsigned __int16 veh_swappickup;
  unsigned __int16 veh_swappickupend;
  unsigned __int16 veh_dropdeployable;
  unsigned __int16 veh_dropdeployableend;
  unsigned __int16 veh_handbreak;
  unsigned __int16 veh_boost;
  unsigned __int16 veh_boost_regen;
  unsigned __int16 script_camera;
  unsigned __int16 begin;
  unsigned __int16 jumpcut;
  unsigned __int16 curve_nodehit;
  unsigned __int16 curve_start;
  unsigned __int16 curve_end;
  unsigned __int16 asphalt;
  unsigned __int16 bark;
  unsigned __int16 brick;
  unsigned __int16 carpet;
  unsigned __int16 ceramic;
  unsigned __int16 cloth;
  unsigned __int16 concrete;
  unsigned __int16 cushion;
  unsigned __int16 dirt;
  unsigned __int16 flesh;
  unsigned __int16 foliage;
  unsigned __int16 fruit;
  unsigned __int16 glass;
  unsigned __int16 grass;
  unsigned __int16 gravel;
  unsigned __int16 ice;
  unsigned __int16 metal;
  unsigned __int16 mud;
  unsigned __int16 paintedmetal;
  unsigned __int16 paper;
  unsigned __int16 plaster;
  unsigned __int16 plastic;
  unsigned __int16 rock;
  unsigned __int16 rubber;
  unsigned __int16 sand;
  unsigned __int16 snow;
  unsigned __int16 water;
  unsigned __int16 wood;
  unsigned __int16 tag_enter_driver;
  unsigned __int16 tag_enter_gunner1;
  unsigned __int16 tag_enter_gunner2;
  unsigned __int16 tag_enter_gunner3;
  unsigned __int16 tag_enter_gunner4;
  unsigned __int16 tag_enter_passenger1;
  unsigned __int16 tag_enter_passenger2;
  unsigned __int16 tag_enter_passenger3;
  unsigned __int16 tag_enter_passenger4;
  unsigned __int16 tag_driver;
  unsigned __int16 tag_passenger1;
  unsigned __int16 tag_passenger2;
  unsigned __int16 tag_passenger3;
  unsigned __int16 tag_passenger4;
  unsigned __int16 tag_passenger5;
  unsigned __int16 tag_passenger6;
  unsigned __int16 tag_gunner1;
  unsigned __int16 tag_gunner2;
  unsigned __int16 tag_gunner3;
  unsigned __int16 tag_gunner4;
  unsigned __int16 tag_gunner_barrel1;
  unsigned __int16 tag_gunner_barrel2;
  unsigned __int16 tag_gunner_barrel3;
  unsigned __int16 tag_gunner_barrel4;
  unsigned __int16 tag_gunner_turret1;
  unsigned __int16 tag_gunner_turret2;
  unsigned __int16 tag_gunner_turret3;
  unsigned __int16 tag_gunner_turret4;
  unsigned __int16 tag_flash_gunner[8];
  unsigned __int16 tag_gunner_brass1;
  unsigned __int16 tag_gunner_brass1a;
  unsigned __int16 tag_gunner_brass2;
  unsigned __int16 tag_gunner_brass2a;
  unsigned __int16 tag_gunner_hands1;
  unsigned __int16 tag_wheel_front_left;
  unsigned __int16 tag_wheel_front_right;
  unsigned __int16 tag_wheel_back_left;
  unsigned __int16 tag_wheel_back_right;
  unsigned __int16 tag_wheel_middle_left;
  unsigned __int16 tag_wheel_middle_right;
  unsigned __int16 tag_wheel_front;
  unsigned __int16 tag_wheel_back;
  unsigned __int16 freelook;
  unsigned __int16 localplayers;
  unsigned __int16 tag_enter_right;
  unsigned __int16 tag_enter_left;
  unsigned __int16 tag_enter_back;
  unsigned __int16 tag_popout;
  unsigned __int16 tag_body;
  unsigned __int16 tag_turret;
  unsigned __int16 tag_turret_base;
  unsigned __int16 tag_barrel;
  unsigned __int16 tag_barrel_recoil;
  unsigned __int16 tag_engine_left;
  unsigned __int16 tag_engine_right;
  unsigned __int16 tag_minigun_right_barrel;
  unsigned __int16 front_left;
  unsigned __int16 front_right;
  unsigned __int16 back_left;
  unsigned __int16 back_right;
  unsigned __int16 middle_left;
  unsigned __int16 middle_right;
  unsigned __int16 stuck_to_player;
  unsigned __int16 auto_ai;
  unsigned __int16 auto_nonai;
  unsigned __int16 manual;
  unsigned __int16 manual_ai;
  unsigned __int16 auto_change;
  unsigned __int16 call_vote;
  unsigned __int16 intermission;
  unsigned __int16 manual_change;
  unsigned __int16 menuresponse;
  unsigned __int16 pistol;
  unsigned __int16 plane_waypoint;
  unsigned __int16 playing;
  unsigned __int16 spectator;
  unsigned __int16 spectator_cycle;
  unsigned __int16 vote;
  unsigned __int16 sprint_begin;
  unsigned __int16 sprint_end;
  unsigned __int16 tag_gunner_pov;
  unsigned __int16 flared_or_tabuned_death;
  unsigned __int16 destroyed_vehicle;
  unsigned __int16 vehicle_driver;
  unsigned __int16 died_in_turret;
  unsigned __int16 force_crouch;
  unsigned __int16 scavenger;
  unsigned __int16 trigger_use_doubletap;
  unsigned __int16 doubletap_detonate;
  unsigned __int16 dtp_through_glass;
  unsigned __int16 dtp_end;
  unsigned __int16 _custom;
  unsigned __int16 angle_deltas;
  unsigned __int16 bulletwhizby;
  unsigned __int16 dog;
  unsigned __int16 enemy;
  unsigned __int16 enemy_visible;
  unsigned __int16 face_angle;
  unsigned __int16 face_current;
  unsigned __int16 face_default;
  unsigned __int16 face_direction;
  unsigned __int16 face_enemy;
  unsigned __int16 face_enemy_or_motion;
  unsigned __int16 face_goal;
  unsigned __int16 face_motion;
  unsigned __int16 face_point;
  unsigned __int16 gravity;
  unsigned __int16 groundEntChanged;
  unsigned __int16 gunshot;
  unsigned __int16 obstacle;
  unsigned __int16 movemode;
  unsigned __int16 node_out_of_range;
  unsigned __int16 node_relinquished;
  unsigned __int16 node_taken;
  unsigned __int16 node_not_safe;
  unsigned __int16 noclip;
  unsigned __int16 nogravity;
  unsigned __int16 nophysics;
  unsigned __int16 pain;
  unsigned __int16 react;
  unsigned __int16 pos_deltas;
  unsigned __int16 run;
  unsigned __int16 runto_arrived;
  unsigned __int16 silenced_shot;
  unsigned __int16 spawned;
  unsigned __int16 start_move;
  unsigned __int16 stop;
  unsigned __int16 stop_soon;
  unsigned __int16 tag_eye;
  unsigned __int16 walk;
  unsigned __int16 world;
  unsigned __int16 zonly_physics;
  unsigned __int16 j_ankle_le;
  unsigned __int16 j_ankle_ri;
  unsigned __int16 j_ball_le;
  unsigned __int16 j_ball_ri;
  unsigned __int16 j_palm_le;
  unsigned __int16 j_palm_ri;
  unsigned __int16 j_elbow_le;
  unsigned __int16 j_wrist_le;
  unsigned __int16 broken;
  unsigned __int16 destructible;
  unsigned __int16 destructible_base_piece_death;
  unsigned __int16 breakafter;
  unsigned __int16 snapacknowledged;
  unsigned __int16 j_barrel;
  unsigned __int16 j_counter;
  unsigned __int16 j_spinnerRF;
  unsigned __int16 j_spinnerLF;
  unsigned __int16 j_spinnerR1;
  unsigned __int16 j_spinnerL1;
  unsigned __int16 j_spinnerR2;
  unsigned __int16 j_spinnerL2;
  unsigned __int16 j_spinnerR3;
  unsigned __int16 j_spinnerL3;
  unsigned __int16 ca_disconnected;
  unsigned __int16 ca_cinematic;
  unsigned __int16 ca_uicinematic;
  unsigned __int16 ca_logo;
  unsigned __int16 ca_connecting;
  unsigned __int16 ca_challenging;
  unsigned __int16 ca_connected;
  unsigned __int16 ca_sendingstats;
  unsigned __int16 ca_loading;
  unsigned __int16 ca_primed;
  unsigned __int16 ca_active;
  unsigned __int16 ca_map_restart;
  unsigned __int16 orientdone;
  unsigned __int16 menuchanged;
  unsigned __int16 init;
  unsigned __int16 move;
  unsigned __int16 combat;
  unsigned __int16 traverse;
  unsigned __int16 idle;
  unsigned __int16 move_run;
  unsigned __int16 move_start;
  unsigned __int16 move_stop;
  unsigned __int16 move_walk;
  unsigned __int16 move_turn_left;
  unsigned __int16 move_turn_right;
  unsigned __int16 move_run_turn_left;
  unsigned __int16 move_run_turn_right;
  unsigned __int16 move_turn_around_left;
  unsigned __int16 move_turn_around_right;
  unsigned __int16 move_run_turn_around_left;
  unsigned __int16 move_run_turn_around_right;
  unsigned __int16 move_attack;
  unsigned __int16 stop_idle;
  unsigned __int16 stop_attackidle;
  unsigned __int16 stop_attackidle_bark;
  unsigned __int16 stop_attackidle_growl;
  unsigned __int16 pain_main;
  unsigned __int16 pain_front;
  unsigned __int16 pain_back;
  unsigned __int16 pain_left;
  unsigned __int16 pain_right;
  unsigned __int16 pain_run_front;
  unsigned __int16 pain_run_back;
  unsigned __int16 pain_run_left;
  unsigned __int16 pain_run_right;
  unsigned __int16 death_front;
  unsigned __int16 death_back;
  unsigned __int16 death_left;
  unsigned __int16 death_right;
  unsigned __int16 flashed;
  unsigned __int16 combat_attackidle;
  unsigned __int16 combat_attackidle_bark;
  unsigned __int16 combat_attackidle_growl;
  unsigned __int16 combat_attack_run;
  unsigned __int16 combat_attack_player;
  unsigned __int16 combat_attack_player_early;
  unsigned __int16 combat_attack_player_lunge;
  unsigned __int16 combat_attack_player_close_range;
  unsigned __int16 combat_attack_miss;
  unsigned __int16 combat_attack_miss_left;
  unsigned __int16 combat_attack_miss_right;
  unsigned __int16 combat_player_neck_snap;
  unsigned __int16 combat_player_neck_miss;
  unsigned __int16 traverse_jump_up_40;
  unsigned __int16 traverse_jump_up_80;
  unsigned __int16 traverse_jump_down_40;
  unsigned __int16 traverse_jump_down_80;
  unsigned __int16 traverse_wallhop;
  unsigned __int16 traverse_window;
  unsigned __int16 traverse_through_hole_42;
  unsigned __int16 swimming_begin;
  unsigned __int16 swimming_end;
  unsigned __int16 snd_boat_engine;
  unsigned __int16 snd_boat_bow_l;
  unsigned __int16 snd_boat_bow_r;
  unsigned __int16 gv_event;
  unsigned __int16 gv_action;
  unsigned __int16 gv_target;
  unsigned __int16 gv_parameter;
  unsigned __int16 gv_condlhs;
  unsigned __int16 gv_condop;
  unsigned __int16 gv_condrhs;
  unsigned __int16 freeze;
  unsigned __int16 up;
};

/* 2960 */
struct VertUsage
{
  int index;
  VertUsage* next;
};

/* 2961 */
struct MaterialUsage
{
  int memory;
  VertUsage* verts;
  Material* material;
};

/* 2962 */
struct GfxClientFog
{
  GfxFog settings[5];
  int index;
};

/* 2963 */
struct trViewStatistics_t
{
  int c_indexes;
  int c_fxIndexes;
  int c_viewIndexes;
  int c_shadowIndexes;
  int c_vertexes;
  int c_batches;
};

/* 2964 */
struct Image_MemUsage
{
  int total;
  int lightmap;
  int minspec;
};

/* 2965 */
struct trStatistics_t
{
  trViewStatistics_t* views;
  Image_MemUsage c_imageUsage;
};

/* 2966 */
struct GfxLodRamp
{
  float scale;
  float bias;
  float appliedInvScale;
};

/* 2967 */
struct __declspec(align(4)) GfxLodParms
{
  float origin[3];
  GfxLodRamp ramp[2];
  bool valid;
  float extraCamOrigin[3];
  bool extraCamOriginValid;
};

/* 2968 */
struct __declspec(align(8)) r_globals_t
{
  GfxViewParms identityViewParms;
  bool inFrame;
  bool registered;
  bool forbidDelayLoadImages;
  bool ignorePrecacheErrors;
  float viewOrg[3];
  float viewDir[3];
  unsigned int frontEndFrameCount;
  int totalImageMemory;
  Material* materialHashTable[4096];
  MaterialUsage materialUsage[4096];
  GfxClientFog clientFogs[4];
  GfxColor color_axis;
  GfxColor color_allies;
  trStatistics_t* globalstats;
  trViewStatistics_t* stats;
  GfxLodParms lodParms;
  GfxLodParms correctedLodParms[4];
  bool hasAnyImageOverrides;
  bool useSunLightOverride;
  bool useSunDirOverride;
  bool useSunDirLerp;
  float diffuseSunLightOverride[3];
  float specularSunLightOverride[3];
  float sunDirOverride[3];
  float sunDirOverrideTarget[3];
  int sunDirLerpBeginTime;
  int sunDirLerpEndTime;
  const GfxViewParms* debugViewParms;
  int endTime;
  bool distortion;
  int renderHiResShot;
  int hiResShotTiles;
  float hiResShotRow;
  float hiResShotCol;
  bool drawWorld;
  bool drawSModels;
  bool drawXModels;
  bool drawBModels;
  const char* codeImageNames[43];
  unsigned int viewInfoCount;
  int sunShadowFull;
  float sunShadowmapScale;
  float sunShadowmapScaleNum;
  unsigned int sunShadowSize;
  float sunShadowPartitionRatio;
  int drawSunShadow;
  bool isNotRenderingFullScreen;
  int skinnedCacheReachedThreshold;
  bool enablePlayerShadowFlag;
};

// /* 2969 */
// struct __cppobj std::_Iterator_with_base<std::bidirectional_iterator_tag,GlassPhysics *,int,GlassPhysics * const *,GlassPhysics * const &,std::_Iterator_base_aux> : std::_Iterator_base_aux
// {
// };

// /* 2970 */
// struct __cppobj std::_Bidit<GlassPhysics *,int,GlassPhysics * const *,GlassPhysics * const &> : std::_Iterator_with_base<std::bidirectional_iterator_tag,GlassPhysics *,int,GlassPhysics * const *,GlassPhysics * const &,std::_Iterator_base_aux>
// {
// };

// /* 2971 */
// struct __cppobj std::_Iterator_with_base<std::bidirectional_iterator_tag,ShardGroup *,int,ShardGroup * const *,ShardGroup * const &,std::_Iterator_base_aux> : std::_Iterator_base_aux
// {
// };

// /* 2972 */
// struct __cppobj std::_Bidit<ShardGroup *,int,ShardGroup * const *,ShardGroup * const &> : std::_Iterator_with_base<std::bidirectional_iterator_tag,ShardGroup *,int,ShardGroup * const *,ShardGroup * const &,std::_Iterator_base_aux>
// {
// };

// /* 2973 */
// struct __cppobj std::list<ShardGroup *,SmallAllocatorTemplate<ShardGroup * *> >::_Const_iterator<1> : std::_Bidit<ShardGroup *,int,ShardGroup * const *,ShardGroup * const &>
// {
//   std::_List_nod<ShardGroup *,SmallAllocatorTemplate<ShardGroup * *> >::_Node *_Ptr;
// };

// /* 2974 */
// struct __cppobj std::list<ShardGroup *,SmallAllocatorTemplate<ShardGroup * *> >::_Const_iterator<0> : std::_Bidit<ShardGroup *,int,ShardGroup * const *,ShardGroup * const &>
// {
//   std::_List_nod<ShardGroup *,SmallAllocatorTemplate<ShardGroup * *> >::_Node *_Ptr;
// };

// /* 2975 */
// struct __cppobj std::list<ShardGroup *,SmallAllocatorTemplate<ShardGroup * *> >::_Iterator<1> : std::list<ShardGroup *,SmallAllocatorTemplate<ShardGroup * *> >::_Const_iterator<1>
// {
// };

// /* 2976 */
// struct __cppobj std::list<ShardGroup *,SmallAllocatorTemplate<ShardGroup * *> >::_Iterator<0> : std::list<ShardGroup *,SmallAllocatorTemplate<ShardGroup * *> >::_Const_iterator<0>
// {
// };

// /* 2977 */
// struct __cppobj SmallAllocatorTemplate<ShardGroup * *>
// {
//   SmallAllocator *alloc;
// };

// /* 2978 */
// struct __cppobj SmallAllocatorTemplate<GlassPhysics * *>
// {
//   SmallAllocator *alloc;
// };

// /* 2979 */
// struct __cppobj std::list<GlassPhysics *,SmallAllocatorTemplate<GlassPhysics * *> >::_Const_iterator<1> : std::_Bidit<GlassPhysics *,int,GlassPhysics * const *,GlassPhysics * const &>
// {
//   std::_List_nod<GlassPhysics *,SmallAllocatorTemplate<GlassPhysics * *> >::_Node *_Ptr;
// };

// /* 2980 */
// struct __cppobj std::list<GlassPhysics *,SmallAllocatorTemplate<GlassPhysics * *> >::_Const_iterator<0> : std::_Bidit<GlassPhysics *,int,GlassPhysics * const *,GlassPhysics * const &>
// {
//   std::_List_nod<GlassPhysics *,SmallAllocatorTemplate<GlassPhysics * *> >::_Node *_Ptr;
// };

// /* 2981 */
// struct __cppobj std::list<GlassPhysics *,SmallAllocatorTemplate<GlassPhysics * *> >::_Iterator<1> : std::list<GlassPhysics *,SmallAllocatorTemplate<GlassPhysics * *> >::_Const_iterator<1>
// {
// };

// /* 2982 */
// struct __cppobj std::list<GlassPhysics *,SmallAllocatorTemplate<GlassPhysics * *> >::_Iterator<0> : std::list<GlassPhysics *,SmallAllocatorTemplate<GlassPhysics * *> >::_Const_iterator<0>
// {
// };

// /* 2983 */
// struct __cppobj SmallAllocatorTemplate<GlassPhysics *>::rebind<std::_List_nod<GlassPhysics *,SmallAllocatorTemplate<GlassPhysics * *> >::_Node *>
// {
// };

// /* 2984 */
// struct __cppobj SmallAllocatorTemplate<GlassPhysics * *>::rebind<std::_Aux_cont>
// {
// };

// /* 2985 */
// struct __cppobj SmallAllocatorTemplate<GlassPhysics * *>::rebind<std::_List_nod<GlassPhysics *,SmallAllocatorTemplate<GlassPhysics * *> >::_Node>
// {
// };

// /* 2986 */
// struct __cppobj SmallAllocatorTemplate<GlassPhysics * *>::rebind<std::_List_nod<GlassPhysics *,SmallAllocatorTemplate<GlassPhysics * *> >::_Node *>
// {
// };

// /* 2987 */
// struct __cppobj SmallAllocatorTemplate<GlassPhysics * *>::rebind<GlassPhysics *>
// {
// };

// /* 2988 */
// struct __cppobj GrassPersistForce
// {
//   float worldPosition[3];
//   float radius;
//   float strength;
//   float frequency;
//   float age;
//   float maxAge;
//   float maxStrength;
//   bool isActive;
//   GrassPersistForce::ForceType forceType;
//   unsigned int id;
//   float curForcePercent;
//   float trgForcePercent;
//   GrassPersistForce::ShakeForceState shakeForceState;
// };

// /* 2989 */
// struct __cppobj SmallAllocatorTemplate<ShardGroup *>::rebind<std::_List_nod<ShardGroup *,SmallAllocatorTemplate<ShardGroup * *> >::_Node *>
// {
// };

// /* 2990 */
// struct r_double_index_t
// {
//   unsigned __int16 value[2];
// };

// /* 2991 */
// struct GrassWindForce
// {
//   float worldPosition[2];
//   float inverseRadiusSquared;
//   float strength;
// };

// /* 2992 */
// struct GrassForce
// {
//   float worldPosition[3];
//   float radius;
//   float strength;
//   float frequency;
// };

// /* 2993 */
// struct __cppobj PerFrameFoliageInfo
// {
//   GrassForce grassInstantForces[16];
//   GrassForce grassPersistantForces[8];
//   GrassWindForce grassWindForces[16];
//   unsigned int numGrassInstantForces;
//   unsigned int numGrassPersistantForces;
//   unsigned int numGrassWindForces;
// };

// /* 2994 */
// struct __cppobj SmallAllocatorTemplate<ShardGroup * *>::rebind<std::_Aux_cont>
// {
// };

// /* 2995 */
// struct __cppobj SmallAllocatorTemplate<ShardGroup * *>::rebind<std::_List_nod<ShardGroup *,SmallAllocatorTemplate<ShardGroup * *> >::_Node>
// {
// };

// /* 2996 */
// struct __cppobj SmallAllocatorTemplate<ShardGroup * *>::rebind<std::_List_nod<ShardGroup *,SmallAllocatorTemplate<ShardGroup * *> >::_Node *>
// {
// };

// /* 2997 */
// struct __cppobj SmallAllocatorTemplate<ShardGroup * *>::rebind<ShardGroup *>
// {
// };

// /* 2998 */
// struct GlassDefLoad
// {
//   char name[64];
//   char baseMaterial[64];
//   char crackedMaterial[64];
//   char shardMaterial[64];
//   char crackSound[64];
//   char shatterShound[64];
//   char autoShatterShound[64];
//   GlassDef glassDef;
// };

// /* 2999 */
// struct cspField_t
// {
//   const char *szName;
//   int iOffset;
//   int iFieldType;
// };

 /* 3000 */
struct dmaterial_t
{
  char material[64];
  int surfaceFlags;
  int contentFlags;
};

static_assert(sizeof(dmaterial_t) == 0x48, "The size is not correct");

/* 3001 */
struct cNode_t
{
  cplane_s* plane;
  __int16 children[2];
};

static_assert(sizeof(cNode_t) == 0x8, "The size is not correct");

/* 3002 */
struct MapEnts
{
  const char* name;
  char* entityString;
  int numEntityChars;
};

static_assert(sizeof(MapEnts) == 0xC, "The size is not correct");

/* 3003 */
struct DynEntityPose
{
  GfxPlacement pose;
  float radius;
};

static_assert(sizeof(DynEntityPose) == 0x20, "The size is not correct");

/* 3004 */
struct DynEntityClient
{
  int physObjId;
  unsigned __int16 flags;
  unsigned __int16 lightingHandle;
  int health;
  unsigned __int16 burnTime;
  unsigned __int16 fadeTime;
  int physicsStartTime;
};

static_assert(sizeof(DynEntityClient) == 0x14, "The size is not correct");

/* 3005 */
struct DynEntityServer
{
  unsigned __int16 flags;
  int health;
};

static_assert(sizeof(DynEntityServer) == 0x8, "The size is not correct");

/* 3006 */
struct DynEntityColl
{
  unsigned __int16 sector;
  unsigned __int16 nextEntInSector;
  float linkMins[3];
  float linkMaxs[3];
  int contents;
};

static_assert(sizeof(DynEntityColl) == 0x20, "The size is not correct");

/* 3007 */
struct par_t
{
  float p[3];
  float p0[3];
  float p_prev[3];
  int flags;
};

static_assert(sizeof(par_t) == 0x28, "The size is not correct");

/* 3008 */
struct /*__cppobj*/ __declspec(align(4)) constraint_t
{
  float p[3];
  rope_constraint_e type;
  int entity_index;
  int bone_name_hash;
  unsigned __int8 pi1;
  unsigned __int8 pi2;
};

static_assert(sizeof(constraint_t) == 0x1C, "The size is not correct");

/* 3009 */
struct rope_frame_verts_t
{
  int num_verts;
  float v[50][3];
};

static_assert(sizeof(rope_frame_verts_t) == 0x25C, "The size is not correct");

/* 3010 */
struct rope_client_verts_t
{
  rope_frame_verts_t frame_verts[2];
  unsigned int frame_index;
};

static_assert(sizeof(rope_client_verts_t) == 0x4BC, "The size is not correct");

/* 3011 */
struct /*__cppobj*/ __declspec(align(4)) rope_t
{
  par_t m_particles[25];
  constraint_t m_constraints[30];
  int m_entity_anchors[3];
  int m_num_particles;
  int m_num_constraints;
  int m_num_entity_anchors;
  int m_num_draw_verts;
  rope_client_verts_t m_client_verts;
  float m_min[3];
  float m_max[3];
  float m_start[3];
  float m_end[3];
  int m_in_use;
  int m_visible;
  int m_dist_constraint;
  int m_flags;
  const Material* m_material;
  float m_seglen;
  float m_length;
  float m_width;
  float m_scale;
  float m_force_scale;
  int m_health;
  int m_frame;
  int m_stable_count;
  int m_static_rope;
  unsigned __int16 m_lightingHandle;
};

static_assert(sizeof(rope_t) == 0xC74, "The size is not correct");

/* 3012 */
struct clipMap_t
{
  const char* name;
  int isInUse;
  int planeCount;
  cplane_s* planes;
  unsigned int numStaticModels;
  cStaticModel_s* staticModelList;
  unsigned int numMaterials;
  dmaterial_t* materials;
  unsigned int numBrushSides;
  cbrushside_t* brushsides;
  unsigned int numNodes;
  cNode_t* nodes;
  unsigned int numLeafs;
  cLeaf_s* leafs;
  unsigned int leafbrushNodesCount;
  cLeafBrushNode_s* leafbrushNodes;
  unsigned int numLeafBrushes;
  unsigned __int16* leafbrushes;
  unsigned int numLeafSurfaces;
  unsigned int* leafsurfaces;
  unsigned int vertCount;
  float(*verts)[3];
  unsigned int numBrushVerts;
  float(*brushVerts)[3];
  unsigned int nuinds;
  unsigned __int16* uinds;
  int triCount;
  unsigned __int16* triIndices;
  unsigned __int8* triEdgeIsWalkable;
  int borderCount;
  CollisionBorder* borders;
  int partitionCount;
  CollisionPartition* partitions;
  int aabbTreeCount;
  CollisionAabbTree* aabbTrees;
  unsigned int numSubModels;
  cmodel_t* cmodels;
  unsigned __int16 numBrushes;
  cbrush_t* brushes;
  int numClusters;
  int clusterBytes;
  unsigned __int8* visibility;
  int vised;
  MapEnts* mapEnts;
  cbrush_t* box_brush;
  cmodel_t box_model;
  unsigned __int16 originalDynEntCount;
  unsigned __int16 dynEntCount[4];
  DynEntityDef* dynEntDefList[2];
  DynEntityPose* dynEntPoseList[2];
  DynEntityClient* dynEntClientList[2];
  DynEntityServer* dynEntServerList[2];
  DynEntityColl* dynEntCollList[4];
  int num_constraints;
  PhysConstraint* constraints;
  int max_ropes;
  rope_t* ropes;
  unsigned int checksum;
};

/* 3013 */
struct SndIndexEntry
{
  unsigned __int16 value;
  unsigned __int16 next;
};

static_assert(sizeof(SndIndexEntry) == 0x04, "The size is not correct");

/* 3014 */
struct snd_radverb
{
  char name[32];
  unsigned int id;
  float smoothing;
  float earlyTime;
  float lateTime;
  float earlyGain;
  float lateGain;
  float returnGain;
  float earlyLpf;
  float lateLpf;
  float inputLpf;
  float dampLpf;
  float wallReflect;
  float dryGain;
  float earlySize;
  float lateSize;
  float diffusion;
};

static_assert(sizeof(snd_radverb) == 0x60, "The size is not correct");

/* 3015 */
struct snd_snapshot
{
  char name[32];
  unsigned int id;
  char occlusionName[32];
  unsigned int occlusionId;
  float fadeIn;
  float fadeOut;
  float distance;
  unsigned int fadeInCurve;
  unsigned int fadeOutCurve;
  float attenuation[64];
};

static_assert(sizeof(snd_snapshot) == 0x15C, "The size is not correct");

/* 3016 */
struct SndBank
{
  const char* name;
  unsigned int aliasCount;
  snd_alias_list_t* alias;
  SndIndexEntry* aliasIndex;
  unsigned int packHash;
  unsigned int packLocation;
  unsigned int radverbCount;
  snd_radverb* radverbs;
  unsigned int snapshotCount;
  snd_snapshot* snapshots;
};

static_assert(sizeof(SndBank) == 0x28, "The size is not correct");

/* 3017 */
struct SndPatch
{
  char* name;
  unsigned int elementCount;
  unsigned int* elements;
  unsigned int fileCount;
  SoundFile* files;
};

static_assert(sizeof(SndPatch) == 0x14, "The size is not correct");

/* 3018 */
struct ComPrimaryLight
{
  unsigned __int8 type;
  unsigned __int8 canUseShadowMap;
  unsigned __int8 exponent;
  char priority;
  __int16 cullDist;
  unsigned __int8 _pad[2];
  float color[3];
  float dir[3];
  float origin[3];
  float radius;
  float cosHalfFovOuter;
  float cosHalfFovInner;
  float cosHalfFovExpanded;
  float rotationLimit;
  float translationLimit;
  float mipDistance;
  float diffuseColor[4];
  float specularColor[4];
  float attenuation[4];
  float falloff[4];
  float angle[4];
  float aAbB[4];
  float cookieControl0[4];
  float cookieControl1[4];
  float cookieControl2[4];
  const char* defName;
};

static_assert(sizeof(ComPrimaryLight) == 0xDC, "The size is not correct");

/* 3019 */
struct ComWaterHeader
{
  int minx;
  int miny;
  int maxx;
  int maxy;
};

static_assert(sizeof(ComWaterHeader) == 0x10, "The size is not correct");

/* 3020 */
struct ComWaterCell
{
  __int16 waterheight;
  char flooroffset;
  unsigned __int8 shoredist;
  unsigned __int8 color[4];
};

static_assert(sizeof(ComWaterCell) == 0x8, "The size is not correct");

/* 3021 */
struct ComBurnableHeader
{
  int minx;
  int miny;
  int maxx;
  int maxy;
};

static_assert(sizeof(ComBurnableHeader) == 0x10, "The size is not correct");

/* 3022 */
struct ComBurnableSample
{
  unsigned __int8 state;
};

static_assert(sizeof(ComBurnableSample) == 0x1, "The size is not correct");

/* 3023 */
struct ComBurnableCell
{
  int x;
  int y;
  ComBurnableSample* data;
};

static_assert(sizeof(ComBurnableCell) == 0xC, "The size is not correct");

/* 3024 */
struct ComWorld
{
  const char* name;
  int isInUse;
  unsigned int primaryLightCount;
  ComPrimaryLight* primaryLights;
  ComWaterHeader waterHeader;
  unsigned int numWaterCells;
  ComWaterCell* waterCells;
  ComBurnableHeader burnableHeader;
  unsigned int numBurnableCells;
  ComBurnableCell* burnableCells;
};

static_assert(sizeof(ComWorld) == 0x40, "The size is not correct");

/* 3025 */
struct pathbasenode_t
{
  float vOrigin[3];
  unsigned int type;
};

static_assert(sizeof(pathbasenode_t) == 0x10, "The size is not correct");

/* 3027 */
struct pathnode_tree_nodes_t
{
  int nodeCount;
  unsigned __int16* nodes;
};

static_assert(sizeof(pathnode_tree_nodes_t) == 0x8, "The size is not correct");

/* 3028 */
union pathnode_tree_info_t
{
  pathnode_tree_t* child[2];
  pathnode_tree_nodes_t s;
};

static_assert(sizeof(pathnode_tree_info_t) == 0x8, "The size is not correct");

/* 3026 */
struct pathnode_tree_t
{
  int axis;
  float dist;
  pathnode_tree_info_t u;
};

static_assert(sizeof(pathnode_tree_t) == 0x10, "The size is not correct");

/* 3029 */
struct PathData
{
  unsigned int nodeCount;
  pathnode_t* nodes;
  pathbasenode_t* basenodes;
  unsigned int chainNodeCount;
  unsigned __int16* chainNodeForNode;
  unsigned __int16* nodeForChainNode;
  int visBytes;
  unsigned __int8* pathVis;
  int nodeTreeCount;
  pathnode_tree_t* nodeTree;
};

static_assert(sizeof(PathData) == 0x28, "The size is not correct");

/* 3030 */
struct GameWorldSp
{
  const char* name;
  PathData path;
};

static_assert(sizeof(GameWorldSp) == 0x2C, "The size is not correct");

/* 3031 */
struct GameWorldMp
{
  const char* name;
  PathData path;
};

static_assert(sizeof(GameWorldMp) == 0x2C, "The size is not correct");

/* 3032 */
struct MenuList
{
  const char* name;
  int menuCount;
  menuDef_t** menus;
};

static_assert(sizeof(MenuList) == 0xC, "The size is not correct");

/* 3033 */
struct LocalizeEntry
{
  const char* value;
  const char* name;
};

static_assert(sizeof(LocalizeEntry) == 0x8, "The size is not correct");

/* 3034 */
struct snd_group
{
  char name[32];
  char parentName[32];
  unsigned int id;
  int parentIndex;
  snd_category_t category;
  unsigned __int16 attenuationSp;
  unsigned __int16 attenuationMp;
};

static_assert(sizeof(snd_group) == 0x50, "The size is not correct");

/* 3035 */
struct snd_curve
{
  char name[32];
  unsigned int id;
  float points[8][2];
};

static_assert(sizeof(snd_curve) == 0x64, "The size is not correct");

/* 3036 */
struct snd_pan
{
  char name[32];
  unsigned int id;
  float front;
  float back;
  float center;
  float lfe;
  float left;
  float right;
};

static_assert(sizeof(snd_pan) == 0x3C, "The size is not correct");

/* 3037 */
struct snd_snapshot_group
{
  char name[32];
};

static_assert(sizeof(snd_snapshot_group) == 0x20, "The size is not correct");

/* 3038 */
struct snd_context
{
  unsigned int type;
  unsigned int valueCount;
  unsigned int values[8];
};

static_assert(sizeof(snd_context) == 0x28, "The size is not correct");

/* 3039 */
struct snd_master
{
  char name[32];
  unsigned int id;
  float notchE;
  float notchG;
  float notchF;
  float notchQ;
  float lowE;
  float lowG;
  float lowF;
  float lowQ;
  float peak1E;
  float peak1G;
  float peak1F;
  float peak1Q;
  float peak2E;
  float peak2G;
  float peak2F;
  float peak2Q;
  float hiE;
  float hiG;
  float hiF;
  float hiQ;
  float eqG;
  float compE;
  float compPG;
  float compMG;
  float compT;
  float compR;
  float compTA;
  float compTR;
  float limitE;
  float limitPG;
  float limitMG;
  float limitT;
  float limitR;
  float limitTA;
  float limitTR;
};

static_assert(sizeof(snd_master) == 0xB0, "The size is not correct");

/* 3040 */
struct SndDriverGlobals
{
  const char* name;
  unsigned int groupCount;
  snd_group* groups;
  unsigned int curveCount;
  snd_curve* curves;
  unsigned int panCount;
  snd_pan* pans;
  unsigned int snapshotGroupCount;
  snd_snapshot_group* snapshotGroups;
  unsigned int contextCount;
  snd_context* contexts;
  unsigned int masterCount;
  snd_master* masters;
};

static_assert(sizeof(SndDriverGlobals) == 0x34, "The size is not correct");

/* 3041 */
struct RawFile
{
  const char* name;
  int len;
  const char* buffer;
};

static_assert(sizeof(RawFile) == 0xC, "The size is not correct");

/* 3042 */
struct StringTableCell
{
  const char* string;
  int hash;
};

static_assert(sizeof(StringTableCell) == 0x8, "The size is not correct");

/* 3043 */
struct StringTable
{
  const char* name;
  int columnCount;
  int rowCount;
  StringTableCell* values;
  __int16* cellIndex;
};

static_assert(sizeof(StringTable) == 0x14, "The size is not correct");

/* 3044 */
struct PackIndexHeader
{
  unsigned int magic;
  unsigned int timestamp;
  unsigned int count;
  unsigned int alignment;
  unsigned int data_start;
};

static_assert(sizeof(PackIndexHeader) == 0x14, "The size is not correct");

/* 3045 */
struct PackIndexEntry
{
  unsigned int hash;
  unsigned int offset;
  unsigned int size;
};

static_assert(sizeof(PackIndexEntry) == 0xC, "The size is not correct");

/* 3046 */
struct PackIndex
{
  const char* name;
  PackIndexHeader header;
  PackIndexEntry* entries;
};

static_assert(sizeof(PackIndex) == 0x1C, "The size is not correct");

/* 3047 */
struct XGlobals
{
  const char* name;
  int xanimStreamBufferSize;
  int cinematicMaxWidth;
  int cinematicMaxHeight;
  int extracamResolution;
  int gumpReserve;
  float screenClearColor[4];
};

static_assert(sizeof(XGlobals) == 0x28, "The size is not correct");

/* 3048 */
struct ddlRoot_t
{
  const char* name;
  ddlDef_t* ddlDef;
};

static_assert(sizeof(ddlRoot_t) == 0x8, "The size is not correct");

/* 3049 */
struct TextureListElement
{
  unsigned int packFileIndex;
};

static_assert(sizeof(TextureListElement) == 0x4, "The size is not correct");

/* 3050 */
struct TextureList
{
  int numTextures;
  TextureListElement* listElements;
};

static_assert(sizeof(TextureList) == 0x8, "The size is not correct");

/* 3051 */
struct EmblemLayer
{
  int cost;
  int unlockLevel;
  int unlockPLevel;
};

static_assert(sizeof(EmblemLayer) == 0xC, "The size is not correct");

/* 3052 */
struct EmblemCategory
{
  const char* name;
  const char* description;
};

static_assert(sizeof(EmblemCategory) == 0x8, "The size is not correct");

/* 3053 */
struct EmblemIcon
{
  GfxImage* image;
  const char* description;
  float outlineSize;
  int defaultColor;
  int cost;
  int unlockLevel;
  int unlockPLevel;
  int unclassifyAt;
  int sortKey;
  unsigned int category;
};

static_assert(sizeof(EmblemIcon) == 0x28, "The size is not correct");

/* 3054 */
struct EmblemBackground
{
  Material* material;
  const char* description;
  int cost;
  int unlockLevel;
  int unlockPLevel;
  int unclassifyAt;
};

static_assert(sizeof(EmblemBackground) == 0x18, "The size is not correct");

/* 3055 */
struct EmblemSet
{
  int colorCount;
  int layerCount;
  EmblemLayer* layers;
  int categoryCount;
  EmblemCategory* categories;
  int iconCount;
  EmblemIcon* icons;
  int backgroundCount;
  EmblemBackground* backgrounds;
  int backgroundLookupCount;
  __int16* backgroundLookup;
};

static_assert(sizeof(EmblemSet) == 0x2C, "The size is not correct");

/* 3056 */
union XAssetHeader
{
  XModelPieces* xmodelPieces;
  PhysPreset* physPreset;
  PhysConstraints* physConstraints;
  DestructibleDef* destructibleDef;
  XAnimParts* parts;
  XModel* model;
  Material* material;
  MaterialPixelShader* pixelShader;
  MaterialVertexShader* vertexShader;
  MaterialTechniqueSet* techniqueSet;
  GfxImage* image;
  SndBank* sound;
  SndPatch* soundPatch;
  clipMap_t* clipMap;
  ComWorld* comWorld;
  GameWorldSp* gameWorldSp;
  GameWorldMp* gameWorldMp;
  MapEnts* mapEnts;
  GfxWorld* gfxWorld;
  GfxLightDef* lightDef;
  Font_s* font;
  MenuList* menuList;
  menuDef_t* menu;
  LocalizeEntry* localize;
  WeaponVariantDef* weapon;
  SndDriverGlobals* sndDriverGlobals;
  const FxEffectDef* fx;
  FxImpactTable* impactFx;
  RawFile* rawfile;
  StringTable* stringTable;
  PackIndex* packIndex;
  XGlobals* xGlobals;
  ddlRoot_t* ddlRoot;
  Glasses* glasses;
  TextureList* textureList;
  EmblemSet* emblemSet;
  void* data;
};

static_assert(sizeof(XAssetHeader) == 0x04, "The size is not correct");

// /* 3057 */
// struct __cppobj traceWork_t
// {
//   hybrid_vector delta;
//   hybrid_vector midpoint;
//   hybrid_vector halfDelta;
//   hybrid_vector halfDeltaAbs;
//   hybrid_vector size;
//   hybrid_vector bounds[2];
//   hybrid_vector radiusOffset;
//   TraceExtents extents;
//   float deltaLen;
//   float deltaLenSq;
//   int contents;
//   bool isPoint;
//   bool axialCullOnly;
//   bool doublesided;
//   float radius;
//   float offsetZ;
//   float boundingRadius;
//   TraceThreadInfo threadInfo;
// };

// /* 3058 */
// struct GlassConfigFile::Values::<unnamed_type_valueRange>
// {
//   unsigned int value;
//   unsigned int glasses;
// };

// /* 3059 */
// struct GlassConfigFile::Values
// {
//   const char *name;
//   GlassConfigFile::Values::<unnamed_type_valueRange> valueRange[4];
//   unsigned int numRanges;
// };

// /* 3060 */
// struct __cppobj __declspec(align(4)) GlassConfigFile
// {
//   GlassConfigFile::Values values[100];
//   unsigned int numValues;
//   bool verbose;
// };

// /* 3061 */
// struct OutlineEdge
// {
//   int index;
//   ray2_t ray;
// };

// /* 3062 */
// struct __cppobj MatchMakingInfo : bdMatchMakingInfo
// {
//   int m_memberNETCODE_VERSION;
//   unsigned __int8 m_membersecKey[17];
//   char m_memberservername[65];
//   unsigned __int64 m_membermaprotation;
//   char m_membermapname[33];
//   int m_memberGAME_TYPE;
//   int m_memberPLAYLIST;
//   int m_memberPLAYLIST_VERSION;
//   int m_memberPARTY_STATE;
//   int m_memberMAPPACKS;
//   int m_memberGAME_MODE;
//   int m_memberSKILL;
//   int m_memberTEAM_SIZE_MIN;
//   int m_memberTEAM_SIZE_MAX;
//   int m_memberGEOGRAPHICAL_LOCATION;
//   unsigned __int64 m_memberdemonwareID;
//   int m_memberserverType;
//   int m_memberroundTime;
//   char m_membermod[33];
//   unsigned __int64 m_memberaddressport;
//   unsigned int m_memberDDL_VERSION;
//   unsigned int m_memberLICENSE;
//   unsigned int m_pingedtime;
//   int m_dirty;
//   int m_active;
//   int m_membertimesincelastupdate;
// };

// /* 3063 */
// struct /*VFT*/ MatchMakingInfo_vtbl
// {
//   void (__thiscall *~bdTaskResult)(bdTaskResult *this);
//   bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
//   void (__thiscall *serialize)(bdMatchMakingInfo *this, bdByteBuffer *);
// };

// /* 3064 */
// struct __cppobj bdProfileInfo : bdTaskResult
// {
//   unsigned __int64 m_entityID;
// };

// /* 3065 */
// struct /*VFT*/ bdProfileInfo_vtbl
// {
//   void (__thiscall *~bdTaskResult)(bdTaskResult *this);
//   bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
//   void (__thiscall *serialize)(bdProfileInfo *this, bdByteBuffer *);
// };

// /* 3066 */
// struct __cppobj bdBandwidthTestResults
// {
//   unsigned int m_bytesReceived;
//   unsigned int m_receivePeriodMs;
//   unsigned int m_avgSeqNumber;
//   unsigned int m_minSeqNumber;
//   unsigned int m_maxSeqNumber;
// };

// /* 3067 */
// struct __cppobj __declspec(align(8)) bdBandwidthTestClient
// {
//   bdSocket m_socket;
//   bdReference<bdRemoteTask> m_remoteTask;
//   unsigned int m_packetSize;
//   unsigned int m_numPackets;
//   unsigned int m_senderInitialWait;
//   unsigned int m_sendDuration;
//   unsigned int m_receiverInitialWait;
//   unsigned int m_receiveDuration;
//   unsigned int m_lingerDuration;
//   unsigned __int16 m_lsgPort;
//   unsigned int m_lsgAddr;
//   unsigned __int8 m_cookie[8];
//   bdStopwatch m_timer;
//   bdStopwatch m_recvTimeoutTimer;
//   unsigned __int8 *m_packetBuffer;
//   unsigned int m_nextPacketNum;
//   unsigned int m_actualNumSent;
//   unsigned int m_seqNumberTotal;
//   bdLobbyService *m_lobbyService;
//   bdBandwidthTestInitStatus m_initStatus;
//   bdBandwidthTestStatus m_testStatus;
//   bdBandwidthTestResults m_uploadResults;
//   bdBandwidthTestResults m_downloadResults;
//   bdLobbyErrorCode m_error;
//   bdBandwidthTestType m_type;
// };

// /* 3068 */
// struct XuidInfo
// {
//   unsigned __int64 playerXuids;
//   char gamertag[32];
//   _FILETIME systemTime;
// };

// /* 3069 */
// struct __cppobj __declspec(align(8)) MetPlayerInfo
// {
//   unsigned __int8 version;
//   XuidInfo playersXuidInfo[50];
//   unsigned __int8 metPlayerCount;
// };

// /* 3070 */
// struct __cppobj PCache_ScopedLock
// {
// };

// /* 3071 */
// struct __cppobj __declspec(align(8)) invite_t
// {
//   unsigned __int64 from;
//   bdSessionID sessionID;
//   char password[32];
// };

// /* 3072 */
// struct favourite_t
// {
//   unsigned __int8 addressblob[6];
//   unsigned __int64 uid;
// };

// /* 3073 */
// struct __cppobj __declspec(align(4)) PrivateProfileInfo : bdProfileInfo
// {
//   unsigned __int8 m_memberfavsblob[253];
//   unsigned __int8 m_memberuids[337];
// };

// /* 3074 */
// struct /*VFT*/ PrivateProfileInfo_vtbl
// {
//   void (__thiscall *~bdTaskResult)(bdTaskResult *this);
//   bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
//   void (__thiscall *serialize)(bdProfileInfo *this, bdByteBuffer *);
// };

// /* 3075 */
// struct friendonserver_t
// {
//   unsigned __int64 friendID;
//   unsigned __int64 serverID;
// };

// /* 3076 */
// struct __cppobj __declspec(align(8)) LaunchData
// {
//   int version;
//   char startupText[900];
//   bool skipMovies;
//   unsigned __int8 activeController;
//   bool gameInviteAccepted;
//   unsigned __int64 invitedXUID;
//   XSESSION_INFO inviteHostInfo;
//   bool fromGameInvite;
// };

// /* 3077 */
// struct PC_AgeRestrict
// {
//   char *titleId;
//   int age;
// };

// /* 3078 */
// struct __cppobj bdLinkable
// {
//   bdLinkable_vtbl *__vftable /*VFT*/;
//   bdLinkable *m_previous;
//   bdLinkable *m_next;
//   bdLinkable **m_headPtr;
// };

// /* 3079 */
// struct /*VFT*/ bdLinkable_vtbl
// {
//   void (__thiscall *~bdLinkable)(bdLinkable *this);
// };

// /* 3080 */
// struct __cppobj bdLogSubscriber : bdLinkable
// {
//   const char *m_channels[5];
// };

// /* 3081 */
// struct /*VFT*/ bdLogSubscriber_vtbl
// {
//   void (__thiscall *~bdLinkable)(bdLinkable *this);
//   void (__thiscall *publish)(bdLogSubscriber *this, const bdLogMessageType, const char *const, const char *const, const char *const, const unsigned int, const char *const);
// };

// /* 3082 */
// struct QoSStatus
// {
//   int firstMS;
//   int updateMS;
//   unsigned int prevNumSuccesses;
// };

// /* 3083 */
// struct XenonUserData
// {
//   int signinState;
//   char gamertag[32];
//   unsigned __int64 xuid;
//   char xuidString[17];
//   bool isGuestUser;
//   EUserTier tier;
//   __int64 totalGamesPlayed;
// };

// /* 3084 */
// struct __cppobj dwQoSMultiProbeListener : bdQoSProbeListener
// {
//   bdQoSRemoteAddr m_probeAddrs[500];
//   bool m_probeSucceeded[500];
//   unsigned int m_numProbes;
//   bdQoSProbeInfo m_successes[500];
//   bdSecurityID m_successIDs[500];
//   unsigned int m_numSuccesses;
//   unsigned int m_numFailures;
// };

// /* 3085 */
// struct /*VFT*/ dwQoSMultiProbeListener_vtbl
// {
//   void (__thiscall *~bdQoSProbeListener)(bdQoSProbeListener *this);
//   void (__thiscall *onQoSProbeSuccess)(bdQoSProbeListener *this, const bdQoSProbeInfo *);
//   void (__thiscall *onQoSProbeFail)(bdQoSProbeListener *this, bdReference<bdCommonAddr>);
// };

// /* 3086 */
// struct __cppobj bdMailHeader : bdTaskResult
// {
//   unsigned __int64 m_senderID;
//   char m_senderName[64];
//   unsigned __int64 m_mailID;
//   unsigned int m_timeStamp;
//   unsigned int m_size;
// };

// /* 3087 */
// struct /*VFT*/ bdMailHeader_vtbl
// {
//   void (__thiscall *~bdTaskResult)(bdTaskResult *this);
//   bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
// };

// /* 3088 */
// struct __cppobj bdMailBody : bdTaskResult
// {
//   void *m_mailBody;
//   unsigned int m_size;
//   unsigned __int64 m_mailID;
// };

// /* 3089 */
// struct /*VFT*/ bdMailBody_vtbl
// {
//   void (__thiscall *~bdTaskResult)(bdTaskResult *this);
//   bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
// };

// /* 3090 */
// struct __cppobj bdNotification : bdTaskResult
// {
//   bdNotificationType m_type;
//   unsigned int m_timeStamp;
//   unsigned __int64 m_ID;
//   unsigned __int64 m_sourceUser;
//   char m_sourceUserName[64];
//   unsigned __int64 m_affectedUser;
//   char m_affectedUserName[64];
//   unsigned __int64 m_teamID;
//   char m_teamName[64];
// };

// /* 3091 */
// struct /*VFT*/ bdNotification_vtbl
// {
//   void (__thiscall *~bdTaskResult)(bdTaskResult *this);
//   bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
// };

// /* 3092 */
// struct __cppobj bdCore
// {
// };

// /* 3093 */
// struct __cppobj ThrottleData
// {
//   int returnTimeMs;
// };

// /* 3094 */
// struct __declspec(align(8)) PlayerRank
// {
//   unsigned __int64 xuid;
//   int rank;
// };

// /* 3095 */
// struct FriendInfo
// {
//   int status;
//   unsigned __int64 dwid;
//   unsigned __int64 steamid;
//   char name[32];
//   char presence[128];
// };

// /* 3096 */
// struct __cppobj InviteMessage
// {
//   XSESSION_INFO sessionInfo;
//   int fromMPInvite;
// };

// /* 3097 */
// struct __cppobj __declspec(align(8)) fileSharePrivateData
// {
//   bool valid;
//   int lastRead;
//   unsigned __int64 playerXuid;
//   bdFileMetaData descriptors[20];
//   bdVoteRankStatsInfo fileRatings[20];
//   int descriptorCount;
// };

// /* 3098 */
// struct messages_t
// {
//   char text[512];
//   messageState_e state;
// };

// /* 3099 */
// struct streams_t
// {
//   streamName_t streamName;
//   messages_t messages[10];
//   int messageCount;
//   int currentMessageIndex;
// };

// /* 3100 */
// struct __declspec(align(4)) ticker_t
// {
//   streams_t streams[5];
//   streamName_t streamDisplayOrder[5];
//   int streamBatchSize[5];
//   streamName_t currentStream;
//   streamName_t previousStream;
//   int totalMessageCount;
//   int currentStreamIndex;
//   bool isHeaderAnimating;
//   int pauseStartTimeA;
//   int scrollLeftStartTime;
//   int scrollUpStartTimeB;
//   int pauseStartTimeB;
//   float scrollLeftDuration;
//   float scrollLeftFinalX;
//   bool hasMessageScrolledLeft;
//   int scrollUpStartTimeA;
//   int messagedWidthInPixels;
//   int headerAnimationStartTime;
//   bool isUserOnline;
// };

// /* 3101 */
// struct __cppobj LbPlayerStat
// {
//   int values[19];
//   unsigned __int64 userID;
// };

// /* 3102 */
// struct LbStructure
// {
//   int type;
//   LbStatEnum columns[17];
//   unsigned int numColums;
//   unsigned int ratingCol;
// };

// /* 3103 */
// struct LbGlobalStructure
// {
//   int lbIndex;
//   GlobalLbStatEnum columns[19];
//   unsigned int numColums;
//   unsigned int ratingCol;
// };

// /* 3104 */
// struct LbLookup
// {
//   unsigned int numLbs;
//   LbStructure structures[16];
//   unsigned int numGlobalLbs;
//   LbGlobalStructure globalStructures[4];
// };

// /* 3105 */
// struct fileRetryInfo
// {
//   int lastAttemptTime;
//   int lastAttemptInterval;
//   int retryCount;
// };

// /* 3106 */
// struct __cppobj __declspec(align(8)) dwFileOperationInfo
// {
//   dwFileTask fileTask;
//   fileRetryInfo retryInfo;
//   int taskType;
//   bool fetchCompleted;
//   bool writeCompleted;
//   bool isUserFile;
//   bool isCompressedFile;
//   const char *menuDef;
//   unsigned __int8 *fileBuffer;
//   int bufferSize;
//   void (__cdecl *fileOperationSucessFunction)(const int, void *);
//   taskCompleteResults (__cdecl *fileNotFoundFunction)(const int, void *);
//   void (__cdecl *fileOperationFailureFunction)(const int, void *);
//   unsigned __int64 ownerID;
//   bool *alreadyUploaded;
// };

// /* 3107 */
// struct __declspec(align(4)) fileFetchData
// {
//   unsigned __int8 *buffer;
//   int bufferSize;
//   bool fetched;
// };

// /* 3108 */
// struct _SYSTEMTIME
// {
//   unsigned __int16 wYear;
//   unsigned __int16 wMonth;
//   unsigned __int16 wDayOfWeek;
//   unsigned __int16 wDay;
//   unsigned __int16 wHour;
//   unsigned __int16 wMinute;
//   unsigned __int16 wSecond;
//   unsigned __int16 wMilliseconds;
// };

// /* 3109 */
// struct __cppobj LeaderBoardRow<10> : bdStatsInfo
// {
//   int m_columns[10];
// };

// /* 3110 */
// struct /*VFT*/ LeaderBoardRow<10>_vtbl
// {
//   void (__thiscall *~bdTaskResult)(bdTaskResult *this);
//   bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
//   void (__thiscall *serialize)(bdStatsInfo *this, bdByteBuffer *);
// };

// /* 3111 */
// struct __cppobj LargeLocal
// {
//   int startPos;
//   int size;
// };

// /* 3112 */
// struct WADEntry
// {
//   char name[32];
//   unsigned int compressedSize;
//   unsigned int size;
//   unsigned int offset;
// };

// /* 3113 */
// struct z_stream_s
// {
//   unsigned __int8 *next_in;
//   unsigned int avail_in;
//   unsigned int total_in;
//   unsigned __int8 *next_out;
//   unsigned int avail_out;
//   unsigned int total_out;
//   char *msg;
//   internal_state *state;
//   unsigned __int8 *(__cdecl *zalloc)(unsigned __int8 *, unsigned int, unsigned int);
//   void (__cdecl *zfree)(unsigned __int8 *, unsigned __int8 *);
//   unsigned __int8 *opaque;
//   int data_type;
//   unsigned int adler;
// };

// /* 3115 */
// union ct_data_s::<unnamed_type_fc>
// {
//   unsigned __int16 freq;
//   unsigned __int16 code;
// };

// /* 3116 */
// union ct_data_s::<unnamed_type_dl>
// {
//   unsigned __int16 dad;
//   unsigned __int16 len;
// };

// /* 3117 */
// struct ct_data_s
// {
//   ct_data_s::<unnamed_type_fc> fc;
//   ct_data_s::<unnamed_type_dl> dl;
// };

// /* 3119 */
// struct tree_desc_s
// {
//   ct_data_s *dyn_tree;
//   int max_code;
//   static_tree_desc_s *stat_desc;
// };

// /* 3120 */
// struct internal_state
// {
//   z_stream_s *strm;
//   int status;
//   unsigned __int8 *pending_buf;
//   unsigned int pending_buf_size;
//   unsigned __int8 *pending_out;
//   unsigned int pending;
//   int wrap;
//   gz_header_s *gzhead;
//   unsigned int gzindex;
//   unsigned __int8 method;
//   int last_flush;
//   unsigned int w_size;
//   unsigned int w_bits;
//   unsigned int w_mask;
//   unsigned __int8 *window;
//   unsigned int window_size;
//   unsigned __int16 *prev;
//   unsigned __int16 *head;
//   unsigned int ins_h;
//   unsigned int hash_size;
//   unsigned int hash_bits;
//   unsigned int hash_mask;
//   unsigned int hash_shift;
//   int block_start;
//   unsigned int match_length;
//   unsigned int prev_match;
//   int match_available;
//   unsigned int strstart;
//   unsigned int match_start;
//   unsigned int lookahead;
//   unsigned int prev_length;
//   unsigned int max_chain_length;
//   unsigned int max_lazy_match;
//   int level;
//   int strategy;
//   unsigned int good_match;
//   int nice_match;
//   ct_data_s dyn_ltree[573];
//   ct_data_s dyn_dtree[61];
//   ct_data_s bl_tree[39];
//   tree_desc_s l_desc;
//   tree_desc_s d_desc;
//   tree_desc_s bl_desc;
//   unsigned __int16 bl_count[16];
//   int heap[573];
//   int heap_len;
//   int heap_max;
//   unsigned __int8 depth[573];
//   unsigned __int8 *l_buf;
//   unsigned int lit_bufsize;
//   unsigned int last_lit;
//   unsigned __int16 *d_buf;
//   unsigned int opt_len;
//   unsigned int static_len;
//   unsigned int matches;
//   int last_eob_len;
//   unsigned __int16 bi_buf;
//   int bi_valid;
// };

// /* 3114 */
// struct gz_header_s
// {
//   int text;
//   unsigned int time;
//   int xflags;
//   int os;
//   unsigned __int8 *extra;
//   unsigned int extra_len;
//   unsigned int extra_max;
//   unsigned __int8 *name;
//   unsigned int name_max;
//   unsigned __int8 *comment;
//   unsigned int comm_max;
//   int hcrc;
//   int done;
// };

// /* 3118 */
// struct static_tree_desc_s
// {
//   int dummy;
// };

// /* 3121 */
// struct WADHeader
// {
//   unsigned int magic;
//   unsigned int timestamp;
//   unsigned int numEntries;
//   unsigned int ffotdVersion;
// };

// /* 3122 */
// struct __cppobj fileShareSearchBlock
// {
//   bdFileMetaData descriptors[10];
//   int startIndex;
//   int descriptorCount;
//   int timestamp;
//   bool loaded;
//   fileShareSearchBlock *next;
//   fileShareSearchBlock *prev;
// };

// /* 3123 */
// struct __cppobj fileShareSearchResults
// {
//   int totalFiles;
//   fileShareSearchBlock *head;
//   fileShareLocation location;
//   bdFileID fileIDs[100];
//   int numRatings;
//   bdVoteRankStatsInfo ratings[100];
//   int fileCount;
//   bdTag tags[40];
//   int numTags;
//   int lastSearchTime;
// };

// /* 3124 */
// struct persistentStats
// {
//   unsigned __int8 statsBuffer[39272];
//   bool isChecksumValid;
//   bool statsWriteNeeded;
//   bool statsValidatedWithDDL;
//   bool statsFetched;
// };

// /* 3125 */
// struct __declspec(align(8)) dwFileShareListTask
// {
//   unsigned __int64 ownerID;
//   int startDate;
//   int bufferLocation;
//   unsigned __int16 category;
//   unsigned __int16 maxNumResults;
//   unsigned __int16 offset;
//   char *fileName;
//   bdFileMetaData *descriptors;
//   const char *menuDef;
// };

// /* 3126 */
// struct dwFileShareSearchTask
// {
//   fileShareLocation location;
//   unsigned int startIndex;
//   unsigned int maxNumResults;
//   unsigned int numTags;
//   unsigned int sortOrder;
//   bool orderNewestFirst;
//   bdTag *tags;
//   int *resultFileCount;
//   bdFileID *resultFileIDs;
//   int *resultRatingCount;
//   bdVoteRankStatsInfo *resultRatings;
//   int *resultTotalFileCount;
//   void (__cdecl *successCallback)();
//   void (__cdecl *failureCallback)();
// };

// /* 3127 */
// struct dwFileShareDescriptorsTask
// {
//   fileShareLocation location;
//   unsigned int numFiles;
//   bdFileID *fileIDs;
//   int cacheLoadedFileCount;
//   bdFileMetaData *descriptors;
//   int *descriptorCount;
//   bool getFirstSummary;
//   bool getLastSummary;
//   void (__cdecl *successCallback)();
//   void (__cdecl *failureCallback)();
// };

// /* 3128 */
// struct __cppobj __declspec(align(8)) dwFileShareWriteFileTask
// {
//   fileShareLocation location;
//   unsigned __int16 fileSlot;
//   const char *menuDef;
//   void *fileData;
//   bdUploadInterceptor *uploadHandler;
//   unsigned int fileSize;
//   const char *fileName;
//   unsigned __int16 category;
//   const void *thumbData;
//   unsigned int thumbDataSize;
//   unsigned int numTags;
//   bdTag *tags;
//   bdFileID outFileID;
//   unsigned int (__cdecl *dataCallback)(void *, unsigned int, unsigned int);
//   void (__cdecl *successCallback)(int, unsigned __int64);
//   void (__cdecl *failureCallback)(int);
// };

// /* 3129 */
// struct dwFileShareTagTask
// {
//   fileShareLocation location;
//   bdTag *tags;
//   unsigned int numTags;
//   unsigned __int64 entityID;
// };

// /* 3130 */
// struct __cppobj dwFileShareTransferTask
// {
//   unsigned __int64 fileID;
//   fileShareLocation location;
//   unsigned __int16 fileSlot;
//   char *fileName;
//   unsigned __int16 category;
//   char metaData[255];
//   unsigned int metaDataSize;
//   unsigned int numTags;
//   bdTag *tags;
//   bdFileID outFileID;
// };

// /* 3131 */
// struct dwFileShareRemoveTask
// {
//   unsigned int fileSlot;
// };

// /* 3132 */
// struct dwFileShareSummaryTask
// {
//   unsigned __int64 fileID;
//   void *summaryData;
//   unsigned int summaryDataSize;
//   const void *metaData;
//   unsigned int metaDataSize;
//   unsigned int numTags;
//   bdTag *tags;
//   fileShareLocation location;
//   bool showSuccess;
//   void (__cdecl *successCallback)();
//   void (__cdecl *failureCallback)();
// };

// /* 3133 */
// struct __cppobj __declspec(align(8)) dwFileShareSubmitRatingTask
// {
//   bdRatingInfo rating[1];
//   unsigned int numRatings;
// };

// /* 3134 */
// struct dwFileShareGetRatingTask
// {
//   fileShareLocation location;
//   unsigned __int64 *fileIDs;
//   int maxFilesToFetch;
//   int leaderboardID;
//   bdVoteRankStatsInfo *outStatsInfo;
//   int *outNumRatingsReceived;
//   int cacheLoadedFileCount;
//   void (__cdecl *successCallback)();
//   void (__cdecl *failureCallback)();
// };

// /* 3135 */
// struct __cppobj __declspec(align(8)) dwFileShareGetTopRatedTask
// {
//   unsigned __int64 startRank;
//   int maxFiles;
//   unsigned int leaderboardID;
//   bdVoteRankStatsInfo statsInfo[100];
//   int *outNumFiles;
//   int *outTotalNumFiles;
//   bdFileID *outFileIDs;
//   void (__cdecl *successCallback)();
//   void (__cdecl *failureCallback)();
// };

// /* 3136 */
// struct __cppobj playerFileOperations
// {
//   dwFileOperationInfo statsBackupFileInfo;
//   dwFileOperationInfo readDWEmailFileInfo;
//   dwFileOperationInfo saveDWEmailFileInfo;
//   dwFileOperationInfo squadMessagesFileInfo;
//   dwFileOperationInfo codMessagesFileInfo;
//   dwFileOperationInfo eventMessagesFileInfo;
//   dwFileOperationInfo hiddenOfferIdsFileInfo;
//   dwFileOperationInfo fbStatusFileInfo;
//   dwFileOperationInfo clanMOTDInfo;
//   dwFileOperationInfo corruptedStatsBackupFileInfo;
//   dwFileOperationInfo fetchMetPlayerListFileInfo;
//   dwFileOperationInfo saveMetPlayerListFileInfo;
//   dwFileOperationInfo getOtherPlayerStatsFileInfo;
//   dwFileOperationInfo getPlayerStatsFileInfo;
//   dwFileOperationInfo getBasicTrainingStatsFileInfo;
//   dwFileOperationInfo saveStatsFileInfo;
//   dwFileOperationInfo saveBasicTrainingStatsFileInfo;
//   dwFileOperationInfo contractsFileInfo;
//   dwFileOperationInfo demoFileInfo;
//   dwFileShareListTask fileShareListTask;
//   dwFileShareSearchTask fileShareSearchTask;
//   dwFileShareDescriptorsTask fileShareDescriptorsTask;
//   dwFileShareReadFileTask fileShareReadFileTask;
//   dwFileShareWriteFileTask fileShareWriteFileTask;
//   dwFileShareTagTask fileShareTagTask;
//   dwFileShareTransferTask fileShareTransferTask;
//   dwFileShareRemoveTask fileShareRemoveTask;
//   dwFileShareSummaryTask fileShareSummaryTask;
//   dwFileShareSubmitRatingTask fileShareSubmitRatingTask;
//   dwFileShareGetRatingTask fileShareGetRatingTask;
//   dwFileShareGetTopRatedTask fileShareGetTopRatedTask;
//   dwFileShareGetRatingTask fileShareFilmRatingTask;
//   dwFileShareGetRatingTask fileShareClipRatingTask;
//   dwFileShareGetRatingTask fileShareScreenshotRatingTask;
//   dwFileShareGetRatingTask fileShareCustomGameRatingTask;
// };

// /* 3137 */
// struct playerNetworkData
// {
//   _BYTE playerStats[40172];
//   _BYTE playerStatsBackup[40172];
//   _BYTE stableStatsBuffer[40172];
//   _BYTE basicTrainingStats[40172];
//   _BYTE globalplayerStats[40172];
//   _BYTE globalStablePlayerStats[40172];
//   bool firstTimeRunning;
//   bool fileShareFetched;
//   playerFileOperations *fileOps;
// };

// /* 3138 */
// struct __cppobj fileShareDownloadInterceptor : bdDownloadInterceptor
// {
//   dwFileShareReadFileTask *task;
//   unsigned int (__cdecl *callback)(void *, unsigned int, dwFileShareReadFileTask *);
// };

// /* 3139 */
// struct /*VFT*/ fileShareDownloadInterceptor_vtbl
// {
//   void (__thiscall *~bdDownloadInterceptor)(bdDownloadInterceptor *this);
//   unsigned int (__thiscall *handleDownload)(bdDownloadInterceptor *this, void *, unsigned int);
// };

// /* 3140 */
// struct __cppobj fileShareLastPlayedGame_t
// {
//   bdFileID dwFileID;
//   bdFileMetaData descriptor;
// };

// /* 3141 */
// struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_33
// {
//   const void *pVFTable;
//   void *spare;
//   char name[33];
// };

// /* 3142 */
// struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_35
// {
//   const void *pVFTable;
//   void *spare;
//   char name[35];
// };

// /* 3143 */
// struct __cppobj fileShareUploadInterceptor : bdUploadInterceptor
// {
//   dwFileShareWriteFileTask *task;
//   unsigned int (__cdecl *callback)(void *, unsigned int, unsigned int, dwFileShareWriteFileTask *);
// };

// /* 3144 */
// struct /*VFT*/ fileShareUploadInterceptor_vtbl
// {
//   void (__thiscall *~bdUploadInterceptor)(bdUploadInterceptor *this);
//   unsigned int (__thiscall *handleUpload)(bdUploadInterceptor *this, void *, unsigned int, unsigned int);
// };

// /* 3145 */
// struct CSteamID::SteamID_t::SteamIDComponent_t
// {
//   unsigned __int32 m_unAccountID : 32;
//   unsigned __int32 m_unAccountInstance : 20;
//   unsigned __int32 m_EAccountType : 4;
//   __int32 m_EUniverse : 8;
// };

// /* 3146 */
// union CSteamID::SteamID_t
// {
//   CSteamID::SteamID_t::SteamIDComponent_t m_comp;
//   unsigned __int64 m_unAll64Bits;
// };

// /* 3147 */
// struct __cppobj CSteamID
// {
//   CSteamID::SteamID_t m_steamid;
// };

// /* 3148 */
// struct __cppobj CCallbackBase
// {
//   CCallbackBase_vtbl *__vftable /*VFT*/;
//   unsigned __int8 m_nCallbackFlags;
//   int m_iCallback;
// };

// /* 3149 */
// struct /*VFT*/ CCallbackBase_vtbl
// {
//   void (__thiscall *Run)(CCallbackBase *this, void *, bool, unsigned __int64);
//   void (__thiscall *Run)(CCallbackBase *this, void *);
//   int (__thiscall *GetCallbackSizeBytes)(CCallbackBase *this);
// };

// /* 3153 */
// struct __cppobj CCallback<LiveSteamP2P,P2PSessionRequest_t,0> : CCallbackBase
// {
//   LiveSteamP2P *m_pObj;
//   void (__thiscall *m_Func)(LiveSteamP2P *this, P2PSessionRequest_t *);
// };

// /* 3150 */
// struct __cppobj LiveSteamP2P
// {
//   CCallback<LiveSteamP2P,P2PSessionRequest_t,0> m_OnSessionRequest;
// };

// /* 3151 */
// struct __cppobj P2PSessionRequest_t
// {
//   CSteamID m_steamIDRemote;
// };

// /* 3152 */
// struct /*VFT*/ CCallback<LiveSteamP2P,P2PSessionRequest_t,0>_vtbl
// {
//   void (__thiscall *Run)(CCallbackBase *this, void *, bool, unsigned __int64);
//   void (__thiscall *Run)(CCallbackBase *this, void *);
//   int (__thiscall *GetCallbackSizeBytes)(CCallbackBase *this);
// };

// /* 3154 */
// struct __cppobj ISteamNetworking
// {
//   ISteamNetworking_vtbl *__vftable /*VFT*/;
// };

// /* 3156 */
// struct /*VFT*/ ISteamNetworking_vtbl
// {
//   bool (__thiscall *SendP2PPacket)(ISteamNetworking *this, CSteamID, const void *, unsigned int, EP2PSend, int);
//   bool (__thiscall *IsP2PPacketAvailable)(ISteamNetworking *this, unsigned int *, int);
//   bool (__thiscall *ReadP2PPacket)(ISteamNetworking *this, void *, unsigned int, unsigned int *, CSteamID *, int);
//   bool (__thiscall *AcceptP2PSessionWithUser)(ISteamNetworking *this, CSteamID);
//   bool (__thiscall *CloseP2PSessionWithUser)(ISteamNetworking *this, CSteamID);
//   bool (__thiscall *GetP2PSessionState)(ISteamNetworking *this, CSteamID, P2PSessionState_t *);
//   unsigned int (__thiscall *CreateListenSocket)(ISteamNetworking *this, int, unsigned int, unsigned __int16, bool);
//   unsigned int (__thiscall *CreateP2PConnectionSocket)(ISteamNetworking *this, CSteamID, int, int, bool);
//   unsigned int (__thiscall *CreateConnectionSocket)(ISteamNetworking *this, unsigned int, unsigned __int16, int);
//   bool (__thiscall *DestroySocket)(ISteamNetworking *this, unsigned int, bool);
//   bool (__thiscall *DestroyListenSocket)(ISteamNetworking *this, unsigned int, bool);
//   bool (__thiscall *SendDataOnSocket)(ISteamNetworking *this, unsigned int, void *, unsigned int, bool);
//   bool (__thiscall *IsDataAvailableOnSocket)(ISteamNetworking *this, unsigned int, unsigned int *);
//   bool (__thiscall *RetrieveDataFromSocket)(ISteamNetworking *this, unsigned int, void *, unsigned int, unsigned int *);
//   bool (__thiscall *IsDataAvailable)(ISteamNetworking *this, unsigned int, unsigned int *, unsigned int *);
//   bool (__thiscall *RetrieveData)(ISteamNetworking *this, unsigned int, void *, unsigned int, unsigned int *, unsigned int *);
//   bool (__thiscall *GetSocketInfo)(ISteamNetworking *this, unsigned int, CSteamID *, int *, unsigned int *, unsigned __int16 *);
//   bool (__thiscall *GetListenSocketInfo)(ISteamNetworking *this, unsigned int, unsigned int *, unsigned __int16 *);
//   ESNetSocketConnectionType (__thiscall *GetSocketConnectionType)(ISteamNetworking *this, unsigned int);
//   int (__thiscall *GetMaxPacketSize)(ISteamNetworking *this, unsigned int);
// };

// /* 3155 */
// struct __declspec(align(4)) P2PSessionState_t
// {
//   unsigned __int8 m_bConnectionActive;
//   unsigned __int8 m_bConnecting;
//   unsigned __int8 m_eP2PSessionError;
//   unsigned __int8 m_bUsingRelay;
//   int m_nBytesQueuedForSend;
//   int m_nPacketsQueuedForSend;
//   unsigned int m_nRemoteIP;
//   unsigned __int16 m_nRemotePort;
// };

// /* 3157 */
// struct __cppobj MatchMakingKeyValuePair_t
// {
//   char m_szKey[256];
//   char m_szValue[256];
// };

// /* 3158 */
// struct $_TypeDescriptor$_extraBytes_60
// {
//   const void *pVFTable;
//   void *spare;
//   char name[60];
// };

// /* 3159 */
// struct servernetadr_t
// {
//   unsigned __int16 m_usConnectionPort;
//   unsigned __int16 m_usQueryPort;
//   unsigned int m_unIP;
// };

// /* 3160 */
// struct CGameID::GameID_t
// {
//   unsigned __int32 m_nAppID : 24;
//   unsigned __int32 m_nType : 8;
//   unsigned __int32 m_nModID : 32;
// };

// /* 3161 */
// union $0C70D88D3CEC53CCB404FD8E569B7F3D
// {
//   unsigned __int64 m_ulGameID;
//   CGameID::GameID_t m_gameID;
// };

// /* 3162 */
// struct __cppobj CGameID
// {
//   $0C70D88D3CEC53CCB404FD8E569B7F3D ___u0;
// };

// /* 3163 */
// struct __cppobj __unaligned __declspec(align(4)) gameserveritem_t
// {
//   servernetadr_t m_NetAdr;
//   int m_nPing;
//   bool m_bHadSuccessfulResponse;
//   bool m_bDoNotRefresh;
//   char m_szGameDir[32];
//   char m_szMap[32];
//   char m_szGameDescription[64];
//   __declspec(align(4)) unsigned int m_nAppID;
//   int m_nPlayers;
//   int m_nMaxPlayers;
//   int m_nBotPlayers;
//   bool m_bPassword;
//   bool m_bSecure;
//   __declspec(align(4)) unsigned int m_ulTimeLastPlayed;
//   int m_nServerVersion;
//   char m_szServerName[64];
//   char m_szGameTags[128];
//   CSteamID m_steamID;
// };

// /* 3167 */
// struct __cppobj CCallback<LiveSteamServer,SteamServersConnected_t,1> : CCallbackBase
// {
//   LiveSteamServer *m_pObj;
//   void (__thiscall *m_Func)(LiveSteamServer *this, SteamServersConnected_t *);
// };

// /* 3170 */
// struct __cppobj CCallback<LiveSteamServer,SteamServersDisconnected_t,1> : CCallbackBase
// {
//   LiveSteamServer *m_pObj;
//   void (__thiscall *m_Func)(LiveSteamServer *this, SteamServersDisconnected_t *);
// };

// /* 3173 */
// struct __cppobj CCallback<LiveSteamServer,GSPolicyResponse_t,1> : CCallbackBase
// {
//   LiveSteamServer *m_pObj;
//   void (__thiscall *m_Func)(LiveSteamServer *this, GSPolicyResponse_t *);
// };

// /* 3176 */
// struct __cppobj CCallback<LiveSteamServer,GSClientApprove_t,1> : CCallbackBase
// {
//   LiveSteamServer *m_pObj;
//   void (__thiscall *m_Func)(LiveSteamServer *this, GSClientApprove_t *);
// };

// /* 3179 */
// struct __cppobj CCallback<LiveSteamServer,GSClientDeny_t,1> : CCallbackBase
// {
//   LiveSteamServer *m_pObj;
//   void (__thiscall *m_Func)(LiveSteamServer *this, GSClientDeny_t *);
// };

// /* 3182 */
// struct __cppobj CCallback<LiveSteamServer,GSClientKick_t,1> : CCallbackBase
// {
//   LiveSteamServer *m_pObj;
//   void (__thiscall *m_Func)(LiveSteamServer *this, GSClientKick_t *);
// };

// /* 3164 */
// struct __cppobj LiveSteamServer
// {
//   unsigned int currentMapDlcAppID;
//   unsigned int serverIP;
//   unsigned int lastRunTime;
//   bool serverActive;
//   CCallback<LiveSteamServer,SteamServersConnected_t,1> m_CallbackSteamServersConnected;
//   CCallback<LiveSteamServer,SteamServersDisconnected_t,1> m_CallbackSteamServersDisconnected;
//   CCallback<LiveSteamServer,GSPolicyResponse_t,1> m_CallbackPolicyResponse;
//   CCallback<LiveSteamServer,GSClientApprove_t,1> m_CallbackGSClientApprove;
//   CCallback<LiveSteamServer,GSClientDeny_t,1> m_CallbackGSClientDeny;
//   CCallback<LiveSteamServer,GSClientKick_t,1> m_CallbackGSClientKick;
// };

// /* 3165 */
// struct __cppobj SteamServersConnected_t
// {
// };

// /* 3168 */
// struct SteamServersDisconnected_t
// {
//   EResult m_eResult;
// };

// /* 3171 */
// struct GSPolicyResponse_t
// {
//   unsigned __int8 m_bSecure;
// };

// /* 3174 */
// struct __cppobj GSClientApprove_t
// {
//   CSteamID m_SteamID;
// };

// /* 3177 */
// struct __cppobj __unaligned __declspec(align(4)) GSClientDeny_t
// {
//   CSteamID m_SteamID;
//   EDenyReason m_eDenyReason;
//   char m_rgchOptionalText[128];
// };

// /* 3180 */
// struct __cppobj __unaligned __declspec(align(4)) GSClientKick_t
// {
//   CSteamID m_SteamID;
//   EDenyReason m_eDenyReason;
// };

// /* 3166 */
// struct /*VFT*/ CCallback<LiveSteamServer,SteamServersConnected_t,1>_vtbl
// {
//   void (__thiscall *Run)(CCallbackBase *this, void *, bool, unsigned __int64);
//   void (__thiscall *Run)(CCallbackBase *this, void *);
//   int (__thiscall *GetCallbackSizeBytes)(CCallbackBase *this);
// };

// /* 3169 */
// struct /*VFT*/ CCallback<LiveSteamServer,SteamServersDisconnected_t,1>_vtbl
// {
//   void (__thiscall *Run)(CCallbackBase *this, void *, bool, unsigned __int64);
//   void (__thiscall *Run)(CCallbackBase *this, void *);
//   int (__thiscall *GetCallbackSizeBytes)(CCallbackBase *this);
// };

// /* 3172 */
// struct /*VFT*/ CCallback<LiveSteamServer,GSPolicyResponse_t,1>_vtbl
// {
//   void (__thiscall *Run)(CCallbackBase *this, void *, bool, unsigned __int64);
//   void (__thiscall *Run)(CCallbackBase *this, void *);
//   int (__thiscall *GetCallbackSizeBytes)(CCallbackBase *this);
// };

// /* 3175 */
// struct /*VFT*/ CCallback<LiveSteamServer,GSClientApprove_t,1>_vtbl
// {
//   void (__thiscall *Run)(CCallbackBase *this, void *, bool, unsigned __int64);
//   void (__thiscall *Run)(CCallbackBase *this, void *);
//   int (__thiscall *GetCallbackSizeBytes)(CCallbackBase *this);
// };

// /* 3178 */
// struct /*VFT*/ CCallback<LiveSteamServer,GSClientDeny_t,1>_vtbl
// {
//   void (__thiscall *Run)(CCallbackBase *this, void *, bool, unsigned __int64);
//   void (__thiscall *Run)(CCallbackBase *this, void *);
//   int (__thiscall *GetCallbackSizeBytes)(CCallbackBase *this);
// };

// /* 3181 */
// struct /*VFT*/ CCallback<LiveSteamServer,GSClientKick_t,1>_vtbl
// {
//   void (__thiscall *Run)(CCallbackBase *this, void *, bool, unsigned __int64);
//   void (__thiscall *Run)(CCallbackBase *this, void *);
//   int (__thiscall *GetCallbackSizeBytes)(CCallbackBase *this);
// };

// /* 3183 */
// struct __cppobj FriendGameInfo_t
// {
//   CGameID m_gameID;
//   unsigned int m_unGameIP;
//   unsigned __int16 m_usGamePort;
//   unsigned __int16 m_usQueryPort;
//   CSteamID m_steamIDLobby;
// };

// /* 3184 */
// struct __cppobj ISteamGameServer
// {
//   ISteamGameServer_vtbl *__vftable /*VFT*/;
// };

// /* 3185 */
// struct /*VFT*/ ISteamGameServer_vtbl
// {
//   void (__thiscall *LogOn)(ISteamGameServer *this);
//   void (__thiscall *LogOff)(ISteamGameServer *this);
//   bool (__thiscall *BLoggedOn)(ISteamGameServer *this);
//   bool (__thiscall *BSecure)(ISteamGameServer *this);
//   CSteamID *(__thiscall *GetSteamID)(ISteamGameServer *this, CSteamID *result);
//   bool (__thiscall *SendUserConnectAndAuthenticate)(ISteamGameServer *this, unsigned int, const void *, unsigned int, CSteamID *);
//   CSteamID *(__thiscall *CreateUnauthenticatedUserConnection)(ISteamGameServer *this, CSteamID *result);
//   void (__thiscall *SendUserDisconnect)(ISteamGameServer *this, CSteamID);
//   bool (__thiscall *BUpdateUserData)(ISteamGameServer *this, CSteamID, const char *, unsigned int);
//   bool (__thiscall *BSetServerType)(ISteamGameServer *this, unsigned int, unsigned int, unsigned __int16, unsigned __int16, unsigned __int16, const char *, const char *, bool);
//   void (__thiscall *UpdateServerStatus)(ISteamGameServer *this, int, int, int, const char *, const char *, const char *);
//   void (__thiscall *UpdateSpectatorPort)(ISteamGameServer *this, unsigned __int16);
//   void (__thiscall *SetGameTags)(ISteamGameServer *this, const char *);
//   void (__thiscall *GetGameplayStats)(ISteamGameServer *this);
//   unsigned __int64 (__thiscall *GetServerReputation)(ISteamGameServer *this);
//   bool (__thiscall *RequestUserGroupStatus)(ISteamGameServer *this, CSteamID, CSteamID);
//   unsigned int (__thiscall *GetPublicIP)(ISteamGameServer *this);
//   void (__thiscall *SetGameData)(ISteamGameServer *this, const char *);
//   EUserHasLicenseForAppResult (__thiscall *UserHasLicenseForApp)(ISteamGameServer *this, CSteamID, unsigned int);
// };

// /* 3186 */
// struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_69
// {
//   const void *pVFTable;
//   void *spare;
//   char name[69];
// };

// /* 3187 */
// struct __cppobj ISteamFriends
// {
//   ISteamFriends_vtbl *__vftable /*VFT*/;
// };

// /* 3188 */
// struct /*VFT*/ ISteamFriends_vtbl
// {
//   const char *(__thiscall *GetPersonaName)(ISteamFriends *this);
//   void (__thiscall *SetPersonaName)(ISteamFriends *this, const char *);
//   EPersonaState (__thiscall *GetPersonaState)(ISteamFriends *this);
//   int (__thiscall *GetFriendCount)(ISteamFriends *this, int);
//   CSteamID *(__thiscall *GetFriendByIndex)(ISteamFriends *this, CSteamID *result, int, int);
//   EFriendRelationship (__thiscall *GetFriendRelationship)(ISteamFriends *this, CSteamID);
//   EPersonaState (__thiscall *GetFriendPersonaState)(ISteamFriends *this, CSteamID);
//   const char *(__thiscall *GetFriendPersonaName)(ISteamFriends *this, CSteamID);
//   bool (__thiscall *GetFriendGamePlayed)(ISteamFriends *this, CSteamID, FriendGameInfo_t *);
//   const char *(__thiscall *GetFriendPersonaNameHistory)(ISteamFriends *this, CSteamID, int);
//   bool (__thiscall *HasFriend)(ISteamFriends *this, CSteamID, int);
//   int (__thiscall *GetClanCount)(ISteamFriends *this);
//   CSteamID *(__thiscall *GetClanByIndex)(ISteamFriends *this, CSteamID *result, int);
//   const char *(__thiscall *GetClanName)(ISteamFriends *this, CSteamID);
//   const char *(__thiscall *GetClanTag)(ISteamFriends *this, CSteamID);
//   int (__thiscall *GetFriendCountFromSource)(ISteamFriends *this, CSteamID);
//   CSteamID *(__thiscall *GetFriendFromSourceByIndex)(ISteamFriends *this, CSteamID *result, CSteamID, int);
//   bool (__thiscall *IsUserInSource)(ISteamFriends *this, CSteamID, CSteamID);
//   void (__thiscall *SetInGameVoiceSpeaking)(ISteamFriends *this, CSteamID, bool);
//   void (__thiscall *ActivateGameOverlay)(ISteamFriends *this, const char *);
//   void (__thiscall *ActivateGameOverlayToUser)(ISteamFriends *this, const char *, CSteamID);
//   void (__thiscall *ActivateGameOverlayToWebPage)(ISteamFriends *this, const char *);
//   void (__thiscall *ActivateGameOverlayToStore)(ISteamFriends *this, unsigned int);
//   void (__thiscall *SetPlayedWith)(ISteamFriends *this, CSteamID);
//   void (__thiscall *ActivateGameOverlayInviteDialog)(ISteamFriends *this, CSteamID);
//   int (__thiscall *GetSmallFriendAvatar)(ISteamFriends *this, CSteamID);
//   int (__thiscall *GetMediumFriendAvatar)(ISteamFriends *this, CSteamID);
//   int (__thiscall *GetLargeFriendAvatar)(ISteamFriends *this, CSteamID);
// };

// /* 3189 */
// struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_57
// {
//   const void *pVFTable;
//   void *spare;
//   char name[57];
// };

// /* 3190 */
// struct __cppobj ISteamMasterServerUpdater
// {
//   ISteamMasterServerUpdater_vtbl *__vftable /*VFT*/;
// };

// /* 3191 */
// struct /*VFT*/ ISteamMasterServerUpdater_vtbl
// {
//   void (__thiscall *SetActive)(ISteamMasterServerUpdater *this, bool);
//   void (__thiscall *SetHeartbeatInterval)(ISteamMasterServerUpdater *this, int);
//   bool (__thiscall *HandleIncomingPacket)(ISteamMasterServerUpdater *this, const void *, int, unsigned int, unsigned __int16);
//   int (__thiscall *GetNextOutgoingPacket)(ISteamMasterServerUpdater *this, void *, int, unsigned int *, unsigned __int16 *);
//   void (__thiscall *SetBasicServerData)(ISteamMasterServerUpdater *this, unsigned __int16, bool, const char *, const char *, unsigned __int16, bool, const char *);
//   void (__thiscall *ClearAllKeyValues)(ISteamMasterServerUpdater *this);
//   void (__thiscall *SetKeyValue)(ISteamMasterServerUpdater *this, const char *, const char *);
//   void (__thiscall *NotifyShutdown)(ISteamMasterServerUpdater *this);
//   bool (__thiscall *WasRestartRequested)(ISteamMasterServerUpdater *this);
//   void (__thiscall *ForceHeartbeat)(ISteamMasterServerUpdater *this);
//   bool (__thiscall *AddMasterServer)(ISteamMasterServerUpdater *this, const char *);
//   bool (__thiscall *RemoveMasterServer)(ISteamMasterServerUpdater *this, const char *);
//   int (__thiscall *GetNumMasterServers)(ISteamMasterServerUpdater *this);
//   int (__thiscall *GetMasterServerAddress)(ISteamMasterServerUpdater *this, int, char *, int);
// };

// /* 3192 */
// struct __cppobj ISteamUser
// {
//   ISteamUser_vtbl *__vftable /*VFT*/;
// };

// /* 3193 */
// struct /*VFT*/ ISteamUser_vtbl
// {
//   int (__thiscall *GetHSteamUser)(ISteamUser *this);
//   bool (__thiscall *BLoggedOn)(ISteamUser *this);
//   CSteamID *(__thiscall *GetSteamID)(ISteamUser *this, CSteamID *result);
//   int (__thiscall *InitiateGameConnection)(ISteamUser *this, void *, int, CSteamID, unsigned int, unsigned __int16, bool);
//   void (__thiscall *TerminateGameConnection)(ISteamUser *this, unsigned int, unsigned __int16);
//   void (__thiscall *TrackAppUsageEvent)(ISteamUser *this, CGameID, int, const char *);
//   bool (__thiscall *GetUserDataFolder)(ISteamUser *this, char *, int);
//   void (__thiscall *StartVoiceRecording)(ISteamUser *this);
//   void (__thiscall *StopVoiceRecording)(ISteamUser *this);
//   EVoiceResult (__thiscall *GetAvailableVoice)(ISteamUser *this, unsigned int *, unsigned int *);
//   EVoiceResult (__thiscall *GetVoice)(ISteamUser *this, bool, void *, unsigned int, unsigned int *, bool, void *, unsigned int, unsigned int *);
//   EVoiceResult (__thiscall *DecompressVoice)(ISteamUser *this, const void *, unsigned int, void *, unsigned int, unsigned int *);
//   unsigned int (__thiscall *GetAuthSessionTicket)(ISteamUser *this, void *, int, unsigned int *);
//   EBeginAuthSessionResult (__thiscall *BeginAuthSession)(ISteamUser *this, const void *, int, CSteamID);
//   void (__thiscall *EndAuthSession)(ISteamUser *this, CSteamID);
//   void (__thiscall *CancelAuthTicket)(ISteamUser *this, unsigned int);
//   EUserHasLicenseForAppResult (__thiscall *UserHasLicenseForApp)(ISteamUser *this, CSteamID, unsigned int);
//   bool (__thiscall *BIsBehindNAT)(ISteamUser *this);
//   void (__thiscall *AdvertiseGame)(ISteamUser *this, CSteamID, unsigned int, unsigned __int16);
//   unsigned __int64 (__thiscall *RequestEncryptedAppTicket)(ISteamUser *this, void *, int);
//   bool (__thiscall *GetEncryptedAppTicket)(ISteamUser *this, void *, int, unsigned int *);
// };

// /* 3194 */
// struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_70
// {
//   const void *pVFTable;
//   void *spare;
//   char name[70];
// };

// /* 3195 */
// struct EncryptedAppTicketResponse_t
// {
//   EResult m_eResult;
// };

// /* 3198 */
// struct __cppobj CCallResult<LiveSteamClient,EncryptedAppTicketResponse_t> : CCallbackBase
// {
//   unsigned __int64 m_hAPICall;
//   LiveSteamClient *m_pObj;
//   void (__thiscall *m_Func)(LiveSteamClient *this, EncryptedAppTicketResponse_t *, bool);
// };

// /* 3196 */
// struct __cppobj LiveSteamClient
// {
//   EResult resultOnRequestEncryptedAppTicket;
//   CCallResult<LiveSteamClient,EncryptedAppTicketResponse_t> m_SteamCallResultEncryptedAppTicket;
// };

// /* 3197 */
// struct /*VFT*/ CCallResult<LiveSteamClient,EncryptedAppTicketResponse_t>_vtbl
// {
//   void (__thiscall *Run)(CCallbackBase *this, void *, bool, unsigned __int64);
//   void (__thiscall *Run)(CCallbackBase *this, void *);
//   int (__thiscall *GetCallbackSizeBytes)(CCallbackBase *this);
// };

// /* 3199 */
// struct Achievement_t
// {
//   int m_eAchievementID;
//   const char *m_pchAchievementID;
//   char m_rgchName[128];
//   char m_rgchDescription[256];
//   bool m_bAchieved;
//   int m_iIconImage;
// };

// /* 3203 */
// struct __cppobj CCallback<CSteamAchievements,UserStatsReceived_t,0> : CCallbackBase
// {
//   CSteamAchievements *m_pObj;
//   void (__thiscall *m_Func)(CSteamAchievements *this, UserStatsReceived_t *);
// };

// /* 3206 */
// struct __cppobj CCallback<CSteamAchievements,UserStatsStored_t,0> : CCallbackBase
// {
//   CSteamAchievements *m_pObj;
//   void (__thiscall *m_Func)(CSteamAchievements *this, UserStatsStored_t *);
// };

// /* 3209 */
// struct __cppobj CCallback<CSteamAchievements,UserAchievementStored_t,0> : CCallbackBase
// {
//   CSteamAchievements *m_pObj;
//   void (__thiscall *m_Func)(CSteamAchievements *this, UserAchievementStored_t *);
// };

// /* 3200 */
// struct __cppobj CSteamAchievements
// {
//   bool m_needStatsStored;
//   unsigned __int64 m_iAppID;
//   Achievement_t *m_pAchievements;
//   int m_iNumAchievements;
//   bool m_bInitialized;
//   CCallback<CSteamAchievements,UserStatsReceived_t,0> m_CallbackUserStatsReceived;
//   CCallback<CSteamAchievements,UserStatsStored_t,0> m_CallbackUserStatsStored;
//   CCallback<CSteamAchievements,UserAchievementStored_t,0> m_CallbackAchievementStored;
// };

// /* 3201 */
// struct __cppobj __declspec(align(8)) UserStatsReceived_t
// {
//   unsigned __int64 m_nGameID;
//   EResult m_eResult;
//   __unaligned __declspec(align(1)) CSteamID m_steamIDUser;
// };

// /* 3204 */
// struct __declspec(align(8)) UserStatsStored_t
// {
//   unsigned __int64 m_nGameID;
//   EResult m_eResult;
// };

// /* 3207 */
// struct __declspec(align(8)) UserAchievementStored_t
// {
//   unsigned __int64 m_nGameID;
//   bool m_bGroupAchievement;
//   char m_rgchAchievementName[128];
//   unsigned int m_nCurProgress;
//   unsigned int m_nMaxProgress;
// };

// /* 3202 */
// struct /*VFT*/ CCallback<CSteamAchievements,UserStatsReceived_t,0>_vtbl
// {
//   void (__thiscall *Run)(CCallbackBase *this, void *, bool, unsigned __int64);
//   void (__thiscall *Run)(CCallbackBase *this, void *);
//   int (__thiscall *GetCallbackSizeBytes)(CCallbackBase *this);
// };

// /* 3205 */
// struct /*VFT*/ CCallback<CSteamAchievements,UserStatsStored_t,0>_vtbl
// {
//   void (__thiscall *Run)(CCallbackBase *this, void *, bool, unsigned __int64);
//   void (__thiscall *Run)(CCallbackBase *this, void *);
//   int (__thiscall *GetCallbackSizeBytes)(CCallbackBase *this);
// };

// /* 3208 */
// struct /*VFT*/ CCallback<CSteamAchievements,UserAchievementStored_t,0>_vtbl
// {
//   void (__thiscall *Run)(CCallbackBase *this, void *, bool, unsigned __int64);
//   void (__thiscall *Run)(CCallbackBase *this, void *);
//   int (__thiscall *GetCallbackSizeBytes)(CCallbackBase *this);
// };

// /* 3210 */
// struct $_TypeDescriptor$_extraBytes_64
// {
//   const void *pVFTable;
//   void *spare;
//   char name[64];
// };

// /* 3211 */
// struct __cppobj ISteamUtils
// {
//   ISteamUtils_vtbl *__vftable /*VFT*/;
// };

// /* 3212 */
// struct /*VFT*/ ISteamUtils_vtbl
// {
//   unsigned int (__thiscall *GetSecondsSinceAppActive)(ISteamUtils *this);
//   unsigned int (__thiscall *GetSecondsSinceComputerActive)(ISteamUtils *this);
//   EUniverse (__thiscall *GetConnectedUniverse)(ISteamUtils *this);
//   unsigned int (__thiscall *GetServerRealTime)(ISteamUtils *this);
//   const char *(__thiscall *GetIPCountry)(ISteamUtils *this);
//   bool (__thiscall *GetImageSize)(ISteamUtils *this, int, unsigned int *, unsigned int *);
//   bool (__thiscall *GetImageRGBA)(ISteamUtils *this, int, unsigned __int8 *, int);
//   bool (__thiscall *GetCSERIPPort)(ISteamUtils *this, unsigned int *, unsigned __int16 *);
//   unsigned __int8 (__thiscall *GetCurrentBatteryPower)(ISteamUtils *this);
//   unsigned int (__thiscall *GetAppID)(ISteamUtils *this);
//   void (__thiscall *SetOverlayNotificationPosition)(ISteamUtils *this, ENotificationPosition);
//   bool (__thiscall *IsAPICallCompleted)(ISteamUtils *this, unsigned __int64, bool *);
//   ESteamAPICallFailure (__thiscall *GetAPICallFailureReason)(ISteamUtils *this, unsigned __int64);
//   bool (__thiscall *GetAPICallResult)(ISteamUtils *this, unsigned __int64, void *, int, int, bool *);
//   void (__thiscall *RunFrame)(ISteamUtils *this);
//   unsigned int (__thiscall *GetIPCCallCount)(ISteamUtils *this);
//   void (__thiscall *SetWarningMessageHook)(ISteamUtils *this, void (__cdecl *)(int, const char *));
//   bool (__thiscall *IsOverlayEnabled)(ISteamUtils *this);
//   bool (__thiscall *BOverlayNeedsPresent)(ISteamUtils *this);
//   unsigned __int64 (__thiscall *CheckFileSignature)(ISteamUtils *this, const char *);
// };

// /* 3213 */
// struct __cppobj __unaligned __declspec(align(4)) LeaderboardEntry_t
// {
//   CSteamID m_steamIDUser;
//   int m_nGlobalRank;
//   int m_nScore;
//   int m_cDetails;
// };

// /* 3214 */
// struct __cppobj ISteamUserStats
// {
//   ISteamUserStats_vtbl *__vftable /*VFT*/;
// };

// /* 3215 */
// struct /*VFT*/ ISteamUserStats_vtbl
// {
//   bool (__thiscall *RequestCurrentStats)(ISteamUserStats *this);
//   bool (__thiscall *GetStat)(ISteamUserStats *this, const char *, float *);
//   bool (__thiscall *GetStat)(ISteamUserStats *this, const char *, int *);
//   bool (__thiscall *SetStat)(ISteamUserStats *this, const char *, float);
//   bool (__thiscall *SetStat)(ISteamUserStats *this, const char *, int);
//   bool (__thiscall *UpdateAvgRateStat)(ISteamUserStats *this, const char *, float, long double);
//   bool (__thiscall *GetAchievement)(ISteamUserStats *this, const char *, bool *);
//   bool (__thiscall *SetAchievement)(ISteamUserStats *this, const char *);
//   bool (__thiscall *ClearAchievement)(ISteamUserStats *this, const char *);
//   bool (__thiscall *GetAchievementAndUnlockTime)(ISteamUserStats *this, const char *, bool *, unsigned int *);
//   bool (__thiscall *StoreStats)(ISteamUserStats *this);
//   int (__thiscall *GetAchievementIcon)(ISteamUserStats *this, const char *);
//   const char *(__thiscall *GetAchievementDisplayAttribute)(ISteamUserStats *this, const char *, const char *);
//   bool (__thiscall *IndicateAchievementProgress)(ISteamUserStats *this, const char *, unsigned int, unsigned int);
//   unsigned __int64 (__thiscall *RequestUserStats)(ISteamUserStats *this, CSteamID);
//   bool (__thiscall *GetUserStat)(ISteamUserStats *this, CSteamID, const char *, float *);
//   bool (__thiscall *GetUserStat)(ISteamUserStats *this, CSteamID, const char *, int *);
//   bool (__thiscall *GetUserAchievement)(ISteamUserStats *this, CSteamID, const char *, bool *);
//   bool (__thiscall *GetUserAchievementAndUnlockTime)(ISteamUserStats *this, CSteamID, const char *, bool *, unsigned int *);
//   bool (__thiscall *ResetAllStats)(ISteamUserStats *this, bool);
//   unsigned __int64 (__thiscall *FindOrCreateLeaderboard)(ISteamUserStats *this, const char *, ELeaderboardSortMethod, ELeaderboardDisplayType);
//   unsigned __int64 (__thiscall *FindLeaderboard)(ISteamUserStats *this, const char *);
//   const char *(__thiscall *GetLeaderboardName)(ISteamUserStats *this, unsigned __int64);
//   int (__thiscall *GetLeaderboardEntryCount)(ISteamUserStats *this, unsigned __int64);
//   ELeaderboardSortMethod (__thiscall *GetLeaderboardSortMethod)(ISteamUserStats *this, unsigned __int64);
//   ELeaderboardDisplayType (__thiscall *GetLeaderboardDisplayType)(ISteamUserStats *this, unsigned __int64);
//   unsigned __int64 (__thiscall *DownloadLeaderboardEntries)(ISteamUserStats *this, unsigned __int64, ELeaderboardDataRequest, int, int);
//   bool (__thiscall *GetDownloadedLeaderboardEntry)(ISteamUserStats *this, unsigned __int64, int, LeaderboardEntry_t *, int *, int);
//   unsigned __int64 (__thiscall *UploadLeaderboardScore)(ISteamUserStats *this, unsigned __int64, ELeaderboardUploadScoreMethod, int, const int *, int);
//   unsigned __int64 (__thiscall *GetNumberOfCurrentPlayers)(ISteamUserStats *this);
// };

// /* 3216 */
// struct __cppobj ISteamRemoteStorage
// {
//   ISteamRemoteStorage_vtbl *__vftable /*VFT*/;
// };

// /* 3217 */
// struct /*VFT*/ ISteamRemoteStorage_vtbl
// {
//   bool (__thiscall *FileWrite)(ISteamRemoteStorage *this, const char *, const void *, int);
//   int (__thiscall *GetFileSize)(ISteamRemoteStorage *this, const char *);
//   int (__thiscall *FileRead)(ISteamRemoteStorage *this, const char *, void *, int);
//   bool (__thiscall *FileExists)(ISteamRemoteStorage *this, const char *);
//   int (__thiscall *GetFileCount)(ISteamRemoteStorage *this);
//   const char *(__thiscall *GetFileNameAndSize)(ISteamRemoteStorage *this, int, int *);
//   bool (__thiscall *GetQuota)(ISteamRemoteStorage *this, int *, int *);
// };

// /* 3218 */
// struct __cppobj ISteamClient
// {
//   ISteamClient_vtbl *__vftable /*VFT*/;
// };

// /* 3233 */
// struct /*VFT*/ ISteamClient_vtbl
// {
//   int (__thiscall *CreateSteamPipe)(ISteamClient *this);
//   bool (__thiscall *BReleaseSteamPipe)(ISteamClient *this, int);
//   int (__thiscall *ConnectToGlobalUser)(ISteamClient *this, int);
//   int (__thiscall *CreateLocalUser)(ISteamClient *this, int *, EAccountType);
//   void (__thiscall *ReleaseUser)(ISteamClient *this, int, int);
//   ISteamUser *(__thiscall *GetISteamUser)(ISteamClient *this, int, int, const char *);
//   ISteamGameServer *(__thiscall *GetISteamGameServer)(ISteamClient *this, int, int, const char *);
//   void (__thiscall *SetLocalIPBinding)(ISteamClient *this, unsigned int, unsigned __int16);
//   ISteamFriends *(__thiscall *GetISteamFriends)(ISteamClient *this, int, int, const char *);
//   ISteamUtils *(__thiscall *GetISteamUtils)(ISteamClient *this, int, const char *);
//   ISteamMatchmaking *(__thiscall *GetISteamMatchmaking)(ISteamClient *this, int, int, const char *);
//   ISteamMasterServerUpdater *(__thiscall *GetISteamMasterServerUpdater)(ISteamClient *this, int, int, const char *);
//   ISteamMatchmakingServers *(__thiscall *GetISteamMatchmakingServers)(ISteamClient *this, int, int, const char *);
//   void *(__thiscall *GetISteamGenericInterface)(ISteamClient *this, int, int, const char *);
//   ISteamUserStats *(__thiscall *GetISteamUserStats)(ISteamClient *this, int, int, const char *);
//   struct ISteamGameServerStats *(__thiscall *GetISteamGameServerStats)(ISteamClient *this, int, int, const char *);
//   ISteamApps *(__thiscall *GetISteamApps)(ISteamClient *this, int, int, const char *);
//   ISteamNetworking *(__thiscall *GetISteamNetworking)(ISteamClient *this, int, int, const char *);
//   ISteamRemoteStorage *(__thiscall *GetISteamRemoteStorage)(ISteamClient *this, int, int, const char *);
//   void (__thiscall *RunFrame)(ISteamClient *this);
//   unsigned int (__thiscall *GetIPCCallCount)(ISteamClient *this);
//   void (__thiscall *SetWarningMessageHook)(ISteamClient *this, void (__cdecl *)(int, const char *));
// };

// /* 3219 */
// struct __cppobj ISteamMatchmaking
// {
//   ISteamMatchmaking_vtbl *__vftable /*VFT*/;
// };

// /* 3223 */
// struct __cppobj ISteamMatchmakingServers
// {
//   ISteamMatchmakingServers_vtbl *__vftable /*VFT*/;
// };

// /* 3231 */
// struct __cppobj ISteamApps
// {
//   ISteamApps_vtbl *__vftable /*VFT*/;
// };

// /* 3220 */
// struct /*VFT*/ ISteamMatchmaking_vtbl
// {
//   int (__thiscall *GetFavoriteGameCount)(ISteamMatchmaking *this);
//   bool (__thiscall *GetFavoriteGame)(ISteamMatchmaking *this, int, unsigned int *, unsigned int *, unsigned __int16 *, unsigned __int16 *, unsigned int *, unsigned int *);
//   int (__thiscall *AddFavoriteGame)(ISteamMatchmaking *this, unsigned int, unsigned int, unsigned __int16, unsigned __int16, unsigned int, unsigned int);
//   bool (__thiscall *RemoveFavoriteGame)(ISteamMatchmaking *this, unsigned int, unsigned int, unsigned __int16, unsigned __int16, unsigned int);
//   unsigned __int64 (__thiscall *RequestLobbyList)(ISteamMatchmaking *this);
//   void (__thiscall *AddRequestLobbyListStringFilter)(ISteamMatchmaking *this, const char *, const char *, ELobbyComparison);
//   void (__thiscall *AddRequestLobbyListNumericalFilter)(ISteamMatchmaking *this, const char *, int, ELobbyComparison);
//   void (__thiscall *AddRequestLobbyListNearValueFilter)(ISteamMatchmaking *this, const char *, int);
//   void (__thiscall *AddRequestLobbyListFilterSlotsAvailable)(ISteamMatchmaking *this, int);
//   void (__thiscall *AddRequestLobbyListDistanceFilter)(ISteamMatchmaking *this, ELobbyDistanceFilter);
//   void (__thiscall *AddRequestLobbyListResultCountFilter)(ISteamMatchmaking *this, int);
//   CSteamID *(__thiscall *GetLobbyByIndex)(ISteamMatchmaking *this, CSteamID *result, int);
//   unsigned __int64 (__thiscall *CreateLobby)(ISteamMatchmaking *this, ELobbyType, int);
//   unsigned __int64 (__thiscall *JoinLobby)(ISteamMatchmaking *this, CSteamID);
//   void (__thiscall *LeaveLobby)(ISteamMatchmaking *this, CSteamID);
//   bool (__thiscall *InviteUserToLobby)(ISteamMatchmaking *this, CSteamID, CSteamID);
//   int (__thiscall *GetNumLobbyMembers)(ISteamMatchmaking *this, CSteamID);
//   CSteamID *(__thiscall *GetLobbyMemberByIndex)(ISteamMatchmaking *this, CSteamID *result, CSteamID, int);
//   const char *(__thiscall *GetLobbyData)(ISteamMatchmaking *this, CSteamID, const char *);
//   bool (__thiscall *SetLobbyData)(ISteamMatchmaking *this, CSteamID, const char *, const char *);
//   int (__thiscall *GetLobbyDataCount)(ISteamMatchmaking *this, CSteamID);
//   bool (__thiscall *GetLobbyDataByIndex)(ISteamMatchmaking *this, CSteamID, int, char *, int, char *, int);
//   bool (__thiscall *DeleteLobbyData)(ISteamMatchmaking *this, CSteamID, const char *);
//   const char *(__thiscall *GetLobbyMemberData)(ISteamMatchmaking *this, CSteamID, CSteamID, const char *);
//   void (__thiscall *SetLobbyMemberData)(ISteamMatchmaking *this, CSteamID, const char *, const char *);
//   bool (__thiscall *SendLobbyChatMsg)(ISteamMatchmaking *this, CSteamID, const void *, int);
//   int (__thiscall *GetLobbyChatEntry)(ISteamMatchmaking *this, CSteamID, int, CSteamID *, void *, int, EChatEntryType *);
//   bool (__thiscall *RequestLobbyData)(ISteamMatchmaking *this, CSteamID);
//   void (__thiscall *SetLobbyGameServer)(ISteamMatchmaking *this, CSteamID, unsigned int, unsigned __int16, CSteamID);
//   bool (__thiscall *GetLobbyGameServer)(ISteamMatchmaking *this, CSteamID, unsigned int *, unsigned __int16 *, CSteamID *);
//   bool (__thiscall *SetLobbyMemberLimit)(ISteamMatchmaking *this, CSteamID, int);
//   int (__thiscall *GetLobbyMemberLimit)(ISteamMatchmaking *this, CSteamID);
//   bool (__thiscall *SetLobbyType)(ISteamMatchmaking *this, CSteamID, ELobbyType);
//   bool (__thiscall *SetLobbyJoinable)(ISteamMatchmaking *this, CSteamID, bool);
//   CSteamID *(__thiscall *GetLobbyOwner)(ISteamMatchmaking *this, CSteamID *result, CSteamID);
//   bool (__thiscall *SetLobbyOwner)(ISteamMatchmaking *this, CSteamID, CSteamID);
// };

// /* 3230 */
// struct /*VFT*/ ISteamMatchmakingServers_vtbl
// {
//   void *(__thiscall *RequestInternetServerList)(ISteamMatchmakingServers *this, unsigned int, MatchMakingKeyValuePair_t **, unsigned int, ISteamMatchmakingServerListResponse *);
//   void *(__thiscall *RequestLANServerList)(ISteamMatchmakingServers *this, unsigned int, ISteamMatchmakingServerListResponse *);
//   void *(__thiscall *RequestFriendsServerList)(ISteamMatchmakingServers *this, unsigned int, MatchMakingKeyValuePair_t **, unsigned int, ISteamMatchmakingServerListResponse *);
//   void *(__thiscall *RequestFavoritesServerList)(ISteamMatchmakingServers *this, unsigned int, MatchMakingKeyValuePair_t **, unsigned int, ISteamMatchmakingServerListResponse *);
//   void *(__thiscall *RequestHistoryServerList)(ISteamMatchmakingServers *this, unsigned int, MatchMakingKeyValuePair_t **, unsigned int, ISteamMatchmakingServerListResponse *);
//   void *(__thiscall *RequestSpectatorServerList)(ISteamMatchmakingServers *this, unsigned int, MatchMakingKeyValuePair_t **, unsigned int, ISteamMatchmakingServerListResponse *);
//   void (__thiscall *ReleaseRequest)(ISteamMatchmakingServers *this, void *);
//   gameserveritem_t *(__thiscall *GetServerDetails)(ISteamMatchmakingServers *this, void *, int);
//   void (__thiscall *CancelQuery)(ISteamMatchmakingServers *this, void *);
//   void (__thiscall *RefreshQuery)(ISteamMatchmakingServers *this, void *);
//   bool (__thiscall *IsRefreshing)(ISteamMatchmakingServers *this, void *);
//   int (__thiscall *GetServerCount)(ISteamMatchmakingServers *this, void *);
//   void (__thiscall *RefreshServer)(ISteamMatchmakingServers *this, void *, int);
//   int (__thiscall *PingServer)(ISteamMatchmakingServers *this, unsigned int, unsigned __int16, ISteamMatchmakingPingResponse *);
//   int (__thiscall *PlayerDetails)(ISteamMatchmakingServers *this, unsigned int, unsigned __int16, ISteamMatchmakingPlayersResponse *);
//   int (__thiscall *ServerRules)(ISteamMatchmakingServers *this, unsigned int, unsigned __int16, ISteamMatchmakingRulesResponse *);
//   void (__thiscall *CancelServerQuery)(ISteamMatchmakingServers *this, int);
// };

// /* 3232 */
// struct /*VFT*/ ISteamApps_vtbl
// {
//   bool (__thiscall *BIsSubscribed)(ISteamApps *this);
//   bool (__thiscall *BIsLowViolence)(ISteamApps *this);
//   bool (__thiscall *BIsCybercafe)(ISteamApps *this);
//   bool (__thiscall *BIsVACBanned)(ISteamApps *this);
//   const char *(__thiscall *GetCurrentGameLanguage)(ISteamApps *this);
//   const char *(__thiscall *GetAvailableGameLanguages)(ISteamApps *this);
//   bool (__thiscall *BIsSubscribedApp)(ISteamApps *this, unsigned int);
//   bool (__thiscall *BIsDlcInstalled)(ISteamApps *this, unsigned int);
// };

// /* 3221 */
// struct __cppobj ISteamMatchmakingServerListResponse
// {
//   ISteamMatchmakingServerListResponse_vtbl *__vftable /*VFT*/;
// };

// /* 3224 */
// struct __cppobj ISteamMatchmakingPingResponse
// {
//   ISteamMatchmakingPingResponse_vtbl *__vftable /*VFT*/;
// };

// /* 3226 */
// struct __cppobj ISteamMatchmakingPlayersResponse
// {
//   ISteamMatchmakingPlayersResponse_vtbl *__vftable /*VFT*/;
// };

// /* 3228 */
// struct __cppobj ISteamMatchmakingRulesResponse
// {
//   ISteamMatchmakingRulesResponse_vtbl *__vftable /*VFT*/;
// };

// /* 3222 */
// struct /*VFT*/ ISteamMatchmakingServerListResponse_vtbl
// {
//   void (__thiscall *ServerResponded)(ISteamMatchmakingServerListResponse *this, void *, int);
//   void (__thiscall *ServerFailedToRespond)(ISteamMatchmakingServerListResponse *this, void *, int);
//   void (__thiscall *RefreshComplete)(ISteamMatchmakingServerListResponse *this, void *, EMatchMakingServerResponse);
// };

// /* 3225 */
// struct /*VFT*/ ISteamMatchmakingPingResponse_vtbl
// {
//   void (__thiscall *ServerResponded)(ISteamMatchmakingPingResponse *this, gameserveritem_t *);
//   void (__thiscall *ServerFailedToRespond)(ISteamMatchmakingPingResponse *this);
// };

// /* 3227 */
// struct /*VFT*/ ISteamMatchmakingPlayersResponse_vtbl
// {
//   void (__thiscall *AddPlayerToList)(ISteamMatchmakingPlayersResponse *this, const char *, int, float);
//   void (__thiscall *PlayersFailedToRespond)(ISteamMatchmakingPlayersResponse *this);
//   void (__thiscall *PlayersRefreshComplete)(ISteamMatchmakingPlayersResponse *this);
// };

// /* 3229 */
// struct /*VFT*/ ISteamMatchmakingRulesResponse_vtbl
// {
//   void (__thiscall *RulesResponded)(ISteamMatchmakingRulesResponse *this, const char *, const char *);
//   void (__thiscall *RulesFailedToRespond)(ISteamMatchmakingRulesResponse *this);
//   void (__thiscall *RulesRefreshComplete)(ISteamMatchmakingRulesResponse *this);
// };

// /* 3234 */
// struct personalBest_t
// {
//   const char *name;
//   const char *prefix;
//   int value;
//   int delta;
//   int rating;
// };

// /* 3235 */
// struct statsMilestone_t
// {
//   statsMilestoneTypes_t type;
//   unsigned __int8 milestone;
//   unsigned __int8 index;
//   const char *name;
// };

// /* 3236 */
// struct challengeInfo_t
// {
//   unsigned __int8 milestone;
//   unsigned __int8 index;
//   unsigned __int16 flags;
//   statsMilestoneTypes_t type;
//   int numToTargetValue;
//   int xpReward;
//   int cpReward;
//   int targetValue;
//   int currentValue;
//   int prevTarget;
//   const char *name;
// };

/* 3237 */
union ddlResult_t
{
  unsigned int intValue;
  unsigned __int64 int64Value;
  float floatValue;
  char stringValue[64];
};

// /* 3238 */
// struct __declspec(align(8)) SessionJoinData
// {
//   bool active;
//   int privateSlot;
//   int slot;
//   unsigned __int64 player;
//   SessionData_s *session;
// };

// /* 3239 */
// struct SessionCreateData
// {
//   bool active;
//   SessionData_s *session;
// };

// /* 3240 */
// struct __cppobj SessionGraveYard
// {
//   bool active;
//   SessionData_s sessionData;
// };

// /* 3241 */
// struct qosPayload_s
// {
//   int protocol;
//   int isMP;
//   int isMigrating;
//   int numAvailableSlots;
//   int maxLocalPlayersAllowed;
//   int allowGuests;
//   int isMatchEnding;
//   int isLoading;
// };

// /* 3242 */
// struct MapnameRichPresenceInfo
// {
//   char mapname[32];
//   int context;
//   int mapPack;
// };

// /* 3243 */
// struct __cppobj __declspec(align(4)) PublicProfileInfo : bdProfileInfo
// {
//   int m_memberVERSION;
//   unsigned __int8 m_memberddl[257];
// };

// /* 3244 */
// struct /*VFT*/ PublicProfileInfo_vtbl
// {
//   void (__thiscall *~bdTaskResult)(bdTaskResult *this);
//   bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
//   void (__thiscall *serialize)(bdProfileInfo *this, bdByteBuffer *);
// };

// /* 3245 */
// struct __declspec(align(4)) CompositeEmblemLayer
// {
//   __int16 icon;
//   int colorIdx;
//   float pos[2];
//   float scale[2];
//   float angle;
//   bool outline;
//   bool flip;
// };

// /* 3246 */
// struct __declspec(align(8)) PCacheComponent
// {
//   unsigned __int64 xuid;
//   int controllerIndex;
//   int type;
//   unsigned int updateTime;
//   unsigned int touchTime;
//   unsigned int state;
// };

// /* 3247 */
// struct PCachePublicProfile
// {
//   PCacheComponent c;
//   char ddl[256];
// };

// /* 3248 */
// struct PCacheEntry
// {
//   unsigned __int64 xuid;
//   int controllerIndex;
//   unsigned int neighborhood;
//   unsigned int hash;
//   unsigned int touchTime;
//   PCacheComponent *components[2];
// };

// /* 3249 */
// struct PCachePlayerEmblem
// {
//   PCacheComponent c;
//   CompositeEmblemLayer layers[12];
//   int jobID;
//   GfxImage *image;
//   __int16 backgroundID;
//   Material *background;
// };

// /* 3250 */
// struct PCacheComponentPool
// {
//   int count;
//   int componentSize;
//   void *array;
//   unsigned int updateInterval;
//   void (__cdecl *release)(PCacheComponent *);
// };

// /* 3251 */
// struct TickerMessageQueue
// {
//   char messageToBeAddedToTicker[10][128];
//   int newsItemCount;
// };

// /* 3252 */
// struct countersNewsState_t
// {
//   int total;
//   int numProcessed;
//   int counters[10];
//   int lastFlushTime;
// };

// /* 3253 */
// struct ConversionArguments
// {
//   int argCount;
//   const char *args[9];
// };

// /* 3254 */
// struct __cppobj LeaderBoardResult<LeaderBoardRow<10>,100> : bdStatsInfo
// {
//   LeaderBoardRow<10> m_leaderBoardEntries[100];
// };

// /* 3255 */
// struct /*VFT*/ LeaderBoardResult<LeaderBoardRow<10>,100>_vtbl
// {
//   void (__thiscall *~bdTaskResult)(bdTaskResult *this);
//   bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
//   void (__thiscall *serialize)(bdStatsInfo *this, bdByteBuffer *);
// };

// /* 3256 */
// struct __cppobj __declspec(align(8)) Leaderboard
// {
//   LeaderBoardResult<LeaderBoardRow<10>,100> userStats;
//   LbType type;
//   int offset;
//   int curIdx;
//   bool forceRefresh;
//   bool isUpdating;
//   bool notSameFilter;
//   bool notSameResetPeriod;
//   bool notSamePrestigeMode;
//   int lastUpdate;
//   int filter;
//   int lbTypeByResetPeriod;
//   bool prestigeMode;
//   int numResults;
//   int totalResults;
//   LeaderBoardRow<10> playerLbRow;
//   int numMatchesPlayed;
// };

// /* 3257 */
// struct __cppobj LbGlob
// {
//   overlappedTask tasks[32];
//   LbPlayerStat playerStats[1];
//   LeaderBoardRow<10> escrowData[1];
//   int escrowBalance[1];
//   Leaderboard leaderboards[16];
//   char feederText[32];
//   unsigned __int64 xuids[101];
//   unsigned int numXuids;
//   LbType currentLbType;
//   LeaderBoardRow<10> weeklyEntry[1];
//   LeaderBoardRow<10> prestigeWeeklyEntry[1];
//   LeaderBoardRow<10> monthlyEntry[1];
//   LeaderBoardRow<10> prestigeMonthlyEntry[1];
// };

// /* 3258 */
// struct LBSelectedPlayerInfo
// {
//   unsigned __int64 playerXuid;
//   char gamerTag[64];
// };

// /* 3259 */
// struct GroupMembership
// {
//   unsigned int bits[32];
//   int dirty;
//   int updateTime;
// };

// /* 3260 */
// struct GroupSet
// {
//   const char *name;
//   bool exclusive;
//   const char **groupNames;
//   int capacity;
//   unsigned int start;
// };

// /* 3261 */
// struct __cppobj __declspec(align(8)) fshCacheFileDetails_t
// {
//   bdFileMetaData descriptor;
//   fileShareLocation location;
// };

// /* 3262 */
// struct __cppobj __declspec(align(8)) fshCacheRatingDetails_t
// {
//   unsigned __int64 fileID;
//   bdVoteRankStatsInfo rating;
//   fileShareLocation location;
// };

// /* 3263 */
// struct fileShareFilter
// {
//   int fileType;
//   int mapName;
//   int gameType;
//   int age;
//   int userTag;
//   int playerPref;
//   int sortBy;
// };

// /* 3264 */
// struct __declspec(align(8)) fileRating_t
// {
//   unsigned __int64 xuid;
//   unsigned __int64 fileID;
//   unsigned __int8 rating;
// };

// /* 3265 */
// struct __declspec(align(8)) ratingHistory_t
// {
//   _BYTE files[3200];
//   int next;
// };

// /* 3266 */
// struct fileSharePooledDetails_t
// {
//   int kills;
//   int deaths;
//   int alliesScore;
//   int axisScore;
//   int mapID;
//   int team;
//   int score;
//   int xpEarned;
//   int wagerPayout;
//   int position;
//   int isWager;
//   bool isValid;
//   fileSharePooledFileContext_t context;
// };

// /* 3267 */
// struct contractRequirement_t
// {
//   char *reqType;
//   char *reqData;
// };

// /* 3268 */
// struct contractInfo_t
// {
//   char *name;
//   char *description;
//   char *statType;
//   char *statName;
//   contractRequirement_t requirements[5];
//   int cost;
//   int count;
//   char *expirationType;
//   int expirationData;
//   int rewardXP;
//   int rewardCP;
//   unsigned __int8 timesPurchasable;
//   int unlockLevel;
//   int cooldown;
//   unsigned __int8 category;
//   int progressInterval;
//   char *resetProgressEvents;
//   int cycle;
// };

// /* 3269 */
// struct sortedItemsData_t
// {
//   int itemIndex;
//   float sortKey;
//   int param1;
//   int param2;
//   int param3;
// };

// /* 3270 */
// struct snd_speaker_angle
// {
//   snd_speaker_flag speaker;
//   float angle;
// };

// /* 3271 */
// struct snd_speaker_config
// {
//   const char *name;
//   snd_speaker_flag outputFormat;
//   unsigned int speakerCount;
//   unsigned int speakerMapCount;
//   unsigned int angleCount;
//   snd_speaker_angle angles[8];
// };

// /* 3272 */
// struct snd_fader_t
// {
//   float value;
//   float goal;
//   float rate;
// };

// /* 3273 */
// struct snd_speaker_map
// {
//   int input_channel_count;
//   int output_channel_count;
//   float volumes[16];
// };

// /* 3274 */
// struct __cppobj __declspec(align(8)) scoped_performance_error
// {
//   long double threshold;
//   unsigned __int64 start;
//   const char *what;
// };

// /* 3275 */
// struct snd_stream_file
// {
//   char filename[260];
//   int handle;
//   int age;
//   unsigned int size;
//   bool shared;
//   unsigned __int64 base_offset;
// };

// /* 3276 */
// struct __declspec(align(8)) snd_pack_file
// {
//   snd_stream_file file;
//   PackIndex index;
// };

// /* 3277 */
// struct snd_buffer
// {
//   char *data;
//   int reference_count;
//   char filename[260];
//   unsigned int offset_in_file;
//   unsigned int data_size;
//   unsigned int file_size;
// };

// /* 3278 */
// struct __cppobj __declspec(align(8)) snd_stream
// {
//   char filename[260];
//   snd_asset header;
//   tlAtomicMutex mutex;
//   char *window_return[3];
//   unsigned int head;
//   unsigned int read;
//   unsigned int stream_length;
//   snd_buffer *buffers[2];
//   int buffer_references[2];
//   unsigned int prime_size;
//   char *prime_data;
//   int windows_in_use;
//   bool looping;
//   bool error;
//   bool in_use;
//   bool head_at_eof;
//   bool have_header;
// };

// /* 3279 */
// struct snd_subtitle
// {
//   unsigned int lengthMs;
//   const char *subtitle;
// };

// /* 3280 */
// struct snd_playback
// {
//   int id;
//   float attenuation;
//   int lengthMs;
//   int playedMs;
// };

// /* 3281 */
// struct snd_playback_update
// {
//   snd_playback *playback;
//   float attenuation;
//   unsigned int lengthMs;
//   unsigned int playedMs;
// };

// /* 3282 */
// struct snd_ent_update
// {
//   SndEntHandle handle;
// };

// /* 3283 */
// struct snd_playback_free
// {
//   snd_playback *playback;
// };

// /* 3284 */
// struct snd_loop_at
// {
//   unsigned int id;
//   float origin[3];
// };

// /* 3285 */
// struct snd_set_context
// {
//   unsigned int type;
//   unsigned int value;
// };

// /* 3286 */
// struct snd_line_at
// {
//   unsigned int id;
//   float origin[2][3];
// };

// /* 3287 */
// struct sndLengthNotifyInfo
// {
//   snd_length_type id[4];
//   void *data[4];
//   int count;
// };

// /* 3288 */
// struct snd_length
// {
//   unsigned int lengthMs;
//   unsigned int ent;
// };

// /* 3289 */
// struct SndFileSpecificVoiceInfo
// {
//   SndFileLoadingState loadingState;
//   int srcChannelCount;
//   int baserate;
//   int endtime;
//   int totalMsec;
// };

// /* 3290 */
// struct __declspec(align(4)) snd_enveffect
// {
//   unsigned int reverbId;
//   float drylevel;
//   float drygoal;
//   float dryrate;
//   float wetlevel;
//   float wetgoal;
//   float wetrate;
//   bool active;
// };

// /* 3291 */
// struct orientation_t
// {
//   float origin[3];
//   float axis[3][3];
// };

// /* 3292 */
// union snd_notify_context
// {
//   snd_ent_update ent_update;
//   snd_subtitle subtitle;
//   snd_length length;
//   snd_playback_free playback_free;
//   snd_playback_update playback_update;
// };

// /* 3293 */
// struct snd_voice_t
// {
//   SndFileSpecificVoiceInfo soundFileInfo;
//   SndEntHandle sndEnt;
//   snd_entity_update entity_update;
//   int group;
//   int startDelay;
//   int startTime;
//   int looptime;
//   int totalMsec;
//   snd_playback *playback;
//   int playbackId;
//   int firstPlaybackId;
//   sndLengthNotifyInfo lengthNotifyInfo;
//   const snd_alias_t *alias;
//   float offset[3];
//   float position[3];
//   float velocity[3];
//   float orientation[3][3];
//   float direction[3];
//   float fluxVelocity[3];
//   float baseDistance;
//   float distanceAttenuation;
//   float reverbAttenuation;
//   float cylinderAttenuation;
//   float volModSeed;
//   float volModStart;
//   float pitchModSeed;
//   float globalPriority;
//   snd_fader_t doppler;
//   snd_fader_t fade;
//   snd_fader_t script_fade;
//   snd_fader_t script_pitch;
//   snd_fader_t losOcclusion;
//   int losHitCache;
//   int closestListenerIndex;
//   int voiceStartTime;
//   float dryLevel;
//   float wetLevel;
//   float futzBlend;
//   snd_speaker_map pan;
//   snd_speaker_map panGoal;
//   bool paused;
//   bool timescale;
//   bool positionUpdated;
//   bool pitchShift;
//   __int64 played;
// };

// /* 3294 */
// struct snd_occlusion_trace_t
// {
//   float listener[3];
//   float playback[3];
//   int cache;
//   int id;
//   float occlusion;
// };

// /* 3295 */
// struct __declspec(align(4)) snd_game_state
// {
//   float timescale;
//   unsigned int cgTime;
//   unsigned int seed;
//   bool gamePaused;
//   bool mature;
// };

// /* 3296 */
// struct snd_listener
// {
//   orientation_t orient;
//   int clientNum;
//   bool active;
//   team_t team;
// };

// /* 3297 */
// struct snd_line_emitter
// {
//   unsigned int id;
//   float origin[2][3];
//   const snd_alias_list_t *alias;
// };

// /* 3298 */
// struct snd_loop_emitter
// {
//   unsigned int id;
//   float origin[3];
//   const snd_alias_list_t *alias;
// };

// /* 3299 */
// struct snd_snapshot_category
// {
//   snd_fader_t attenuation[64];
//   snd_fader_t occlusion[64];
//   unsigned int snapshot;
//   float length;
//   float amount;
// };

// /* 3300 */
// struct snd_dsp_meters
// {
//   float p;
//   float vu;
//   float dyn1Gain;
//   float dyn1Level;
//   float dyn2Gain;
//   float dyn2Level;
// };

// /* 3301 */
// struct snd_ent_state
// {
//   SndEntHandle handle;
//   float origin[3];
//   float velocity[3];
//   float orientation[3][3];
//   unsigned int lastUsed;
//   snd_ent_state *next;
// };

// /* 3302 */
// struct snd_alias_name_context
// {
//   char name[48];
//   unsigned int id;
// };

// /* 3303 */
// struct snd_play_context
// {
//   unsigned int alias;
//   int fadeTimeMs;
//   float attenuation;
//   SndEntHandle entHandle;
//   int notify;
//   float position[3];
//   float direction[3];
//   snd_playback *playback;
// };

// /* 3304 */
// struct snd_stop_alias_context
// {
//   SndEntHandle ent;
//   unsigned int alias_name;
// };

// /* 3305 */
// struct snd_stop_ent_context
// {
//   SndEntHandle ent;
// };

// /* 3306 */
// struct snd_cinematic_start_context
// {
//   float volume;
// };

// /* 3307 */
// struct snd_disconnect_listener_context
// {
//   int listener;
// };

// /* 3308 */
// struct snd_set_listener_context
// {
//   int listener;
//   int clientNum;
//   team_t team;
//   float origin[3];
//   float axis[3][3];
// };

// /* 3309 */
// struct snd_stop_sounds_context
// {
//   snd_stop_sound_flags flags;
// };

// /* 3310 */
// struct snd_set_environment_effects_context
// {
//   int priority;
//   unsigned int id;
//   float drylevel;
//   float wetlevel;
//   int fademsec;
// };

// /* 3311 */
// struct snd_deactivate_environment_effects_context
// {
//   int priority;
//   int fademsec;
// };

// /* 3312 */
// struct snd_set_playback_attenuation_context
// {
//   int id;
//   float attenuation;
// };

// /* 3313 */
// struct snd_set_playback_attenuation_rate_context
// {
//   int id;
//   float rate;
// };

// /* 3314 */
// struct snd_set_playback_pitch_context
// {
//   int id;
//   float pitch;
// };

// /* 3315 */
// struct snd_set_playback_pitch_rate_context
// {
//   int id;
//   float rate;
// };

// /* 3316 */
// struct snd_stop_playback_context
// {
//   int id;
// };

// /* 3317 */
// struct snd_snapshot_context
// {
//   snd_snapshot_type type;
//   unsigned int id;
//   float length;
//   float amount;
// };

// /* 3318 */
// struct snd_set_ent_state_context
// {
//   SndEntHandle handle;
//   float origin[3];
//   float velocity[3];
//   float orientation[3][3];
// };

// /* 3319 */
// struct snd_set_game_state_context
// {
//   bool is_paused;
//   bool is_mature;
//   float timescale;
//   unsigned int cg_time;
//   unsigned int seed;
// };

// /* 3320 */
// struct snd_script_timescale
// {
//   float value;
// };

// /* 3321 */
// union snd_command_context
// {
//   snd_alias_name_context alias_name;
//   snd_play_context play;
//   snd_stop_alias_context stop_alias;
//   snd_stop_ent_context stop_ent;
//   snd_cinematic_start_context notify_cinematic_start;
//   snd_disconnect_listener_context disconnect_listener;
//   snd_set_listener_context set_listener;
//   snd_stop_sounds_context stop_sounds;
//   snd_set_environment_effects_context set_environment_effects;
//   snd_deactivate_environment_effects_context deactivate_environment_effects;
//   snd_set_playback_attenuation_context set_playback_attenuation;
//   snd_set_playback_attenuation_rate_context set_playback_attenuation_rate;
//   snd_set_playback_pitch_context set_playback_pitch;
//   snd_set_playback_pitch_rate_context set_playback_pitch_rate;
//   snd_stop_playback_context stop_playback;
//   snd_snapshot_context snapshot;
//   snd_set_ent_state_context set_ent_state;
//   snd_set_game_state_context set_game_state;
//   snd_loop_at loop_at;
//   snd_line_at line_at;
//   snd_set_context set_context;
//   snd_script_timescale script_timescale;
// };

// /* 3322 */
// struct snd_command
// {
//   snd_command_type type;
//   snd_command_context context;
//   unsigned int id;
//   int timestamp;
// };

// /* 3323 */
// struct snd_notify
// {
//   snd_notify_type type;
//   snd_notify_context context;
// };

// /* 3324 */
// struct snd_reverse_hash
// {
//   char name[48];
//   unsigned int hash;
//   unsigned int timestamp;
// };

// /* 3325 */
// struct snd_local_t
// {
//   int init;
//   int paused;
//   snd_game_state gameState;
//   float timescale;
//   float scriptTimescale;
//   int time;
//   int looptime;
//   int pausetime;
//   unsigned int frame;
//   SndDriverGlobals *global_constants;
//   int inCinematic;
//   int cinematicTimestamp;
//   int cinematicUpdate;
//   int forcePause;
//   int playbackIdCounter;
//   snd_fader_t volume;
//   unsigned int defaultHash;
//   const snd_curve *defaultCurve;
//   snd_enveffect envEffects[3];
//   snd_enveffect *effect;
//   snd_listener listeners[1];
//   unsigned int voiceGroup;
//   unsigned int announcerGroup;
//   snd_voice_t voice[74];
//   unsigned int voiceAliasHash[74];
//   float voicePositionCache[74][3];
//   unsigned int currentContexts[16];
//   snd_line_emitter lineEmitters[128];
//   snd_loop_emitter loopEmitters[256];
//   float hdrLoad;
//   float maximumPriority;
//   snd_fader_t minimumPriority;
//   snd_snapshot_category snapshotCategories[11];
//   float snapshotAttenuation[64];
//   float snapshotOcclusion[64];
//   snd_dsp_meters meters[8];
//   unsigned int logCommandCount;
//   unsigned int logNotifyCount;
//   unsigned int updated;
//   snd_ent_state entState[296];
//   snd_ent_state *entStateIndex[1536];
//   snd_playback playbacks[148];
//   unsigned int playbacksInUse;
//   int command_init;
//   snd_command commands[1024];
//   unsigned int command_free;
//   unsigned int command_id;
//   unsigned int command_id_commit;
//   snd_command *command_q[1024];
//   unsigned int command_q_head;
//   unsigned int command_q_tail;
//   bool command_process_flag;
//   snd_notify notifies[512];
//   unsigned int notify_free;
//   snd_notify *notify_q[512];
//   unsigned int notify_q_head;
//   unsigned int notify_q_tail;
//   int asyncRunning;
//   float proximityOrigin[3];
//   float proximityFront[3];
//   float proximityDistance[4];
//   float proximityReflectance[4];
//   float proximityLateModifier[4];
//   snd_occlusion_trace_t occlusionTraces[74];
//   int occlusionRunning;
//   unsigned int framesSinceLastOcclusionUpdate;
//   unsigned int traceSequence;
//   unsigned int lastTraceSequence;
//   unsigned int logTimestamp;
//   unsigned int logSkipPlayedHash[512];
//   unsigned int logSkipPlayedTimestamp[512];
//   unsigned int logSkipMissingHash[128];
//   unsigned int logSkipMissingTimestamp[128];
//   snd_reverse_hash logReverseHash[128];
// };

// /* 3326 */
// struct snd_stream_request
// {
//   char filename[260];
//   unsigned int start_of_read;
//   int need;
//   snd_buffer *buffer;
// };

// /* 3327 */
// struct snd_rv_params
// {
//   float frameRate;
//   float smoothing;
//   float earlyTime;
//   float lateTime;
//   float earlyGain;
//   float lateGain;
//   float lateGainProx[4];
//   float returnGain;
//   float earlyLpf;
//   float lateLpf;
//   float inputLpf;
//   float dampLpf;
//   float wallReflect[4];
//   float dryGain;
//   float earlySize;
//   float lateSize;
//   float diffusion;
//   float angle;
//   unsigned int delayMatrix;
// };

// /* 3328 */
// struct __declspec(align(128)) snd_rv_state
// {
//   float delayLine[131072];
//   float earlyReflectionCoefs[4][4];
//   unsigned int earlyReflectionDelays[4][4];
//   float lateReflectionCoefs[4][4];
//   unsigned int lateReflectionDelays[4][4];
//   float inputLpfState[4];
//   float earlyLpfState[4];
//   float lateLpfState[4];
//   float dampLpfState[4];
//   snd_rv_params params;
//   unsigned int earlyReflectionDelayBase[4][4];
//   unsigned int lateReflectionDelayBase[4][4];
//   unsigned int delayIndex;
// };

// /* 3329 */
// struct __declspec(align(4)) snd_occlusion_start_cache
// {
//   float position[3];
//   float value;
//   bool valid;
// };

// /* 3330 */
// struct snd_dsp_squelch_param
// {
//   float tg;
//   float th;
// };

// /* 3331 */
// struct snd_dsp_futz_param
// {
//   float blend;
//   float bpfF;
//   float bpfQ;
//   float lsG;
//   float lsF;
//   float lsQ;
//   float distortion;
//   float pregain;
//   float postgain;
//   float preclip;
//   float postclip;
//   snd_dsp_squelch_param squelch;
// };

// /* 3332 */
// struct snd_dsp_source_params
// {
//   float frameRate;
//   float lpfAttenuation;
//   float lpfRatio;
//   snd_dsp_futz_param futz;
// };

// /* 3333 */
// struct snd_dsp_master_params
// {
//   float lowE;
//   float lowG;
//   float lowF;
//   float lowQ;
//   float peak1E;
//   float peak1G;
//   float peak1F;
//   float peak1Q;
//   float peak2E;
//   float peak2G;
//   float peak2F;
//   float peak2Q;
//   float hiE;
//   float hiG;
//   float hiF;
//   float hiQ;
//   float eqG;
//   float limitE;
//   float limitPG;
//   float limitMG;
//   float limitT;
//   float limitR;
//   float limitTA;
//   float limitTR;
// };

// /* 3334 */
// struct __declspec(align(128)) snd_dsp_dynamo_state
// {
//   float lookahead[960];
//   unsigned int offset;
//   float yfilter;
//   float gfilter;
//   float g;
// };

// /* 3335 */
// struct snd_dsp_master_no_voice_state
// {
//   snd_dsp_dynamo_state comp;
// };

// /* 3336 */
// struct snd_dsp_biquad_state
// {
//   float y[4];
//   float x[4];
// };

// /* 3337 */
// struct snd_dsp_squelch_state
// {
//   float l;
//   float g;
// };

// /* 3338 */
// struct snd_dsp_futz_state
// {
//   snd_dsp_biquad_state bpf;
//   snd_dsp_biquad_state ls;
//   snd_dsp_squelch_state squelch;
// };

// /* 3339 */
// struct snd_dsp_master_no_voice_params
// {
//   float compE;
//   float compPG;
//   float compMG;
//   float compT;
//   float compR;
//   float compTA;
//   float compTR;
// };

// /* 3340 */
// struct snd_dsp_biquad_coef
// {
//   float s[5];
// };

// /* 3341 */
// struct snd_dsp_master_state
// {
//   snd_dsp_biquad_state low;
//   snd_dsp_biquad_state peak1;
//   snd_dsp_biquad_state peak2;
//   snd_dsp_biquad_state hi;
//   snd_dsp_dynamo_state limit;
// };

// /* 3342 */
// struct snd_dsp_source_state
// {
//   float lpfy;
//   snd_dsp_futz_state futz;
// };

// /* 3343 */
// union IS_NAN::__l2::<unnamed_type_u>
// {
//   float fValue;
//   int iValue;
// };

// /* 3344 */
// struct XAPO_REGISTRATION_PROPERTIES
// {
//   _GUID clsid;
//   wchar_t FriendlyName[256];
//   wchar_t CopyrightInfo[256];
//   unsigned int MajorVersion;
//   unsigned int MinorVersion;
//   unsigned int Flags;
//   unsigned int MinInputBufferCount;
//   unsigned int MaxInputBufferCount;
//   unsigned int MinOutputBufferCount;
//   unsigned int MaxOutputBufferCount;
// };

// /* 3345 */
// struct XAUDIO2_VOICE_DETAILS
// {
//   unsigned int CreationFlags;
//   unsigned int InputChannels;
//   unsigned int InputSampleRate;
// };

// /* 3346 */
// struct __cppobj IXAudio2Voice
// {
//   IXAudio2Voice_vtbl *__vftable /*VFT*/;
// };

// /* 3352 */
// struct /*VFT*/ IXAudio2Voice_vtbl
// {
//   void (__stdcall *GetVoiceDetails)(IXAudio2Voice *this, XAUDIO2_VOICE_DETAILS *);
//   HRESULT (__stdcall *SetOutputVoices)(IXAudio2Voice *this, const XAUDIO2_VOICE_SENDS *);
//   HRESULT (__stdcall *SetEffectChain)(IXAudio2Voice *this, const XAUDIO2_EFFECT_CHAIN *);
//   HRESULT (__stdcall *EnableEffect)(IXAudio2Voice *this, unsigned int, unsigned int);
//   HRESULT (__stdcall *DisableEffect)(IXAudio2Voice *this, unsigned int, unsigned int);
//   void (__stdcall *GetEffectState)(IXAudio2Voice *this, unsigned int, int *);
//   HRESULT (__stdcall *SetEffectParameters)(IXAudio2Voice *this, unsigned int, const void *, unsigned int, unsigned int);
//   HRESULT (__stdcall *GetEffectParameters)(IXAudio2Voice *this, unsigned int, void *, unsigned int);
//   HRESULT (__stdcall *SetFilterParameters)(IXAudio2Voice *this, const XAUDIO2_FILTER_PARAMETERS *, unsigned int);
//   void (__stdcall *GetFilterParameters)(IXAudio2Voice *this, XAUDIO2_FILTER_PARAMETERS *);
//   HRESULT (__stdcall *SetOutputFilterParameters)(IXAudio2Voice *this, IXAudio2Voice *, const XAUDIO2_FILTER_PARAMETERS *, unsigned int);
//   void (__stdcall *GetOutputFilterParameters)(IXAudio2Voice *this, IXAudio2Voice *, XAUDIO2_FILTER_PARAMETERS *);
//   HRESULT (__stdcall *SetVolume)(IXAudio2Voice *this, float, unsigned int);
//   void (__stdcall *GetVolume)(IXAudio2Voice *this, float *);
//   HRESULT (__stdcall *SetChannelVolumes)(IXAudio2Voice *this, unsigned int, const float *, unsigned int);
//   void (__stdcall *GetChannelVolumes)(IXAudio2Voice *this, unsigned int, float *);
//   HRESULT (__stdcall *SetOutputMatrix)(IXAudio2Voice *this, IXAudio2Voice *, unsigned int, unsigned int, const float *, unsigned int);
//   void (__stdcall *GetOutputMatrix)(IXAudio2Voice *this, IXAudio2Voice *, unsigned int, unsigned int, float *);
//   void (__stdcall *DestroyVoice)(IXAudio2Voice *this);
// };

// /* 3348 */
// const struct XAUDIO2_VOICE_SENDS
// {
//   unsigned int SendCount;
//   XAUDIO2_SEND_DESCRIPTOR *pSends;
// };

// /* 3350 */
// const struct XAUDIO2_EFFECT_CHAIN
// {
//   unsigned int EffectCount;
//   XAUDIO2_EFFECT_DESCRIPTOR *pEffectDescriptors;
// };

// /* 3351 */
// const struct XAUDIO2_FILTER_PARAMETERS
// {
//   XAUDIO2_FILTER_TYPE Type;
//   float Frequency;
//   float OneOverQ;
// };

// /* 3347 */
// struct XAUDIO2_SEND_DESCRIPTOR
// {
//   unsigned int Flags;
//   IXAudio2Voice *pOutputVoice;
// };

// /* 3349 */
// struct XAUDIO2_EFFECT_DESCRIPTOR
// {
//   IUnknown *pEffect;
//   int InitialState;
//   unsigned int OutputChannels;
// };

// /* 3353 */
// struct XAUDIO2_BUFFER_WMA
// {
//   const unsigned int *pDecodedPacketCumulativeBytes;
//   unsigned int PacketCount;
// };

// /* 3354 */
// struct __unaligned __declspec(align(2)) tWAVEFORMATEX
// {
//   unsigned __int16 wFormatTag;
//   unsigned __int16 nChannels;
//   unsigned int nSamplesPerSec;
//   unsigned int nAvgBytesPerSec;
//   unsigned __int16 nBlockAlign;
//   unsigned __int16 wBitsPerSample;
//   unsigned __int16 cbSize;
// };

// /* 3355 */
// union WAVEFORMATEXTENSIBLE::<unnamed_type_Samples>
// {
//   unsigned __int16 wValidBitsPerSample;
//   unsigned __int16 wSamplesPerBlock;
//   unsigned __int16 wReserved;
// };

// /* 3356 */
// struct WAVEFORMATEXTENSIBLE
// {
//   tWAVEFORMATEX Format;
//   WAVEFORMATEXTENSIBLE::<unnamed_type_Samples> Samples;
//   unsigned int dwChannelMask;
//   _GUID SubFormat;
// };

// /* 3357 */
// struct __cppobj IXAPO : IUnknown
// {
// };

// /* 3358 */
// const struct XAPO_LOCKFORPROCESS_BUFFER_PARAMETERS
// {
//   const tWAVEFORMATEX *pFormat;
//   unsigned int MaxFrameCount;
// };

// /* 3359 */
// const struct XAPO_PROCESS_BUFFER_PARAMETERS
// {
//   void *pBuffer;
//   XAPO_BUFFER_FLAGS BufferFlags;
//   unsigned int ValidFrameCount;
// };

// /* 3360 */
// struct /*VFT*/ IXAPO_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetRegistrationProperties)(IXAPO *this, XAPO_REGISTRATION_PROPERTIES **);
//   HRESULT (__stdcall *IsInputFormatSupported)(IXAPO *this, const tWAVEFORMATEX *, const tWAVEFORMATEX *, tWAVEFORMATEX **);
//   HRESULT (__stdcall *IsOutputFormatSupported)(IXAPO *this, const tWAVEFORMATEX *, const tWAVEFORMATEX *, tWAVEFORMATEX **);
//   HRESULT (__stdcall *Initialize)(IXAPO *this, const void *, unsigned int);
//   void (__stdcall *Reset)(IXAPO *this);
//   HRESULT (__stdcall *LockForProcess)(IXAPO *this, unsigned int, const XAPO_LOCKFORPROCESS_BUFFER_PARAMETERS *, unsigned int, const XAPO_LOCKFORPROCESS_BUFFER_PARAMETERS *);
//   void (__stdcall *UnlockForProcess)(IXAPO *this);
//   void (__stdcall *Process)(IXAPO *this, unsigned int, const XAPO_PROCESS_BUFFER_PARAMETERS *, unsigned int, XAPO_PROCESS_BUFFER_PARAMETERS *, int);
//   unsigned int (__stdcall *CalcInputFrames)(IXAPO *this, unsigned int);
//   unsigned int (__stdcall *CalcOutputFrames)(IXAPO *this, unsigned int);
// };

// /* 3361 */
// struct __cppobj CXAPOBase : IXAPO
// {
//   const XAPO_REGISTRATION_PROPERTIES *m_pRegistrationProperties;
//   void *m_pfnMatrixMixFunction;
//   float *m_pfl32MatrixCoefficients;
//   unsigned int m_nSrcFormatType;
//   int m_fIsScalarMatrix;
//   int m_fIsLocked;
//   int m_lReferenceCount;
// };

// /* 3362 */
// struct /*VFT*/ CXAPOBase_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetRegistrationProperties)(IXAPO *this, XAPO_REGISTRATION_PROPERTIES **);
//   HRESULT (__stdcall *IsInputFormatSupported)(IXAPO *this, const tWAVEFORMATEX *, const tWAVEFORMATEX *, tWAVEFORMATEX **);
//   HRESULT (__stdcall *IsOutputFormatSupported)(IXAPO *this, const tWAVEFORMATEX *, const tWAVEFORMATEX *, tWAVEFORMATEX **);
//   HRESULT (__stdcall *Initialize)(IXAPO *this, const void *, unsigned int);
//   void (__stdcall *Reset)(IXAPO *this);
//   HRESULT (__stdcall *LockForProcess)(IXAPO *this, unsigned int, const XAPO_LOCKFORPROCESS_BUFFER_PARAMETERS *, unsigned int, const XAPO_LOCKFORPROCESS_BUFFER_PARAMETERS *);
//   void (__stdcall *UnlockForProcess)(IXAPO *this);
//   void (__stdcall *Process)(IXAPO *this, unsigned int, const XAPO_PROCESS_BUFFER_PARAMETERS *, unsigned int, XAPO_PROCESS_BUFFER_PARAMETERS *, int);
//   unsigned int (__stdcall *CalcInputFrames)(IXAPO *this, unsigned int);
//   unsigned int (__stdcall *CalcOutputFrames)(IXAPO *this, unsigned int);
//   HRESULT (__thiscall *ValidateFormatDefault)(CXAPOBase *this, tWAVEFORMATEX *, int);
//   void (__thiscall *~CXAPOBase)(CXAPOBase *this);
// };

// /* 3363 */
// struct __cppobj IXAPOParameters : IUnknown
// {
// };

// /* 3364 */
// struct /*VFT*/ IXAPOParameters_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *SetParameters)(IXAPOParameters *this, const void *, unsigned int);
//   void (__stdcall *GetParameters)(IXAPOParameters *this, void *, unsigned int);
// };

// /* 3365 */
// struct __cppobj SDXA2Effect : CXAPOBase, IXAPOParameters
// {
//   int locked;
//   int started;
//   unsigned int frameRate;
//   unsigned int frameCount;
//   unsigned int channelCount;
//   __declspec(align(128)) float interleave[3840];
// };

// /* 3366 */
// struct /*VFT*/ SDXA2Effect_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetRegistrationProperties)(IXAPO *this, XAPO_REGISTRATION_PROPERTIES **);
//   HRESULT (__stdcall *IsInputFormatSupported)(IXAPO *this, const tWAVEFORMATEX *, const tWAVEFORMATEX *, tWAVEFORMATEX **);
//   HRESULT (__stdcall *IsOutputFormatSupported)(IXAPO *this, const tWAVEFORMATEX *, const tWAVEFORMATEX *, tWAVEFORMATEX **);
//   HRESULT (__stdcall *Initialize)(IXAPO *this, const void *, unsigned int);
//   void (__stdcall *Reset)(IXAPO *this);
//   HRESULT (__stdcall *LockForProcess)(IXAPO *this, unsigned int, const XAPO_LOCKFORPROCESS_BUFFER_PARAMETERS *, unsigned int, const XAPO_LOCKFORPROCESS_BUFFER_PARAMETERS *);
//   void (__stdcall *UnlockForProcess)(IXAPO *this);
//   void (__stdcall *Process)(IXAPO *this, unsigned int, const XAPO_PROCESS_BUFFER_PARAMETERS *, unsigned int, XAPO_PROCESS_BUFFER_PARAMETERS *, int);
//   unsigned int (__stdcall *CalcInputFrames)(IXAPO *this, unsigned int);
//   unsigned int (__stdcall *CalcOutputFrames)(IXAPO *this, unsigned int);
//   HRESULT (__thiscall *ValidateFormatDefault)(CXAPOBase *this, tWAVEFORMATEX *, int);
//   void (__thiscall *~CXAPOBase)(CXAPOBase *this);
//   void (__thiscall *Process)(SDXA2Effect *this, unsigned int, unsigned int, float *);
// };

// /* 3367 */
// struct __cppobj SDXA2MasterNoVoiceBusEffect : SDXA2Effect
// {
//   snd_dsp_master_no_voice_params params;
//   snd_dsp_master_no_voice_state state[8];
// };

// /* 3368 */
// struct /*VFT*/ SDXA2MasterNoVoiceBusEffect_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetRegistrationProperties)(IXAPO *this, XAPO_REGISTRATION_PROPERTIES **);
//   HRESULT (__stdcall *IsInputFormatSupported)(IXAPO *this, const tWAVEFORMATEX *, const tWAVEFORMATEX *, tWAVEFORMATEX **);
//   HRESULT (__stdcall *IsOutputFormatSupported)(IXAPO *this, const tWAVEFORMATEX *, const tWAVEFORMATEX *, tWAVEFORMATEX **);
//   HRESULT (__stdcall *Initialize)(IXAPO *this, const void *, unsigned int);
//   void (__stdcall *Reset)(IXAPO *this);
//   HRESULT (__stdcall *LockForProcess)(IXAPO *this, unsigned int, const XAPO_LOCKFORPROCESS_BUFFER_PARAMETERS *, unsigned int, const XAPO_LOCKFORPROCESS_BUFFER_PARAMETERS *);
//   void (__stdcall *UnlockForProcess)(IXAPO *this);
//   void (__stdcall *Process)(IXAPO *this, unsigned int, const XAPO_PROCESS_BUFFER_PARAMETERS *, unsigned int, XAPO_PROCESS_BUFFER_PARAMETERS *, int);
//   unsigned int (__stdcall *CalcInputFrames)(IXAPO *this, unsigned int);
//   unsigned int (__stdcall *CalcOutputFrames)(IXAPO *this, unsigned int);
//   HRESULT (__thiscall *ValidateFormatDefault)(CXAPOBase *this, tWAVEFORMATEX *, int);
//   void (__thiscall *~CXAPOBase)(CXAPOBase *this);
//   void (__thiscall *Process)(SDXA2Effect *this, unsigned int, unsigned int, float *);
// };

// /* 3369 */
// struct __cppobj IXAudio2 : IUnknown
// {
// };

// /* 3370 */
// struct XAUDIO2_DEVICE_DETAILS
// {
//   wchar_t DeviceID[256];
//   wchar_t DisplayName[256];
//   XAUDIO2_DEVICE_ROLE Role;
//   WAVEFORMATEXTENSIBLE OutputFormat;
// };

// /* 3371 */
// struct __cppobj IXAudio2EngineCallback
// {
//   IXAudio2EngineCallback_vtbl *__vftable /*VFT*/;
// };

// /* 3372 */
// struct /*VFT*/ IXAudio2EngineCallback_vtbl
// {
//   void (__stdcall *OnProcessingPassStart)(IXAudio2EngineCallback *this);
//   void (__stdcall *OnProcessingPassEnd)(IXAudio2EngineCallback *this);
//   void (__stdcall *OnCriticalError)(IXAudio2EngineCallback *this, HRESULT);
// };

// /* 3373 */
// struct __cppobj IXAudio2SourceVoice : IXAudio2Voice
// {
// };

// /* 3374 */
// const struct XAUDIO2_BUFFER
// {
//   unsigned int Flags;
//   unsigned int AudioBytes;
//   const unsigned __int8 *pAudioData;
//   unsigned int PlayBegin;
//   unsigned int PlayLength;
//   unsigned int LoopBegin;
//   unsigned int LoopLength;
//   unsigned int LoopCount;
//   void *pContext;
// };

// /* 3375 */
// struct XAUDIO2_VOICE_STATE
// {
//   void *pCurrentBufferContext;
//   unsigned int BuffersQueued;
//   unsigned __int64 SamplesPlayed;
// };

// /* 3376 */
// struct /*VFT*/ IXAudio2SourceVoice_vtbl
// {
//   void (__stdcall *GetVoiceDetails)(IXAudio2Voice *this, XAUDIO2_VOICE_DETAILS *);
//   HRESULT (__stdcall *SetOutputVoices)(IXAudio2Voice *this, const XAUDIO2_VOICE_SENDS *);
//   HRESULT (__stdcall *SetEffectChain)(IXAudio2Voice *this, const XAUDIO2_EFFECT_CHAIN *);
//   HRESULT (__stdcall *EnableEffect)(IXAudio2Voice *this, unsigned int, unsigned int);
//   HRESULT (__stdcall *DisableEffect)(IXAudio2Voice *this, unsigned int, unsigned int);
//   void (__stdcall *GetEffectState)(IXAudio2Voice *this, unsigned int, int *);
//   HRESULT (__stdcall *SetEffectParameters)(IXAudio2Voice *this, unsigned int, const void *, unsigned int, unsigned int);
//   HRESULT (__stdcall *GetEffectParameters)(IXAudio2Voice *this, unsigned int, void *, unsigned int);
//   HRESULT (__stdcall *SetFilterParameters)(IXAudio2Voice *this, const XAUDIO2_FILTER_PARAMETERS *, unsigned int);
//   void (__stdcall *GetFilterParameters)(IXAudio2Voice *this, XAUDIO2_FILTER_PARAMETERS *);
//   HRESULT (__stdcall *SetOutputFilterParameters)(IXAudio2Voice *this, IXAudio2Voice *, const XAUDIO2_FILTER_PARAMETERS *, unsigned int);
//   void (__stdcall *GetOutputFilterParameters)(IXAudio2Voice *this, IXAudio2Voice *, XAUDIO2_FILTER_PARAMETERS *);
//   HRESULT (__stdcall *SetVolume)(IXAudio2Voice *this, float, unsigned int);
//   void (__stdcall *GetVolume)(IXAudio2Voice *this, float *);
//   HRESULT (__stdcall *SetChannelVolumes)(IXAudio2Voice *this, unsigned int, const float *, unsigned int);
//   void (__stdcall *GetChannelVolumes)(IXAudio2Voice *this, unsigned int, float *);
//   HRESULT (__stdcall *SetOutputMatrix)(IXAudio2Voice *this, IXAudio2Voice *, unsigned int, unsigned int, const float *, unsigned int);
//   void (__stdcall *GetOutputMatrix)(IXAudio2Voice *this, IXAudio2Voice *, unsigned int, unsigned int, float *);
//   void (__stdcall *DestroyVoice)(IXAudio2Voice *this);
//   HRESULT (__stdcall *Start)(IXAudio2SourceVoice *this, unsigned int, unsigned int);
//   HRESULT (__stdcall *Stop)(IXAudio2SourceVoice *this, unsigned int, unsigned int);
//   HRESULT (__stdcall *SubmitSourceBuffer)(IXAudio2SourceVoice *this, const XAUDIO2_BUFFER *, const XAUDIO2_BUFFER_WMA *);
//   HRESULT (__stdcall *FlushSourceBuffers)(IXAudio2SourceVoice *this);
//   HRESULT (__stdcall *Discontinuity)(IXAudio2SourceVoice *this);
//   HRESULT (__stdcall *ExitLoop)(IXAudio2SourceVoice *this, unsigned int);
//   void (__stdcall *GetState)(IXAudio2SourceVoice *this, XAUDIO2_VOICE_STATE *);
//   HRESULT (__stdcall *SetFrequencyRatio)(IXAudio2SourceVoice *this, float, unsigned int);
//   void (__stdcall *GetFrequencyRatio)(IXAudio2SourceVoice *this, float *);
//   HRESULT (__stdcall *SetSourceSampleRate)(IXAudio2SourceVoice *this, unsigned int);
// };

// /* 3377 */
// struct __cppobj IXAudio2VoiceCallback
// {
//   IXAudio2VoiceCallback_vtbl *__vftable /*VFT*/;
// };

// /* 3378 */
// struct /*VFT*/ IXAudio2VoiceCallback_vtbl
// {
//   void (__stdcall *OnVoiceProcessingPassStart)(IXAudio2VoiceCallback *this, unsigned int);
//   void (__stdcall *OnVoiceProcessingPassEnd)(IXAudio2VoiceCallback *this);
//   void (__stdcall *OnStreamEnd)(IXAudio2VoiceCallback *this);
//   void (__stdcall *OnBufferStart)(IXAudio2VoiceCallback *this, void *);
//   void (__stdcall *OnBufferEnd)(IXAudio2VoiceCallback *this, void *);
//   void (__stdcall *OnLoopEnd)(IXAudio2VoiceCallback *this, void *);
//   void (__stdcall *OnVoiceError)(IXAudio2VoiceCallback *this, void *, HRESULT);
// };

// /* 3379 */
// struct /*VFT*/ IXAudio2SubmixVoice_vtbl
// {
//   void (__stdcall *GetVoiceDetails)(IXAudio2Voice *this, XAUDIO2_VOICE_DETAILS *);
//   HRESULT (__stdcall *SetOutputVoices)(IXAudio2Voice *this, const XAUDIO2_VOICE_SENDS *);
//   HRESULT (__stdcall *SetEffectChain)(IXAudio2Voice *this, const XAUDIO2_EFFECT_CHAIN *);
//   HRESULT (__stdcall *EnableEffect)(IXAudio2Voice *this, unsigned int, unsigned int);
//   HRESULT (__stdcall *DisableEffect)(IXAudio2Voice *this, unsigned int, unsigned int);
//   void (__stdcall *GetEffectState)(IXAudio2Voice *this, unsigned int, int *);
//   HRESULT (__stdcall *SetEffectParameters)(IXAudio2Voice *this, unsigned int, const void *, unsigned int, unsigned int);
//   HRESULT (__stdcall *GetEffectParameters)(IXAudio2Voice *this, unsigned int, void *, unsigned int);
//   HRESULT (__stdcall *SetFilterParameters)(IXAudio2Voice *this, const XAUDIO2_FILTER_PARAMETERS *, unsigned int);
//   void (__stdcall *GetFilterParameters)(IXAudio2Voice *this, XAUDIO2_FILTER_PARAMETERS *);
//   HRESULT (__stdcall *SetOutputFilterParameters)(IXAudio2Voice *this, IXAudio2Voice *, const XAUDIO2_FILTER_PARAMETERS *, unsigned int);
//   void (__stdcall *GetOutputFilterParameters)(IXAudio2Voice *this, IXAudio2Voice *, XAUDIO2_FILTER_PARAMETERS *);
//   HRESULT (__stdcall *SetVolume)(IXAudio2Voice *this, float, unsigned int);
//   void (__stdcall *GetVolume)(IXAudio2Voice *this, float *);
//   HRESULT (__stdcall *SetChannelVolumes)(IXAudio2Voice *this, unsigned int, const float *, unsigned int);
//   void (__stdcall *GetChannelVolumes)(IXAudio2Voice *this, unsigned int, float *);
//   HRESULT (__stdcall *SetOutputMatrix)(IXAudio2Voice *this, IXAudio2Voice *, unsigned int, unsigned int, const float *, unsigned int);
//   void (__stdcall *GetOutputMatrix)(IXAudio2Voice *this, IXAudio2Voice *, unsigned int, unsigned int, float *);
//   void (__stdcall *DestroyVoice)(IXAudio2Voice *this);
// };

// /* 3380 */
// struct __cppobj IXAudio2SubmixVoice : IXAudio2Voice
// {
// };

// /* 3381 */
// struct /*VFT*/ IXAudio2MasteringVoice_vtbl
// {
//   void (__stdcall *GetVoiceDetails)(IXAudio2Voice *this, XAUDIO2_VOICE_DETAILS *);
//   HRESULT (__stdcall *SetOutputVoices)(IXAudio2Voice *this, const XAUDIO2_VOICE_SENDS *);
//   HRESULT (__stdcall *SetEffectChain)(IXAudio2Voice *this, const XAUDIO2_EFFECT_CHAIN *);
//   HRESULT (__stdcall *EnableEffect)(IXAudio2Voice *this, unsigned int, unsigned int);
//   HRESULT (__stdcall *DisableEffect)(IXAudio2Voice *this, unsigned int, unsigned int);
//   void (__stdcall *GetEffectState)(IXAudio2Voice *this, unsigned int, int *);
//   HRESULT (__stdcall *SetEffectParameters)(IXAudio2Voice *this, unsigned int, const void *, unsigned int, unsigned int);
//   HRESULT (__stdcall *GetEffectParameters)(IXAudio2Voice *this, unsigned int, void *, unsigned int);
//   HRESULT (__stdcall *SetFilterParameters)(IXAudio2Voice *this, const XAUDIO2_FILTER_PARAMETERS *, unsigned int);
//   void (__stdcall *GetFilterParameters)(IXAudio2Voice *this, XAUDIO2_FILTER_PARAMETERS *);
//   HRESULT (__stdcall *SetOutputFilterParameters)(IXAudio2Voice *this, IXAudio2Voice *, const XAUDIO2_FILTER_PARAMETERS *, unsigned int);
//   void (__stdcall *GetOutputFilterParameters)(IXAudio2Voice *this, IXAudio2Voice *, XAUDIO2_FILTER_PARAMETERS *);
//   HRESULT (__stdcall *SetVolume)(IXAudio2Voice *this, float, unsigned int);
//   void (__stdcall *GetVolume)(IXAudio2Voice *this, float *);
//   HRESULT (__stdcall *SetChannelVolumes)(IXAudio2Voice *this, unsigned int, const float *, unsigned int);
//   void (__stdcall *GetChannelVolumes)(IXAudio2Voice *this, unsigned int, float *);
//   HRESULT (__stdcall *SetOutputMatrix)(IXAudio2Voice *this, IXAudio2Voice *, unsigned int, unsigned int, const float *, unsigned int);
//   void (__stdcall *GetOutputMatrix)(IXAudio2Voice *this, IXAudio2Voice *, unsigned int, unsigned int, float *);
//   void (__stdcall *DestroyVoice)(IXAudio2Voice *this);
// };

// /* 3382 */
// struct __cppobj IXAudio2MasteringVoice : IXAudio2Voice
// {
// };

// /* 3383 */
// struct XAUDIO2_PERFORMANCE_DATA
// {
//   unsigned __int64 AudioCyclesSinceLastQuery;
//   unsigned __int64 TotalCyclesSinceLastQuery;
//   unsigned int MinimumCyclesPerQuantum;
//   unsigned int MaximumCyclesPerQuantum;
//   unsigned int MemoryUsageInBytes;
//   unsigned int CurrentLatencyInSamples;
//   unsigned int GlitchesSinceEngineStarted;
//   unsigned int ActiveSourceVoiceCount;
//   unsigned int TotalSourceVoiceCount;
//   unsigned int ActiveSubmixVoiceCount;
//   unsigned int ActiveResamplerCount;
//   unsigned int ActiveMatrixMixCount;
//   unsigned int ActiveXmaSourceVoices;
//   unsigned int ActiveXmaStreams;
// };

// /* 3384 */
// const struct XAUDIO2_DEBUG_CONFIGURATION
// {
//   unsigned int TraceMask;
//   unsigned int BreakMask;
//   int LogThreadID;
//   int LogFileline;
//   int LogFunctionName;
//   int LogTiming;
// };

// /* 3385 */
// struct /*VFT*/ IXAudio2_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetDeviceCount)(IXAudio2 *this, unsigned int *);
//   HRESULT (__stdcall *GetDeviceDetails)(IXAudio2 *this, unsigned int, XAUDIO2_DEVICE_DETAILS *);
//   HRESULT (__stdcall *Initialize)(IXAudio2 *this, unsigned int, XAUDIO2_WINDOWS_PROCESSOR_SPECIFIER);
//   HRESULT (__stdcall *RegisterForCallbacks)(IXAudio2 *this, IXAudio2EngineCallback *);
//   void (__stdcall *UnregisterForCallbacks)(IXAudio2 *this, IXAudio2EngineCallback *);
//   HRESULT (__stdcall *CreateSourceVoice)(IXAudio2 *this, IXAudio2SourceVoice **, const tWAVEFORMATEX *, unsigned int, float, IXAudio2VoiceCallback *, const XAUDIO2_VOICE_SENDS *, const XAUDIO2_EFFECT_CHAIN *);
//   HRESULT (__stdcall *CreateSubmixVoice)(IXAudio2 *this, IXAudio2SubmixVoice **, unsigned int, unsigned int, unsigned int, unsigned int, const XAUDIO2_VOICE_SENDS *, const XAUDIO2_EFFECT_CHAIN *);
//   HRESULT (__stdcall *CreateMasteringVoice)(IXAudio2 *this, IXAudio2MasteringVoice **, unsigned int, unsigned int, unsigned int, unsigned int, const XAUDIO2_EFFECT_CHAIN *);
//   HRESULT (__stdcall *StartEngine)(IXAudio2 *this);
//   void (__stdcall *StopEngine)(IXAudio2 *this);
//   HRESULT (__stdcall *CommitChanges)(IXAudio2 *this, unsigned int);
//   void (__stdcall *GetPerformanceData)(IXAudio2 *this, XAUDIO2_PERFORMANCE_DATA *);
//   void (__stdcall *SetDebugConfiguration)(IXAudio2 *this, const XAUDIO2_DEBUG_CONFIGURATION *, void *);
// };

// /* 3386 */
// struct __cppobj SDXA2RadverbEffect : SDXA2Effect
// {
//   snd_rv_state state;
//   snd_rv_params params;
//   __declspec(align(32)) float temp[3840];
// };

// /* 3387 */
// struct /*VFT*/ SDXA2RadverbEffect_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetRegistrationProperties)(IXAPO *this, XAPO_REGISTRATION_PROPERTIES **);
//   HRESULT (__stdcall *IsInputFormatSupported)(IXAPO *this, const tWAVEFORMATEX *, const tWAVEFORMATEX *, tWAVEFORMATEX **);
//   HRESULT (__stdcall *IsOutputFormatSupported)(IXAPO *this, const tWAVEFORMATEX *, const tWAVEFORMATEX *, tWAVEFORMATEX **);
//   HRESULT (__stdcall *Initialize)(IXAPO *this, const void *, unsigned int);
//   void (__stdcall *Reset)(IXAPO *this);
//   HRESULT (__stdcall *LockForProcess)(IXAPO *this, unsigned int, const XAPO_LOCKFORPROCESS_BUFFER_PARAMETERS *, unsigned int, const XAPO_LOCKFORPROCESS_BUFFER_PARAMETERS *);
//   void (__stdcall *UnlockForProcess)(IXAPO *this);
//   void (__stdcall *Process)(IXAPO *this, unsigned int, const XAPO_PROCESS_BUFFER_PARAMETERS *, unsigned int, XAPO_PROCESS_BUFFER_PARAMETERS *, int);
//   unsigned int (__stdcall *CalcInputFrames)(IXAPO *this, unsigned int);
//   unsigned int (__stdcall *CalcOutputFrames)(IXAPO *this, unsigned int);
//   HRESULT (__thiscall *ValidateFormatDefault)(CXAPOBase *this, tWAVEFORMATEX *, int);
//   void (__thiscall *~CXAPOBase)(CXAPOBase *this);
//   void (__thiscall *Process)(SDXA2Effect *this, unsigned int, unsigned int, float *);
// };

// /* 3388 */
// struct XMA2WAVEFORMATEX
// {
//   tWAVEFORMATEX wfx;
//   unsigned __int16 NumStreams;
//   unsigned int ChannelMask;
//   unsigned int SamplesEncoded;
//   unsigned int BytesPerBlock;
//   unsigned int PlayBegin;
//   unsigned int PlayLength;
//   unsigned int LoopBegin;
//   unsigned int LoopLength;
//   unsigned __int8 LoopCount;
//   unsigned __int8 EncoderVersion;
//   unsigned __int16 BlockCount;
// };

// /* 3389 */
// struct XAUDIO2FX_REVERB_PARAMETERS
// {
//   float WetDryMix;
//   unsigned int ReflectionsDelay;
//   unsigned __int8 ReverbDelay;
//   unsigned __int8 RearDelay;
//   unsigned __int8 PositionLeft;
//   unsigned __int8 PositionRight;
//   unsigned __int8 PositionMatrixLeft;
//   unsigned __int8 PositionMatrixRight;
//   unsigned __int8 EarlyDiffusion;
//   unsigned __int8 LateDiffusion;
//   unsigned __int8 LowEQGain;
//   unsigned __int8 LowEQCutoff;
//   unsigned __int8 HighEQGain;
//   unsigned __int8 HighEQCutoff;
//   float RoomFilterFreq;
//   float RoomFilterMain;
//   float RoomFilterHF;
//   float ReflectionsGain;
//   float ReverbGain;
//   float DecayTime;
//   float Density;
//   float RoomSize;
// };

// /* 3390 */
// struct $_TypeDescriptor$_extraBytes_12
// {
//   const void *pVFTable;
//   void *spare;
//   char name[12];
// };

// /* 3391 */
// struct __cppobj SDXA2MasterBusEffect : SDXA2Effect
// {
//   snd_dsp_master_params params;
//   snd_dsp_master_state state[8];
// };

// /* 3392 */
// struct /*VFT*/ SDXA2MasterBusEffect_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetRegistrationProperties)(IXAPO *this, XAPO_REGISTRATION_PROPERTIES **);
//   HRESULT (__stdcall *IsInputFormatSupported)(IXAPO *this, const tWAVEFORMATEX *, const tWAVEFORMATEX *, tWAVEFORMATEX **);
//   HRESULT (__stdcall *IsOutputFormatSupported)(IXAPO *this, const tWAVEFORMATEX *, const tWAVEFORMATEX *, tWAVEFORMATEX **);
//   HRESULT (__stdcall *Initialize)(IXAPO *this, const void *, unsigned int);
//   void (__stdcall *Reset)(IXAPO *this);
//   HRESULT (__stdcall *LockForProcess)(IXAPO *this, unsigned int, const XAPO_LOCKFORPROCESS_BUFFER_PARAMETERS *, unsigned int, const XAPO_LOCKFORPROCESS_BUFFER_PARAMETERS *);
//   void (__stdcall *UnlockForProcess)(IXAPO *this);
//   void (__stdcall *Process)(IXAPO *this, unsigned int, const XAPO_PROCESS_BUFFER_PARAMETERS *, unsigned int, XAPO_PROCESS_BUFFER_PARAMETERS *, int);
//   unsigned int (__stdcall *CalcInputFrames)(IXAPO *this, unsigned int);
//   unsigned int (__stdcall *CalcOutputFrames)(IXAPO *this, unsigned int);
//   HRESULT (__thiscall *ValidateFormatDefault)(CXAPOBase *this, tWAVEFORMATEX *, int);
//   void (__thiscall *~CXAPOBase)(CXAPOBase *this);
//   void (__thiscall *Process)(SDXA2Effect *this, unsigned int, unsigned int, float *);
// };

// /* 3393 */
// struct __unaligned __declspec(align(1)) $_s__RTTIBaseClassArray$_extraBytes_28
// {
//   const _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[7];
//   _BYTE gap1C;
// };

// /* 3394 */
// struct __cppobj CXAPOParametersBase : CXAPOBase, IXAPOParameters
// {
//   unsigned __int8 *m_pParameterBlocks;
//   unsigned __int8 *m_pCurrentParameters;
//   unsigned __int8 *m_pCurrentParametersInternal;
//   unsigned int m_uCurrentParametersIndex;
//   unsigned int m_uParameterBlockByteSize;
//   int m_fNewerResultsReady;
//   int m_fProducer;
// };

// /* 3395 */
// struct /*VFT*/ CXAPOParametersBase_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetRegistrationProperties)(IXAPO *this, XAPO_REGISTRATION_PROPERTIES **);
//   HRESULT (__stdcall *IsInputFormatSupported)(IXAPO *this, const tWAVEFORMATEX *, const tWAVEFORMATEX *, tWAVEFORMATEX **);
//   HRESULT (__stdcall *IsOutputFormatSupported)(IXAPO *this, const tWAVEFORMATEX *, const tWAVEFORMATEX *, tWAVEFORMATEX **);
//   HRESULT (__stdcall *Initialize)(IXAPO *this, const void *, unsigned int);
//   void (__stdcall *Reset)(IXAPO *this);
//   HRESULT (__stdcall *LockForProcess)(IXAPO *this, unsigned int, const XAPO_LOCKFORPROCESS_BUFFER_PARAMETERS *, unsigned int, const XAPO_LOCKFORPROCESS_BUFFER_PARAMETERS *);
//   void (__stdcall *UnlockForProcess)(IXAPO *this);
//   void (__stdcall *Process)(IXAPO *this, unsigned int, const XAPO_PROCESS_BUFFER_PARAMETERS *, unsigned int, XAPO_PROCESS_BUFFER_PARAMETERS *, int);
//   unsigned int (__stdcall *CalcInputFrames)(IXAPO *this, unsigned int);
//   unsigned int (__stdcall *CalcOutputFrames)(IXAPO *this, unsigned int);
//   HRESULT (__thiscall *ValidateFormatDefault)(CXAPOBase *this, tWAVEFORMATEX *, int);
//   void (__thiscall *~CXAPOBase)(CXAPOBase *this);
//   void (__thiscall *OnSetParameters)(CXAPOParametersBase *this, const void *, unsigned int);
// };

// /* 3396 */
// struct __cppobj SDXA2SourceEffect : SDXA2Effect
// {
//   snd_dsp_source_params params;
//   snd_dsp_source_state state[2];
//   __declspec(align(64)) float tempa[960];
//   float tempb[960];
// };

// /* 3397 */
// struct /*VFT*/ SDXA2SourceEffect_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetRegistrationProperties)(IXAPO *this, XAPO_REGISTRATION_PROPERTIES **);
//   HRESULT (__stdcall *IsInputFormatSupported)(IXAPO *this, const tWAVEFORMATEX *, const tWAVEFORMATEX *, tWAVEFORMATEX **);
//   HRESULT (__stdcall *IsOutputFormatSupported)(IXAPO *this, const tWAVEFORMATEX *, const tWAVEFORMATEX *, tWAVEFORMATEX **);
//   HRESULT (__stdcall *Initialize)(IXAPO *this, const void *, unsigned int);
//   void (__stdcall *Reset)(IXAPO *this);
//   HRESULT (__stdcall *LockForProcess)(IXAPO *this, unsigned int, const XAPO_LOCKFORPROCESS_BUFFER_PARAMETERS *, unsigned int, const XAPO_LOCKFORPROCESS_BUFFER_PARAMETERS *);
//   void (__stdcall *UnlockForProcess)(IXAPO *this);
//   void (__stdcall *Process)(IXAPO *this, unsigned int, const XAPO_PROCESS_BUFFER_PARAMETERS *, unsigned int, XAPO_PROCESS_BUFFER_PARAMETERS *, int);
//   unsigned int (__stdcall *CalcInputFrames)(IXAPO *this, unsigned int);
//   unsigned int (__stdcall *CalcOutputFrames)(IXAPO *this, unsigned int);
//   HRESULT (__thiscall *ValidateFormatDefault)(CXAPOBase *this, tWAVEFORMATEX *, int);
//   void (__thiscall *~CXAPOBase)(CXAPOBase *this);
//   void (__thiscall *Process)(SDXA2Effect *this, unsigned int, unsigned int, float *);
// };

// /* 3398 */
// struct __s_GUID
// {
//   unsigned int Data1;
//   unsigned __int16 Data2;
//   unsigned __int16 Data3;
//   unsigned __int8 Data4[8];
// };

// /* 3399 */
// struct XAUDIO2FX_REVERB_I3DL2_PARAMETERS
// {
//   float WetDryMix;
//   int Room;
//   int RoomHF;
//   float RoomRolloffFactor;
//   float DecayTime;
//   float DecayHFRatio;
//   int Reflections;
//   float ReflectionsDelay;
//   int Reverb;
//   float ReverbDelay;
//   float Diffusion;
//   float Density;
//   float HFReference;
// };

// /* 3400 */
// struct X3DAUDIO_DISTANCE_CURVE_POINT
// {
//   float Distance;
//   float DSPSetting;
// };

// /* 3401 */
// struct VoiceInfo
// {
//   snd_dsp_source_params params;
//   SDXA2SourceEffect *sourceDsp;
// };

// /* 3402 */
// struct __cppobj StreamVoice : IXAudio2VoiceCallback
// {
//   XAUDIO2_BUFFER buffers[2];
//   unsigned int bufferQueuedCount;
// };

// /* 3403 */
// struct /*VFT*/ StreamVoice_vtbl
// {
//   void (__stdcall *OnVoiceProcessingPassStart)(IXAudio2VoiceCallback *this, unsigned int);
//   void (__stdcall *OnVoiceProcessingPassEnd)(IXAudio2VoiceCallback *this);
//   void (__stdcall *OnStreamEnd)(IXAudio2VoiceCallback *this);
//   void (__stdcall *OnBufferStart)(IXAudio2VoiceCallback *this, void *);
//   void (__stdcall *OnBufferEnd)(IXAudio2VoiceCallback *this, void *);
//   void (__stdcall *OnLoopEnd)(IXAudio2VoiceCallback *this, void *);
//   void (__stdcall *OnVoiceError)(IXAudio2VoiceCallback *this, void *, HRESULT);
//   void (__stdcall *OnVoiceProcessingPassStart)(StreamVoice *this);
// };

// /* 3404 */
// struct __cppobj __declspec(align(128)) SoundState
// {
//   int deviceIndex;
//   int deviceGUIDValid;
//   _GUID deviceGUID;
//   IXAudio2 *xa2;
//   XAUDIO2_DEVICE_DETAILS details;
//   IXAudio2MasteringVoice *masterVoice;
//   XAUDIO2_VOICE_DETAILS masterVoiceDetails;
//   IXAudio2SubmixVoice *masterBus;
//   SDXA2MasterBusEffect masterDsp;
//   snd_dsp_master_params masterParams;
//   IXAudio2SubmixVoice *novoiceBus;
//   SDXA2MasterNoVoiceBusEffect novoiceDsp;
//   snd_dsp_master_no_voice_params novoiceParams;
//   IXAudio2SubmixVoice *radverbBus;
//   SDXA2RadverbEffect radverbDsp;
//   snd_rv_params radverbParams;
//   SDXA2SourceEffect voiceDsp[148];
//   IXAudio2SourceVoice *voices[74];
//   VoiceInfo voiceInfos[74];
//   StreamVoice streamVoices[10];
//   XAUDIO2_PERFORMANCE_DATA perfData;
// };

// /* 3405 */
// struct adpcmcoef_tag
// {
//   __int16 iCoef1;
//   __int16 iCoef2;
// };

// /* 3406 */
// struct $adpcmwaveformat_tag$_extraBytes_28
// {
//   tWAVEFORMATEX wfx;
//   unsigned __int16 wSamplesPerBlock;
//   unsigned __int16 wNumCoef;
//   adpcmcoef_tag aCoef[7];
// };

// /* 3407 */
// struct SndStartAliasInfo
// {
//   const snd_alias_t *alias;
//   SndEntHandle sndEnt;
//   float org[3];
//   float dir[3];
//   float volModStart;
//   int timeshift;
//   float fadetime;
//   int startDelay;
//   snd_occlusion_start_cache *ocache;
//   snd_playback *playback;
//   int playbackId;
// };

// /* 3408 */
// struct adpcmwaveformat_tag
// {
//   tWAVEFORMATEX wfx;
//   unsigned __int16 wSamplesPerBlock;
//   unsigned __int16 wNumCoef;
//   adpcmcoef_tag aCoef[];
// };

// /* 3409 */
// struct snd_overlay_info
// {
//   char pszSampleName[128];
//   char name[64];
//   int channel;
//   float fGlobalPriority;
//   float fLosOcclusion;
//   float fDry;
//   float fWet;
//   float fDistance;
//   float fPitch;
//   int iEntity;
//   int group;
//   int pan;
//   __int64 played;
// };

// /* 3410 */
// struct snd_csv_entry_t
// {
//   const char *name;
//   unsigned int offset;
//   bool required;
//   snd_csv_entry_type type;
//   float minimum;
//   float maximum;
//   unsigned int length;
//   const char **enum_ids;
// };

// /* 3411 */
// struct sentient_fields_s
// {
//   const char *name;
//   int ofs;
//   int size[1];
//   fieldtype_t type;
//   void (__cdecl *setter)(sentient_s *, const sentient_fields_s *);
//   void (__cdecl *getter)(sentient_s *, const sentient_fields_s *);
// };

// /* 3412 */
// struct SentientGlobals
// {
//   int lastTime;
//   int lastSample;
//   float playerTrail[2][3];
//   int sampleTime[2];
// };

// /* 3413 */
// struct pathsort_t
// {
//   pathnode_t *node;
//   float metric;
//   float distMetric;
// };

// /* 3414 */
// struct node_field_t
// {
//   const char *name;
//   int ofs;
//   int size[1];
//   fieldtype_t type;
//   void (__cdecl *getter)(pathnode_t *, int);
// };

// /* 3415 */
// struct nodespawn_t
// {
//   char *name;
//   nodeType type;
// };

// /* 3416 */
// struct pathstatic_t
// {
//   pathlink_s *pathLinks;
//   unsigned __int16 *indirectNodes;
//   unsigned __int8 *pathbuf;
// };

// /* 3417 */
// struct NodeNums
// {
//   int array[2][8192];
// };

// /* 3418 */
// struct pathnode_parent_t
// {
//   float origin_loc[3];
//   int entnum;
//   pathnode_t *m_node;
//   pathnode_parent_t *m_next;
// };

// /* 3419 */
// struct PathLinkInfo
// {
//   unsigned __int16 from;
//   unsigned __int16 to;
//   unsigned __int16 prev;
//   unsigned __int16 next;
// };

// /* 3420 */
// struct pathlocal_t::<unnamed_type_circle>
// {
//   float origin[3];
//   float maxDist;
//   float maxDistSq;
//   float maxHeight;
//   float maxHeightSq;
//   int typeFlags;
//   pathsort_t *nodes;
//   int maxNodes;
//   int nodeCount;
// };

// /* 3421 */
// struct __declspec(align(128)) pathlocal_t
// {
//   PathLinkInfo pathLinkInfoArray[2048];
//   int pathLinkInfoArrayInited;
//   unsigned int actualNodeCount;
//   unsigned int extraNodes;
//   unsigned int originErrors;
//   pathlocal_t::<unnamed_type_circle> circle;
// };

// /* 3422 */
// struct NodeTypeToName
// {
//   nodeType type;
//   const char *name;
// };

// /* 3424 */
// struct phys_inplace_avl_tree_node<generic_avl_map_node_t>
// {
//   generic_avl_map_node_t *m_left;
//   generic_avl_map_node_t *m_right;
//   int m_balance;
// };

// /* 3423 */
// struct generic_avl_map_node_t
// {
//   void *m_data;
//   unsigned int m_avl_key;
//   phys_inplace_avl_tree_node<generic_avl_map_node_t> m_avl_node_info;
// };

// /* 3425 */
// struct __cppobj phys_inplace_avl_tree<unsigned int,generic_avl_map_node_t,generic_avl_map_node_t>
// {
//   generic_avl_map_node_t *m_tree_root;
// };

// /* 3426 */
// struct phys_inplace_avl_tree<unsigned int,generic_avl_map_node_t,generic_avl_map_node_t>::stack_item
// {
//   generic_avl_map_node_t **m_node;
//   int m_child;
// };

// /* 3427 */
// struct __cppobj phys_simple_allocator<pathnode_resized_links_t>
// {
//   int m_count;
// };

// /* 3428 */
// struct pathnode_resized_links_t
// {
//   pathnode_t *m_node;
//   pathlink_s *m_original_links;
//   int m_original_link_count;
//   pathlink_s *m_new_links;
//   int m_new_link_count;
// };

// /* 3429 */
// struct __cppobj phys_simple_allocator<pathnode_parent_t>
// {
//   int m_count;
// };

// /* 3430 */
// struct badplace_arc_t
// {
//   float origin[3];
//   float radius;
//   float halfheight;
//   float angle0;
//   float angle1;
// };

// /* 3431 */
// struct __cppobj __declspec(align(8)) gjk_entity_info_t
// {
//   phys_mat44 m_mat;
//   gjk_entity_info_t::ENTITY_TYPE m_ent_type;
//   const void *m_ent;
//   int m_query_visitor_count;
// };

// /* 3432 */
// struct __cppobj __declspec(align(16)) gjk_geom_info_t
// {
//   phys_vec3 m_aabb_min;
//   phys_vec3 m_aabb_max;
//   gjk_base_t *m_cg;
//   gjk_entity_info_t *m_ent_info;
//   int m_query_visitor_count;
//   float m_hit_time;
//   gjk_geom_info_t *m_next_link;
//   gjk_geom_info_t *m_total_next_link;
// };

// /* 3433 */
// struct __cppobj __declspec(align(16)) gjk_trace_output_t
// {
//   phys_vec3 m_hit_normal;
//   phys_vec3 m_hit_point;
//   phys_vec3 m_arm;
//   float m_hit_time;
//   float m_hit_dist;
//   bool m_is_foot;
//   gjk_geom_info_t *m_gi;
//   gjk_trace_output_t *m_next_link;
// };

// /* 3434 */
// struct __cppobj std::pair<pathsort_t *,pathsort_t *>
// {
//   pathsort_t *first;
//   pathsort_t *second;
// };

// /* 3435 */
// struct __cppobj std::_Nonscalar_ptr_iterator_tag
// {
// };

// /* 3436 */
// struct __cppobj __declspec(align(16)) cached_query_info_t
// {
//   phys_vec3 m_query_aabb_min;
//   phys_vec3 m_query_aabb_max;
//   int m_query_contents;
//   unsigned int m_query_flags;
// };

// /* 3437 */
// struct __cppobj phys_link_list<gjk_geom_info_t>
// {
//   gjk_geom_info_t *m_first;
//   gjk_geom_info_t **m_last_next_ptr;
//   int m_alloc_count;
// };

// /* 3438 */
// const struct __cppobj __declspec(align(16)) gjk_query_input
// {
//   phys_vec3 m_cg_aabb_min;
//   phys_vec3 m_cg_aabb_max;
//   phys_vec3 m_cg_position;
//   phys_vec3 m_cg_translation;
//   phys_vec3 m_ac_eps_vec;
//   int m_contents;
//   int m_pass_entity_num;
//   int m_pass_owner_num;
//   bool m_is_server_thread;
//   colgeom_visitor_inlined_t<200> *m_proximity_data;
//   int m_proximity_mask;
//   unsigned int m_gjk_query_flags;
//   phys_link_list<gjk_geom_info_t> m_geom_skip_list;
// };

// /* 3439 */
// struct /*VFT*/ gjk_query_output_vtbl
// {
//   void *(__thiscall *allocate)(gjk_collision_visitor *this, const int, const int, const bool);
//   bool (__thiscall *is_query)(gjk_collision_visitor *this);
//   void (__thiscall *get_local_query_aabb)(gjk_collision_visitor *this, float *, float *);
//   bool (__thiscall *query_create_prolog)(gjk_collision_visitor *this, const void *);
//   void (__thiscall *query_create_epilog)(gjk_collision_visitor *this, gjk_base_t *);
//   bool (__thiscall *query_create_prolog_1)(gjk_collision_visitor *this, const float *, const float *, const void *);
//   void (__thiscall *query_create_epilog_1)(gjk_collision_visitor *this, gjk_base_t *);
// };

// /* 3440 */
// struct __cppobj gjk_query_output : gjk_collision_visitor
// {
//   __declspec(align(16)) phys_vec3 m_query_aabb_min;
//   phys_vec3 m_query_aabb_max;
//   phys_vec3 m_local_query_aabb_min;
//   phys_vec3 m_local_query_aabb_max;
//   const gjk_query_input *m_local_query_input;
//   bpei_database_id m_local_database_id;
//   broad_phase_environment_info *m_local_bpei;
//   gjk_entity_info_t *m_local_ent_info;
//   bpei_database_t m_bpei_database;
//   phys_transient_allocator m_allocator;
//   phys_transient_allocator::allocator_state m_allocator_state;
//   int m_ent_count;
//   int m_geom_count;
//   gjk_geom_info_t *m_total_list_geom_info;
//   phys_link_list<gjk_geom_info_t> m_list_geom_info;
//   int m_query_visitor_count;
//   int m_gent_query_visitor_count;
//   int m_cent_query_visitor_count;
//   int m_dent_query_visitor_count;
//   cached_query_info_t m_cached_query_info;
//   phys_vec3 m_accum_start_origin;
//   cached_query_info_t m_accum_query_info;
//   int m_total_query_count;
//   int m_total_cached_query_count;
// };

// /* 3441 */
// struct __cppobj phys_link_list<gjk_geom_info_t>::iterator
// {
//   gjk_geom_info_t *m_ptr;
// };

// /* 3442 */
// struct sightclip_t
// {
//   float mins[3];
//   float maxs[3];
//   float outerSize[3];
//   float start[3];
//   float end[3];
//   int passEntityNum[2];
//   int contentmask;
// };

// /* 3443 */
// struct RadiantCommand
// {
//   RadiantCommandType type;
//   int liveUpdateId;
//   char strCommand[512];
// };

// /* 3444 */
// struct threat_bias_t
// {
//   unsigned __int16 groupName[16];
//   int threatTable[16][16];
//   int threatGroupCount;
// };

// /* 3445 */
// struct AnimScriptList
// {
//   scr_animscript_t combat;
//   scr_animscript_t concealment_crouch;
//   scr_animscript_t concealment_prone;
//   scr_animscript_t concealment_stand;
//   scr_animscript_t cover_arrival;
//   scr_animscript_t cover_crouch;
//   scr_animscript_t cover_left;
//   scr_animscript_t cover_prone;
//   scr_animscript_t cover_right;
//   scr_animscript_t cover_stand;
//   scr_animscript_t cover_wide_left;
//   scr_animscript_t cover_wide_right;
//   scr_animscript_t death;
//   scr_animscript_t grenade_return_throw;
//   scr_animscript_t init;
//   scr_animscript_t pain;
//   scr_animscript_t react;
//   scr_animscript_t move;
//   scr_animscript_t scripted;
//   scr_animscript_t stop;
//   scr_animscript_t grenade_cower;
//   scr_animscript_t flashed;
//   scr_animscript_t jump;
//   scr_animscript_t turn;
//   scr_animscript_t weapons[2048];
// };

// /* 3446 */
// struct team_move_other_context_t
// {
//   sentient_s *other;
//   float vOrgOther[3];
//   float vVelOther[2];
//   float vDelta[2];
//   float vPerp[2];
//   float fPosDeltaLengthSqrd;
//   float fScale;
// };

// /* 3447 */
// struct team_move_context_t
// {
//   actor_s *self;
//   float vVelSelf[2];
//   float vOrgSelf[3];
//   float vVelDirSelf[2];
//   float fVelSelfSqrd;
//   float fDeltaCorrection;
//   float fIntervalSqrd;
//   float fWalkIntervalSqrd;
//   float fMaxIntervalSqrd;
//   int bFailedLookahead;
//   float fDodgePosDeltaLengthSqrd;
//   int dodgeEntities[48];
//   int dodgeEntityCount;
//   sentient_s *pDodgeOther;
//   bool bPileUp;
//   float fSlowDownPosDeltaLengthSqrd;
//   sentient_s *pSlowDownOther;
//   float vVelSlowDownOther[2];
// };

// /* 3448 */
// struct ai_funcs_t
// {
//   bool (__fastcall *pfnStart)(actor_s *, ai_state_t);
//   void (__fastcall *pfnFinish)(actor_s *, ai_state_t);
//   void (__fastcall *pfnSuspend)(actor_s *, ai_state_t);
//   bool (__fastcall *pfnResume)(actor_s *, ai_state_t);
//   actor_think_result_t (__fastcall *pfnThink)(actor_s *);
//   void (__fastcall *pfnTouch)(actor_s *, gentity_s *);
//   void (__fastcall *pfnPain)(actor_s *, gentity_s *, int, const float *, const int, const float *, const hitLocation_t);
// };

// /* 3449 */
// struct sentient_sort_t
// {
//   sentient_s *sentient;
//   float fMetric;
// };

/* 3450 */
struct BuiltinMethodDef
{
  const char* actionString;
  void(__cdecl* actionFunc)(scr_entref_t);
  int type;
};

// /* 3451 */
// struct entityHandler_t
// {
//   void (__cdecl *think)(gentity_s *);
//   void (__cdecl *reached)(gentity_s *);
//   void (__cdecl *blocked)(gentity_s *, gentity_s *);
//   void (__cdecl *touch)(gentity_s *, gentity_s *, int);
//   void (__cdecl *use)(gentity_s *, gentity_s *, gentity_s *);
//   void (__cdecl *pain)(gentity_s *, gentity_s *, int, const float *, const int, const float *, const hitLocation_t, const int);
//   void (__cdecl *react)(gentity_s *, gentity_s *, const float *);
//   void (__cdecl *die)(gentity_s *, gentity_s *, gentity_s *, int, int, const int, const float *, const hitLocation_t, int);
//   void (__cdecl *entinfo)(gentity_s *, float *);
//   void (__cdecl *controller)(const gentity_s *, int *);
//   int methodOfDeath;
//   int splashMethodOfDeath;
// };

// /* 3452 */
// struct __cppobj actor_physics_local_t
// {
//   float fFrameTime;
//   int bIsWalking;
//   int bGroundPlane;
//   trace_t groundTrace;
//   float fImpactSpeed;
//   float vPrevOrigin[3];
//   float vPrevVelocity[3];
//   int iTraceMask;
//   float stepheight;
// };

// /* 3453 */
// struct __declspec(align(4)) gjk_slide_move_output_t
// {
//   float new_position[3];
//   float new_velocity[3];
//   bool expensive_push_out;
//   bool expensive_push_out_failed;
// };

// /* 3454 */
// struct __cppobj __declspec(align(4)) gjk_slide_move_input_t
// {
//   gjk_slide_move_input_t_vtbl *__vftable /*VFT*/;
//   const float (*position)[3];
//   const float (*velocity)[3];
//   int gravity;
//   int has_gravity;
//   const float (*mins)[3];
//   const float (*maxs)[3];
//   int tracemask;
//   int clientnum;
//   float frametime;
//   bool do_step_down;
// };

// /* 3455 */
// struct /*VFT*/ gjk_slide_move_input_t_vtbl
// {
//   void (__thiscall *custom_process)(gjk_slide_move_input_t *this, gjk_trace_output_t *);
// };

// /* 3456 */
// struct /*VFT*/ ai_gjk_slide_move_input_t_vtbl
// {
//   void (__thiscall *custom_process)(gjk_slide_move_input_t *this, gjk_trace_output_t *);
// };

// /* 3457 */
// struct __cppobj ai_gjk_slide_move_input_t : gjk_slide_move_input_t
// {
//   actor_physics_t *m_pPhys;
// };

// /* 3458 */
// struct __cppobj CustomSearchInfo_FindPathWithLOS
// {
//   pathnode_t *m_pNodeTo;
//   float m_fWithinDistSqrd;
//   float startPos[3];
//   float negotiationOverlapCost;
// };

// /* 3459 */
// struct CustomSearchInfo_FindCloseNode
// {
//   float goalPos[3];
//   pathnode_t *closestNode;
//   float closestDistSq;
// };

// /* 3460 */
// struct __cppobj CustomSearchInfo_FindPath
// {
//   pathnode_t *m_pNodeTo;
//   float startPos[3];
//   float negotiationOverlapCost;
// };

// /* 3461 */
// struct __cppobj CustomSearchInfo_FindPathAway
// {
//   float m_vAwayFromPos[3];
//   float m_fDistAway;
//   float m_fDistAwaySqrd;
//   float m_fInitialDistAwaySq;
//   float m_fBestScore;
//   pathnode_t *m_pBestNode;
// };

// /* 3462 */
// struct __cppobj CustomSearchInfo_FindPathAwayNotCrossPlanes : CustomSearchInfo_FindPathAway
// {
//   int m_iPlaneCount;
//   float (*m_vNormal)[2];
//   float *m_fDist;
// };

// /* 3463 */
// struct CustomSearchInfo_CouldAttack
// {
//   pathnode_t *m_pNodeTo;
//   pathnode_t *attackNode;
// };

// /* 3464 */
// struct __cppobj CustomSearchInfo_FindPathNotCrossPlanes : CustomSearchInfo_FindPath
// {
//   int m_iPlaneCount;
//   float (*m_vNormal)[2];
//   float *m_fDist;
// };

// /* 3465 */
// struct __cppobj CustomSearchInfo_FindPathInCylinderWithLOSNotCrossPlanes : CustomSearchInfo_FindPathWithLOS
// {
//   const actor_goal_s *goal;
//   int m_iPlaneCount;
//   float (*m_vNormal)[2];
//   float *m_fDist;
// };

// /* 3466 */
// struct __cppobj CustomSearchInfo_FindPathInCylinderWithLOS : CustomSearchInfo_FindPathWithLOS
// {
//   const actor_goal_s *goal;
// };

// /* 3467 */
// struct __cppobj CustomSearchInfo_FindPathClosestPossible
// {
//   float m_fBestScore;
//   pathnode_t *m_pBestNode;
//   pathnode_t *m_pNodeTo;
//   float negotiationOverlapCost;
// };

// /* 3468 */
// struct CustomSearchInfo_FindPathWithWidth
// {
//   pathnode_t *m_pNodeTo;
//   float width;
//   float perp[2];
// };

// /* 3469 */
// struct actor_field_t
// {
//   int ofs;
//   int size[1];
//   actorFieldtype_t type;
// };

// /* 3470 */
// struct gameTypeScript_t
// {
//   char pszScript[64];
//   char pszName[64];
//   int bTeamBased;
// };

// /* 3471 */
// struct scr_data_t::<unnamed_type_gametype>
// {
//   int main;
//   int startupgametype;
//   int playerconnect;
//   int playerdisconnect;
//   int playerdamage;
//   int playerkilled;
//   int votecalled;
//   int playervote;
//   int playerrevive;
//   int actordamage;
//   int actorkilled;
//   int vehicledamage;
//   int vehicleradiusdamage;
//   int playerlaststand;
//   int iNumGameTypes;
//   gameTypeScript_t list[32];
// };

// /* 3472 */
// struct corpseInfo_t
// {
//   XAnimTree_s *tree;
//   int entnum;
//   int time;
//   __declspec(align(8)) clientInfo_t ci;
//   bool falling;
// };

// /* 3473 */
// struct scr_data_t
// {
//   int levelscript;
//   int gametypescript;
//   scr_data_t::<unnamed_type_gametype> gametype;
//   int delete_;
//   int initstructs;
//   int createstruct;
//   int findstruct;
//   AnimScriptList dogAnim;
//   __declspec(align(8)) _BYTE playerCorpseInfo[5984];
//   XAnimTree_s *actorXAnimTrees[16];
//   _BYTE actorCorpseInfo[11968];
//   int destructible_callback;
//   int levelnotify;
//   int faceeventnotify;
//   int updatespawnpoints;
//   int pregamescript;
//   int glassSmash;
// };

// /* 3474 */
// struct AITypeScript
// {
//   int main;
//   int precache;
//   int spawner;
// };

// /* 3475 */
// struct PhysicsInputs
// {
//   float vVelocity[3];
//   unsigned __int16 groundEntNum;
//   int bHasGroundPlane;
//   float groundplaneSlope;
//   int iFootstepTimer;
// };

// /* 3476 */
// struct actor_fields_s
// {
//   const char *name;
//   int ofs;
//   int size[1];
//   fieldtype_t type;
//   void (__cdecl *setter)(actor_s *, const actor_fields_s *);
//   void (__cdecl *getter)(actor_s *, const actor_fields_s *);
// };

// /* 3477 */
// struct $F121313FF02D849197C4300F0D0013AB
// {
//   const char *name;
//   const dvar_s **defaultDistDvar;
//   float defaultHeight;
// };

// /* 3478 */
// const struct $97E41B13BD0B431546CEBD7708497565
// {
//   const char *name;
//   const dvar_s **defaultDistDvar;
//   float defaultHeight;
// };

// /* 3479 */
// struct AIEventListener
// {
//   int entIndex;
//   unsigned int events;
// };

// /* 3480 */
// struct $4BAAEF421A7DA1E87559C5E7C38D0061
// {
//   unsigned __int32 outOfSkinnedCachedVerts : 1;
//   unsigned __int32 almostoutOfSkinnedCachedVerts : 1;
// };

// /* 3481 */
// union $9C85A821F1C00326FDC4A5D06C09C78D
// {
//   $4BAAEF421A7DA1E87559C5E7C38D0061 __s0;
//   unsigned int allbits;
// };

// /* 3482 */
// struct r_SkinConditions
// {
//   $9C85A821F1C00326FDC4A5D06C09C78D ___u0;
// };

// /* 3483 */
// struct badplace_brush_t
// {
//   gentity_s *volume;
//   float radius;
// };

// /* 3484 */
// union badplace_parms_t
// {
//   badplace_arc_t arc;
//   badplace_brush_t brush;
// };

// /* 3485 */
// struct badplace_t
// {
//   int endtime;
//   int pingTime;
//   unsigned __int16 name;
//   unsigned __int8 type;
//   unsigned __int8 teamflags;
//   int depth;
//   badplace_parms_t parms;
// };

// /* 3486 */
// struct _pendedBadPlace
// {
//   badplace_parms_t params;
//   unsigned int name;
//   int duration;
//   int teamflags;
//   int type;
// };

// /* 3487 */
// struct weaponParms
// {
//   float forward[3];
//   float right[3];
//   float up[3];
//   float muzzleTrace[3];
//   float gunForward[3];
//   const WeaponVariantDef *weapVariantDef;
//   const WeaponDef *weapDef;
// };

// /* 3488 */
// struct ddlStackMember_t
// {
//   ddlMemberDef_t *ddlMember;
//   int arrayIndex;
// };

// /* 3489 */
// struct ddlStack_t
// {
//   ddlStackMember_t stackMember[16];
//   int top;
// };

/* 3490 */
struct ddlBufferHeader_t
{
  unsigned int checksum;
  int version;
  unsigned __int8 flags;
  char associatedDDL[31];
};

// /* 3491 */
// struct searchState_t
// {
//   ddlDef_t *ddl;
//   int offset;
//   char path[256];
//   ddlMemberDef_t *member;
// };

// /* 3492 */
// struct scrCompilePub_t
// {
//   int value_count;
//   int far_function_count;
//   unsigned int loadedscripts;
//   unsigned int scriptsPos;
//   unsigned int scriptsCount;
//   unsigned int builtinFunc;
//   unsigned int builtinMeth;
//   unsigned __int16 canonicalStrings[65536];
//   const char *in_ptr;
//   const char *parseBuf;
//   bool script_loading;
//   bool allowedBreakpoint;
//   int developer_statement;
//   unsigned __int8 *opcodePos;
//   unsigned int programLen;
//   int func_table_size;
//   int func_table[1024];
// };

// /* 3493 */
// struct yy_buffer_state
// {
//   _iobuf *yy_input_file;
//   char *yy_ch_buf;
//   char *yy_buf_pos;
//   unsigned int yy_buf_size;
//   int yy_n_chars;
//   int yy_is_our_buffer;
//   int yy_is_interactive;
//   int yy_at_bol;
//   int yy_fill_buffer;
//   int yy_buffer_status;
// };

// /* 3494 */
// union sval_u
// {
//   unsigned __int8 type;
//   unsigned int stringValue;
//   unsigned int idValue;
//   float floatValue;
//   int intValue;
//   sval_u *node;
//   unsigned int sourcePosValue;
//   const char *codePosValue;
//   const char *debugString;
//   scr_block_s *block;
// };

// /* 3495 */
// struct scr_localVar_t
// {
//   unsigned int name;
//   unsigned int sourcePos;
// };

// /* 3496 */
// struct scr_block_s
// {
//   int abortLevel;
//   int localVarsCreateCount;
//   int localVarsPublicCount;
//   int localVarsCount;
//   unsigned __int8 localVarsInitBits[8];
//   scr_localVar_t localVars[64];
// };

// /* 3497 */
// struct stype_t
// {
//   sval_u val;
//   unsigned int pos;
// };

// /* 3498 */
// struct function_stack_t
// {
//   const char *pos;
//   unsigned int localId;
//   unsigned int localVarCount;
//   VariableValue *top;
//   VariableValue *startTop;
// };

// /* 3499 */
// struct function_frame_t
// {
//   function_stack_t fs;
//   int topType;
// };

// /* 3500 */
// struct scrVmPub_t
// {
//   unsigned int *localVars;
//   VariableValue *maxstack;
//   int function_count;
//   function_frame_t *function_frame;
//   VariableValue *top;
//   bool debugCode;
//   bool abort_on_error;
//   bool terminal_error;
//   unsigned int inparamcount;
//   unsigned int outparamcount;
//   unsigned int breakpointOutparamcount;
//   bool showError;
//   function_frame_t function_frame_start[32];
//   VariableValue stack[2048];
// };

// /* 3501 */
// struct FuncDebugData
// {
//   int breakpointCount;
// };

// /* 3502 */
// struct scrVmDebugPub_t
// {
//   FuncDebugData func_table[1024];
//   int checkBreakon;
//   const char *jumpbackHistory[128];
//   int jumpbackHistoryIndex;
//   int dummy;
// };

// /* 3503 */
// struct __declspec(align(4)) scrAnimPub_t
// {
//   unsigned int animtrees;
//   unsigned int animtree_node;
//   unsigned int animTreeNames;
//   scr_animtree_t xanim_lookup[2][128];
//   unsigned int xanim_num[2];
//   unsigned int animTreeIndex;
//   bool animtree_loading;
// };

// /* 3504 */
// struct scrVmGlob_t
// {
//   VariableValue eval_stack[2];
//   const char *dialog_error_message;
//   int loading;
//   int starttime;
//   unsigned int localVarsStack[2048];
//   bool recordPlace;
//   const char *lastFileName;
//   int lastLine;
// };

// /* 3505 */
// struct ThreadDebugInfo
// {
//   const char *pos[32];
//   int posSize;
//   float varUsage;
//   float endonUsage;
// };

// /* 3506 */
// struct VariableDebugInfo
// {
//   const char *pos;
//   const char *fileName;
//   const char *functionName;
//   int varUsage;
// };

// /* 3507 */
// union HashEntry::<unnamed_type_u>
// {
//   unsigned int prev;
//   unsigned int str;
// };

// /* 3508 */
// struct HashEntry
// {
//   unsigned int status_next;
//   HashEntry::<unnamed_type_u> u;
// };

// /* 3509 */
// struct __declspec(align(128)) scrStringGlob_t
// {
//   HashEntry *hashTable;
//   bool inited;
//   HashEntry *nextFreeEntry;
//   int indentLevel;
//   int stringsUsed[32];
// };

// /* 3510 */
// struct $119B815E6C15BED54461C272BD343858
// {
//   unsigned __int32 refCount : 16;
//   unsigned __int32 user : 8;
//   unsigned __int32 byteLen : 8;
// };

// /* 3511 */
// union $413831C5B78982AB703B00E783633B73
// {
//   $119B815E6C15BED54461C272BD343858 __s0;
//   volatile int data;
// };

// /* 3512 */
// struct __declspec(align(4)) RefString
// {
//   $413831C5B78982AB703B00E783633B73 ___u0;
//   char str[1];
// };

// /* 3513 */
// struct __declspec(align(4)) SourceBufferInfo
// {
//   const char *codePos;
//   char *buf;
//   const char *sourceBuf;
//   int len;
//   int sortedIndex;
//   bool archive;
// };

// /* 3514 */
// struct scrParserPub_t
// {
//   SourceBufferInfo *sourceBufferLookup;
//   unsigned int sourceBufferLookupLen;
//   const char *scriptfilename;
//   const char *sourceBuf;
// };

// /* 3515 */
// struct SaveImmediate
// {
//   int f;
//   int saveByteCount;
// };

// /* 3516 */
// struct debugger_sval_s
// {
//   debugger_sval_s *next;
// };

// /* 3517 */
// struct ScriptExpression_t
// {
//   sval_u parseData;
//   int breakonExpr;
//   debugger_sval_s *exprHead;
// };

// /* 3518 */
// struct OpcodeLookup
// {
//   const char *codePos;
//   unsigned int sourcePosIndex;
//   unsigned int sourcePosCount;
// };

// /* 3519 */
// struct SourceLookup
// {
//   unsigned int sourcePos;
//   int type;
// };

// /* 3520 */
// struct SaveSourceBufferInfo
// {
//   char *sourceBuf;
//   int len;
// };

// /* 3521 */
// struct scrParserGlob_t
// {
//   OpcodeLookup *opcodeLookup;
//   unsigned int opcodeLookupMaxLen;
//   unsigned int opcodeLookupLen;
//   SourceLookup *sourcePosLookup;
//   unsigned int sourcePosLookupMaxLen;
//   unsigned int sourcePosLookupLen;
//   unsigned int sourceBufferLookupMaxLen;
//   const unsigned __int8 *currentCodePos;
//   unsigned int currentSourcePosCount;
//   SaveSourceBufferInfo *saveSourceBufferLookup;
//   unsigned int saveSourceBufferLookupLen;
//   int delayedSourceIndex;
//   int threadStartSourceIndex;
// };

// /* 3522 */
// struct Scr_SourcePos_t
// {
//   unsigned int bufferIndex;
//   int lineNum;
//   unsigned int sourcePos;
// };

// /* 3523 */
// struct MemoryNode
// {
//   unsigned __int16 prev;
//   unsigned __int16 next;
//   unsigned int padding[3];
// };

// /* 3524 */
// struct __declspec(align(128)) scrMemTreeGlob_t
// {
//   MemoryNode nodes[65536];
//   unsigned __int8 leftBits[256];
//   unsigned __int8 numBits[256];
//   unsigned __int8 logBits[256];
//   unsigned __int16 head[17];
//   int totalAlloc;
//   int totalAllocBuckets;
//   int avgAlloc;
//   int avgAllocBytes;
// };

// /* 3525 */
// struct scrMemTreeDebugGlob_t
// {
//   unsigned __int8 mt_usage[65536];
//   unsigned __int8 mt_usage_size[65536];
// };

// /* 3526 */
// struct PrecacheEntry
// {
//   unsigned __int16 filename;
//   bool include;
//   unsigned int sourcePos;
// };

// /* 3527 */
// struct ArchivedCanonicalStringInfo
// {
//   unsigned __int16 canonicalStr;
//   const char *value;
// };

// /* 3528 */
// struct __declspec(align(2)) scrEvaluateGlob_t
// {
//   char *archivedCanonicalStringsBuf;
//   ArchivedCanonicalStringInfo *archivedCanonicalStrings;
//   int *canonicalStringLookup;
//   bool freezeScope;
//   bool freezeObjects;
//   bool objectChanged;
// };

// /* 3529 */
// struct __cppobj UI_Component
// {
// };

// /* 3530 */
// struct __cppobj UI_ScrollPane : UI_Component
// {
// };

// /* 3531 */
// struct __cppobj UI_LinesComponent : UI_Component
// {
//   int selectedLine;
//   int numLines;
// };

// /* 3532 */
// struct Scr_Breakpoint
// {
//   int line;
//   unsigned int bufferIndex;
//   char *codePos;
//   Scr_WatchElement_s *element;
//   int builtinIndex;
//   Scr_Breakpoint *next;
//   Scr_Breakpoint **prev;
// };

// /* 3533 */
// struct Scr_WatchElement_s
// {
//   ScriptExpression_t expr;
//   const char *valueText;
//   const char *refText;
//   bool directObject;
//   unsigned int objectId;
//   unsigned __int8 objectType;
//   unsigned __int8 oldObjectType;
//   bool expand;
//   unsigned __int8 breakpointType;
//   bool hitBreakpoint;
//   bool changed;
//   bool valueDefined;
//   bool threadList;
//   bool endonList;
//   VariableValue value;
//   unsigned int fieldName;
//   unsigned int childCount;
//   unsigned int hardcodedCount;
//   int id;
//   Scr_Breakpoint *breakpoint;
//   const char *deadCodePos;
//   unsigned int bufferIndex;
//   unsigned int sourcePos;
//   int changedTime;
//   Scr_WatchElement_s *parent;
//   Scr_WatchElement_s *childArrayHead;
//   Scr_WatchElement_s *childHead;
//   Scr_WatchElement_s *next;
// };

// /* 3534 */
// struct __cppobj Scr_ScriptWindow : UI_LinesComponent
// {
//   unsigned int bufferIndex;
//   int currentTopLine;
//   const char *currentBufPos;
//   Scr_Breakpoint *breakpointHead;
//   Scr_Breakpoint *builtinHead;
//   int numCols;
// };

// /* 3535 */
// struct __cppobj Scr_AbstractScriptList : UI_LinesComponent
// {
//   Scr_ScriptWindow **scriptWindows;
// };

// /* 3536 */
// struct __cppobj Scr_ScriptList : Scr_AbstractScriptList
// {
// };

// /* 3537 */
// struct __cppobj Scr_OpenScriptList : Scr_AbstractScriptList
// {
// };

// /* 3538 */
// struct __cppobj Scr_ScriptWatch : UI_LinesComponent
// {
//   Scr_WatchElement_s *elementHead;
//   int elementId;
//   unsigned int localId;
//   int dirty;
// };

// /* 3539 */
// struct Scr_SourcePos2_t
// {
//   unsigned int bufferIndex;
//   unsigned int sourcePos;
// };

// /* 3540 */
// struct __cppobj Scr_ScriptCallStack : UI_LinesComponent
// {
//   Scr_SourcePos2_t stack[33];
// };

// /* 3541 */
// struct __cppobj UI_VerticalDivider : UI_Component
// {
// };

// /* 3542 */
// struct Scr_OpcodeList_s
// {
//   char *codePos;
//   Scr_OpcodeList_s *next;
// };

// /* 3543 */
// struct Scr_WatchElementNode_s
// {
//   Scr_WatchElement_s *element;
//   Scr_WatchElementNode_s *next;
// };

// /* 3544 */
// struct Scr_WatchElementDoubleNode_t
// {
//   Scr_WatchElementNode_s *list;
//   Scr_WatchElementNode_s *removedList;
// };

// /* 3545 */
// struct scrDebuggerGlob_t
// {
//   int prevMouseTime;
//   float prevMousePos[2];
//   UI_ScrollPane scriptScrollPane;
//   UI_ScrollPane miscScrollPane;
//   Scr_ScriptList scriptList;
//   Scr_OpenScriptList openScriptList;
//   Scr_ScriptWatch scriptWatch;
//   Scr_ScriptCallStack scriptCallStack;
//   UI_VerticalDivider mainWindow;
//   char *breakpoints;
//   int breakpointOpcode;
//   const char *breakpointCodePos;
//   Scr_SourcePos_t breakpointPos;
//   bool atBreakpoint;
//   volatile bool abort;
//   char *nextBreakpointCodePos;
//   unsigned int nextBreakpointThreadId;
//   bool nextBreakpointCodePosMasked;
//   char *killThreadCodePos;
//   bool kill_thread;
//   VariableValue *breakpointTop;
//   bool run_debugger;
//   int step_mode;
//   Scr_OpcodeList_s *assignHead;
//   char *assignHeadCodePos;
//   bool assignBreakpointSet;
//   bool add;
//   Scr_WatchElement_s *currentElement;
//   unsigned int removeId;
//   Scr_WatchElementDoubleNode_t **variableBreakpoints;
//   bool debugger_inited_main;
//   bool debugger_inited;
//   bool debugger_inited_system;
//   unsigned int objectId;
//   char *colBuf;
//   int prevBreakpointLineNum;
//   bool disableBreakpoints;
//   bool showConsole;
//   volatile int disableDebuggerRemote;
//   int breakpointCount;
// };

// /* 3546 */
// struct Scr_AddFileInfo
// {
//   int maxNumCols;
//   int to;
//   int from;
// };

// /* 3547 */
// struct CaseStatementInfo
// {
//   unsigned int name;
//   const char *codePos;
//   unsigned int sourcePos;
//   CaseStatementInfo *next;
// };

// /* 3548 */
// struct BreakStatementInfo
// {
//   const char *codePos;
//   const char *nextCodePos;
//   BreakStatementInfo *next;
// };

// /* 3549 */
// struct ContinueStatementInfo
// {
//   const char *codePos;
//   const char *nextCodePos;
//   ContinueStatementInfo *next;
// };

// /* 3550 */
// struct VariableCompileValue
// {
//   VariableValue value;
//   sval_u sourcePos;
// };

// /* 3551 */
// struct scrCompileGlob_t
// {
//   unsigned __int8 *codePos;
//   unsigned __int8 *prevOpcodePos;
//   unsigned int filePosId;
//   unsigned int fileCountId;
//   int cumulOffset;
//   int maxOffset;
//   int maxCallOffset;
//   bool bConstRefCount;
//   bool in_developer_thread;
//   unsigned int developer_thread_sourcePos;
//   bool firstThread[2];
//   CaseStatementInfo *currentCaseStatement;
//   bool bCanBreak;
//   BreakStatementInfo *currentBreakStatement;
//   bool bCanContinue;
//   ContinueStatementInfo *currentContinueStatement;
//   scr_block_s **breakChildBlocks;
//   int *breakChildCount;
//   scr_block_s *breakBlock;
//   scr_block_s **continueChildBlocks;
//   int *continueChildCount;
//   bool forceNotCreate;
//   PrecacheEntry *precachescriptList;
//   VariableCompileValue value_start[32];
// };

// /* 3552 */
// struct TreeNameMap
// {
//   int animIndex;
//   char strName[80];
// };

// /* 3553 */
// struct ClientTreeStorage
// {
//   char *strName;
//   scr_animtree_t animTree;
//   int numIndices;
//   TreeNameMap *pTreeNameMap;
// };

// /* 3554 */
// struct scrAnimGlob_t
// {
//   const char *start;
//   const char *pos;
//   unsigned int using_xanim_lookup[2][128];
//   int bAnimCheck;
// };

// /* 3555 */
// const struct ParseValue
// {
//   unsigned int scriptExprData;
//   XExpr::MathTypes exprType;
// };

// /* 3556 */
// struct ExpressionOperatorData
// {
//   int iArity;
//   const char *strValue;
//   bool isFunction;
//   XExpr::MathTypes (__cdecl *FuncTypeTesting)(const ParseValue *, int, scriptInstance_t);
//   XExpr::MathOpcodes eMathType;
// };

// /* 3557 */
// struct StandardParams
// {
//   const char *strParamName;
//   XExpr::MathTypes eType;
// };

// /* 3558 */
// struct __cppobj ScriptTokenizer
// {
//   scriptInstance_t inst;
//   int m_iNumInStack;
//   char m_stack[40][256];
// };

// /* 3559 */
// struct ParseEntry
// {
//   ParseValue theValue;
//   unsigned int optionName;
// };

// /* 3560 */
// struct __cppobj XExpr::BufferPosition
// {
//   int m_iCurrPos;
// };

// /* 3561 */
// struct ValueEntry
// {
//   unsigned int valueName;
//   unsigned int theValue;
// };

// /* 3562 */
// struct __cppobj stPbSv
// {
//   unsigned int m_svId;
//   void *m_Md5;
//   void *m_SvInstance;
//   void *m_ClInstance;
//   void *m_AgInstance;
//   char m_msgPrefix[32];
//   char m_cwd[257];
//   int m_ReloadServer;
//   char *(__cdecl *m_GameCommand)(char *, char *);
//   char *(__cdecl *m_GameQuery)(int, char *);
//   char *(__cdecl *m_GameMsg)(char *, int);
//   char *(__cdecl *m_SendToClient)(int, char *, int);
//   char *(__cdecl *m_AddPbEvent)(void *, int, int, int, char *, int);
//   char *(__cdecl *m_ProcessPbEvents)(void *, int);
//   char *(__cdecl *m_SendToAddrPort)(char *, unsigned __int16, int, char *);
//   char *(__cdecl *m_PassConnectString)(void *, char *, char *);
//   char *(__cdecl *m_AuthClient)(void *, char *, int, char *);
//   void (__cdecl *m_TrapConsole)(void *, char *, int);
//   void *m_Agent;
// };

// /* 3563 */
// struct Pb_Sv_Client_s
// {
//   char name[33];
//   char guid[33];
//   char ip[33];
//   int slotIndex;
// };

// /* 3564 */
// struct MD5_CTX
// {
//   unsigned int i[2];
//   unsigned int buf[4];
//   unsigned __int8 in[64];
//   unsigned __int8 digest[16];
// };

// /* 3565 */
// struct __cppobj stPbCl
// {
//   int m_clId;
//   void *m_Md5;
//   void *m_ClInstance;
//   void *m_AgInstance;
//   int m_ReloadClient;
//   char m_guid[33];
//   char m_msgPrefix[32];
//   char m_cwd[256];
//   char m_CdKeyNums[17];
//   unsigned int rk1;
//   unsigned int rk2;
//   unsigned int rk3;
//   unsigned int rk4;
//   char *(__cdecl *m_GameCommand)(char *, char *);
//   char *(__cdecl *m_GameQuery)(int, char *);
//   char *(__cdecl *m_GameMsg)(char *, int);
//   char *(__cdecl *m_SendToServer)(int, char *);
//   char *(__cdecl *m_AddPbEvent)(void *, int, int, char *, int);
//   char *(__cdecl *m_ProcessPbEvents)(void *, int);
//   char *(__cdecl *m_SendToAddrPort)(char *, unsigned __int16, int, char *);
//   char *(__cdecl *m_GlQuery)(int);
//   char *(__cdecl *m_ClientConnect)(void *, int, char *, int *);
//   int (__cdecl *m_TrapPreExecCmd)(void *, char *);
//   void (__cdecl *m_TrapConsole)(void *, char *, int);
//   void *pbsvptr;
// };

// /* 3566 */
// struct flamePhysics_t
// {
//   float origin[3];
//   float newPos[3];
//   float velocity[3];
//   float invStartSpeed;
//   float gravity;
//   float rotation;
//   float rotVel;
// };

// /* 3567 */
// struct flameSize_t
// {
//   float current;
//   float rate;
// };

// /* 3568 */
// struct flameAge_t
// {
//   int lastUpdateTime;
//   int startTime;
//   int endTime;
// };

// /* 3570 */
// struct flameList_t
// {
//   flameGeneric_s *prev;
//   flameGeneric_s *next;
// };

// /* 3569 */
// struct flameGeneric_s
// {
//   flamePhysics_t phys;
//   flameSize_t size;
//   flameAge_t age;
//   flameList_t listGlobal;
//   flameList_t listLocal;
//   flameStream_s *stream;
//   unsigned __int32 type : 3;
//   unsigned __int32 delete_chunk : 1;
//   unsigned __int32 id : 28;
// };

// /* 3571 */
// struct flameStream_s
// {
//   flameGeneric_s gen;
//   flameRenderList_s *renderList;
//   flameTable *flameVars;
//   flameChunk_s *chunkList;
//   int lastSmokeChunkTime;
//   int lastDripChunkTime;
//   int entityNum;
//   int damage;
//   float damageDuration;
//   float damageInterval;
//   int isKillcamFlame;
//   int firingThroughGeo;
// };

// /* 3573 */
// struct flameRenderList_s
// {
//   float fuelVerts[128][3];
//   float flameVerts[128][3];
//   flameRender_s *flameRend;
// };

// /* 3574 */
// struct flameChunk_s
// {
//   flameGeneric_s gen;
//   int spawnFireInterval;
//   int lastSpawnFire;
//   int spawnDripsInterval;
//   int spawnSmokeInterval;
// };

// /* 3572 */
// struct flameRender_s
// {
//   char name[128];
//   flameGeneric_s *fireList;
//   flameGeneric_s *dripsList;
// };

// /* 3575 */
// struct __declspec(align(4)) flameSource_t
// {
//   float origin[3];
//   float angle[3];
//   float entityOrigin[3];
//   flameStream_s *currentStream;
//   int lastUsedTime;
//   int isKillcamFlame;
//   int firingThroughGeo;
//   int entityNum;
//   int firstDobjHandle;
//   int thirdDobjHandle;
//   int lastSoundTime;
//   float flameSoundPoint[3];
//   bool bIsFiring;
//   bool inUse;
//   bool is_server_alloc;
//   bool wasFiring;
//   unsigned __int8 firstBoneIndex;
//   unsigned __int8 thirdBoneIndex;
// };

// /* 3576 */
// struct flameVarDef_t
// {
//   const char *dvarName;
//   const char *name;
//   float defaultVal;
//   float minVal;
//   float maxVal;
//   const char *description;
// };

// /* 3577 */
// struct __cppobj __declspec(align(16)) phys_static_array<flameGeneric_s *,1000>
// {
//   char m_buffer[4000];
//   flameGeneric_s **const m_slot_array;
//   int m_alloc_count;
// };

// /* 3578 */
// struct flameDrips_t
// {
//   flameGeneric_s gen;
//   flameRender_s *flameRend;
// };

// /* 3579 */
// struct flameFire_t
// {
//   flameGeneric_s gen;
//   flameRender_s *flameRend;
// };

// /* 3580 */
// struct flameWeaponConfig_t
// {
//   bool bIsFiring;
//   bool bFireWhileIdle;
//   float origin[3];
//   float angle[3];
//   float strength;
//   float thickness;
//   float burnRate;
//   float entityOrigin[3];
//   flameTable *fTable;
//   int damage;
//   float damageDuration;
//   float damageInterval;
// };

// /* 3581 */
// struct __declspec(align(8)) renderQuad_t
// {
//   float pos[4];
//   float rotation;
//   float radius;
//   float lifeFrac;
// };

// /* 3582 */
// struct __cppobj colgeom_visitor_inlined_t<500> : colgeom_visitor_t
// {
//   int nprims;
//   bool overflow;
//   col_prim_t prims[500];
// };

// /* 3583 */
// struct /*VFT*/ colgeom_visitor_inlined_t<500>_vtbl
// {
//   void (__thiscall *~visitor_base_t)(visitor_base_t *this);
//   void (__thiscall *prolog)(colgeom_visitor_t *this);
//   void (__thiscall *epilog)(colgeom_visitor_t *this);
//   void (__thiscall *visit)(colgeom_visitor_t *this, const cbrush_t *);
//   void (__thiscall *visit)(colgeom_visitor_t *this, const CollisionAabbTree *);
//   void (__thiscall *update)(colgeom_visitor_t *this, const float *, const float *, int, const float *);
// };

// /* 3584 */
// struct __cppobj cdl_proftimer
// {
//   unsigned __int64 stamp;
//   unsigned __int64 value;
//   unsigned __int64 avr;
//   unsigned __int64 tot;
//   unsigned __int64 capture_count;
//   unsigned __int64 calls;
//   bool capture;
//   unsigned __int64 mx[5];
// };

// /* 3585 */
// struct __cppobj std::pair<flameGeneric_s * *,flameGeneric_s * *>
// {
//   flameGeneric_s **first;
//   flameGeneric_s **second;
// };

// /* 3586 */
// struct __cppobj std::_Scalar_ptr_iterator_tag
// {
// };

// /* 3587 */
// struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_41
// {
//   const void *pVFTable;
//   void *spare;
//   char name[41];
// };

// /* 3588 */
// struct __cppobj Flame_SortByStream
// {
// };

// /* 3589 */
// struct flameChunkSpawnVars_t
// {
//   int time;
//   int duration;
//   float origin[3];
//   float angle[3];
//   float speed;
//   float decel;
//   float gravityStart;
//   float gravityEnd;
//   float sizeMax;
//   float sizeStart;
//   float sizeEnd;
//   float sizeRate;
//   float spawnFireIntervalStart;
//   float spawnFireIntervalEnd;
// };

// /* 3590 */
// struct FxBeam
// {
//   float begin[3];
//   float end[3];
//   GfxColor beginColor;
//   GfxColor endColor;
//   float beginRadius;
//   float endRadius;
//   Material *material;
//   Material *material2;
//   int segmentCount;
//   int perpSegmentCount;
//   float wiggleDist;
//   float *segmentVerts;
//   int flags;
//   float animFrac;
// };

// /* 3591 */
// struct __declspec(align(4)) cCurve::nodeData
// {
//   float pos[3];
//   float vel[3];
//   float dist;
//   float totalDist;
//   bool bReached;
// };

// /* 3592 */
// struct __cppobj cCurve
// {
//   cCurve::nodeData mNodes[100];
//   int mNotifyEntNum;
//   int mCameraEntNum;
//   bool mNotifyLevel;
//   float mSpeed;
//   int mNumNodes;
//   bool mActive;
//   cCurve::eCurveType mCurveType;
//   float mDistance;
//   bool mDraw;
//   float mDrawColor[4];
//   bool mUseColor;
//   bool mPaused;
//   float mCurPos;
//   float mCurServerPos;
//   int mLastNode;
//   int mIndex;
// };

// /* 3593 */
// struct __cppobj cCurveManager
// {
// };

// /* 3594 */
// struct flameSmoke_t
// {
//   flameGeneric_s gen;
//   Material *material;
//   float smokeFadein;
//   float smokeFadeout;
//   float smokeMaxAlpha;
//   float smokeBrightness;
// };

// /* 3595 */
// struct IKJointBones
// {
//   IKBoneNames childBone;
//   IKBoneNames jointBone;
//   IKBoneNames parentBone;
//   IKBoneNames baseBone;
// };

// /* 3596 */
// union $61DB84DF2E94E53D7788C0F08FDC33D5
// {
//   unsigned __int8 *localClipMap;
//   unsigned __int8 *clipMap;
// };

// /* 3597 */
// struct IKSystem
// {
//   bool bInitialized;
//   char *boneStrings[23];
//   IKBoneNames ikBoneParents[23];
//   IKJointBones joints[4];
//   int systemFrameNumber;
//   unsigned __int16 *ikImportBoneStringVars;
//   unsigned __int16 *ikImportMiscBoneStringVars;
//   $61DB84DF2E94E53D7788C0F08FDC33D5 ___u7;
//   const dvar_s *dvars[23];
//   bool inViewer;
//   float leftHandOffset[3];
//   float leftHandRotation[3];
//   int leftHandEntnum;
//   int leftHandSwitchTime;
// };

// /* 3598 */
// struct IKJointVars
// {
//   bool bValid;
//   float UpperLength;
//   float UpperIKc;
//   float UpperIKInvc;
//   float LowerLength;
//   float LowerIKc;
//   float LowerIKInvc;
// };

// /* 3599 */
// struct __declspec(align(4)) ikLerpInfo_t
// {
//   int lastUpdateTime;
//   float lerp;
//   bool goalState;
// };

// /* 3600 */
// struct __cppobj IKCollisionCache
// {
//   int hitIndex;
//   colgeom_visitor_inlined_t<200> proximity_data;
// };

// /* 3601 */
// union $5C27F401DEE3D99C87E4E6F6FAC05DC6
// {
//   unsigned __int8 *model;
//   unsigned __int8 *localModel;
// };

// /* 3602 */
// union $EA4EDD5F3694BDBBCEEF125995E3464A
// {
//   IKSystem *localIkSystem;
//   IKSystem *ikSystem;
// };

// /* 3603 */
// struct __cppobj __declspec(align(16)) IKState
// {
//   int inUse;
//   int entityNum;
//   bool isServer;
//   int localClientIndex;
//   $5C27F401DEE3D99C87E4E6F6FAC05DC6 ___u4;
//   int isIKModel;
//   $EA4EDD5F3694BDBBCEEF125995E3464A ___u6;
//   int timeMS;
//   int frameUsed;
//   unsigned __int8 ikBoneToObjBone[24];
//   unsigned __int8 objBoneToIKBone[164];
//   int bJointVarsValid;
//   IKJointVars jointVars[4];
//   float footHeightFromGround;
//   int animatedIKBonesBits[1];
//   int objBoneCalcBits[4];
//   int modifiedIKBones;
//   float footMats[2][4][4];
//   float handMats[2][4][4];
//   float leftHandFromRightHandMat[4][4];
//   float entityXform[4][4];
//   float entityLegsXform[4][4];
//   float (*matArrayPreIK)[4][4];
//   float (*matArrayPostIK)[4][4];
//   float (*matArrayXforms)[4][4];
//   float (*matArrayCache)[4][4];
//   float (*matArrayCachePre)[4][4];
//   int cacheActive;
//   float rootOffset[3];
//   float rootQuat[4];
//   float origin[3];
//   float angles[3];
//   float lastTerrainMappingFootOffsetZ[2];
//   float lastTerrainMappingPelvisZ;
//   float lastTerrainMappingOrigin[3];
//   float lastTerrainMappingTraceZ[2];
//   float lastTerrainMappingTraceFootPos[2][2];
//   float leftHandLerp;
//   float rightHandLerp;
//   int terrainDisableTime;
//   ikLerpInfo_t lerpInfo[21];
//   int lastFrameMS[21];
//   bool bHasActiveLayers;
//   int lastMovedTime;
//   int lastNotMovedTime;
//   int lastUpdateLayerLerpsTime;
//   int statusFlags;
//   int lastUpdateStatusFlags;
//   int lastIsIKEntityFrameNum;
//   float controllers[6][3];
//   float controller_origin_angles[3];
//   bool hasControllers;
//   DvarValue dvarValues[23];
//   float velocity[3];
//   float gunnerCrouch;
//   IKCollisionCache collisionCache;
//   float leftHandOffset[3];
//   float leftHandRotation[3];
//   float leftHandOffsetPrev[3];
//   float leftHandRotationPrev[3];
//   int leftHandChangeTime;
//   float leftHandLastProximityLerp;
//   IKWeaponOffsetType weaponOffsetType;
//   float lastFootTraceNormals[2][3];
//   float lastFootTraceGoalNormals[2][3];
//   float lastCollisionEntityZ;
//   int footTraceCollisionHint[4];
//   float actorLookAtEntityAngles[3];
//   float actorLookAtEntityScale;
//   bool bHasLegSolverLayer;
//   bool bHasArmSolverLayer;
//   IKWeaponClass weaponClass;
// };

// /* 3604 */
// struct __declspec(align(4)) XAnimState
// {
//   float currentAnimTime;
//   float oldTime;
//   __int16 cycleCount;
//   __int16 oldCycleCount;
//   float goalTime;
//   float goalWeight;
//   float weight;
//   float rate;
//   bool instantWeightChange;
// };

// /* 3605 */
// struct __declspec(align(4)) XAnimInfo
// {
//   unsigned __int16 notifyChild;
//   __int16 notifyIndex;
//   unsigned __int16 notifyName;
//   unsigned __int16 notifyType;
//   unsigned __int16 prev;
//   unsigned __int16 next;
//   unsigned __int16 children;
//   unsigned __int16 parent;
//   unsigned __int16 animIndex;
//   unsigned __int16 animToModel;
//   $AE2C40205408E7677B548FCC327D21B5 ___u10;
//   XAnimState state;
//   XAnimParts *streamedParts;
//   unsigned __int16 streamedAnimToModel;
// };

// /* 3606 */
// struct BINKIO
// {
//   unsigned int (__stdcall *ReadHeader)(BINKIO *, int, void *, unsigned int);
//   unsigned int (__stdcall *ReadFrame)(BINKIO *, unsigned int, int, void *, unsigned int);
//   unsigned int (__stdcall *GetBufferSize)(BINKIO *, unsigned int);
//   void (__stdcall *SetInfo)(BINKIO *, void *, unsigned int, unsigned int, unsigned int);
//   unsigned int (__stdcall *Idle)(BINKIO *);
//   void (__stdcall *Close)(BINKIO *);
//   int (__stdcall *BGControl)(BINKIO *, unsigned int);
//   BINK *bink;
//   volatile unsigned int ReadError;
//   volatile unsigned int DoingARead;
//   volatile unsigned int BytesRead;
//   volatile unsigned int Working;
//   volatile unsigned int TotalTime;
//   volatile unsigned int ForegroundTime;
//   volatile unsigned int IdleTime;
//   volatile unsigned int ThreadTime;
//   volatile unsigned int BufSize;
//   volatile unsigned int BufHighUsed;
//   volatile unsigned int CurBufSize;
//   volatile unsigned int CurBufUsed;
//   volatile unsigned int Suspended;
//   volatile unsigned __int8 iodata[160];
//   void (__stdcall *suspend_callback)(BINKIO *);
//   int (__stdcall *try_suspend_callback)(BINKIO *);
//   void (__stdcall *resume_callback)(BINKIO *);
//   void (__stdcall *idle_on_callback)(BINKIO *);
//   volatile unsigned int callback_control[16];
// };

// /* 3607 */
// struct BINKRECT
// {
//   int Left;
//   int Top;
//   int Width;
//   int Height;
// };

// /* 3612 */
// struct BUNDLEPOINTERS
// {
//   void *typeptr;
//   void *type16ptr;
//   void *colorptr;
//   void *bits2ptr;
//   void *motionXptr;
//   void *motionYptr;
//   void *dctptr;
//   void *mdctptr;
//   void *patptr;
// };

// /* 3613 */
// struct __unaligned __declspec(align(4)) BINK
// {
//   unsigned int Width;
//   unsigned int Height;
//   unsigned int Frames;
//   unsigned int FrameNum;
//   unsigned int LastFrameNum;
//   unsigned int FrameRate;
//   unsigned int FrameRateDiv;
//   unsigned int ReadError;
//   unsigned int OpenFlags;
//   unsigned int BinkType;
//   unsigned int Size;
//   unsigned int FrameSize;
//   unsigned int SndSize;
//   unsigned int FrameChangePercent;
//   BINKRECT FrameRects[8];
//   int NumRects;
//   BINKFRAMEBUFFERS *FrameBuffers;
//   void *MaskPlane;
//   unsigned int MaskPitch;
//   unsigned int MaskLength;
//   void *AsyncMaskPlane;
//   void *InUseMaskPlane;
//   void *LastMaskPlane;
//   unsigned int LargestFrameSize;
//   unsigned int InternalFrames;
//   int NumTracks;
//   unsigned int Highest1SecRate;
//   unsigned int Highest1SecFrame;
//   int Paused;
//   int async_in_progress[2];
//   unsigned int soundon;
//   unsigned int videoon;
//   void *compframe;
//   unsigned int compframesize;
//   unsigned int compframeoffset;
//   unsigned int compframekey;
//   unsigned int skippedlastblit;
//   unsigned int playingtracks;
//   BINKSND *bsnd;
//   int *trackindexes;
//   BUNDLEPOINTERS bunp;
//   unsigned int changepercent;
//   void *preloadptr;
//   unsigned int *frameoffsets;
//   BINKIO bio;
//   unsigned __int8 *ioptr;
//   unsigned int iosize;
//   unsigned int decompwidth;
//   unsigned int decompheight;
//   unsigned int *tracksizes;
//   unsigned int *tracktypes;
//   int *trackIDs;
//   unsigned int numrects;
//   unsigned int playedframes;
//   unsigned int firstframetime;
//   unsigned int startblittime;
//   unsigned int startsynctime;
//   unsigned int startsyncframe;
//   unsigned int twoframestime;
//   unsigned int slowestframetime;
//   unsigned int slowestframe;
//   unsigned int slowest2frametime;
//   unsigned int slowest2frame;
//   unsigned int totalmem;
//   unsigned int timevdecomp;
//   unsigned int timeadecomp;
//   unsigned int timeblit;
//   unsigned int timeopen;
//   unsigned int fileframerate;
//   unsigned int fileframeratediv;
//   unsigned int runtimeframes;
//   int rtindex;
//   unsigned int *rtframetimes;
//   unsigned int *rtadecomptimes;
//   unsigned int *rtvdecomptimes;
//   unsigned int *rtblittimes;
//   unsigned int *rtreadtimes;
//   unsigned int *rtidlereadtimes;
//   unsigned int *rtthreadreadtimes;
//   unsigned int lastblitflags;
//   unsigned int lastdecompframe;
//   unsigned int lastfinisheddoframe;
//   unsigned int lastresynctime;
//   unsigned int doresync;
//   unsigned int soundskips;
//   unsigned int skipped_status_this_frame;
//   unsigned int very_delayed;
//   unsigned int skippedblits;
//   unsigned int skipped_in_a_row;
//   unsigned int paused_sync_diff;
//   unsigned int last_time_almost_empty;
//   unsigned int last_read_count;
//   unsigned int last_sound_count;
//   unsigned int snd_callback_buffer[16];
//   int allkeys;
//   BINKFRAMEBUFFERS *allocatedframebuffers;
// };

// /* 3608 */
// struct BINKPLANE
// {
//   int Allocate;
//   void *Buffer;
//   unsigned int BufferPitch;
// };

// /* 3609 */
// struct BINKFRAMEPLANESET
// {
//   BINKPLANE YPlane;
//   BINKPLANE cRPlane;
//   BINKPLANE cBPlane;
//   BINKPLANE APlane;
// };

// /* 3610 */
// struct BINKFRAMEBUFFERS
// {
//   int TotalFrames;
//   unsigned int YABufferWidth;
//   unsigned int YABufferHeight;
//   unsigned int cRcBBufferWidth;
//   unsigned int cRcBBufferHeight;
//   unsigned int FrameNum;
//   BINKFRAMEPLANESET Frames[2];
// };

// /* 3611 */
// struct BINKSND
// {
//   unsigned __int8 *sndwritepos;
//   unsigned int audiodecompsize;
//   unsigned int sndbufsize;
//   unsigned __int8 *sndbuf;
//   unsigned __int8 *sndend;
//   unsigned int sndcomp;
//   unsigned __int8 *sndreadpos;
//   unsigned int orig_freq;
//   unsigned int freq;
//   int bits;
//   int chans;
//   int BestSizeIn16;
//   unsigned int BestSizeMask;
//   int OnOff;
//   unsigned int Latency;
//   unsigned int VideoScale;
//   unsigned int sndendframe;
//   unsigned int sndpad;
//   int sndprime;
//   int NoThreadService;
//   unsigned int SoundDroppedOut;
//   unsigned int sndconvert8;
//   unsigned __int8 snddata[256];
//   int (__stdcall *Ready)(BINKSND *);
//   int (__stdcall *Lock)(BINKSND *, unsigned __int8 **, unsigned int *);
//   int (__stdcall *Unlock)(BINKSND *, unsigned int);
//   void (__stdcall *Volume)(BINKSND *, int);
//   void (__stdcall *Pan)(BINKSND *, int);
//   int (__stdcall *Pause)(BINKSND *, int);
//   int (__stdcall *SetOnOff)(BINKSND *, int);
//   void (__stdcall *Close)(BINKSND *);
//   void (__stdcall *MixBins)(BINKSND *, unsigned int *, unsigned int);
//   void (__stdcall *MixBinVols)(BINKSND *, unsigned int *, int *, unsigned int);
// };

// /* 3614 */
// struct __cppobj D3DXCOLOR
// {
//   float r;
//   float g;
//   float b;
//   float a;
// };

// /* 3615 */
// struct __cppobj D3DXFLOAT16
// {
//   unsigned __int16 value;
// };

// /* 3616 */
// struct __cppobj D3DXVECTOR3 : _D3DVECTOR
// {
// };

// /* 3617 */
// struct _D3DXFONT_DESCA
// {
//   int Height;
//   unsigned int Width;
//   unsigned int Weight;
//   unsigned int MipLevels;
//   int Italic;
//   unsigned __int8 CharSet;
//   unsigned __int8 OutputPrecision;
//   unsigned __int8 Quality;
//   unsigned __int8 PitchAndFamily;
//   char FaceName[32];
// };

// /* 3618 */
// struct __declspec(align(4)) tagTEXTMETRICA
// {
//   int tmHeight;
//   int tmAscent;
//   int tmDescent;
//   int tmInternalLeading;
//   int tmExternalLeading;
//   int tmAveCharWidth;
//   int tmMaxCharWidth;
//   int tmWeight;
//   int tmOverhang;
//   int tmDigitizedAspectX;
//   int tmDigitizedAspectY;
//   unsigned __int8 tmFirstChar;
//   unsigned __int8 tmLastChar;
//   unsigned __int8 tmDefaultChar;
//   unsigned __int8 tmBreakChar;
//   unsigned __int8 tmItalic;
//   unsigned __int8 tmUnderlined;
//   unsigned __int8 tmStruckOut;
//   unsigned __int8 tmPitchAndFamily;
//   unsigned __int8 tmCharSet;
// };

// /* 3619 */
// struct _D3DXMACRO
// {
//   const char *Name;
//   const char *Definition;
// };

// /* 3620 */
// struct BINKFRAMETEXTURES
// {
//   unsigned int Ysize;
//   unsigned int cRsize;
//   unsigned int cBsize;
//   unsigned int Asize;
//   IDirect3DTexture9 *Ytexture;
//   IDirect3DTexture9 *cRtexture;
//   IDirect3DTexture9 *cBtexture;
//   IDirect3DTexture9 *Atexture;
// };

// /* 3621 */
// struct _D3DXCONSTANT_DESC
// {
//   const char *Name;
//   _D3DXREGISTER_SET RegisterSet;
//   unsigned int RegisterIndex;
//   unsigned int RegisterCount;
//   _D3DXPARAMETER_CLASS Class;
//   _D3DXPARAMETER_TYPE Type;
//   unsigned int Rows;
//   unsigned int Columns;
//   unsigned int Elements;
//   unsigned int StructMembers;
//   unsigned int Bytes;
//   const void *DefaultValue;
// };

// /* 3622 */
// struct _D3DXCONSTANTTABLE_DESC
// {
//   const char *Creator;
//   unsigned int Version;
//   unsigned int Constants;
// };

// /* 3623 */
// struct __cppobj ID3DXConstantTable : IUnknown
// {
// };

// /* 3624 */
// const struct __cppobj D3DXVECTOR4
// {
//   float x;
//   float y;
//   float z;
//   float w;
// };

// /* 3625 */
// const struct __cppobj D3DXMATRIX : _D3DMATRIX
// {
// };

// /* 3626 */
// struct /*VFT*/ ID3DXConstantTable_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void *(__stdcall *GetBufferPointer)(ID3DXConstantTable *this);
//   unsigned int (__stdcall *GetBufferSize)(ID3DXConstantTable *this);
//   HRESULT (__stdcall *GetDesc)(ID3DXConstantTable *this, _D3DXCONSTANTTABLE_DESC *);
//   HRESULT (__stdcall *GetConstantDesc)(ID3DXConstantTable *this, const char *, _D3DXCONSTANT_DESC *, unsigned int *);
//   unsigned int (__stdcall *GetSamplerIndex)(ID3DXConstantTable *this, const char *);
//   const char *(__stdcall *GetConstant)(ID3DXConstantTable *this, const char *, unsigned int);
//   const char *(__stdcall *GetConstantByName)(ID3DXConstantTable *this, const char *, const char *);
//   const char *(__stdcall *GetConstantElement)(ID3DXConstantTable *this, const char *, unsigned int);
//   HRESULT (__stdcall *SetDefaults)(ID3DXConstantTable *this, IDirect3DDevice9 *);
//   HRESULT (__stdcall *SetValue)(ID3DXConstantTable *this, IDirect3DDevice9 *, const char *, const void *, unsigned int);
//   HRESULT (__stdcall *SetBool)(ID3DXConstantTable *this, IDirect3DDevice9 *, const char *, int);
//   HRESULT (__stdcall *SetBoolArray)(ID3DXConstantTable *this, IDirect3DDevice9 *, const char *, const int *, unsigned int);
//   HRESULT (__stdcall *SetInt)(ID3DXConstantTable *this, IDirect3DDevice9 *, const char *, int);
//   HRESULT (__stdcall *SetIntArray)(ID3DXConstantTable *this, IDirect3DDevice9 *, const char *, const int *, unsigned int);
//   HRESULT (__stdcall *SetFloat)(ID3DXConstantTable *this, IDirect3DDevice9 *, const char *, float);
//   HRESULT (__stdcall *SetFloatArray)(ID3DXConstantTable *this, IDirect3DDevice9 *, const char *, const float *, unsigned int);
//   HRESULT (__stdcall *SetVector)(ID3DXConstantTable *this, IDirect3DDevice9 *, const char *, const D3DXVECTOR4 *);
//   HRESULT (__stdcall *SetVectorArray)(ID3DXConstantTable *this, IDirect3DDevice9 *, const char *, const D3DXVECTOR4 *, unsigned int);
//   HRESULT (__stdcall *SetMatrix)(ID3DXConstantTable *this, IDirect3DDevice9 *, const char *, const D3DXMATRIX *);
//   HRESULT (__stdcall *SetMatrixArray)(ID3DXConstantTable *this, IDirect3DDevice9 *, const char *, const D3DXMATRIX *, unsigned int);
//   HRESULT (__stdcall *SetMatrixPointerArray)(ID3DXConstantTable *this, IDirect3DDevice9 *, const char *, const D3DXMATRIX **, unsigned int);
//   HRESULT (__stdcall *SetMatrixTranspose)(ID3DXConstantTable *this, IDirect3DDevice9 *, const char *, const D3DXMATRIX *);
//   HRESULT (__stdcall *SetMatrixTransposeArray)(ID3DXConstantTable *this, IDirect3DDevice9 *, const char *, const D3DXMATRIX *, unsigned int);
//   HRESULT (__stdcall *SetMatrixTransposePointerArray)(ID3DXConstantTable *this, IDirect3DDevice9 *, const char *, const D3DXMATRIX **, unsigned int);
// };

// /* 3627 */
// struct __cppobj D3DXVECTOR2
// {
//   float x;
//   float y;
// };

// /* 3628 */
// struct __declspec(align(4)) tagTEXTMETRICW
// {
//   int tmHeight;
//   int tmAscent;
//   int tmDescent;
//   int tmInternalLeading;
//   int tmExternalLeading;
//   int tmAveCharWidth;
//   int tmMaxCharWidth;
//   int tmWeight;
//   int tmOverhang;
//   int tmDigitizedAspectX;
//   int tmDigitizedAspectY;
//   wchar_t tmFirstChar;
//   wchar_t tmLastChar;
//   wchar_t tmDefaultChar;
//   wchar_t tmBreakChar;
//   unsigned __int8 tmItalic;
//   unsigned __int8 tmUnderlined;
//   unsigned __int8 tmStruckOut;
//   unsigned __int8 tmPitchAndFamily;
//   unsigned __int8 tmCharSet;
// };

// /* 3629 */
// struct __cppobj D3DXVECTOR4_16F
// {
//   D3DXFLOAT16 x;
//   D3DXFLOAT16 y;
//   D3DXFLOAT16 z;
//   D3DXFLOAT16 w;
// };

// /* 3630 */
// struct __cppobj D3DXVECTOR3_16F
// {
//   D3DXFLOAT16 x;
//   D3DXFLOAT16 y;
//   D3DXFLOAT16 z;
// };

// /* 3631 */
// struct __cppobj D3DXQUATERNION
// {
//   float x;
//   float y;
//   float z;
//   float w;
// };

// /* 3632 */
// struct _D3DXFONT_DESCW
// {
//   int Height;
//   unsigned int Width;
//   unsigned int Weight;
//   unsigned int MipLevels;
//   int Italic;
//   unsigned __int8 CharSet;
//   unsigned __int8 OutputPrecision;
//   unsigned __int8 Quality;
//   unsigned __int8 PitchAndFamily;
//   wchar_t FaceName[32];
// };

// /* 3633 */
// struct POS_TC_VERTEX
// {
//   float sx;
//   float sy;
//   float sz;
//   float rhw;
//   float tu;
//   float tv;
// };

// /* 3634 */
// struct BINKTEXTURESET
// {
//   BINKFRAMEBUFFERS bink_buffers;
//   BINKFRAMETEXTURES textures[2];
//   BINKFRAMETEXTURES tex_draw;
// };

// /* 3635 */
// struct __cppobj ID3DXBuffer : IUnknown
// {
// };

// /* 3636 */
// struct /*VFT*/ ID3DXBuffer_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void *(__stdcall *GetBufferPointer)(ID3DXBuffer *this);
//   unsigned int (__stdcall *GetBufferSize)(ID3DXBuffer *this);
// };

// /* 3637 */
// struct __cppobj ID3DXSprite : IUnknown
// {
// };

// /* 3638 */
// struct /*VFT*/ ID3DXSprite_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetDevice)(ID3DXSprite *this, IDirect3DDevice9 **);
//   HRESULT (__stdcall *GetTransform)(ID3DXSprite *this, D3DXMATRIX *);
//   HRESULT (__stdcall *SetTransform)(ID3DXSprite *this, const D3DXMATRIX *);
//   HRESULT (__stdcall *SetWorldViewRH)(ID3DXSprite *this, const D3DXMATRIX *, const D3DXMATRIX *);
//   HRESULT (__stdcall *SetWorldViewLH)(ID3DXSprite *this, const D3DXMATRIX *, const D3DXMATRIX *);
//   HRESULT (__stdcall *Begin)(ID3DXSprite *this, unsigned int);
//   HRESULT (__stdcall *Draw)(ID3DXSprite *this, IDirect3DTexture9 *, const tagRECT *, const D3DXVECTOR3 *, const D3DXVECTOR3 *, unsigned int);
//   HRESULT (__stdcall *Flush)(ID3DXSprite *this);
//   HRESULT (__stdcall *End)(ID3DXSprite *this);
//   HRESULT (__stdcall *OnLostDevice)(ID3DXSprite *this);
//   HRESULT (__stdcall *OnResetDevice)(ID3DXSprite *this);
// };

// /* 3639 */
// struct __cppobj _D3DXMATRIXA16 : D3DXMATRIX
// {
// };

// /* 3640 */
// struct __cppobj D3DXVECTOR2_16F
// {
//   D3DXFLOAT16 x;
//   D3DXFLOAT16 y;
// };

// /* 3641 */
// struct __cppobj ID3DXFont : IUnknown
// {
// };

// /* 3642 */
// struct /*VFT*/ ID3DXFont_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetDevice)(ID3DXFont *this, IDirect3DDevice9 **);
//   HRESULT (__stdcall *GetDescA)(ID3DXFont *this, _D3DXFONT_DESCA *);
//   HRESULT (__stdcall *GetDescW)(ID3DXFont *this, _D3DXFONT_DESCW *);
//   int (__stdcall *GetTextMetricsA)(ID3DXFont *this, tagTEXTMETRICA *);
//   int (__stdcall *GetTextMetricsW)(ID3DXFont *this, tagTEXTMETRICW *);
//   HDC__ *(__stdcall *GetDC)(ID3DXFont *this);
//   HRESULT (__stdcall *GetGlyphData)(ID3DXFont *this, unsigned int, IDirect3DTexture9 **, tagRECT *, tagPOINT *);
//   HRESULT (__stdcall *PreloadCharacters)(ID3DXFont *this, unsigned int, unsigned int);
//   HRESULT (__stdcall *PreloadGlyphs)(ID3DXFont *this, unsigned int, unsigned int);
//   HRESULT (__stdcall *PreloadTextA)(ID3DXFont *this, const char *, int);
//   HRESULT (__stdcall *PreloadTextW)(ID3DXFont *this, const wchar_t *, int);
//   int (__stdcall *DrawTextA)(ID3DXFont *this, ID3DXSprite *, const char *, int, tagRECT *, unsigned int, unsigned int);
//   int (__stdcall *DrawTextW)(ID3DXFont *this, ID3DXSprite *, const wchar_t *, int, tagRECT *, unsigned int, unsigned int);
//   HRESULT (__stdcall *OnLostDevice)(ID3DXFont *this);
//   HRESULT (__stdcall *OnResetDevice)(ID3DXFont *this);
// };

// /* 3643 */
// struct __cppobj ID3DXInclude
// {
//   ID3DXInclude_vtbl *__vftable /*VFT*/;
// };

// /* 3644 */
// struct /*VFT*/ ID3DXInclude_vtbl
// {
//   HRESULT (__stdcall *Open)(ID3DXInclude *this, _D3DXINCLUDE_TYPE, const char *, const void *, const void **, unsigned int *);
//   HRESULT (__stdcall *Close)(ID3DXInclude *this, const void *);
// };

// /* 3645 */
// struct __cppobj D3DXPLANE
// {
//   float a;
//   float b;
//   float c;
//   float d;
// };

// /* 3646 */
// struct MD4_CTX
// {
//   unsigned int state[4];
//   unsigned int count[2];
//   unsigned __int8 buffer[64];
// };

// /* 3647 */
// struct Bone
// {
//   int parentBone;
//   unsigned __int8 animBones[2];
//   int rigidBody;
//   float length;
//   float center[3];
// };

// /* 3648 */
// struct __declspec(align(4)) LerpBone
// {
//   int parentBone;
//   unsigned __int8 animBone;
// };

// /* 3649 */
// struct Joint
// {
//   int joint;
//   int joint2;
// };

// /* 3650 */
// struct BoneOrientation
// {
//   float origin[3];
//   int boneFlags;
//   float orientation[4];
// };

// /* 3651 */
// struct RagdollBody
// {
//   int references;
//   int ragdollDef;
//   int dobj;
//   DObj *obj;
//   const cpose_t *pose;
//   float poseOffset[3];
//   int localClientNum;
//   RagdollBodyState state;
//   int stateMsec;
//   int stateFrames;
//   int velCaptureMsec;
//   int stableTime;
//   int numBones;
//   Bone bones[14];
//   int numLerpBones;
//   LerpBone lerpBones[9];
//   int numJoints;
//   Joint joints[28];
//   int curOrientationBuffer;
//   BoneOrientation boneOrientations[2][23];
//   BoneOrientation lerpBoneOffsets[9];
//   int flags;
//   int storedLaunchCount;
//   hitLocation_t storedLaunchHitLoc[2];
//   float storedLaunchForce[2][3];
//   hitLocation_t storedAttachHitLoc;
//   int storedAttachEnt;
//   int storedPhysObjId;
//   rigid_body_constraint_point *debug_hang_point;
//   rigid_body_constraint_point *hang_point;
//   int start_hang_time;
//   broad_phase_group *m_bpg;
//   broad_phase_collision_pair *m_list_bpcp;
//   int rope_id;
//   void *rbc_dist;
// };

// /* 3652 */
// struct StateEnt
// {
//   bool (__cdecl *enterFunc)(RagdollBody *, RagdollBodyState, RagdollBodyState);
//   bool (__cdecl *exitFunc)(RagdollBody *, RagdollBodyState, RagdollBodyState);
//   void (__cdecl *updateFunc)(RagdollBody *, int);
// };

// /* 3653 */
// struct phys_free_list<PhysObjUserData>::T_internal_base
// {
//   phys_free_list<PhysObjUserData>::T_internal_base *m_prev_T_internal;
//   phys_free_list<PhysObjUserData>::T_internal_base *m_next_T_internal;
// };

// /* 3654 */
// struct __cppobj phys_free_list<PhysObjUserData>
// {
//   phys_free_list<PhysObjUserData>::T_internal_base m_dummy_head;
//   int m_list_count;
//   int m_list_count_high_water;
//   PhysObjUserData *m_ptr_list[256];
//   int m_ptr_list_count;
// };

// /* 3655 */
// struct __cppobj phys_link_list1<PhysObjUserData>
// {
//   PhysObjUserData *m_first;
//   PhysObjUserData *m_last;
//   int m_alloc_count;
// };

// /* 3656 */
// struct __cppobj PhysGlob
// {
//   phys_free_list<PhysObjUserData> objects;
//   phys_link_list1<PhysObjUserData> objects_by_world[3];
//   PhysObjUserData *userRigidBodies[16];
//   int timeLastSnapshot;
//   int timeLastUpdate;
// };

// /* 3657 */
// struct phys_free_list<RagdollBody>::T_internal_base
// {
//   phys_free_list<RagdollBody>::T_internal_base *m_prev_T_internal;
//   phys_free_list<RagdollBody>::T_internal_base *m_next_T_internal;
// };

// /* 3658 */
// struct __cppobj phys_free_list<RagdollBody>::T_internal : phys_free_list<RagdollBody>::T_internal_base
// {
//   RagdollBody m_data;
//   int m_ptr_list_index;
// };

// /* 3659 */
// struct __cppobj phys_free_list<RagdollBody>
// {
//   phys_free_list<RagdollBody>::T_internal_base m_dummy_head;
//   int m_list_count;
//   int m_list_count_high_water;
//   RagdollBody *m_ptr_list[256];
//   int m_ptr_list_count;
// };

// /* 3660 */
// struct __cppobj phys_free_list<RagdollBody>::iterator
// {
//   phys_free_list<RagdollBody>::T_internal_base *m_ptr;
// };

// /* 3661 */
// struct __cppobj __declspec(align(16)) phys_free_list<PhysObjUserData>::T_internal : phys_free_list<PhysObjUserData>::T_internal_base
// {
//   PhysObjUserData m_data;
//   int m_ptr_list_index;
// };

// /* 3662 */
// struct __cppobj phys_free_list<PhysObjUserData>::iterator
// {
//   phys_free_list<PhysObjUserData>::T_internal_base *m_ptr;
// };

// /* 3663 */
// struct RagdollSortStruct
// {
//   float distSq;
//   RagdollBody *body;
// };

// /* 3664 */
// struct __cppobj std::pair<RagdollSortStruct *,RagdollSortStruct *>
// {
//   RagdollSortStruct *first;
//   RagdollSortStruct *second;
// };

// /* 3665 */
// struct __cppobj phys_sys
// {
// };

// /* 3666 */
// struct __cppobj environment_rigid_body : rigid_body
// {
// };

// /* 3667 */
// struct BaseLerpBoneDef
// {
//   char animBoneTextName[20];
//   unsigned int animBoneName;
//   unsigned int parentBoneIndex;
//   int lerpTime;
// };

// /* 3668 */
// struct BoneDef
// {
//   char animBoneTextNames[2][20];
//   unsigned int animBoneNames[2];
//   float radius;
//   bool mirror;
//   float percent;
//   float mass;
//   float friction;
//   float buoyancy;
//   int parentBone;
//   PhysicsGeomType geomType;
// };

// /* 3669 */
// struct SelfPairDef
// {
//   unsigned __int8 bones[2];
// };

// /* 3670 */
// struct JointDef
// {
//   unsigned __int8 bone;
//   JointType type;
//   int numLimitAxes;
//   float limitAxes[3][3];
//   float minAngles[3];
//   float maxAngles[3];
//   float axisFriction[3];
// };

// /* 3671 */
// struct __declspec(align(4)) RagdollDef
// {
//   bool inUse;
//   bool bound;
//   int numBones;
//   BoneDef boneDefs[14];
//   int numBaseLerpBones;
//   BaseLerpBoneDef baseLerpBoneDefs[9];
//   int numJoints;
//   JointDef jointDefs[28];
//   int numSelfPairs;
//   SelfPairDef selfPairDefs[33];
// };

// /* 3672 */
// struct $226EAEAF211E69CAF5BF90DB1F921A0C
// {
//   const char *name;
//   float axis[3];
// };

// /* 3673 */
// struct XDollBone
// {
//   unsigned __int8 index;
//   unsigned __int8 flags;
//   unsigned int name_hash;
//   int rigidBody;
//   PhysPreset *physPreset;
// };

// /* 3674 */
// struct XDollBoneOrientation
// {
//   float origin[3];
//   int boneFlags;
//   float orientation[4];
// };

// /* 3675 */
// union $F8FBF74742F563EDABF51D7175B13032
// {
//   rigid_body_constraint *constraint;
//   rigid_body_constraint_ragdoll *ragdoll_constraint;
//   rigid_body_constraint_point *point_constraint;
//   rigid_body_constraint_hinge *hinge_constraint;
//   rigid_body_constraint_angular_actuator *actuator_constraint;
// };

// /* 3676 */
// struct XDoll_ConstraintInfo
// {
//   int type;
//   int timer;
//   $F8FBF74742F563EDABF51D7175B13032 ___u2;
// };

// /* 3677 */
// struct XDollBody
// {
//   int references;
//   int entity_index;
//   int client_index;
//   int piece_index;
//   unsigned int attach_bone_hash;
//   PhysConstraints *constraintsDef;
//   int numBones;
//   XDollBone bones[4];
//   XDollBoneOrientation boneOrientations[4];
//   XDoll_ConstraintInfo constraintInfos[4];
//   int userBody;
//   unsigned int userBodyBoneHash;
//   int stableTime;
// };

// /* 3678 */
// struct __cppobj pmove_t
// {
//   playerState_s *ps;
//   usercmd_s cmd;
//   usercmd_s oldcmd;
//   int tracemask;
//   int numtouch;
//   int touchents[32];
//   int numGlassTouch;
//   int touchGlasses[32];
//   float mins[3];
//   float maxs[3];
//   float xyspeed;
//   float currentPitch;
//   float averagePitch;
//   int nextPitch;
//   float pitchHistory[30];
//   int proneChange;
//   float maxSprintTimeMultiplier;
//   bool mantleStarted;
//   float mantleEndPos[3];
//   int mantleDuration;
//   int viewChangeTime;
//   float viewChange;
//   float vehicleAngles[3];
//   pmoveVehAnimState_t vehAnimState;
//   unsigned __int8 handler;
//   int localClientNum;
//   const gjkcc_input_t *m_gjkcc_input;
//   colgeom_visitor_inlined_t<200> proximity_data;
// };

// /* 3679 */
// struct contact_t
// {
//   float point[3];
//   float normal[3];
//   int particle_index;
// };

// /* 3680 */
// struct __declspec(align(16)) RopeUpdateCmdData
// {
//   float viewOrg[3];
//   int ropeCount;
//   float screenMtx[4][4];
//   rope_t *ropes;
// };

// /* 3681 */
// struct __declspec(align(4)) VisualRope
// {
//   float beginRadius;
//   float endRadius;
//   const Material *material;
//   int segmentCount;
//   float *segmentVerts;
//   GfxDrawSurf *drawSurf;
//   unsigned __int16 *lightingHandle;
//   unsigned __int8 visibilityFlags;
// };

// /* 3682 */
// struct PhysPresetInfo
// {
//   float mass;
//   float bounce;
//   float friction;
//   int isFrictionInfinity;
//   float bulletForceScale;
//   float explosiveForceScale;
//   float piecesSpreadFraction;
//   float piecesUpwardVelocity;
//   int canFloat;
//   float gravityScale;
//   float centerOfMassOffset[3];
//   float buoyancyBoxMin[3];
//   float buoyancyBoxMax[3];
// };

// /* 3683 */
// struct leaves_t
// {
//   int count;
//   int max_count;
//   int *list;
// };

// /* 3684 */
// struct leafList_s
// {
//   int count;
//   int maxcount;
//   int overflowed;
//   unsigned __int16 *list;
//   float bounds[2][3];
//   int lastLeaf;
// };

// /* 3685 */
// struct GfxVertex
// {
//   float xyzw[4];
//   GfxColor color;
//   float texCoord[2];
//   PackedUnitVec normal;
// };

// /* 3686 */
// struct __declspec(align(4)) materialCommands_t
// {
//   GfxVertex verts[5450];
//   unsigned __int16 indices[1048576];
//   MaterialVertexDeclType vertDeclType;
//   unsigned int vertexSize;
//   int indexCount;
//   int vertexCount;
//   int firstVertex;
//   int lastVertex;
//   bool finishedFilling;
// };

// /* 3687 */
// struct __cppobj GjkTraceGeom
// {
//   const cbrush_t *brush;
//   __declspec(align(16)) phys_mat44 mat;
// };

// /* 3688 */
// struct debug_brush_t
// {
//   const cbrush_t *brush;
//   unsigned int first_vertex_index;
//   unsigned int first_winding_index;
//   unsigned __int16 num_indices;
//   unsigned __int16 num_windings;
// };

// /* 3689 */
// struct debug_brush_info_t
// {
//   debug_brush_t brushes[5000];
//   unsigned __int8 windings[50000];
//   unsigned __int8 indices[360000];
//   int num_brushes;
//   int num_windings;
//   int num_indices;
// };

// /* 3690 */
// struct __declspec(align(4)) debug_patch_t
// {
//   const CollisionAabbTree *tree;
//   unsigned int first_vertex_index;
//   unsigned __int16 num_indices;
// };

// /* 3691 */
// struct debug_patch_info_t
// {
//   debug_patch_t patches[5000];
//   unsigned int indices[100000];
//   unsigned int num_patches;
//   unsigned int num_indices;
// };

// /* 3692 */
// struct __cppobj __declspec(align(8)) phys_convex_hull::ch_triangle
// {
//   phys_vec3 m_normal;
//   phys_vec3 *m_verts[3];
// };

// /* 3693 */
// struct __cppobj __declspec(align(16)) phys_static_array<phys_convex_hull::ch_triangle,64>
// {
//   char m_buffer[2048];
//   phys_convex_hull::ch_triangle *const m_slot_array;
//   int m_alloc_count;
// };

// /* 3694 */
// struct __cppobj phys_static_array<phys_convex_hull::ch_triangle,64>::iterator
// {
//   phys_convex_hull::ch_triangle *m_ptr;
// };

// /* 3695 */
// struct __cppobj rbcint
// {
// };

// /* 3696 */
// struct phys_free_list<user_rigid_body>::T_internal_base
// {
//   phys_free_list<user_rigid_body>::T_internal_base *m_prev_T_internal;
//   phys_free_list<user_rigid_body>::T_internal_base *m_next_T_internal;
// };

// /* 3697 */
// struct __cppobj __declspec(align(16)) phys_free_list<user_rigid_body>::T_internal : phys_free_list<user_rigid_body>::T_internal_base
// {
//   user_rigid_body m_data;
//   int m_ptr_list_index;
// };

// /* 3698 */
// struct __cppobj phys_free_list<user_rigid_body>
// {
//   phys_free_list<user_rigid_body>::T_internal_base m_dummy_head;
//   int m_list_count;
//   int m_list_count_high_water;
//   user_rigid_body *m_ptr_list[256];
//   int m_ptr_list_count;
// };

// /* 3699 */
// struct __cppobj phys_free_list<user_rigid_body>::iterator
// {
//   phys_free_list<user_rigid_body>::T_internal_base *m_ptr;
// };

// /* 3700 */
// struct __cppobj rbint
// {
// };

// /* 3701 */
// struct phys_free_list<rigid_body_constraint_distance>::T_internal_base
// {
//   phys_free_list<rigid_body_constraint_distance>::T_internal_base *m_prev_T_internal;
//   phys_free_list<rigid_body_constraint_distance>::T_internal_base *m_next_T_internal;
// };

// /* 3702 */
// struct __cppobj __declspec(align(16)) phys_free_list<rigid_body_constraint_distance>::T_internal : phys_free_list<rigid_body_constraint_distance>::T_internal_base
// {
//   rigid_body_constraint_distance m_data;
//   int m_ptr_list_index;
// };

// /* 3703 */
// struct __cppobj phys_free_list<rigid_body_constraint_distance>
// {
//   phys_free_list<rigid_body_constraint_distance>::T_internal_base m_dummy_head;
//   int m_list_count;
//   int m_list_count_high_water;
//   rigid_body_constraint_distance *m_ptr_list[256];
//   int m_ptr_list_count;
// };

// /* 3704 */
// struct __cppobj phys_free_list<rigid_body_constraint_distance>::iterator
// {
//   phys_free_list<rigid_body_constraint_distance>::T_internal_base *m_ptr;
// };

// /* 3705 */
// struct __cppobj __declspec(align(16)) plane_lt
// {
//   phys_vec3 n;
//   float d;
// };

// /* 3706 */
// struct phys_free_list<rigid_body_constraint_wheel>::T_internal_base
// {
//   phys_free_list<rigid_body_constraint_wheel>::T_internal_base *m_prev_T_internal;
//   phys_free_list<rigid_body_constraint_wheel>::T_internal_base *m_next_T_internal;
// };

// /* 3707 */
// struct __cppobj phys_free_list<rigid_body_constraint_wheel>::T_internal : phys_free_list<rigid_body_constraint_wheel>::T_internal_base
// {
//   __declspec(align(16)) rigid_body_constraint_wheel m_data;
//   int m_ptr_list_index;
// };

// /* 3708 */
// struct __cppobj phys_free_list<rigid_body_constraint_wheel>
// {
//   phys_free_list<rigid_body_constraint_wheel>::T_internal_base m_dummy_head;
//   int m_list_count;
//   int m_list_count_high_water;
//   rigid_body_constraint_wheel *m_ptr_list[256];
//   int m_ptr_list_count;
// };

// /* 3709 */
// struct __cppobj phys_free_list<rigid_body_constraint_wheel>::iterator
// {
//   phys_free_list<rigid_body_constraint_wheel>::T_internal_base *m_ptr;
// };

// /* 3710 */
// struct phys_free_list<rigid_body_constraint_angular_actuator>::T_internal_base
// {
//   phys_free_list<rigid_body_constraint_angular_actuator>::T_internal_base *m_prev_T_internal;
//   phys_free_list<rigid_body_constraint_angular_actuator>::T_internal_base *m_next_T_internal;
// };

// /* 3711 */
// struct __cppobj __declspec(align(16)) phys_free_list<rigid_body_constraint_angular_actuator>::T_internal : phys_free_list<rigid_body_constraint_angular_actuator>::T_internal_base
// {
//   rigid_body_constraint_angular_actuator m_data;
//   int m_ptr_list_index;
// };

// /* 3712 */
// struct __cppobj phys_free_list<rigid_body_constraint_angular_actuator>
// {
//   phys_free_list<rigid_body_constraint_angular_actuator>::T_internal_base m_dummy_head;
//   int m_list_count;
//   int m_list_count_high_water;
//   rigid_body_constraint_angular_actuator *m_ptr_list[256];
//   int m_ptr_list_count;
// };

// /* 3713 */
// struct __cppobj phys_free_list<rigid_body_constraint_angular_actuator>::iterator
// {
//   phys_free_list<rigid_body_constraint_angular_actuator>::T_internal_base *m_ptr;
// };

// /* 3715 */
// struct phys_link_list_base<pulse_sum_constraint_solver::temp_user_rigid_body>
// {
//   pulse_sum_constraint_solver::temp_user_rigid_body *m_next_link;
// };

// /* 3716 */
// struct phys_inplace_avl_tree_node<pulse_sum_constraint_solver::temp_user_rigid_body>
// {
//   pulse_sum_constraint_solver::temp_user_rigid_body *m_left;
//   pulse_sum_constraint_solver::temp_user_rigid_body *m_right;
//   int m_balance;
// };

// /* 3714 */
// struct __cppobj __declspec(align(16)) pulse_sum_constraint_solver::temp_user_rigid_body : user_rigid_body, phys_link_list_base<pulse_sum_constraint_solver::temp_user_rigid_body>
// {
//   user_rigid_body *m_avl_key;
//   phys_inplace_avl_tree_node<pulse_sum_constraint_solver::temp_user_rigid_body> m_avl_tree_node;
// };

// /* 3717 */
// struct phys_free_list<rigid_body_constraint_custom_orientation>::T_internal_base
// {
//   phys_free_list<rigid_body_constraint_custom_orientation>::T_internal_base *m_prev_T_internal;
//   phys_free_list<rigid_body_constraint_custom_orientation>::T_internal_base *m_next_T_internal;
// };

// /* 3718 */
// struct __cppobj phys_free_list<rigid_body_constraint_custom_orientation>::T_internal : phys_free_list<rigid_body_constraint_custom_orientation>::T_internal_base
// {
//   rigid_body_constraint_custom_orientation m_data;
//   int m_ptr_list_index;
// };

// /* 3719 */
// struct __cppobj phys_free_list<rigid_body_constraint_custom_orientation>
// {
//   phys_free_list<rigid_body_constraint_custom_orientation>::T_internal_base m_dummy_head;
//   int m_list_count;
//   int m_list_count_high_water;
//   rigid_body_constraint_custom_orientation *m_ptr_list[256];
//   int m_ptr_list_count;
// };

// /* 3720 */
// struct __cppobj phys_free_list<rigid_body_constraint_custom_orientation>::iterator
// {
//   phys_free_list<rigid_body_constraint_custom_orientation>::T_internal_base *m_ptr;
// };

// /* 3721 */
// struct phys_free_list<rigid_body_constraint_hinge>::T_internal_base
// {
//   phys_free_list<rigid_body_constraint_hinge>::T_internal_base *m_prev_T_internal;
//   phys_free_list<rigid_body_constraint_hinge>::T_internal_base *m_next_T_internal;
// };

// /* 3722 */
// struct __cppobj __declspec(align(16)) phys_free_list<rigid_body_constraint_hinge>::T_internal : phys_free_list<rigid_body_constraint_hinge>::T_internal_base
// {
//   rigid_body_constraint_hinge m_data;
//   int m_ptr_list_index;
// };

// /* 3723 */
// struct __cppobj phys_free_list<rigid_body_constraint_hinge>
// {
//   phys_free_list<rigid_body_constraint_hinge>::T_internal_base m_dummy_head;
//   int m_list_count;
//   int m_list_count_high_water;
//   rigid_body_constraint_hinge *m_ptr_list[256];
//   int m_ptr_list_count;
// };

// /* 3724 */
// struct __cppobj phys_free_list<rigid_body_constraint_hinge>::iterator
// {
//   phys_free_list<rigid_body_constraint_hinge>::T_internal_base *m_ptr;
// };

// /* 3725 */
// struct phys_convex_hull::ch_edge
// {
//   phys_vec3 *m_verts[2];
// };

// /* 3726 */
// struct __cppobj __declspec(align(16)) phys_static_array<phys_vec3,6144>
// {
//   char m_buffer[98304];
//   phys_vec3 *const m_slot_array;
//   int m_alloc_count;
// };

// /* 3727 */
// struct __cppobj __declspec(align(16)) phys_static_array<phys_vec3 *,6144>
// {
//   char m_buffer[24576];
//   phys_vec3 **const m_slot_array;
//   int m_alloc_count;
// };

// /* 3728 */
// struct __cppobj __declspec(align(16)) phys_static_array<phys_convex_hull::ch_triangle,256>
// {
//   char m_buffer[8192];
//   phys_convex_hull::ch_triangle *const m_slot_array;
//   int m_alloc_count;
// };

// /* 3729 */
// struct __cppobj __declspec(align(16)) phys_static_array<phys_convex_hull::ch_edge,128>
// {
//   char m_buffer[1024];
//   phys_convex_hull::ch_edge *const m_slot_array;
//   int m_alloc_count;
// };

// /* 3730 */
// struct __cppobj __declspec(align(16)) phys_static_array<phys_vec3 *,64>
// {
//   char m_buffer[256];
//   phys_vec3 **const m_slot_array;
//   int m_alloc_count;
// };

// /* 3731 */
// struct __cppobj phys_convex_hull
// {
//   phys_static_array<phys_vec3,6144> m_vertex_buffer;
//   phys_static_array<phys_vec3 *,6144> m_intermediate_vertex_list;
//   phys_static_array<phys_convex_hull::ch_triangle,256> m_intermediate_triangle_list;
//   phys_static_array<phys_convex_hull::ch_edge,128> m_intermediate_edge_list;
//   phys_static_array<phys_vec3 *,64> m_convex_hull_vert_list;
//   phys_static_array<phys_convex_hull::ch_triangle,64> m_convex_hull_triangle_list;
// };

// /* 3732 */
// struct __cppobj phys_link_list<pulse_sum_contact>::iterator
// {
//   pulse_sum_contact *m_ptr;
// };

// /* 3733 */
// struct __cppobj phys_link_list<pulse_sum_normal>::iterator
// {
//   pulse_sum_normal *m_ptr;
// };

// /* 3734 */
// struct phys_free_list<rigid_body_constraint_upright>::T_internal_base
// {
//   phys_free_list<rigid_body_constraint_upright>::T_internal_base *m_prev_T_internal;
//   phys_free_list<rigid_body_constraint_upright>::T_internal_base *m_next_T_internal;
// };

// /* 3735 */
// struct __cppobj __declspec(align(16)) phys_free_list<rigid_body_constraint_upright>::T_internal : phys_free_list<rigid_body_constraint_upright>::T_internal_base
// {
//   rigid_body_constraint_upright m_data;
//   int m_ptr_list_index;
// };

// /* 3736 */
// struct __cppobj phys_free_list<rigid_body_constraint_upright>
// {
//   phys_free_list<rigid_body_constraint_upright>::T_internal_base m_dummy_head;
//   int m_list_count;
//   int m_list_count_high_water;
//   rigid_body_constraint_upright *m_ptr_list[256];
//   int m_ptr_list_count;
// };

// /* 3737 */
// struct __cppobj phys_free_list<rigid_body_constraint_upright>::iterator
// {
//   phys_free_list<rigid_body_constraint_upright>::T_internal_base *m_ptr;
// };

// /* 3738 */
// struct __cppobj __declspec(align(16)) phys_static_array<plane_lt,512>
// {
//   char m_buffer[16384];
//   plane_lt *const m_slot_array;
//   int m_alloc_count;
// };

// /* 3739 */
// struct phys_free_list<rigid_body_constraint_point>::T_internal_base
// {
//   phys_free_list<rigid_body_constraint_point>::T_internal_base *m_prev_T_internal;
//   phys_free_list<rigid_body_constraint_point>::T_internal_base *m_next_T_internal;
// };

// /* 3740 */
// struct __cppobj phys_free_list<rigid_body_constraint_point>::T_internal : phys_free_list<rigid_body_constraint_point>::T_internal_base
// {
//   __declspec(align(16)) rigid_body_constraint_point m_data;
//   int m_ptr_list_index;
// };

// /* 3741 */
// struct __cppobj phys_free_list<rigid_body_constraint_point>
// {
//   phys_free_list<rigid_body_constraint_point>::T_internal_base m_dummy_head;
//   int m_list_count;
//   int m_list_count_high_water;
//   rigid_body_constraint_point *m_ptr_list[256];
//   int m_ptr_list_count;
// };

// /* 3742 */
// struct __cppobj phys_free_list<rigid_body_constraint_point>::iterator
// {
//   phys_free_list<rigid_body_constraint_point>::T_internal_base *m_ptr;
// };

// /* 3743 */
// struct phys_free_list<rigid_body_constraint_contact>::T_internal_base
// {
//   phys_free_list<rigid_body_constraint_contact>::T_internal_base *m_prev_T_internal;
//   phys_free_list<rigid_body_constraint_contact>::T_internal_base *m_next_T_internal;
// };

// /* 3744 */
// struct __cppobj phys_free_list<rigid_body_constraint_contact>::T_internal : phys_free_list<rigid_body_constraint_contact>::T_internal_base
// {
//   rigid_body_constraint_contact m_data;
//   int m_ptr_list_index;
// };

// /* 3745 */
// struct __cppobj phys_free_list<rigid_body_constraint_contact>
// {
//   phys_free_list<rigid_body_constraint_contact>::T_internal_base m_dummy_head;
//   int m_list_count;
//   int m_list_count_high_water;
//   rigid_body_constraint_contact *m_ptr_list[256];
//   int m_ptr_list_count;
// };

// /* 3746 */
// struct __cppobj phys_free_list<rigid_body_constraint_contact>::iterator
// {
//   phys_free_list<rigid_body_constraint_contact>::T_internal_base *m_ptr;
// };

// /* 3747 */
// struct __cppobj phys_link_list<pulse_sum_angular>::iterator
// {
//   pulse_sum_angular *m_ptr;
// };

// /* 3748 */
// struct phys_free_list<rigid_body_constraint_custom_path>::T_internal_base
// {
//   phys_free_list<rigid_body_constraint_custom_path>::T_internal_base *m_prev_T_internal;
//   phys_free_list<rigid_body_constraint_custom_path>::T_internal_base *m_next_T_internal;
// };

// /* 3749 */
// struct __cppobj __declspec(align(16)) phys_free_list<rigid_body_constraint_custom_path>::T_internal : phys_free_list<rigid_body_constraint_custom_path>::T_internal_base
// {
//   rigid_body_constraint_custom_path m_data;
//   int m_ptr_list_index;
// };

// /* 3750 */
// struct __cppobj phys_free_list<rigid_body_constraint_custom_path>
// {
//   phys_free_list<rigid_body_constraint_custom_path>::T_internal_base m_dummy_head;
//   int m_list_count;
//   int m_list_count_high_water;
//   rigid_body_constraint_custom_path *m_ptr_list[256];
//   int m_ptr_list_count;
// };

// /* 3751 */
// struct __cppobj phys_free_list<rigid_body_constraint_custom_path>::iterator
// {
//   phys_free_list<rigid_body_constraint_custom_path>::T_internal_base *m_ptr;
// };

// /* 3753 */
// struct phys_link_list_base<pulse_sum_constraint_solver::user_rigid_body_restore_info>
// {
//   pulse_sum_constraint_solver::user_rigid_body_restore_info *m_next_link;
// };

// /* 3752 */
// struct __cppobj pulse_sum_constraint_solver::user_rigid_body_restore_info : phys_link_list_base<pulse_sum_constraint_solver::user_rigid_body_restore_info>
// {
//   user_rigid_body **m_rbc_urb;
//   user_rigid_body *m_original_urb;
// };

// /* 3754 */
// struct __cppobj phys_link_list<pulse_sum_node>::iterator
// {
//   pulse_sum_node *m_ptr;
// };

// /* 3755 */
// struct __cppobj phys_inplace_avl_tree<rigid_body_pair_key,rigid_body_constraint_contact,rigid_body_constraint_contact::avl_tree_accessor>
// {
//   rigid_body_constraint_contact *m_tree_root;
// };

// /* 3756 */
// struct phys_inplace_avl_tree<rigid_body_pair_key,rigid_body_constraint_contact,rigid_body_constraint_contact::avl_tree_accessor>::stack_item
// {
//   rigid_body_constraint_contact **m_node;
//   int m_child;
// };

// /* 3757 */
// struct __cppobj phys_link_list<pulse_sum_point>::iterator
// {
//   pulse_sum_point *m_ptr;
// };

// /* 3758 */
// struct __cppobj phys_static_array<phys_convex_hull::ch_triangle,256>::iterator
// {
//   phys_convex_hull::ch_triangle *m_ptr;
// };

// /* 3759 */
// struct __cppobj __declspec(align(16)) phys_static_array<phys_vec3,512>
// {
//   char m_buffer[8192];
//   phys_vec3 *const m_slot_array;
//   int m_alloc_count;
// };

// /* 3760 */
// struct __cppobj phys_inplace_avl_tree<user_rigid_body *,pulse_sum_constraint_solver::temp_user_rigid_body,pulse_sum_constraint_solver::temp_user_rigid_body::avl_tree_accessor>
// {
//   pulse_sum_constraint_solver::temp_user_rigid_body *m_tree_root;
// };

// /* 3761 */
// struct __cppobj phys_simple_link_list<pulse_sum_constraint_solver::temp_user_rigid_body>
// {
//   pulse_sum_constraint_solver::temp_user_rigid_body *m_first;
// };

// /* 3762 */
// struct __cppobj phys_simple_link_list<pulse_sum_constraint_solver::user_rigid_body_restore_info>
// {
//   pulse_sum_constraint_solver::user_rigid_body_restore_info *m_first;
// };

// /* 3763 */
// struct __cppobj pulse_sum_constraint_solver::temp_user_rigid_body::avl_tree_accessor
// {
// };

// /* 3764 */
// struct phys_free_list<rigid_body>::T_internal_base
// {
//   phys_free_list<rigid_body>::T_internal_base *m_prev_T_internal;
//   phys_free_list<rigid_body>::T_internal_base *m_next_T_internal;
// };

// /* 3765 */
// struct __cppobj phys_free_list<rigid_body>
// {
//   phys_free_list<rigid_body>::T_internal_base m_dummy_head;
//   int m_list_count;
//   int m_list_count_high_water;
//   rigid_body *m_ptr_list[256];
//   int m_ptr_list_count;
// };

// /* 3766 */
// struct phys_free_list<rigid_body_constraint_ragdoll>::T_internal_base
// {
//   phys_free_list<rigid_body_constraint_ragdoll>::T_internal_base *m_prev_T_internal;
//   phys_free_list<rigid_body_constraint_ragdoll>::T_internal_base *m_next_T_internal;
// };

// /* 3767 */
// struct __cppobj phys_free_list<rigid_body_constraint_ragdoll>
// {
//   phys_free_list<rigid_body_constraint_ragdoll>::T_internal_base m_dummy_head;
//   int m_list_count;
//   int m_list_count_high_water;
//   rigid_body_constraint_ragdoll *m_ptr_list[256];
//   int m_ptr_list_count;
// };

// /* 3768 */
// struct __cppobj __declspec(align(16)) physics_system
// {
//   int m_flags;
//   float m_outside_sub_delta_t;
//   void (__cdecl *m_collision_callback)();
//   float m_max_delta_t;
//   int m_max_vel_iters;
//   int m_max_vel_pos_iters;
//   environment_rigid_body m_environment_rigid_body;
//   phys_inplace_avl_tree<rigid_body_pair_key,rigid_body_constraint_contact,rigid_body_constraint_contact::avl_tree_accessor> m_search_tree_rbc_contact;
//   phys_free_list<user_rigid_body> m_list_user_rigid_body;
//   phys_free_list<rigid_body> m_list_rigid_body;
//   phys_free_list<rigid_body_constraint_contact> m_list_rbc_contact;
//   phys_free_list<rigid_body_constraint_point> m_list_rbc_point;
//   phys_free_list<rigid_body_constraint_hinge> m_list_rbc_hinge;
//   phys_free_list<rigid_body_constraint_distance> m_list_rbc_dist;
//   phys_free_list<rigid_body_constraint_ragdoll> m_list_rbc_ragdoll;
//   phys_free_list<rigid_body_constraint_wheel> m_list_rbc_wheel;
//   phys_free_list<rigid_body_constraint_custom_orientation> m_list_rbc_custom_orientation;
//   phys_free_list<rigid_body_constraint_custom_path> m_list_rbc_custom_path;
//   phys_free_list<rigid_body_constraint_angular_actuator> m_list_rbc_angular_actuator;
//   phys_free_list<rigid_body_constraint_upright> m_list_rbc_upright;
//   phys_transient_allocator m_contact_point_buffer_1;
//   phys_transient_allocator m_contact_point_buffer_2;
//   rigid_body **m_list_island;
//   int m_list_island_count;
//   int m_solver_memory_high_water;
//   int m_contact_point_buffer_high_water;
// };

// /* 3769 */
// struct __cppobj __declspec(align(16)) phys_free_list<rigid_body>::T_internal : phys_free_list<rigid_body>::T_internal_base
// {
//   rigid_body m_data;
//   int m_ptr_list_index;
// };

// /* 3770 */
// struct __cppobj phys_free_list<rigid_body>::iterator
// {
//   phys_free_list<rigid_body>::T_internal_base *m_ptr;
// };

// /* 3771 */
// struct chull_t
// {
//   unsigned int key;
//   int nverts;
//   phys_vec3 *verts;
//   int ninds;
//   unsigned __int16 *inds;
//   chull_t *next;
//   int touched;
//   chull_t *next_list;
// };

// /* 3772 */
// struct __cppobj phys_link_list<pulse_sum_wheel>::iterator
// {
//   pulse_sum_wheel *m_ptr;
// };

// /* 3773 */
// struct __cppobj phys_static_array<phys_vec3 *,6144>::iterator
// {
//   phys_vec3 **m_ptr;
// };

// /* 3774 */
// struct __cppobj phys_static_array<phys_convex_hull::ch_edge,128>::iterator
// {
//   phys_convex_hull::ch_edge *m_ptr;
// };

// /* 3775 */
// struct __cppobj phys_static_array<phys_vec3 *,64>::iterator
// {
//   phys_vec3 **m_ptr;
// };

// /* 3776 */
// struct __cppobj __declspec(align(16)) phys_free_list<rigid_body_constraint_ragdoll>::T_internal : phys_free_list<rigid_body_constraint_ragdoll>::T_internal_base
// {
//   rigid_body_constraint_ragdoll m_data;
//   int m_ptr_list_index;
// };

// /* 3777 */
// struct __cppobj phys_free_list<rigid_body_constraint_ragdoll>::iterator
// {
//   phys_free_list<rigid_body_constraint_ragdoll>::T_internal_base *m_ptr;
// };

// /* 3778 */
// struct GfxPointVertex
// {
//   float xyz[3];
//   unsigned __int8 color[4];
// };

// /* 3779 */
// struct __cppobj __declspec(align(16)) phys_static_array<int,512>
// {
//   char m_buffer[2048];
//   int *const m_slot_array;
//   int m_alloc_count;
// };

// /* 3780 */
// struct __cppobj __declspec(align(16)) phys_static_array<float,512>
// {
//   char m_buffer[2048];
//   float *const m_slot_array;
//   int m_alloc_count;
// };

// /* 3781 */
// struct __cppobj phys_static_array<phys_vec3,6144>::iterator
// {
//   phys_vec3 *m_ptr;
// };

// /* 3782 */
// struct __cppobj phys_simple_allocator<gjk_brush_t>
// {
//   int m_count;
// };

// /* 3783 */
// struct __cppobj phys_simple_allocator<gjk_partition_t>
// {
//   int m_count;
// };

// /* 3784 */
// struct __cppobj phys_simple_allocator<gjk_double_sphere_t>
// {
//   int m_count;
// };

// /* 3785 */
// struct __cppobj phys_simple_allocator<gjk_cylinder_t>
// {
//   int m_count;
// };

// /* 3786 */
// struct __cppobj phys_simple_allocator<gjk_polygon_cylinder_t>
// {
//   int m_count;
// };

// /* 3787 */
// struct phys_free_list<VehicleParameter>::T_internal_base
// {
//   phys_free_list<VehicleParameter>::T_internal_base *m_prev_T_internal;
//   phys_free_list<VehicleParameter>::T_internal_base *m_next_T_internal;
// };

// /* 3788 */
// struct __cppobj phys_free_list<VehicleParameter>::T_internal : phys_free_list<VehicleParameter>::T_internal_base
// {
//   VehicleParameter m_data;
//   int m_ptr_list_index;
// };

// /* 3789 */
// struct __cppobj phys_free_list<VehicleParameter>
// {
//   phys_free_list<VehicleParameter>::T_internal_base m_dummy_head;
//   int m_list_count;
//   int m_list_count_high_water;
//   VehicleParameter *m_ptr_list[256];
//   int m_ptr_list_count;
// };

// /* 3790 */
// struct phys_free_list<NitrousVehicle>::T_internal_base
// {
//   phys_free_list<NitrousVehicle>::T_internal_base *m_prev_T_internal;
//   phys_free_list<NitrousVehicle>::T_internal_base *m_next_T_internal;
// };

// /* 3791 */
// struct __cppobj __declspec(align(16)) phys_free_list<NitrousVehicle>::T_internal : phys_free_list<NitrousVehicle>::T_internal_base
// {
//   NitrousVehicle m_data;
//   int m_ptr_list_index;
// };

// /* 3792 */
// struct __cppobj phys_free_list<NitrousVehicle>
// {
//   phys_free_list<NitrousVehicle>::T_internal_base m_dummy_head;
//   int m_list_count;
//   int m_list_count_high_water;
//   NitrousVehicle *m_ptr_list[256];
//   int m_ptr_list_count;
// };

// /* 3793 */
// struct __cppobj phys_free_list<NitrousVehicle>::iterator
// {
//   phys_free_list<NitrousVehicle>::T_internal_base *m_ptr;
// };

// /* 3794 */
// struct __cppobj phys_simple_allocator<auto_rigid_body>
// {
//   int m_count;
// };

// /* 3795 */
// struct auto_rigid_body
// {
//   user_rigid_body *rb;
//   const centity_s *cent;
//   int frame_count;
//   auto_rigid_body *next;
//   phys_inplace_avl_tree_node<auto_rigid_body> m_avl_node_info;
// };

// /* 3796 */
// struct phys_inplace_avl_tree_node<auto_rigid_body>
// {
//   auto_rigid_body *m_left;
//   auto_rigid_body *m_right;
//   int m_balance;
// };

// /* 3797 */
// struct smodel_debug_info_t
// {
//   cStaticModel_s *smodel;
//   float dist2;
// };

// /* 3798 */
// struct PhysImpulse
// {
//   int id;
//   float hitp[3];
//   float hitd[3];
// };

// /* 3799 */
// struct __cppobj phys_simple_allocator<gjk_aabb_t>
// {
//   int m_count;
// };

// /* 3800 */
// struct __cppobj phys_simple_allocator<gjk_obb_t>
// {
//   int m_count;
// };

// /* 3801 */
// struct BodyState
// {
//   float position[3];
//   float rotation[3][3];
//   float velocity[3];
//   float angVelocity[3];
//   float centerOfMassOffset[3];
//   float buoyancyBoxMin[3];
//   float buoyancyBoxMax[3];
//   float mass;
//   float friction;
//   float bounce;
//   int timeLastAsleep;
//   int id;
//   int buoyancy;
//   int underwater;
// };

// /* 3802 */
// struct __cppobj __declspec(align(4)) colgeom_debug_renderer_t : colgeom_visitor_t
// {
//   float lightPos[3];
//   bool bRenderStaticCollision;
//   bool bRenderBrushes;
// };

// /* 3803 */
// struct /*VFT*/ colgeom_debug_renderer_t_vtbl
// {
//   void (__thiscall *~visitor_base_t)(visitor_base_t *this);
//   void (__thiscall *prolog)(colgeom_visitor_t *this);
//   void (__thiscall *epilog)(colgeom_visitor_t *this);
//   void (__thiscall *visit)(colgeom_visitor_t *this, const cbrush_t *);
//   void (__thiscall *visit)(colgeom_visitor_t *this, const CollisionAabbTree *);
//   void (__thiscall *update)(colgeom_visitor_t *this, const float *, const float *, int, const float *);
// };

// /* 3804 */
// struct dent_info_t
// {
//   unsigned __int16 id;
//   float dist2;
// };

// /* 3805 */
// struct DynEntityProps
// {
//   const char *name;
//   bool clientOnly;
//   bool clipMove;
//   bool usePhysics;
//   bool destroyable;
// };

// /* 3806 */
// struct __cppobj __declspec(align(2)) geom_plane
// {
//   phys_vec3 m_normal;
//   phys_vec3 m_arm;
//   float m_d;
//   float m_lambda;
//   float m_right_side;
//   bool m_active;
//   bool m_walkable;
//   bool m_no_push_out;
// };

// /* 3807 */
// struct __cppobj __declspec(align(16)) phys_static_array<geom_plane,128>
// {
//   char m_buffer[6144];
//   geom_plane *const m_slot_array;
//   int m_alloc_count;
// };

// /* 3808 */
// struct __cppobj phys_static_array<geom_plane,128>::iterator
// {
//   geom_plane *m_ptr;
// };

// /* 3809 */
// struct DynEntityAreaParms
// {
//   const float *mins;
//   const float *maxs;
//   int contentMask;
//   unsigned __int16 *list;
//   unsigned __int16 maxCount;
//   unsigned __int16 count;
// };

// /* 3810 */
// struct __cppobj phys_simple_allocator<generic_avl_map_node_t>
// {
//   int m_count;
// };

// /* 3811 */
// struct dynent_hit
// {
//   unsigned __int16 absId;
// };

// /* 3812 */
// struct destructible_hit
// {
//   int entNum;
// };

// /* 3813 */
// struct /*VFT*/ standard_query_vtbl
// {
//   void (__thiscall *query)(broad_phase_terrain_query_callback *this, const broad_phase_environment_query_input *, broad_phase_environement_query_results *);
// };

// /* 3814 */
// struct __cppobj standard_query : broad_phase_terrain_query_callback
// {
// };

// /* 3815 */
// struct $_TypeDescriptor$_extraBytes_36
// {
//   const void *pVFTable;
//   void *spare;
//   char name[36];
// };

// /* 3816 */
// struct /*VFT*/ destructible_ent_aa_vtbl
// {
//   bool (__thiscall *has_auto_activated)(phys_auto_activate_callback *this);
//   void (__thiscall *auto_activate)(phys_auto_activate_callback *this, broad_phase_info *);
// };

// /* 3817 */
// struct __cppobj destructible_ent_aa : phys_auto_activate_callback
// {
//   bool m_has_auto_activated;
//   centity_s *m_cent;
// };

// /* 3818 */
// struct entity_bpi_header
// {
//   phys_mat44 *m_mat;
//   phys_auto_activate_callback *m_aac;
// };

// /* 3819 */
// struct /*VFT*/ dynamic_ent_aa_vtbl
// {
//   bool (__thiscall *has_auto_activated)(phys_auto_activate_callback *this);
//   void (__thiscall *auto_activate)(phys_auto_activate_callback *this, broad_phase_info *);
// };

// /* 3820 */
// struct __cppobj dynamic_ent_aa : phys_auto_activate_callback
// {
//   bool m_has_auto_activated;
//   DynEntityDef *m_dynEntDef;
// };

// /* 3821 */
// struct gentity_s::<unnamed_type_snd_wait>
// {
//   unsigned __int16 notifyString;
//   unsigned int index;
//   unsigned __int8 stoppable;
//   int basetime;
//   int duration;
// };

// /* 3822 */
// struct __cppobj query_brush_model_gjk_geom_visitor : colgeom_visitor_t
// {
//   gjk_collision_visitor *m_allocator;
// };

// /* 3823 */
// struct /*VFT*/ query_brush_model_gjk_geom_visitor_vtbl
// {
//   void (__thiscall *~visitor_base_t)(visitor_base_t *this);
//   void (__thiscall *prolog)(colgeom_visitor_t *this);
//   void (__thiscall *epilog)(colgeom_visitor_t *this);
//   void (__thiscall *visit)(colgeom_visitor_t *this, const cbrush_t *);
//   void (__thiscall *visit)(colgeom_visitor_t *this, const CollisionAabbTree *);
//   void (__thiscall *update)(colgeom_visitor_t *this, const float *, const float *, int, const float *);
// };

// /* 3824 */
// struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_29
// {
//   const void *pVFTable;
//   void *spare;
//   char name[29];
// };

// /* 3825 */
// struct __cppobj phys_inplace_avl_tree<centity_s const *,auto_rigid_body,auto_rigid_body>
// {
//   auto_rigid_body *m_tree_root;
// };

// /* 3826 */
// struct phys_inplace_avl_tree<centity_s const *,auto_rigid_body,auto_rigid_body>::stack_item
// {
//   auto_rigid_body **m_node;
//   int m_child;
// };

// /* 3827 */
// struct cscr_data_t
// {
//   int delete_;
//   int initstructs;
//   int createstruct;
//   int findstruct;
//   int levelscript;
//   int clientsysstatechange;
//   int maprestart;
//   int localclientconnect;
//   int localclientdisconnect;
//   int entityspawned;
//   int scriptmodelspawned;
//   int dogSoundNotify;
//   int clientFlagCB;
//   int clientFlagAsValCB;
//   int destructible_callback;
//   int corpse_callback;
//   int playerFootstep;
//   int playerJump;
//   int playerLand;
//   int playerFoliage;
//   int playerspawned;
//   int levelnotify;
//   int airsupport;
//   int entityshutdownCB;
//   int glassSmash;
//   int gibEvent;
// };

// /* 3828 */
// struct destructible_event_t::<unnamed_tag>::<unnamed_type_ed>
// {
//   centity_s *self;
//   const centity_s *attacker;
//   float dir[3];
//   float point[3];
//   int damage;
//   int mod;
//   unsigned int modelIndex;
//   unsigned int partName;
// };

// /* 3829 */
// struct destructible_event_t::<unnamed_tag>::<unnamed_type_erd>
// {
//   centity_s *self;
//   float point[3];
//   float damgeInner;
//   float damgeOuter;
//   float radius;
//   int mod;
// };

// /* 3830 */
// struct destructible_event_t::<unnamed_tag>::<unnamed_type_ehe>
// {
//   int localClientNum;
//   int event;
//   const entityState_s *es;
// };

// /* 3831 */
// union $1635879A673EC42773DB2CCD2163FA01
// {
//   destructible_event_t::<unnamed_tag>::<unnamed_type_ed> ed;
//   destructible_event_t::<unnamed_tag>::<unnamed_type_erd> erd;
//   destructible_event_t::<unnamed_tag>::<unnamed_type_ehe> ehe;
// };

// /* 3832 */
// struct destructible_event_t
// {
//   int type;
//   $1635879A673EC42773DB2CCD2163FA01 ___u1;
// };

// /* 3833 */
// struct destructible_gamestate
// {
//   unsigned __int8 localClientNum;
//   unsigned __int8 numPieces;
//   __int16 entityNum;
//   __int16 health[32];
// };

// /* 3834 */
// struct cscr_const_t
// {
//   unsigned __int16 none;
//   unsigned __int16 asphalt;
//   unsigned __int16 bark;
//   unsigned __int16 brick;
//   unsigned __int16 carpet;
//   unsigned __int16 ceramic;
//   unsigned __int16 cloth;
//   unsigned __int16 concrete;
//   unsigned __int16 cushion;
//   unsigned __int16 dirt;
//   unsigned __int16 flesh;
//   unsigned __int16 foliage;
//   unsigned __int16 fruit;
//   unsigned __int16 glass;
//   unsigned __int16 grass;
//   unsigned __int16 gravel;
//   unsigned __int16 ice;
//   unsigned __int16 metal;
//   unsigned __int16 mud;
//   unsigned __int16 paintedmetal;
//   unsigned __int16 paper;
//   unsigned __int16 plaster;
//   unsigned __int16 plastic;
//   unsigned __int16 rock;
//   unsigned __int16 rubber;
//   unsigned __int16 sand;
//   unsigned __int16 snow;
//   unsigned __int16 water;
//   unsigned __int16 wood;
//   unsigned __int16 movedone;
//   unsigned __int16 rotatedone;
//   unsigned __int16 entityshutdown;
//   unsigned __int16 front_left;
//   unsigned __int16 front_right;
//   unsigned __int16 back_left;
//   unsigned __int16 back_right;
//   unsigned __int16 middle_left;
//   unsigned __int16 middle_right;
//   unsigned __int16 fraction;
//   unsigned __int16 position;
//   unsigned __int16 entity;
//   unsigned __int16 enemy;
//   unsigned __int16 normal;
//   unsigned __int16 surfacetype;
//   unsigned __int16 weapon_fired;
//   unsigned __int16 death;
//   unsigned __int16 trigger;
//   unsigned __int16 touch;
//   unsigned __int16 broken;
//   unsigned __int16 swimming_begin;
//   unsigned __int16 swimming_end;
//   unsigned __int16 breakafter;
//   unsigned __int16 prone;
//   unsigned __int16 stand;
//   unsigned __int16 crouch;
//   unsigned __int16 sprint;
//   unsigned __int16 run;
//   unsigned __int16 walk;
//   unsigned __int16 crouchrun;
//   unsigned __int16 crouchwalk;
//   unsigned __int16 explode;
//   unsigned __int16 dtp_land;
//   unsigned __int16 respawn;
//   unsigned __int16 fake_fire;
//   unsigned __int16 hidden;
//   unsigned __int16 mod_unknown;
//   unsigned __int16 mod_pistol_bullet;
//   unsigned __int16 mod_rifle_bullet;
//   unsigned __int16 mod_grenade;
//   unsigned __int16 mod_grenade_splash;
//   unsigned __int16 mod_projectile;
//   unsigned __int16 mod_projectile_splash;
//   unsigned __int16 mod_melee;
//   unsigned __int16 mod_bayonet;
//   unsigned __int16 mod_head_shot;
//   unsigned __int16 mod_crush;
//   unsigned __int16 mod_telefrag;
//   unsigned __int16 mod_falling;
//   unsigned __int16 mod_suicide;
//   unsigned __int16 mod_trigger_hurt;
//   unsigned __int16 mod_explosive;
//   unsigned __int16 mod_impact;
//   unsigned __int16 mod_burned;
//   unsigned __int16 mod_hit_by_object;
//   unsigned __int16 mod_drown;
//   unsigned __int16 mod_gas;
//   unsigned __int16 face;
//   unsigned __int16 face_casual;
//   unsigned __int16 face_alert;
//   unsigned __int16 face_cqb;
//   unsigned __int16 face_running;
//   unsigned __int16 face_shoot_single;
//   unsigned __int16 face_shoot_burst;
//   unsigned __int16 face_melee;
//   unsigned __int16 face_react;
//   unsigned __int16 face_talk;
//   unsigned __int16 face_talk_long;
//   unsigned __int16 face_pain;
//   unsigned __int16 face_death;
//   unsigned __int16 veh_collision;
//   unsigned __int16 veh_inair;
//   unsigned __int16 veh_landed;
//   unsigned __int16 veh_suspension_limit_activated;
//   unsigned __int16 veh_engine_stutter;
//   unsigned __int16 liveupdate;
//   unsigned __int16 disconnect;
//   unsigned __int16 freeze;
//   unsigned __int16 up;
// };

// /* 3835 */
// struct DObjTrace_s
// {
//   float fraction;
//   int sflags;
//   float normal[3];
//   unsigned __int16 modelIndex;
//   unsigned __int16 partName;
//   unsigned __int16 partGroup;
//   int localBoneIndex;
// };

// /* 3836 */
// struct unz_global_info_s
// {
//   unsigned int number_entry;
//   unsigned int size_comment;
// };

// /* 3837 */
// struct tm_unz_s
// {
//   unsigned int tm_sec;
//   unsigned int tm_min;
//   unsigned int tm_hour;
//   unsigned int tm_mday;
//   unsigned int tm_mon;
//   unsigned int tm_year;
// };

// /* 3838 */
// struct unz_file_info_s
// {
//   unsigned int version;
//   unsigned int version_needed;
//   unsigned int flag;
//   unsigned int compression_method;
//   unsigned int dosDate;
//   unsigned int crc;
//   unsigned int compressed_size;
//   unsigned int uncompressed_size;
//   unsigned int size_filename;
//   unsigned int size_file_extra;
//   unsigned int size_file_comment;
//   unsigned int disk_num_start;
//   unsigned int internal_fa;
//   unsigned int external_fa;
//   tm_unz_s tmu_date;
// };

// /* 3839 */
// struct unz_file_info_internal_s
// {
//   unsigned int offset_curfile;
// };

// /* 3840 */
// struct file_in_zip_read_info_s
// {
//   char *read_buffer;
//   z_stream_s stream;
//   unsigned int pos_in_zipfile;
//   unsigned int stream_initialised;
//   unsigned int offset_local_extrafield;
//   unsigned int size_local_extrafield;
//   unsigned int pos_local_extrafield;
//   unsigned int rest_read_compressed;
//   unsigned int rest_read_uncompressed;
//   _iobuf *file;
//   unsigned int compression_method;
//   unsigned int byte_before_the_zipfile;
// };

// /* 3841 */
// struct unz_s
// {
//   _iobuf *file;
//   unz_global_info_s gi;
//   unsigned int byte_before_the_zipfile;
//   unsigned int num_file;
//   unsigned int pos_in_central_dir;
//   unsigned int current_file_ok;
//   unsigned int central_pos;
//   unsigned int size_central_dir;
//   unsigned int offset_central_dir;
//   unz_file_info_s cur_file_info;
//   unz_file_info_internal_s cur_file_info_internal;
//   file_in_zip_read_info_s *pfile_in_zip_read;
// };

// /* 3842 */
// struct code
// {
//   unsigned __int8 op;
//   unsigned __int8 bits;
//   unsigned __int16 val;
// };

// /* 3843 */
// struct inflate_state
// {
//   inflate_mode mode;
//   int last;
//   int wrap;
//   int havedict;
//   int flags;
//   unsigned int dmax;
//   unsigned int check;
//   unsigned int total;
//   gz_header_s *head;
//   unsigned int wbits;
//   unsigned int wsize;
//   unsigned int whave;
//   unsigned int write;
//   unsigned __int8 *window;
//   unsigned int hold;
//   unsigned int bits;
//   unsigned int length;
//   unsigned int offset;
//   unsigned int extra;
//   const code *lencode;
//   const code *distcode;
//   unsigned int lenbits;
//   unsigned int distbits;
//   unsigned int ncode;
//   unsigned int nlen;
//   unsigned int ndist;
//   unsigned int have;
//   code *next;
//   unsigned __int16 lens[320];
//   unsigned __int16 work[288];
//   code codes[2048];
// };

// /* 3844 */
// struct config_s
// {
//   unsigned __int16 good_length;
//   unsigned __int16 max_lazy;
//   unsigned __int16 nice_length;
//   unsigned __int16 max_chain;
//   block_state (__cdecl *func)(internal_state *, int);
// };

// /* 3845 */
// struct __cppobj TestLod
// {
//   bool enabled;
//   float dist;
// };

// /* 3846 */
// struct collision_material_t
// {
//   char name[64];
//   int cflags;
//   int sflags;
// };

// /* 3847 */
// struct adjacencyWinding_t
// {
//   int numsides;
//   int sides[12];
// };

// /* 3848 */
// struct SimplePlaneIntersection
// {
//   float xyz[3];
//   int planeIndex[3];
// };

// /* 3849 */
// struct XModelConfigEntry
// {
//   char filename[1024];
//   float dist;
// };

// /* 3850 */
// struct XModelConfig
// {
//   XModelConfigEntry entries[4];
//   float mins[3];
//   float maxs[3];
//   int collLod;
//   unsigned int flags;
//   char physicsPresetFilename[1024];
//   char physicsConstraintsFilename[1024];
//   char collMapFilename[1024];
//   float bakeLightmapScale;
// };

// /* 3851 */
// struct XModelSurfs
// {
//   XSurface *surfs;
//   int partBits[5];
// };

// /* 3852 */
// struct XModelPartsLoad
// {
//   unsigned __int8 numBones;
//   unsigned __int8 numRootBones;
//   unsigned __int16 *boneNames;
//   unsigned __int8 *parentList;
//   __int16 *quats;
//   float *trans;
//   unsigned __int8 *partClassification;
//   DObjAnimMat *baseMat;
// };

// /* 3853 */
// struct XModelDefault
// {
//   unsigned __int16 boneNames[1];
//   unsigned __int8 parentList[1];
//   XModelPartsLoad modelParts;
//   XBoneInfo boneInfo;
//   unsigned __int8 partClassification[1];
//   unsigned __int16 surfNames[1];
// };

// /* 3854 */
// struct QueueElement
// {
//   unsigned int beginIndex;
//   unsigned int count;
// };

// /* 3855 */
// struct XSurfaceGetTriCandidatesLocals
// {
//   int mins[3];
//   int maxs[3];
//   const XSurfaceCollisionTree *tree;
//   const unsigned __int16 *inIndices;
//   const unsigned __int8 *inVertices0;
//   const unsigned __int8 *inVertices1;
//   bool (__cdecl *visitorFunc)(void *, const unsigned __int8 **, const unsigned __int8 **);
//   void *visitorContext;
//   unsigned __int16 vertexSize0;
//   unsigned __int16 surfaceFlags;
//   unsigned int nodeQueueBegin;
//   unsigned int nodeQueueEnd;
//   unsigned int leafQueueBegin;
//   unsigned int leafQueueEnd;
//   unsigned int triangleQueueBegin;
//   unsigned int triangleQueueEnd;
//   unsigned int vertexQueueBegin;
//   unsigned int vertexQueueEnd;
//   QueueElement nodeQueue[64];
//   QueueElement leafQueue[4];
//   QueueElement triangleQueue[4];
//   unsigned __int16 vertexQueue[4][3];
// };

// /* 3856 */
// union XAnimPartQuatFrames
// {
//   __int16 (*frames)[4];
//   __int16 (*frames2)[2];
// };

// /* 3857 */
// struct __declspec(align(4)) XAnimPartQuatDataFrames
// {
//   XAnimPartQuatFrames u;
//   XAnimDynamicIndices indices;
// };

// /* 3858 */
// union XAnimPartQuatData
// {
//   XAnimPartQuatDataFrames frames;
//   __int16 frame0[4];
//   __int16 frame02[2];
// };

// /* 3859 */
// struct XAnimPartQuat
// {
//   unsigned __int16 size;
//   XAnimPartQuatData u;
// };

// /* 3860 */
// struct __declspec(align(4)) XAnimPartQuatPtr
// {
//   XAnimPartQuat *quat;
//   unsigned __int8 partIndex;
// };

// /* 3861 */
// struct __declspec(align(4)) XAnimPartTransPtr
// {
//   XAnimPartTrans *trans;
//   unsigned __int8 partIndex;
// };

// /* 3862 */
// struct ClientNotifyData
// {
//   unsigned int notetrackName;
//   unsigned int notifyType;
//   unsigned int notifyName;
//   float timeFrac;
// };

// /* 3863 */
// struct __cppobj XAnimClientNotify
// {
//   const char *name;
//   unsigned int svNotetrackName;
//   unsigned int clNotetrackName;
//   unsigned int notifyType;
//   unsigned int clNotifyName;
//   float timeFrac;
// };

// /* 3864 */
// struct XAnimTime
// {
//   float time;
//   float frameFrac;
//   int frameIndex;
// };

// /* 3865 */
// struct __cppobj bitarray<160>
// {
//   int array[5];
// };

// /* 3866 */
// struct __cppobj __declspec(align(8)) XAnimCalcAnimInfo
// {
//   DObjAnimMat rotTransArray[960];
//   bitarray<160> animPartBits;
//   bitarray<160> ignorePartBits;
//   bool bLeftHandGripIKActive;
// };

// /* 3867 */
// struct __cppobj __declspec(align(4)) XAnimToXModel
// {
//   bitarray<160> partBits;
//   unsigned __int8 boneCount;
//   unsigned __int8 boneIndex[160];
// };

// /* 3868 */
// struct XAnimServerNotify
// {
//   unsigned __int16 entNum;
//   unsigned __int16 notifyName;
//   unsigned __int16 notetrackName;
//   float fPercentTime;
// };

// /* 3869 */
// struct XAnimServerNotifyList
// {
//   XAnimServerNotify *pList;
//   int iNumElements;
//   int iCurrentElement;
// };

// /* 3870 */
// struct XModelNameMap
// {
//   unsigned __int16 name;
//   unsigned __int16 index;
// };

// /* 3871 */
// struct XAnimSimpleRotPos
// {
//   float rot[2];
//   float posWeight;
//   float pos[3];
// };

// /* 3872 */
// struct XAnimRotPos
// {
//   float rot[4];
//   float posWeight;
//   float pos[3];
// };

 /* 3873 */
struct XAnimDeltaInfo
{
  bool bClear;
  bool bNormQuat;
  bool bAbs;
  bool bUseGoalWeight;
};

// /* 3874 */
// struct SavedDObjModel
// {
//   unsigned __int16 boneName;
// };

// /* 3875 */
// struct SavedDObj
// {
//   SavedDObjModel dobjModels[32];
//   XModel **models;
//   unsigned int ignoreCollision;
//   unsigned __int16 numModels;
//   unsigned __int16 entnum;
//   unsigned __int8 flags;
//   char localClientNum;
//   XAnimTree_s *tree;
//   unsigned int hidePartBits[5];
// };

// /* 3876 */
// struct search_node_s
// {
//   const SimplePlaneIntersection *edge;
//   int plane;
//   int depth;
//   search_node_s *prevNode;
// };

// /* 3878 */
// struct tagMONITORINFO
// {
//   unsigned int cbSize;
//   tagRECT rcMonitor;
//   tagRECT rcWork;
//   unsigned int dwFlags;
// };

// /* 3879 */
// struct _DSCBCAPS
// {
//   unsigned int dwSize;
//   unsigned int dwFlags;
//   unsigned int dwBufferBytes;
//   unsigned int dwReserved;
// };

// /* 3880 */
// struct __cppobj IDirectSoundCaptureBuffer : IUnknown
// {
// };

// /* 3881 */
// struct _DSCEFFECTDESC
// {
//   unsigned int dwSize;
//   unsigned int dwFlags;
//   _GUID guidDSCFXClass;
//   _GUID guidDSCFXInstance;
//   unsigned int dwReserved1;
//   unsigned int dwReserved2;
// };

// /* 3882 */
// const struct _DSCBUFFERDESC
// {
//   unsigned int dwSize;
//   unsigned int dwFlags;
//   unsigned int dwBufferBytes;
//   unsigned int dwReserved;
//   tWAVEFORMATEX *lpwfxFormat;
//   unsigned int dwFXCount;
//   _DSCEFFECTDESC *lpDSCFXDesc;
// };

// /* 3883 */
// struct __cppobj IDirectSoundCapture : IUnknown
// {
// };

// /* 3884 */
// struct _DSCCAPS
// {
//   unsigned int dwSize;
//   unsigned int dwFlags;
//   unsigned int dwFormats;
//   unsigned int dwChannels;
// };

// /* 3885 */
// struct /*VFT*/ IDirectSoundCapture_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *CreateCaptureBuffer)(IDirectSoundCapture *this, const _DSCBUFFERDESC *, IDirectSoundCaptureBuffer **, IUnknown *);
//   HRESULT (__stdcall *GetCaps)(IDirectSoundCapture *this, _DSCCAPS *);
//   HRESULT (__stdcall *Initialize)(IDirectSoundCapture *this, const _GUID *);
// };

// /* 3886 */
// struct /*VFT*/ IDirectSoundCaptureBuffer_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetCaps)(IDirectSoundCaptureBuffer *this, _DSCBCAPS *);
//   HRESULT (__stdcall *GetCurrentPosition)(IDirectSoundCaptureBuffer *this, unsigned int *, unsigned int *);
//   HRESULT (__stdcall *GetFormat)(IDirectSoundCaptureBuffer *this, tWAVEFORMATEX *, unsigned int, unsigned int *);
//   HRESULT (__stdcall *GetStatus)(IDirectSoundCaptureBuffer *this, unsigned int *);
//   HRESULT (__stdcall *Initialize)(IDirectSoundCaptureBuffer *this, IDirectSoundCapture *, const _DSCBUFFERDESC *);
//   HRESULT (__stdcall *Lock)(IDirectSoundCaptureBuffer *this, unsigned int, unsigned int, void **, unsigned int *, void **, unsigned int *, unsigned int);
//   HRESULT (__stdcall *Start)(IDirectSoundCaptureBuffer *this, unsigned int);
//   HRESULT (__stdcall *Stop)(IDirectSoundCaptureBuffer *this);
//   HRESULT (__stdcall *Unlock)(IDirectSoundCaptureBuffer *this, void *, unsigned int, void *, unsigned int);
// };

// /* 3887 */
// struct _DSBCAPS
// {
//   unsigned int dwSize;
//   unsigned int dwFlags;
//   unsigned int dwBufferBytes;
//   unsigned int dwUnlockTransferRate;
//   unsigned int dwPlayCpuOverhead;
// };

// /* 3888 */
// struct __cppobj IDirectSoundBuffer : IUnknown
// {
// };

// /* 3889 */
// const struct _DSBUFFERDESC
// {
//   unsigned int dwSize;
//   unsigned int dwFlags;
//   unsigned int dwBufferBytes;
//   unsigned int dwReserved;
//   tWAVEFORMATEX *lpwfxFormat;
//   _GUID guid3DAlgorithm;
// };

// /* 3890 */
// struct __cppobj IDirectSound : IUnknown
// {
// };

// /* 3891 */
// struct _DSCAPS
// {
//   unsigned int dwSize;
//   unsigned int dwFlags;
//   unsigned int dwMinSecondarySampleRate;
//   unsigned int dwMaxSecondarySampleRate;
//   unsigned int dwPrimaryBuffers;
//   unsigned int dwMaxHwMixingAllBuffers;
//   unsigned int dwMaxHwMixingStaticBuffers;
//   unsigned int dwMaxHwMixingStreamingBuffers;
//   unsigned int dwFreeHwMixingAllBuffers;
//   unsigned int dwFreeHwMixingStaticBuffers;
//   unsigned int dwFreeHwMixingStreamingBuffers;
//   unsigned int dwMaxHw3DAllBuffers;
//   unsigned int dwMaxHw3DStaticBuffers;
//   unsigned int dwMaxHw3DStreamingBuffers;
//   unsigned int dwFreeHw3DAllBuffers;
//   unsigned int dwFreeHw3DStaticBuffers;
//   unsigned int dwFreeHw3DStreamingBuffers;
//   unsigned int dwTotalHwMemBytes;
//   unsigned int dwFreeHwMemBytes;
//   unsigned int dwMaxContigFreeHwMemBytes;
//   unsigned int dwUnlockTransferRateHwBuffers;
//   unsigned int dwPlayCpuOverheadSwBuffers;
//   unsigned int dwReserved1;
//   unsigned int dwReserved2;
// };

// /* 3892 */
// struct /*VFT*/ IDirectSound_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *CreateSoundBuffer)(IDirectSound *this, const _DSBUFFERDESC *, IDirectSoundBuffer **, IUnknown *);
//   HRESULT (__stdcall *GetCaps)(IDirectSound *this, _DSCAPS *);
//   HRESULT (__stdcall *DuplicateSoundBuffer)(IDirectSound *this, IDirectSoundBuffer *, IDirectSoundBuffer **);
//   HRESULT (__stdcall *SetCooperativeLevel)(IDirectSound *this, HWND__ *, unsigned int);
//   HRESULT (__stdcall *Compact)(IDirectSound *this);
//   HRESULT (__stdcall *GetSpeakerConfig)(IDirectSound *this, unsigned int *);
//   HRESULT (__stdcall *SetSpeakerConfig)(IDirectSound *this, unsigned int);
//   HRESULT (__stdcall *Initialize)(IDirectSound *this, const _GUID *);
// };

// /* 3893 */
// struct /*VFT*/ IDirectSoundBuffer_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetCaps)(IDirectSoundBuffer *this, _DSBCAPS *);
//   HRESULT (__stdcall *GetCurrentPosition)(IDirectSoundBuffer *this, unsigned int *, unsigned int *);
//   HRESULT (__stdcall *GetFormat)(IDirectSoundBuffer *this, tWAVEFORMATEX *, unsigned int, unsigned int *);
//   HRESULT (__stdcall *GetVolume)(IDirectSoundBuffer *this, int *);
//   HRESULT (__stdcall *GetPan)(IDirectSoundBuffer *this, int *);
//   HRESULT (__stdcall *GetFrequency)(IDirectSoundBuffer *this, unsigned int *);
//   HRESULT (__stdcall *GetStatus)(IDirectSoundBuffer *this, unsigned int *);
//   HRESULT (__stdcall *Initialize)(IDirectSoundBuffer *this, IDirectSound *, const _DSBUFFERDESC *);
//   HRESULT (__stdcall *Lock)(IDirectSoundBuffer *this, unsigned int, unsigned int, void **, unsigned int *, void **, unsigned int *, unsigned int);
//   HRESULT (__stdcall *Play)(IDirectSoundBuffer *this, unsigned int, unsigned int, unsigned int);
//   HRESULT (__stdcall *SetCurrentPosition)(IDirectSoundBuffer *this, unsigned int);
//   HRESULT (__stdcall *SetFormat)(IDirectSoundBuffer *this, const tWAVEFORMATEX *);
//   HRESULT (__stdcall *SetVolume)(IDirectSoundBuffer *this, int);
//   HRESULT (__stdcall *SetPan)(IDirectSoundBuffer *this, int);
//   HRESULT (__stdcall *SetFrequency)(IDirectSoundBuffer *this, unsigned int);
//   HRESULT (__stdcall *Stop)(IDirectSoundBuffer *this);
//   HRESULT (__stdcall *Unlock)(IDirectSoundBuffer *this, void *, unsigned int, void *, unsigned int);
//   HRESULT (__stdcall *Restore)(IDirectSoundBuffer *this);
// };

// /* 3894 */
// struct __declspec(align(4)) dsound_sample_t
// {
//   IDirectSoundCaptureBuffer *DSCB;
//   IDirectSoundBuffer *DSB;
//   unsigned int dwBufferSize;
//   unsigned int dwCaptureOffset;
//   unsigned int currentOffset;
//   unsigned int lastOffset;
//   unsigned int currentBufferLength;
//   int stopPosition;
//   unsigned int lastPlayPos;
//   int bytesBuffered;
//   int mode;
//   int frequency;
//   int volume;
//   int pan;
//   int channels;
//   bool playing;
//   int channel;
//   unsigned __int8 playMode;
// };

// /* 3895 */
// struct tagMIXERCONTROLDETAILS_LISTTEXTA
// {
//   unsigned int dwParam1;
//   unsigned int dwParam2;
//   char szName[64];
// };

// /* 3896 */
// struct $0D057425CB83406CCB6CB71DF3FA0A4C
// {
//   int lMinimum;
//   int lMaximum;
// };

// /* 3897 */
// struct $E50C0F09BB6F8C50FF087E1E76EA2CA0
// {
//   unsigned int dwMinimum;
//   unsigned int dwMaximum;
// };

// /* 3898 */
// union tagMIXERCONTROLA::<unnamed_type_Bounds>
// {
//   $0D057425CB83406CCB6CB71DF3FA0A4C __s0;
//   $E50C0F09BB6F8C50FF087E1E76EA2CA0 __s1;
//   unsigned int dwReserved[6];
// };

// /* 3899 */
// union tagMIXERCONTROLA::<unnamed_type_Metrics>
// {
//   unsigned int cSteps;
//   unsigned int cbCustomData;
//   unsigned int dwReserved[6];
// };

// /* 3900 */
// struct tagMIXERCONTROLA
// {
//   unsigned int cbStruct;
//   unsigned int dwControlID;
//   unsigned int dwControlType;
//   unsigned int fdwControl;
//   unsigned int cMultipleItems;
//   char szShortName[16];
//   char szName[64];
//   tagMIXERCONTROLA::<unnamed_type_Bounds> Bounds;
//   tagMIXERCONTROLA::<unnamed_type_Metrics> Metrics;
// };

// /* 3901 */
// struct tagMIXERLINEA::<unnamed_type_Target>
// {
//   unsigned int dwType;
//   unsigned int dwDeviceID;
//   unsigned __int16 wMid;
//   unsigned __int16 wPid;
//   unsigned int vDriverVersion;
//   char szPname[32];
// };

// /* 3902 */
// struct tagMIXERLINEA
// {
//   unsigned int cbStruct;
//   unsigned int dwDestination;
//   unsigned int dwSource;
//   unsigned int dwLineID;
//   unsigned int fdwLine;
//   unsigned int dwUser;
//   unsigned int dwComponentType;
//   unsigned int cChannels;
//   unsigned int cConnections;
//   unsigned int cControls;
//   char szShortName[16];
//   char szName[64];
//   tagMIXERLINEA::<unnamed_type_Target> Target;
// };

// /* 3903 */
// struct HMIXER__
// {
//   int unused;
// };

// /* 3904 */
// struct tMIXERCONTROLDETAILS_BOOLEAN
// {
//   int fValue;
// };

// /* 3905 */
// union $476D211351DA30503E50D2F0E6E515B0
// {
//   unsigned int dwControlID;
//   unsigned int dwControlType;
// };

// /* 3906 */
// struct tagMIXERLINECONTROLSA
// {
//   unsigned int cbStruct;
//   unsigned int dwLineID;
//   $476D211351DA30503E50D2F0E6E515B0 ___u2;
//   unsigned int cControls;
//   unsigned int cbmxctrl;
//   tagMIXERCONTROLA *pamxctrl;
// };

// /* 3907 */
// union $03C6649EF4412EFA1C66B254CEAB1C68
// {
//   HWND__ *hwndOwner;
//   unsigned int cMultipleItems;
// };

// /* 3908 */
// struct tMIXERCONTROLDETAILS
// {
//   unsigned int cbStruct;
//   unsigned int dwControlID;
//   unsigned int cChannels;
//   $03C6649EF4412EFA1C66B254CEAB1C68 ___u3;
//   unsigned int cbDetails;
//   void *paDetails;
// };

// /* 3909 */
// struct tMIXERCONTROLDETAILS_UNSIGNED
// {
//   unsigned int dwValue;
// };

// /* 3910 */
// struct HMIXEROBJ__
// {
//   int unused;
// };

// /* 3911 */
// struct HFONT__
// {
//   int unused;
// };

// /* 3912 */
// struct WinConData
// {
//   HWND__ *hWnd;
//   HWND__ *hwndBuffer;
//   HWND__ *codLogo;
//   HFONT__ *hfBufferFont;
//   HWND__ *hwndInputLine;
//   char errorString[512];
//   char consoleText[512];
//   char returnedText[512];
//   int windowWidth;
//   int windowHeight;
//   int (__stdcall *SysInputLineWndProc)(HWND__ *, unsigned int, unsigned int, int);
// };

// /* 3913 */
// struct HICON__
// {
//   int unused;
// };

// /* 3914 */
// struct HBRUSH__
// {
//   int unused;
// };

// /* 3915 */
// struct HMENU__
// {
//   int unused;
// };

// /* 3916 */
// struct tagWNDCLASSA
// {
//   unsigned int style;
//   int (__stdcall *lpfnWndProc)(HWND__ *, unsigned int, unsigned int, int);
//   int cbClsExtra;
//   int cbWndExtra;
//   HINSTANCE__ *hInstance;
//   HICON__ *hIcon;
//   HICON__ *hCursor;
//   HBRUSH__ *hbrBackground;
//   const char *lpszMenuName;
//   const char *lpszClassName;
// };

// /* 3917 */
// struct __unaligned __declspec(align(1)) tagICMPHDR
// {
//   unsigned __int8 Type;
//   unsigned __int8 Code;
//   unsigned __int16 Checksum;
//   unsigned __int16 ID;
//   unsigned __int16 Seq;
//   char Data;
// };

// /* 3918 */
// struct tagIPHDR
// {
//   unsigned __int8 VIHL;
//   unsigned __int8 TOS;
//   __int16 TotLen;
//   __int16 ID;
//   __int16 FlagOff;
//   unsigned __int8 TTL;
//   unsigned __int8 Protocol;
//   unsigned __int16 Checksum;
//   in_addr iaSrc;
//   in_addr iaDst;
// };

// /* 3919 */
// struct __unaligned __declspec(align(1)) tagECHOREQUEST
// {
//   tagICMPHDR icmpHdr;
//   unsigned int dwTime;
//   char cData[32];
// };

// /* 3920 */
// struct __unaligned __declspec(align(1)) tagECHOREPLY
// {
//   tagIPHDR ipHdr;
//   tagECHOREQUEST echoRequest;
//   char cFiller[256];
// };

// /* 3921 */
// struct __cppobj WinSplashStartup
// {
//   bool started;
// };

// /* 3922 */
// struct tagSIZE
// {
//   int cx;
//   int cy;
// };

// /* 3925 */
// struct __cppobj CPing
// {
// };

// /* 3923 */
// struct __cppobj CPingThread
// {
//   CPingThread_vtbl *__vftable /*VFT*/;
//   unsigned int m_dwID;
//   void *m_hThread;
//   void *m_hKillEvent;
//   void *m_hSignalEvent;
//   CPing m_ping;
//   char m_host[256];
//   HWND__ *m_hWnd;
//   unsigned int m_nRetries;
//   void (__cdecl *m_callback)();
// };

// /* 3924 */
// struct /*VFT*/ CPingThread_vtbl
// {
//   void (__thiscall *~CPingThread)(CPingThread *this);
// };

// /* 3926 */
// struct hostent
// {
//   char *h_name;
//   char **h_aliases;
//   __int16 h_addrtype;
//   __int16 h_length;
//   char **h_addr_list;
// };

// /* 3927 */
// struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_18
// {
//   const void *pVFTable;
//   void *spare;
//   char name[18];
// };

// /* 3928 */
// struct socketpool_t
// {
//   int sendtime;
//   unsigned int m_sock;
//   int ready;
//   int sendcount;
// };

// /* 3929 */
// struct _EXCEPTION_RECORD
// {
//   unsigned int ExceptionCode;
//   unsigned int ExceptionFlags;
//   _EXCEPTION_RECORD *ExceptionRecord;
//   void *ExceptionAddress;
//   unsigned int NumberParameters;
//   unsigned int ExceptionInformation[15];
// };

// /* 3930 */
// struct _FLOATING_SAVE_AREA
// {
//   unsigned int ControlWord;
//   unsigned int StatusWord;
//   unsigned int TagWord;
//   unsigned int ErrorOffset;
//   unsigned int ErrorSelector;
//   unsigned int DataOffset;
//   unsigned int DataSelector;
//   unsigned __int8 RegisterArea[80];
//   unsigned int Cr0NpxState;
// };

// /* 3931 */
// struct _CONTEXT
// {
//   unsigned int ContextFlags;
//   unsigned int Dr0;
//   unsigned int Dr1;
//   unsigned int Dr2;
//   unsigned int Dr3;
//   unsigned int Dr6;
//   unsigned int Dr7;
//   _FLOATING_SAVE_AREA FloatSave;
//   unsigned int SegGs;
//   unsigned int SegFs;
//   unsigned int SegEs;
//   unsigned int SegDs;
//   unsigned int Edi;
//   unsigned int Esi;
//   unsigned int Ebx;
//   unsigned int Edx;
//   unsigned int Ecx;
//   unsigned int Eax;
//   unsigned int Ebp;
//   unsigned int Eip;
//   unsigned int SegCs;
//   unsigned int EFlags;
//   unsigned int Esp;
//   unsigned int SegSs;
//   unsigned __int8 ExtendedRegisters[512];
// };

// /* 3932 */
// struct _EXCEPTION_POINTERS
// {
//   _EXCEPTION_RECORD *ExceptionRecord;
//   _CONTEXT *ContextRecord;
// };

// /* 3934 */
// struct tagVS_FIXEDFILEINFO
// {
//   unsigned int dwSignature;
//   unsigned int dwStrucVersion;
//   unsigned int dwFileVersionMS;
//   unsigned int dwFileVersionLS;
//   unsigned int dwProductVersionMS;
//   unsigned int dwProductVersionLS;
//   unsigned int dwFileFlagsMask;
//   unsigned int dwFileFlags;
//   unsigned int dwFileOS;
//   unsigned int dwFileType;
//   unsigned int dwFileSubtype;
//   unsigned int dwFileDateMS;
//   unsigned int dwFileDateLS;
// };

// /* 3935 */
// struct __unaligned __declspec(align(4)) _MINIDUMP_MODULE_CALLBACK
// {
//   wchar_t *FullPath;
//   unsigned __int64 BaseOfImage;
//   unsigned int SizeOfImage;
//   unsigned int CheckSum;
//   unsigned int TimeDateStamp;
//   tagVS_FIXEDFILEINFO VersionInfo;
//   void *CvRecord;
//   unsigned int SizeOfCvRecord;
//   void *MiscRecord;
//   unsigned int SizeOfMiscRecord;
// };

// /* 3936 */
// struct _MINIDUMP_MEMORY_INFO
// {
//   unsigned __int64 BaseAddress;
//   unsigned __int64 AllocationBase;
//   unsigned int AllocationProtect;
//   unsigned int __alignment1;
//   unsigned __int64 RegionSize;
//   unsigned int State;
//   unsigned int Protect;
//   unsigned int Type;
//   unsigned int __alignment2;
// };

// /* 3937 */
// struct _tagADDRESS64
// {
//   unsigned __int64 Offset;
//   unsigned __int16 Segment;
//   ADDRESS_MODE Mode;
// };

// /* 3938 */
// struct _KDHELP
// {
//   unsigned int Thread;
//   unsigned int ThCallbackStack;
//   unsigned int NextCallback;
//   unsigned int FramePointer;
//   unsigned int KiCallUserMode;
//   unsigned int KeUserCallbackDispatcher;
//   unsigned int SystemRangeStart;
//   unsigned int ThCallbackBStore;
//   unsigned int KiUserExceptionDispatcher;
//   unsigned int StackBase;
//   unsigned int StackLimit;
//   unsigned int Reserved[5];
// };

// /* 3939 */
// struct _MINIDUMP_READ_MEMORY_FAILURE_CALLBACK
// {
//   unsigned __int64 Offset;
//   unsigned int Bytes;
//   HRESULT FailureStatus;
// };

// /* 3940 */
// struct _MINIDUMP_EXCEPTION_INFORMATION
// {
//   unsigned int ThreadId;
//   _EXCEPTION_POINTERS *ExceptionPointers;
//   int ClientPointers;
// };

// /* 3941 */
// struct _MINIDUMP_USER_STREAM
// {
//   unsigned int Type;
//   unsigned int BufferSize;
//   void *Buffer;
// };

// /* 3942 */
// struct _MINIDUMP_THREAD_CALLBACK
// {
//   unsigned int ThreadId;
//   void *ThreadHandle;
//   _CONTEXT Context;
//   unsigned int SizeOfContext;
//   unsigned __int64 StackBase;
//   unsigned __int64 StackEnd;
// };

// /* 3943 */
// struct _MINIDUMP_THREAD_EX_CALLBACK
// {
//   unsigned int ThreadId;
//   void *ThreadHandle;
//   _CONTEXT Context;
//   unsigned int SizeOfContext;
//   unsigned __int64 StackBase;
//   unsigned __int64 StackEnd;
//   unsigned __int64 BackingStoreBase;
//   unsigned __int64 BackingStoreEnd;
// };

// /* 3944 */
// struct _MINIDUMP_INCLUDE_THREAD_CALLBACK
// {
//   unsigned int ThreadId;
// };

// /* 3945 */
// struct _MINIDUMP_INCLUDE_MODULE_CALLBACK
// {
//   unsigned __int64 BaseOfImage;
// };

// /* 3946 */
// struct __unaligned __declspec(align(4)) _MINIDUMP_IO_CALLBACK
// {
//   void *Handle;
//   unsigned __int64 Offset;
//   void *Buffer;
//   unsigned int BufferBytes;
// };

// /* 3947 */
// union $1FE83E5ED7F0489EC3DC4424AE7CF6E3
// {
//   HRESULT Status;
//   _MINIDUMP_THREAD_CALLBACK Thread;
//   _MINIDUMP_THREAD_EX_CALLBACK ThreadEx;
//   _MINIDUMP_MODULE_CALLBACK Module;
//   _MINIDUMP_INCLUDE_THREAD_CALLBACK IncludeThread;
//   _MINIDUMP_INCLUDE_MODULE_CALLBACK IncludeModule;
//   _MINIDUMP_IO_CALLBACK Io;
//   _MINIDUMP_READ_MEMORY_FAILURE_CALLBACK ReadMemoryFailure;
//   unsigned int SecondaryFlags;
// };

// /* 3948 */
// struct __unaligned __declspec(align(4)) _MINIDUMP_CALLBACK_INPUT
// {
//   unsigned int ProcessId;
//   void *ProcessHandle;
//   unsigned int CallbackType;
//   $1FE83E5ED7F0489EC3DC4424AE7CF6E3 ___u3;
// };

// /* 3949 */
// struct $C3E071958E7BDFB53859BF79F284BD3C
// {
//   unsigned int ModuleWriteFlags;
//   int Cancel;
//   unsigned int MemorySize;
// };

// /* 3950 */
// union $94DC905F5F0BC21AA9E3E64A1F155B68
// {
//   $C3E071958E7BDFB53859BF79F284BD3C __s0;
//   unsigned int ThreadWriteFlags;
//   unsigned int SecondaryFlags;
//   unsigned __int64 MemoryBase;
//   int CheckCancel;
//   void *Handle;
//   _MINIDUMP_MEMORY_INFO VmRegion;
//   HRESULT Status;
// };

// /* 3951 */
// struct __unaligned __declspec(align(4)) _MINIDUMP_CALLBACK_OUTPUT
// {
//   $94DC905F5F0BC21AA9E3E64A1F155B68 ___u0;
//   int Continue;
// };

// /* 3952 */
// struct _MINIDUMP_CALLBACK_INFORMATION
// {
//   int (__stdcall *CallbackRoutine)(void *, _MINIDUMP_CALLBACK_INPUT *const, _MINIDUMP_CALLBACK_OUTPUT *);
//   void *CallbackParam;
// };

// /* 3953 */
// struct _KDHELP64
// {
//   unsigned __int64 Thread;
//   unsigned int ThCallbackStack;
//   unsigned int ThCallbackBStore;
//   unsigned int NextCallback;
//   unsigned int FramePointer;
//   unsigned __int64 KiCallUserMode;
//   unsigned __int64 KeUserCallbackDispatcher;
//   unsigned __int64 SystemRangeStart;
//   unsigned __int64 KiUserExceptionDispatcher;
//   unsigned __int64 StackBase;
//   unsigned __int64 StackLimit;
//   unsigned __int64 Reserved[5];
// };

// /* 3954 */
// struct _LUID
// {
//   unsigned int LowPart;
//   int HighPart;
// };

// /* 3955 */
// struct _LUID_AND_ATTRIBUTES
// {
//   _LUID Luid;
//   unsigned int Attributes;
// };

// /* 3956 */
// struct _TOKEN_PRIVILEGES
// {
//   unsigned int PrivilegeCount;
//   _LUID_AND_ATTRIBUTES Privileges[1];
// };

// /* 3957 */
// struct _tagADDRESS
// {
//   unsigned int Offset;
//   unsigned __int16 Segment;
//   ADDRESS_MODE Mode;
// };

// /* 3958 */
// struct _MINIDUMP_USER_STREAM_INFORMATION
// {
//   unsigned int UserStreamCount;
//   _MINIDUMP_USER_STREAM *UserStreamArray;
// };

// /* 3959 */
// struct __declspec(align(8)) SysInfo
// {
//   long double cpuGHz;
//   long double configureGHz;
//   int logicalCpuCount;
//   int physicalCpuCount;
//   int sysMB;
//   char gpuDescription[512];
//   bool SSE;
//   char cpuVendor[13];
//   char cpuName[49];
// };

 /* 3960 */
struct sysEvent_t
{
  int evTime;
  sysEventType_t evType;
  int evValue;
  int evValue2;
  int evPtrLength;
  void* evPtr;
};

// /* 3961 */
// struct tagMODULEENTRY32
// {
//   unsigned int dwSize;
//   unsigned int th32ModuleID;
//   unsigned int th32ProcessID;
//   unsigned int GlblcntUsage;
//   unsigned int ProccntUsage;
//   unsigned __int8 *modBaseAddr;
//   unsigned int modBaseSize;
//   HINSTANCE__ *hModule;
//   char szModule[256];
//   char szExePath[260];
// };

// /* 3962 */
// struct _STARTUPINFOA
// {
//   unsigned int cb;
//   char *lpReserved;
//   char *lpDesktop;
//   char *lpTitle;
//   unsigned int dwX;
//   unsigned int dwY;
//   unsigned int dwXSize;
//   unsigned int dwYSize;
//   unsigned int dwXCountChars;
//   unsigned int dwYCountChars;
//   unsigned int dwFillAttribute;
//   unsigned int dwFlags;
//   unsigned __int16 wShowWindow;
//   unsigned __int16 cbReserved2;
//   unsigned __int8 *lpReserved2;
//   void *hStdInput;
//   void *hStdOutput;
//   void *hStdError;
// };

// /* 3963 */
// struct tagMSG
// {
//   HWND__ *hwnd;
//   unsigned int message;
//   unsigned int wParam;
//   int lParam;
//   unsigned int time;
//   tagPOINT pt;
// };

// /* 3964 */
// struct __unaligned __declspec(align(1)) _SHITEMID
// {
//   unsigned __int16 cb;
//   unsigned __int8 abID[1];
// };

// /* 3965 */
// struct _ITEMIDLIST
// {
//   _SHITEMID mkid;
// };

// /* 3966 */
// struct tagWNDCLASSEXA
// {
//   unsigned int cbSize;
//   unsigned int style;
//   int (__stdcall *lpfnWndProc)(HWND__ *, unsigned int, unsigned int, int);
//   int cbClsExtra;
//   int cbWndExtra;
//   HINSTANCE__ *hInstance;
//   HICON__ *hIcon;
//   HICON__ *hCursor;
//   HBRUSH__ *hbrBackground;
//   const char *lpszMenuName;
//   const char *lpszClassName;
//   HICON__ *hIconSm;
// };

// /* 3967 */
// struct _OSVERSIONINFOA
// {
//   unsigned int dwOSVersionInfoSize;
//   unsigned int dwMajorVersion;
//   unsigned int dwMinorVersion;
//   unsigned int dwBuildNumber;
//   unsigned int dwPlatformId;
//   char szCSDVersion[128];
// };

// /* 3968 */
// struct _PROCESS_INFORMATION
// {
//   void *hProcess;
//   void *hThread;
//   unsigned int dwProcessId;
//   unsigned int dwThreadId;
// };

// /* 3969 */
// struct $8CB265A9D3778DFC1F2AA7A5F0192391
// {
//   char *language;
//   char *strings;
// };

// /* 3970 */
// struct __declspec(align(4)) WinMouseVars_t
// {
//   int oldButtonState;
//   tagPOINT oldPos;
//   bool mouseActive;
//   bool mouseInitialized;
// };

// /* 3971 */
// struct ButtonToCodeMap_t
// {
//   GamePadButton padButton;
//   int code;
// };

// /* 3972 */
// struct StickToCodeMap_t
// {
//   GamePadStick padStick;
//   GamePadStickDir padStickDir;
//   int code;
// };

// /* 3973 */
// struct DIDEVCAPS
// {
//   unsigned int dwSize;
//   unsigned int dwFlags;
//   unsigned int dwDevType;
//   unsigned int dwAxes;
//   unsigned int dwButtons;
//   unsigned int dwPOVs;
//   unsigned int dwFFSamplePeriod;
//   unsigned int dwFFMinTimeResolution;
//   unsigned int dwFirmwareRevision;
//   unsigned int dwHardwareRevision;
//   unsigned int dwFFDriverVersion;
// };

// /* 3974 */
// struct __cppobj IDirectInputDeviceA : IUnknown
// {
// };

// /* 3975 */
// const struct DIDEVICEOBJECTINSTANCEA
// {
//   unsigned int dwSize;
//   _GUID guidType;
//   unsigned int dwOfs;
//   unsigned int dwType;
//   unsigned int dwFlags;
//   char tszName[260];
//   unsigned int dwFFMaxForce;
//   unsigned int dwFFForceResolution;
//   unsigned __int16 wCollectionNumber;
//   unsigned __int16 wDesignatorIndex;
//   unsigned __int16 wUsagePage;
//   unsigned __int16 wUsage;
//   unsigned int dwDimension;
//   unsigned __int16 wExponent;
//   unsigned __int16 wReportId;
// };

// /* 3976 */
// struct DIPROPHEADER
// {
//   unsigned int dwSize;
//   unsigned int dwHeaderSize;
//   unsigned int dwObj;
//   unsigned int dwHow;
// };

// /* 3977 */
// struct DIDEVICEOBJECTDATA
// {
//   unsigned int dwOfs;
//   unsigned int dwData;
//   unsigned int dwTimeStamp;
//   unsigned int dwSequence;
//   unsigned int uAppData;
// };

// /* 3978 */
// struct _DIOBJECTDATAFORMAT
// {
//   const _GUID *pguid;
//   unsigned int dwOfs;
//   unsigned int dwType;
//   unsigned int dwFlags;
// };

// /* 3979 */
// const struct _DIDATAFORMAT
// {
//   unsigned int dwSize;
//   unsigned int dwObjSize;
//   unsigned int dwFlags;
//   unsigned int dwDataSize;
//   unsigned int dwNumObjs;
//   _DIOBJECTDATAFORMAT *rgodf;
// };

// /* 3980 */
// struct DIDEVICEINSTANCEA
// {
//   unsigned int dwSize;
//   _GUID guidInstance;
//   _GUID guidProduct;
//   unsigned int dwDevType;
//   char tszInstanceName[260];
//   char tszProductName[260];
//   _GUID guidFFDriver;
//   unsigned __int16 wUsagePage;
//   unsigned __int16 wUsage;
// };

// /* 3981 */
// struct /*VFT*/ IDirectInputDeviceA_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetCapabilities)(IDirectInputDeviceA *this, DIDEVCAPS *);
//   HRESULT (__stdcall *EnumObjects)(IDirectInputDeviceA *this, int (__stdcall *)(const DIDEVICEOBJECTINSTANCEA *, void *), void *, unsigned int);
//   HRESULT (__stdcall *GetProperty)(IDirectInputDeviceA *this, const _GUID *, DIPROPHEADER *);
//   HRESULT (__stdcall *SetProperty)(IDirectInputDeviceA *this, const _GUID *, const DIPROPHEADER *);
//   HRESULT (__stdcall *Acquire)(IDirectInputDeviceA *this);
//   HRESULT (__stdcall *Unacquire)(IDirectInputDeviceA *this);
//   HRESULT (__stdcall *GetDeviceState)(IDirectInputDeviceA *this, unsigned int, void *);
//   HRESULT (__stdcall *GetDeviceData)(IDirectInputDeviceA *this, unsigned int, DIDEVICEOBJECTDATA *, unsigned int *, unsigned int);
//   HRESULT (__stdcall *SetDataFormat)(IDirectInputDeviceA *this, const _DIDATAFORMAT *);
//   HRESULT (__stdcall *SetEventNotification)(IDirectInputDeviceA *this, void *);
//   HRESULT (__stdcall *SetCooperativeLevel)(IDirectInputDeviceA *this, HWND__ *, unsigned int);
//   HRESULT (__stdcall *GetObjectInfo)(IDirectInputDeviceA *this, DIDEVICEOBJECTINSTANCEA *, unsigned int, unsigned int);
//   HRESULT (__stdcall *GetDeviceInfo)(IDirectInputDeviceA *this, DIDEVICEINSTANCEA *);
//   HRESULT (__stdcall *RunControlPanel)(IDirectInputDeviceA *this, HWND__ *, unsigned int);
//   HRESULT (__stdcall *Initialize)(IDirectInputDeviceA *this, HINSTANCE__ *, unsigned int, const _GUID *);
// };

// /* 3982 */
// struct __cppobj IDirectInputA : IUnknown
// {
// };

// /* 3983 */
// struct /*VFT*/ IDirectInputA_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *CreateDevice)(IDirectInputA *this, const _GUID *, IDirectInputDeviceA **, IUnknown *);
//   HRESULT (__stdcall *EnumDevices)(IDirectInputA *this, unsigned int, int (__stdcall *)(const DIDEVICEINSTANCEA *, void *), void *, unsigned int);
//   HRESULT (__stdcall *GetDeviceStatus)(IDirectInputA *this, const _GUID *);
//   HRESULT (__stdcall *RunControlPanel)(IDirectInputA *this, HWND__ *, unsigned int);
//   HRESULT (__stdcall *Initialize)(IDirectInputA *this, HINSTANCE__ *, unsigned int);
// };

// /* 3984 */
// struct _XINPUT_VIBRATION
// {
//   unsigned __int16 wLeftMotorSpeed;
//   unsigned __int16 wRightMotorSpeed;
// };

// /* 3985 */
// struct GamePad::<unnamed_type_feedback>
// {
//   _XINPUT_VIBRATION Rumble;
// };

// /* 3986 */
// struct _XINPUT_GAMEPAD
// {
//   unsigned __int16 wButtons;
//   unsigned __int8 bLeftTrigger;
//   unsigned __int8 bRightTrigger;
//   __int16 sThumbLX;
//   __int16 sThumbLY;
//   __int16 sThumbRX;
//   __int16 sThumbRY;
// };

// /* 3987 */
// struct _XINPUT_CAPABILITIES
// {
//   unsigned __int8 Type;
//   unsigned __int8 SubType;
//   unsigned __int16 Flags;
//   _XINPUT_GAMEPAD Gamepad;
//   _XINPUT_VIBRATION Vibration;
// };

// /* 3988 */
// struct GamePad
// {
//   bool enabled;
//   bool keyboardEnabled;
//   __int16 digitals;
//   __int16 lastDigitals;
//   float analogs[2];
//   float lastAnalogs[2];
//   float sticks[4];
//   float lastSticks[4];
//   bool stickDown[4][2];
//   bool stickDownLast[4][2];
//   float lowRumble;
//   float highRumble;
//   GamePad::<unnamed_type_feedback> feedback;
//   _XINPUT_CAPABILITIES caps;
//   _XINPUT_CAPABILITIES keyboardCaps;
// };

// /* 3989 */
// struct _XINPUT_STATE
// {
//   unsigned int dwPacketNumber;
//   _XINPUT_GAMEPAD Gamepad;
// };

// /* 3990 */
// struct _MEMORYSTATUSEX
// {
//   unsigned int dwLength;
//   unsigned int dwMemoryLoad;
//   unsigned __int64 ullTotalPhys;
//   unsigned __int64 ullAvailPhys;
//   unsigned __int64 ullTotalPageFile;
//   unsigned __int64 ullAvailPageFile;
//   unsigned __int64 ullTotalVirtual;
//   unsigned __int64 ullAvailVirtual;
//   unsigned __int64 ullAvailExtendedVirtual;
// };

// /* 3991 */
// struct _MEMORYSTATUS
// {
//   unsigned int dwLength;
//   unsigned int dwMemoryLoad;
//   unsigned int dwTotalPhys;
//   unsigned int dwAvailPhys;
//   unsigned int dwTotalPageFile;
//   unsigned int dwAvailPageFile;
//   unsigned int dwTotalVirtual;
//   unsigned int dwAvailVirtual;
// };

// /* 3992 */
// struct Sys_DetectCpuVendorAndName::__l2::<unnamed_type_cpuid_vendor>::<unnamed_type_reg>
// {
//   unsigned int ebx;
//   unsigned int edx;
//   unsigned int ecx;
// };

// /* 3993 */
// union Sys_DetectCpuVendorAndName::__l2::<unnamed_type_cpuid_vendor>
// {
//   Sys_DetectCpuVendorAndName::__l2::<unnamed_type_cpuid_vendor>::<unnamed_type_reg> reg;
//   char name[12];
// };

// /* 3994 */
// struct Sys_DetectCpuVendorAndName::__l2::<unnamed_type_cpuid_desc>::<unnamed_type_s>::<unnamed_type_reg0>
// {
//   unsigned int eax;
//   unsigned int ebx;
//   unsigned int ecx;
//   unsigned int edx;
// };

// /* 3995 */
// struct Sys_DetectCpuVendorAndName::__l2::<unnamed_type_cpuid_desc>::<unnamed_type_s>
// {
//   Sys_DetectCpuVendorAndName::__l2::<unnamed_type_cpuid_desc>::<unnamed_type_s>::<unnamed_type_reg0> reg0;
//   Sys_DetectCpuVendorAndName::__l2::<unnamed_type_cpuid_desc>::<unnamed_type_s>::<unnamed_type_reg0> reg1;
//   Sys_DetectCpuVendorAndName::__l2::<unnamed_type_cpuid_desc>::<unnamed_type_s>::<unnamed_type_reg0> reg2;
// };

// /* 3996 */
// union Sys_DetectCpuVendorAndName::__l2::<unnamed_type_cpuid_desc>
// {
//   Sys_DetectCpuVendorAndName::__l2::<unnamed_type_cpuid_desc>::<unnamed_type_s> s;
//   char string[52];
// };

// /* 3997 */
// struct Sys_BenchmarkGHz::__l2::<unnamed_type_start>::<unnamed_type_u32>
// {
//   unsigned int _0;
//   unsigned int _1;
// };

// /* 3998 */
// union Sys_BenchmarkGHz::__l2::<unnamed_type_start>
// {
//   Sys_BenchmarkGHz::__l2::<unnamed_type_start>::<unnamed_type_u32> u32;
//   unsigned __int64 u64;
// };

// /* 3999 */
// struct _finddata64i32_t
// {
//   unsigned int attrib;
//   __int64 time_create;
//   __int64 time_access;
//   __int64 time_write;
//   unsigned int size;
//   char name[260];
// };

// /* 4000 */
// struct infoParm_t
// {
//   const char *name;
//   int clearSolid;
//   int surfaceFlags;
//   int contents;
//   int toolFlags;
// };

// /* 4001 */
// struct reliableMsg
// {
//   bool active;
//   unsigned __int8 sequenceNum;
//   msg_t msg;
// };

// /* 4002 */
// struct reliableClient
// {
//   netadr_t addr;
//   int lastSendTime;
//   int firstSendTime;
//   unsigned __int8 nextSequence;
//   int bufferUsed;
//   int bytesAckd;
//   unsigned __int8 reliableBuf[1000];
//   reliableMsg msgs[20];
// };

// /* 4003 */
// struct RedBlackTreeNode
// {
//   unsigned __int64 key;
//   unsigned int color;
//   RedBlackTreeNode *parent;
//   RedBlackTreeNode *child[2];
// };

// /* 4004 */
// struct __declspec(align(8)) RedBlackTree
// {
//   RedBlackTreeNode null;
//   RedBlackTreeNode root;
//   RedBlackTreeNode *(__cdecl *AllocNodeCallback)();
// };

// /* 4005 */
// struct __declspec(align(8)) RedBlackCacheNode
// {
//   RedBlackTreeNode rbNode;
//   unsigned int timeStamp;
// };

// /* 4006 */
// struct __declspec(align(8)) RedBlackCache
// {
//   RedBlackTree rbTree;
//   RedBlackCacheNode *firstNode;
//   unsigned int sizeofNode;
//   unsigned int nodeCount;
//   unsigned int minTimeToFree;
//   unsigned int allocCount;
//   unsigned int freeWalk;
//   unsigned int timeStamp;
//   bool isNewNode;
//   void (__cdecl *FreeCallback)(RedBlackCacheNode *);
// };

// /* 4007 */
// struct __cppobj RaiiSrvString
// {
//   unsigned __int16 m_stringHash;
//   __int16 m_iInst;
// };

/* 4008 */
struct va_info_t
{
  char va_string[4][1024];
  int index;
};

static_assert(sizeof(va_info_t) == 0x1004, "The size is not correct");

// /* 4009 */
// union FloatReadSwap::__l2::<unnamed_type_dat1>
// {
//   float f;
//   int n;
//   unsigned __int8 b[4];
// };

// /* 4010 */
// union FloatWriteSwap::__l2::<unnamed_type_dat1>
// {
//   float f;
//   int n;
//   unsigned __int8 b[4];
// };

// /* 4011 */
// struct parseInfo_t
// {
//   char token[1024];
//   ParseTokenType tokenType;
//   int lines;
//   bool ungetToken;
//   bool spaceDelimited;
//   bool keepStringQuotes;
//   bool csv;
//   bool negativeNumbers;
//   const char *errorPrefix;
//   const char *warningPrefix;
//   int backup_lines;
//   const char *backup_text;
//   const char *parseFile;
// };

// /* 4012 */
// struct ParseThreadInfo
// {
//   parseInfo_t parseInfo[16];
//   int parseInfoNum;
//   const char *tokenPos;
//   const char *prevTokenPos;
//   char line[1024];
// };

// /* 4013 */
// struct profilemem_t
// {
//   profilemem_t *child;
//   profilemem_t *parent;
//   profilemem_t *nextSibling;
//   profilemem_t *prevSibling;
//   unsigned int startSize;
//   unsigned int totalSize;
//   unsigned int hits;
//   const char *name;
// };

// /* 4014 */
// struct ProfileMemTree
// {
//   profilemem_t *currentNode;
//   profilemem_t nodePool[256];
//   unsigned int treeSize;
// };

// /* 4015 */
// struct profMemTreeIter_t
// {
//   profilemem_t *node;
//   int nesting;
// };

// /* 4016 */
// struct pooldata_t
// {
//   void *firstFree;
//   int activeCount;
// };

// /* 4017 */
// struct freenode
// {
//   freenode *next;
// };

// /* 4018 */
// struct PhysicalMemoryAllocation
// {
//   const char *name;
//   unsigned int pos;
// };

// /* 4019 */
// struct PhysicalMemoryPrim
// {
//   const char *allocName;
//   unsigned int allocListCount;
//   unsigned int pos;
//   PhysicalMemoryAllocation allocList[32];
//   EMemTrack memTrack;
// };

// /* 4020 */
// struct PhysicalMemory
// {
//   const char *name;
//   unsigned __int8 *buf;
//   PhysicalMemoryPrim prim[2];
//   unsigned int size;
// };

// /* 4021 */
// struct __cppobj tlFixedString
// {
//   unsigned int hash;
//   char str[28];
// };

// /* 4022 */
// struct ALLOCATION_SCHEME_FUNCTIONS
// {
//   HunkUser *(__cdecl *Init)(void *, int, HU_ALLOCATION_SCHEME, unsigned int, void *, const char *, int);
//   void (__cdecl *Reset)(HunkUser *);
//   void (__cdecl *Destroy)(HunkUser *);
//   void *(__cdecl *Alloc)(HunkUser *, int, int, const char *);
//   void (__cdecl *Free)(HunkUser *, void *);
// };

// /* 4023 */
// struct __declspec(align(4)) HunkUserDefault
// {
//   HunkUser hunkUser;
//   HunkUserDefault *current;
//   HunkUserDefault *next;
//   int maxSize;
//   int end;
//   int pos;
//   int locked;
//   unsigned __int8 buf[1];
// };

// /* 4024 */
// struct HunkUserDebug
// {
//   HunkUser hunkUser;
//   HunkUser *firstFit;
// };

// /* 4025 */
// struct _fixed_heapnode
// {
//   _fixed_heapnode *next;
// };

// /* 4026 */
// struct FIXED_HUNKUSER
// {
//   HunkUser hunkUser;
//   int base_size;
//   int block_size;
//   _fixed_heapnode *free_blocks;
// };

// /* 4027 */
// struct USERHEAP_FIXED_SCHEME_SPECIFIC
// {
//   int block_size;
// };

// /* 4028 */
// struct __cppobj ScopedCriticalSection
// {
//   CriticalSection m_critId;
// };

// /* 4029 */
// struct _firstfit_heapnode
// {
//   _firstfit_heapnode *next;
//   int size;
// };

// /* 4030 */
// struct FIRSTFIT_HUNKUSER
// {
//   HunkUser hunkUser;
//   int base_size;
//   _firstfit_heapnode *free_blocks;
//   int watermarkId;
//   unsigned int hunkUser_memAllocated;
// };

// /* 4031 */
// struct vehicle_path_node_link_t
// {
//   __int16 nextIdx;
//   float length;
//   float dir[3];
// };

// /* 4032 */
// struct __declspec(align(4)) vn_field_t
// {
//   char *name;
//   int ofs;
//   int size[1];
//   fieldtype_t type;
//   bool writable;
// };

// /* 4033 */
// struct VP_FindPath::__l4::pathNodeTransientInfo
// {
//   __int16 fromNode;
//   __int16 flags;
//   float gCost;
//   float fCost;
//   float hCost;
// };

// /* 4034 */
// struct complex4_t
// {
//   float real[4];
//   float imag[4];
// };

// /* 4035 */
// struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_5
// {
//   const void *pVFTable;
//   void *spare;
//   char name[5];
// };

// /* 4036 */
// struct $_s__CatchableTypeArray$_extraBytes_8
// {
//   int nCatchableTypes;
//   const _s__CatchableType *arrayOfCatchableTypes[2];
// };

/* 4038 */
struct EvalValue
{
  EvalValueType type;
  union
  {
    long double d;
    int i;
    char* s;
  } u;
};

// /* 4039 */
// struct __declspec(align(4)) Eval
// {
//   EvalOperatorType opStack[1024];
//   EvalValue valStack[1024];
//   int opStackPos;
//   int valStackPos;
//   int parenCount;
//   bool pushedOp;
// };

// /* 4040 */
// struct __cppobj std::pair<dvar_s const * *,dvar_s const * *>
// {
//   const dvar_s **first;
//   const dvar_s **second;
// };

// /* 4041 */
// struct CURVESORTARGS
// {
//   bool increasing_sort_order;
//   float p[3];
// };

// /* 4042 */
// struct snd_mem_node_s
// {
//   void *ptr;
//   snd_mem_node_s *next;
// };

// /* 4043 */
// struct __declspec(align(4)) fileData_s
// {
//   void *data;
//   fileData_s *next;
//   unsigned __int8 type;
//   char name[1];
// };

// /* 4044 */
// struct hunkUsed_t
// {
//   int permanent;
//   int temp;
// };

// /* 4045 */
// struct hunkHeader_t
// {
//   unsigned int magic;
//   int size;
//   const char *name;
//   int dummy;
// };

// /* 4046 */
// struct mem_track_t
// {
//   char name[128];
//   const char *filename;
//   int size[2];
//   int pos;
//   unsigned __int8 type;
//   unsigned __int8 usageType;
//   int count;
// };

// /* 4047 */
// struct mem_track_node_s
// {
//   mem_track_t data;
//   int project;
//   mem_track_node_s *prev;
//   mem_track_node_s *next;
// };

// /* 4048 */
// struct AssetList
// {
//   int assetCount;
//   int maxCount;
//   XAssetHeader *assets;
// };

// /* 4049 */
// struct iwd_pure_check_s
// {
//   iwd_pure_check_s *next;
//   int checksum;
//   char iwdBasename[256];
//   char iwdGamename[256];
// };

// /* 4050 */
// struct searchpath_s
// {
//   searchpath_s *next;
//   iwd_t *iwd;
//   directory_t *dir;
//   int bLocalized;
//   int ignore;
//   int ignorePureCheck;
//   int language;
// };

// /* 4052 */
// struct iwd_t
// {
//   char iwdFilename[256];
//   char iwdBasename[256];
//   char iwdGamename[256];
//   unsigned __int8 *handle;
//   int checksum;
//   int pure_checksum;
//   volatile int hasOpenFile;
//   int numFiles;
//   unsigned __int8 referenced;
//   unsigned int hashSize;
//   fileInIwd_s **hashTable;
//   fileInIwd_s *buildBuffer;
// };

// /* 4053 */
// struct directory_t
// {
//   char path[256];
//   char gamedir[256];
// };

// /* 4051 */
// struct fileInIwd_s
// {
//   unsigned int pos;
//   char *name;
//   fileInIwd_s *next;
// };

// /* 4054 */
// union qfile_gus
// {
//   _iobuf *o;
//   unsigned __int8 *z;
// };

// /* 4055 */
// struct qfile_us
// {
//   qfile_gus file;
//   int iwdIsClone;
// };

// /* 4056 */
// struct fileHandleData_t
// {
//   qfile_us handleFiles;
//   int handleSync;
//   int fileSize;
//   int zipFilePos;
//   iwd_t *zipFile;
//   int streamed;
//   char name[256];
// };

// /* 4057 */
// struct FS_LoadFakeIwdFile::__l2::fake_iwd_header_t
// {
//   int numFiles;
//   int numHeaderLongs;
// };

 /* 4058 */
struct OperandList
{
  Operand operands[10];
  int operandCount;
};

/* 4059 */
struct OperandStack
{
  OperandList stack[60];
  int numOperandLists;
};

// /* 4060 */
// struct rpnStaticFunction_t
// {
//   int arguments;
//   void (__cdecl *cmd)(const int, itemDef_s *, OperandStack *);
// };

// /* 4061 */
// union entryInternalData
// {
//   expOperationEnum op;
//   Operand operand;
// };

// /* 4062 */
// struct pc_token_s
// {
//   int type;
//   int subtype;
//   int intvalue;
//   float floatvalue;
//   char string[1024];
// };

// /* 4063 */
// struct expressionEntry
// {
//   int type;
//   entryInternalData data;
//   expressionEntry *next;
// };

// /* 4064 */
// struct ExpressionAllocState
// {
//   int size;
//   void *buffer;
// };

// /* 4065 */
// struct AddressInfo_s
// {
//   unsigned int address;
//   char moduleName[64];
//   char bestFunction[64];
//   char bestFunctionFilename[64];
//   unsigned int bestFunctionAddress;
//   char bestLineFilename[64];
//   unsigned int bestLineAddress;
//   unsigned int bestLineNumber;
// };

// /* 4066 */
// struct __declspec(align(4)) _WIN32_FIND_DATAA
// {
//   unsigned int dwFileAttributes;
//   _FILETIME ftCreationTime;
//   _FILETIME ftLastAccessTime;
//   _FILETIME ftLastWriteTime;
//   unsigned int nFileSizeHigh;
//   unsigned int nFileSizeLow;
//   unsigned int dwReserved0;
//   unsigned int dwReserved1;
//   char cFileName[260];
//   char cAlternateFileName[14];
// };

// /* 4067 */
// struct _POINTL
// {
//   int x;
//   int y;
// };

// /* 4068 */
// struct $5ACE225D4D14CE0550A9F5A217E306C5
// {
//   __int16 dmOrientation;
//   __int16 dmPaperSize;
//   __int16 dmPaperLength;
//   __int16 dmPaperWidth;
// };

// /* 4069 */
// union $A1D819C1665E95C879F10FCEE6403C6B
// {
//   $5ACE225D4D14CE0550A9F5A217E306C5 __s0;
//   _POINTL dmPosition;
// };

// /* 4070 */
// struct $84BDF2D0EF3E6D92B6C33770B276E406
// {
//   __int16 dmScale;
//   __int16 dmCopies;
// };

// /* 4071 */
// union $EFD3C34021612BF71C18BAC91112D8C3
// {
//   $84BDF2D0EF3E6D92B6C33770B276E406 __s0;
//   unsigned int dmDisplayOrientation;
// };

// /* 4072 */
// struct $319163E49F0A6F35652FDFBFBA0FF503
// {
//   __int16 dmDefaultSource;
//   __int16 dmPrintQuality;
// };

// /* 4073 */
// union $015FAA09D2361F78A81806AFEC1FD223
// {
//   $319163E49F0A6F35652FDFBFBA0FF503 __s0;
//   unsigned int dmDisplayFixedOutput;
// };

// /* 4074 */
// union $309666D137CBB19809FA597AD348B415
// {
//   unsigned int dmDisplayFlags;
//   unsigned int dmNup;
// };

// /* 4075 */
// struct _devicemodeA
// {
//   unsigned __int8 dmDeviceName[32];
//   unsigned __int16 dmSpecVersion;
//   unsigned __int16 dmDriverVersion;
//   unsigned __int16 dmSize;
//   unsigned __int16 dmDriverExtra;
//   unsigned int dmFields;
//   $A1D819C1665E95C879F10FCEE6403C6B ___u6;
//   $EFD3C34021612BF71C18BAC91112D8C3 ___u7;
//   $015FAA09D2361F78A81806AFEC1FD223 ___u8;
//   __int16 dmColor;
//   __int16 dmDuplex;
//   __int16 dmYResolution;
//   __int16 dmTTOption;
//   __int16 dmCollate;
//   unsigned __int8 dmFormName[32];
//   unsigned __int16 dmLogPixels;
//   unsigned int dmBitsPerPel;
//   unsigned int dmPelsWidth;
//   unsigned int dmPelsHeight;
//   $309666D137CBB19809FA597AD348B415 ___u19;
//   unsigned int dmDisplayFrequency;
//   unsigned int dmICMMethod;
//   unsigned int dmICMIntent;
//   unsigned int dmMediaType;
//   unsigned int dmDitherType;
//   unsigned int dmReserved1;
//   unsigned int dmReserved2;
//   unsigned int dmPanningWidth;
//   unsigned int dmPanningHeight;
// };

// /* 4076 */
// struct GenericAabbTree
// {
//   int firstItem;
//   int itemCount;
//   int firstChild;
//   int childCount;
// };

// /* 4077 */
// struct GenericAabbTreeOptions
// {
//   void *items;
//   int itemCount;
//   int itemSize;
//   int maintainValidBounds;
//   float (*mins)[3];
//   float (*maxs)[3];
//   GenericAabbTree *treeNodePool;
//   int treeNodeLimit;
//   int minItemsPerLeaf;
//   int maxItemsPerLeaf;
// };

// /* 4078 */
// struct UIViewer::CameraParams
// {
//   float lookAt[3];
//   float dist;
//   float yaw;
//   float pitch;
// };

// /* 4079 */
// struct __cppobj UIViewer::PlayerParams
// {
//   int bodyIndex;
//   int headIndex;
//   int facePatternIndex;
//   int faceColorIndex;
// };

// /* 4080 */
// struct __cppobj UIViewer::WeaponParams
// {
//   UIViewer::WeaponSlot weaponSlot;
//   int weaponIndex;
//   int attachTopIndex;
//   int attachBottomIndex;
//   int attachTriggerIndex;
//   int attachMuzzleIndex;
//   renderOptions_s weaponOptions;
//   int currentAttachmentPoint;
// };

// /* 4081 */
// struct __cppobj __declspec(align(4)) UIViewer::State
// {
//   int mode;
//   char faction[32];
//   UIViewer::PlayerParams playerParams;
//   UIViewer::WeaponParams weaponParams;
//   bool locked;
// };

// /* 4082 */
// struct UIViewer::DrawDobj
// {
//   DObj *dobj;
//   const WeaponVariantDef *weaponVariantDef;
//   cpose_t pose;
//   float yaw;
//   bool depthHack;
//   renderOptions_s weaponOptions;
//   bool heroLighting;
//   int startTime;
//   bool locked;
//   ShaderConstantSet constantSet;
// };

// /* 4083 */
// struct UIViewer::CameraParamOverrides
// {
//   char weapon[20];
//   char attachment[20];
//   char params[32];
//   int row;
//   int col;
// };

// /* 4084 */
// struct __cppobj __declspec(align(8)) UIViewer
// {
//   bool inited;
//   bool streamerInited;
//   bool mapLoaded;
//   bool show;
//   bool deferredShow;
//   bool ingame;
//   UIViewer::Mode mode;
//   bool cameraAnim;
//   int cameraAnimStartTime;
//   UIViewer::CameraParams camera;
//   UIViewer::CameraParams cameraAnimStart;
//   UIViewer::CameraParams cameraAnimEnd;
//   char playerCameraName[64];
//   const dvar_s *loaded;
//   const dvar_s *streaming;
//   const dvar_s *showDvar;
//   const dvar_s *modeDvar;
//   const dvar_s *ingameDvar;
//   const dvar_s *customname;
//   const dvar_s *equipWeapon;
//   const dvar_s *weaponDvar;
//   const dvar_s *attachmentDvar;
//   const dvar_s *playerCameraDvar;
//   const dvar_s *cameraPitchRange;
//   const dvar_s *allowCameraPitch;
//   const dvar_s *lightMultiplier;
//   const dvar_s *fov;
//   const dvar_s *highlightColor1;
//   const dvar_s *highlightColor2;
//   const dvar_s *heroHighlight;
//   const dvar_s *sceneOrigin;
//   const dvar_s *cameraControl;
//   const dvar_s *viewerMsg;
//   const dvar_s *dumpAnims;
//   const dvar_s *timeScale;
//   const dvar_s *drawAttachPoints;
//   UIViewer::State prevState;
//   float prevSceneOrigin[3];
//   char dobjsBuffer[124];
//   DObj *dobjsPool[1];
//   int nextDobj;
//   UIViewer::DrawDobj drawDobjs[1];
//   int nDrawDobjs;
//   int controllerIndex;
//   XAnimTree_s *animTree;
//   pmove_t pmove;
//   playerState_s ps;
//   int currentPlayerWeapon;
//   unsigned int playerWeaponHistory[4];
//   int nextPlayerWeaponHistory;
//   bgsAnim_s bgsAnim;
//   bgs_t bgs;
//   const StringTable *cameraPosTable;
//   const StringTable *bodyHeadTable;
//   char lastCameraWeapon[32];
//   char lastCameraAttachment[32];
//   UIViewer::CameraParamOverrides cameraOverrides[256];
//   int nCameraOverrides;
// };

// /* 4085 */
// struct __cppobj pml_t
// {
//   float forward[3];
//   float right[3];
//   float up[3];
//   float frametime;
//   int msec;
//   int walking;
//   int groundPlane;
//   int almostGroundPlane;
//   trace_t groundTrace;
//   float impactSpeed;
//   float previous_origin[3];
//   float previous_velocity[3];
// };

// /* 4086 */
// struct stringDef_s
// {
//   stringDef_s *next;
//   const char *str;
// };

 /* 4087 */
template <typename T, int N, int M>
struct KeywordHashEntry
{
  const char* keyword;
  int (*func)(T*, int);
};

// /* 4088 */
// struct conditionStackMember_t
// {
//   ExpressionStatement condition;
//   bool fireOnTrue;
//   int level;
//   int blockID;
//   int constructID;
//   int type;
// };

// /* 4089 */
// struct conditionStack_t
// {
//   conditionStackMember_t members[64];
//   int size;
// };

// /* 4090 */
// struct nestingCounts_t
// {
//   int bracketNestingLevel;
//   int ifNestingLevel;
// };

// /* 4091 */
// struct KeywordHashEntry<itemDef_s,1024,6>
// {
//   const char *keyword;
//   int (__cdecl *func)(itemDef_s *, int);
// };

// /* 4092 */
// struct loadAssets_t
// {
//   float fadeClamp;
//   int fadeCycle;
//   float fadeAmount;
//   float fadeInAmount;
// };

// /* 4093 */
// struct $91EDD849A89385E6F5604D2595156BF5
// {
//   loadAssets_t loadAssets;
//   MenuList menuList;
//   itemDef_s *items[512];
//   animParamsDef_t *animStates[256];
//   menuDef_t *menus[512];
// };

// /* 4094 */
// struct commandDef_t
// {
//   const char *name;
//   void (__cdecl *handler)(int, UiContext *, itemDef_s *, const char **);
// };

// /* 4095 */
// struct scrollInfo_s
// {
//   int nextScrollTime;
//   int nextAdjustTime;
//   int adjustValue;
//   int scrollKey;
//   float xStart;
//   float yStart;
//   itemDef_s *item;
//   int scrollDir;
// };

// /* 4096 */
// struct __cppobj ScreenPlacementStack
// {
//   ScreenPlacement stack[2];
//   int size;
//   int contextIndex;
// };

// /* 4097 */
// struct __cppobj ScopedScrPlaceViewStack
// {
//   ScreenPlacementStack *mStack;
// };

// /* 4098 */
// struct __cppobj std::iterator<std::random_access_iterator_tag,char,int,char *,char &> : std::_Iterator_base_universal
// {
// };

// /* 4099 */
// struct __cppobj std::_Revranit<char *,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> > : std::iterator<std::random_access_iterator_tag,char,int,char *,char &>
// {
//   char *current;
// };

// /* 4100 */
// struct __cppobj std::reverse_iterator<char *> : std::_Revranit<char *,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> >
// {
// };

// /* 4101 */
// struct __declspec(align(4)) nestingStackElem_t
// {
//   int constructID;
//   int blockID;
//   bool outcome;
// };

// /* 4102 */
// struct GfxUI3DStack
// {
//   int stack[2];
//   int size;
// };

// /* 4103 */
// struct __cppobj ScopedUI3DStack
// {
//   GfxUI3DStack *mStack;
// };

// /* 4104 */
// struct nestingStack_t
// {
//   int top;
//   nestingStackElem_t members[64];
// };

 /* 4105 */
struct serverFilter_s
{
  const char* description;
  const char* basedir;
};

// /* 4106 */
// struct ScreenshotDecompressParams
// {
//   void *jpeg;
//   int width;
//   int height;
//   _D3DFORMAT format;
// };

// /* 4107 */
// struct categoryInfo
// {
//   const char *internalName;
//   const char *filter;
//   const char *localizedName;
//   const char *description;
//   const char *lockdescription;
//   const char *iconName;
//   int unlockXp;
//   int unlockPLevel;
//   bool collectorsEditionRequired;
//   bool finishedSoloRequired;
//   int playlistCount;
//   const char *rules;
//   bool visible_dvar;
//   const dvar_s *visDvar;
// };

// /* 4108 */
// struct __declspec(align(4)) playlistGametype
// {
//   const char *scriptName;
//   const char *internalName;
//   const char *localizedName;
//   const char *rules;
//   bool teamBased;
// };

// /* 4109 */
// struct playlistEntry
// {
//   const char *mapname;
//   const char *gametype;
//   int fullWeight;
//   int remainingWeight;
//   int ignore;
// };

// /* 4110 */
// struct playlistInfo
// {
//   const char *name;
//   const char *description;
//   const char *lockdescription;
//   const char *iconName;
//   const char *rules;
//   const char *category[16];
//   int baseEntry;
//   int numEntries;
//   int unlockXp;
//   int unlockPLevel;
//   int gametypeBan;
//   int maxPartySize;
//   int minPartySize;
//   unsigned int requiredDLCMask;
//   bool ranked;
//   bool collectorsEditionRequired;
//   bool finishedSoloRequired;
//   int wagerBet;
//   int wagerEntry;
//   int maxLocalPlayers;
//   bool disableGuests;
//   bool visible_dvar;
//   const dvar_s *visDvar;
//   int categoryCount;
// };

// /* 4111 */
// struct serverStatusDvar_t
// {
//   const char *name;
//   const char *altName;
//   sscType_t type;
// };

// /* 4112 */
// struct LegacyHacks
// {
//   int cl_downloadSize;
//   int cl_downloadCount;
//   int cl_downloadTime;
//   char cl_downloadName[64];
// };

// /* 4113 */
// struct uiClientState_s
// {
//   connstate_t connState;
//   int connectPacketCount;
//   char servername[1024];
//   char messageString[1024];
// };

 /* 4114 */
struct GVConditional
{
  bool hasConditional;
  unsigned __int8 m_lhsIndex;
  unsigned __int8 m_operatorIndex;
  unsigned __int8 m_rhsIndex;
};

// /* 4115 */
// struct __cppobj GVValue
// {
//   const char *m_displayValue;
//   const char *m_value;
// };

// /* 4116 */
// struct __cppobj GVConditionalRhs
// {
//   GVValue *m_values;
//   int m_valuesSize;
//   GVType m_type;
// };

// /* 4117 */
// struct __cppobj __declspec(align(4)) GVTarget
// {
//   char *m_name;
//   char *m_scriptName;
//   unsigned __int8 m_targetMask;
// };

// /* 4118 */
// struct __cppobj GVAction
// {
//   char *m_name;
//   char *m_scriptName;
//   unsigned __int8 m_parameterType;
//   GVValue *m_parameters;
//   int m_parametersSize;
// };

// /* 4119 */
// struct __cppobj __declspec(align(4)) GVEvent
// {
//   char *m_name;
//   char *m_scriptName;
//   unsigned __int8 m_targetMask;
//   unsigned __int8 m_condMask;
// };

// /* 4120 */
// struct GfxQuadVertex
// {
//   float xy[2];
//   float st[2];
//   GfxColor color;
// };

// /* 4121 */
// struct __cppobj GVConditionalLhs
// {
//   const char *m_displayName;
//   const char *m_scriptName;
//   GVConditionalLhsTypeMask m_type;
//   GVConditionalRhs m_rhs;
// };

// /* 4122 */
// struct keyBoardUtitlity
// {
//   bool keyboardActive;
//   int keyboardType;
// };

// /* 4123 */
// struct GVParameter
// {
//   bool hasParameter;
//   char value[128];
// };

// /* 4124 */
// struct __cppobj GVRule
// {
//   bool isValid;
//   unsigned __int8 eventID;
//   unsigned __int8 actionID;
//   GVParameter parameter;
//   GVParameter secondParameter;
//   unsigned __int8 targetID;
//   GVConditional m_conditional;
// };

// /* 4125 */
// struct __cppobj GVGlob
// {
//   GVRule rules[64];
//   int ruleCount;
// };

// /* 4126 */
// struct CustomGameModeData
// {
//   float perk_extraBreath;
//   float perk_bulletPenetrationMultiplier;
//   float perk_weapSpreadMultiplier;
//   float perk_weapReloadMultiplier;
//   float perk_weapMeleeMultiplier;
//   float perk_weapSwitchMultiplier;
//   float perk_weapAdsMultiplier;
//   float perk_sprintMultiplier;
//   float perk_sprintRecoveryMultiplier;
//   float player_lastStandBleedoutTime;
//   float perk_speedMultiplier;
//   float perk_flakJacket;
//   float perk_fireproof;
//   float perk_armorPiercing;
//   float player_lastStandBleedoutTimeNoRevive;
//   float revive_time_taken;
//   float perk_disarmExplosiveTime;
//   float perk_damageKickReduction;
//   int perk_killstreakReduction;
// };

// /* 4127 */
// struct UIGametypeFileHeader
// {
//   int version;
//   char name[32];
//   char description[128];
//   char baseGameType[32];
//   int lastModifiedDateTime;
// };

// /* 4128 */
// struct __cppobj __declspec(align(8)) bdTeamProposal : bdTaskResult
// {
//   unsigned __int64 m_userID;
//   unsigned __int64 m_teamID;
//   char m_userName[64];
//   char m_teamName[64];
//   unsigned __int8 m_attachment[1024];
//   unsigned int m_attachmentSize;
// };

// /* 4129 */
// struct /*VFT*/ bdTeamProposal_vtbl
// {
//   void (__thiscall *~bdTaskResult)(bdTaskResult *this);
//   bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
// };

// /* 4130 */
// struct EmblemFilterState
// {
//   const char *loc;
//   unsigned int include;
//   unsigned int exclude;
// };

// /* 4131 */
// struct __cppobj LocalizeName
// {
// };

// /* 4132 */
// struct __unaligned __declspec(align(1)) $_s__RTTIBaseClassArray$_extraBytes_16
// {
//   const _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[4];
//   _BYTE gap10;
// };

// /* 4141 */
// struct __cppobj std::_Mutex
// {
//   void *_Mtx;
// };

// /* 4133 */
// struct __cppobj std::wstreambuf
// {
//   std::wstreambuf_vtbl *__vftable /*VFT*/;
//   std::_Mutex _Mylock;
//   wchar_t *_Gfirst;
//   wchar_t *_Pfirst;
//   wchar_t **_IGfirst;
//   wchar_t **_IPfirst;
//   wchar_t *_Gnext;
//   wchar_t *_Pnext;
//   wchar_t **_IGnext;
//   wchar_t **_IPnext;
//   int _Gcount;
//   int _Pcount;
//   int *_IGcount;
//   int *_IPcount;
//   std::locale *_Plocale;
// };

// /* 4140 */
// struct /*VFT*/ std::wstreambuf_vtbl
// {
//   void (__thiscall *~basic_streambuf<wchar_t,std::char_traits<wchar_t> >)(std::wstreambuf *this);
//   unsigned __int16 (__thiscall *overflow)(std::wstreambuf *this, unsigned __int16);
//   unsigned __int16 (__thiscall *pbackfail)(std::wstreambuf *this, unsigned __int16);
//   int (__thiscall *showmanyc)(std::wstreambuf *this);
//   unsigned __int16 (__thiscall *underflow)(std::wstreambuf *this);
//   unsigned __int16 (__thiscall *uflow)(std::wstreambuf *this);
//   int (__thiscall *xsgetn)(std::wstreambuf *this, wchar_t *, int);
//   int (__thiscall *_Xsgetn_s)(std::wstreambuf *this, wchar_t *, unsigned int, int);
//   int (__thiscall *xsputn)(std::wstreambuf *this, const wchar_t *, int);
//   std::fpos<int> *(__thiscall *seekoff)(std::wstreambuf *this, std::fpos<int> *result, int, int, int);
//   std::fpos<int> *(__thiscall *seekpos)(std::wstreambuf *this, std::fpos<int> *result, std::fpos<int>, int);
//   std::wstreambuf *(__thiscall *setbuf)(std::wstreambuf *this, wchar_t *, int);
//   int (__thiscall *sync)(std::wstreambuf *this);
//   void (__thiscall *imbue)(std::wstreambuf *this, const std::locale *);
// };

// /* 4134 */
// struct __cppobj std::_Locbase<int>
// {
// };

// /* 4139 */
// const struct __cppobj std::locale : std::_Locbase<int>
// {
//   std::locale::_Locimp *_Ptr;
// };

// /* 4135 */
// struct __cppobj std::locale::facet
// {
//   std::locale::facet_vtbl *__vftable /*VFT*/;
//   unsigned int _Refs;
// };

// /* 4137 */
// struct __cppobj std::locale::_Locimp : std::locale::facet
// {
//   std::locale::facet **_Facetvec;
//   unsigned int _Facetcount;
//   int _Catmask;
//   bool _Xparent;
//   std::string _Name;
// };

// /* 4136 */
// struct /*VFT*/ std::locale::facet_vtbl
// {
//   void (__thiscall *~facet)(std::locale::facet *this);
// };

// /* 4138 */
// struct /*VFT*/ std::locale::_Locimp_vtbl
// {
//   void (__thiscall *~facet)(std::locale::facet *this);
// };

// /* 4142 */
// struct __cppobj std::ctype_base : std::locale::facet
// {
// };

// /* 4143 */
// struct /*VFT*/ std::ctype_base_vtbl
// {
//   void (__thiscall *~facet)(std::locale::facet *this);
// };

// /* 4145 */
// struct _Ctypevec
// {
//   unsigned int _Hand;
//   unsigned int _Page;
//   const __int16 *_Table;
//   int _Delfl;
// };

// /* 4144 */
// struct __cppobj std::ctype<char> : std::ctype_base
// {
//   _Ctypevec _Ctype;
// };

// /* 4146 */
// struct /*VFT*/ std::ctype<char>_vtbl
// {
//   void (__thiscall *~facet)(std::locale::facet *this);
//   const char *(__thiscall *do_tolower)(std::ctype<char> *this, char *, const char *);
//   char (__thiscall *do_tolower)(std::ctype<char> *this, char);
//   const char *(__thiscall *do_toupper)(std::ctype<char> *this, char *, const char *);
//   char (__thiscall *do_toupper)(std::ctype<char> *this, char);
//   const char *(__thiscall *do_widen)(std::ctype<char> *this, const char *, const char *, char *);
//   char (__thiscall *do_widen)(std::ctype<char> *this, char);
//   const char *(__thiscall *_Do_widen_s)(std::ctype<char> *this, const char *, const char *, char *, unsigned int);
//   const char *(__thiscall *do_narrow)(std::ctype<char> *this, const char *, const char *, char, char *);
//   char (__thiscall *do_narrow)(std::ctype<char> *this, char, char);
//   const char *(__thiscall *_Do_narrow_s)(std::ctype<char> *this, const char *, const char *, char, char *, unsigned int);
// };

// /* 4147 */
// struct __cppobj std::locale::id
// {
//   unsigned int _Id;
// };

// /* 4148 */
// struct __cppobj std::_Lockit
// {
//   int _Locktype;
// };

// /* 4149 */
// struct __cppobj std::_Locinfo
// {
//   std::_Lockit _Lock;
//   std::string _Days;
//   std::string _Months;
//   std::string _Oldlocname;
//   std::string _Newlocname;
// };

// /* 4150 */
// struct __cppobj std::ctype_byname<char> : std::ctype<char>
// {
// };

// /* 4151 */
// struct /*VFT*/ std::ctype_byname<char>_vtbl
// {
//   void (__thiscall *~facet)(std::locale::facet *this);
//   const char *(__thiscall *do_tolower)(std::ctype<char> *this, char *, const char *);
//   char (__thiscall *do_tolower)(std::ctype<char> *this, char);
//   const char *(__thiscall *do_toupper)(std::ctype<char> *this, char *, const char *);
//   char (__thiscall *do_toupper)(std::ctype<char> *this, char);
//   const char *(__thiscall *do_widen)(std::ctype<char> *this, const char *, const char *, char *);
//   char (__thiscall *do_widen)(std::ctype<char> *this, char);
//   const char *(__thiscall *_Do_widen_s)(std::ctype<char> *this, const char *, const char *, char *, unsigned int);
//   const char *(__thiscall *do_narrow)(std::ctype<char> *this, const char *, const char *, char, char *);
//   char (__thiscall *do_narrow)(std::ctype<char> *this, char, char);
//   const char *(__thiscall *_Do_narrow_s)(std::ctype<char> *this, const char *, const char *, char, char *, unsigned int);
// };

// /* 4152 */
// struct __cppobj std::_Iosb<int>
// {
// };

// /* 4153 */
// struct __cppobj std::ios_base : std::_Iosb<int>
// {
//   std::ios_base_vtbl *__vftable /*VFT*/;
//   unsigned int _Stdstr;
//   int _Mystate;
//   int _Except;
//   int _Fmtfl;
//   int _Prec;
//   int _Wide;
//   std::ios_base::_Iosarray *_Arr;
//   std::ios_base::_Fnarray *_Calls;
//   std::locale *_Ploc;
// };

// /* 4154 */
// struct /*VFT*/ std::ios_base_vtbl
// {
//   void (__thiscall *~ios_base)(std::ios_base *this);
// };

// /* 4155 */
// struct __cppobj std::ios_base::_Iosarray
// {
//   std::ios_base::_Iosarray *_Next;
//   int _Index;
//   int _Lo;
//   void *_Vp;
// };

// /* 4156 */
// struct __cppobj std::ios_base::_Fnarray
// {
//   std::ios_base::_Fnarray *_Next;
//   int _Index;
//   void (__cdecl *_Pfn)(std::ios_base::event, std::ios_base *, int);
// };

// /* 4157 */
// struct __cppobj std::streambuf
// {
//   std::streambuf_vtbl *__vftable /*VFT*/;
//   std::_Mutex _Mylock;
//   char *_Gfirst;
//   char *_Pfirst;
//   char **_IGfirst;
//   char **_IPfirst;
//   char *_Gnext;
//   char *_Pnext;
//   char **_IGnext;
//   char **_IPnext;
//   int _Gcount;
//   int _Pcount;
//   int *_IGcount;
//   int *_IPcount;
//   std::locale *_Plocale;
// };

// /* 4158 */
// struct /*VFT*/ std::streambuf_vtbl
// {
//   void (__thiscall *~basic_streambuf<char,std::char_traits<char> >)(std::streambuf *this);
//   int (__thiscall *overflow)(std::streambuf *this, int);
//   int (__thiscall *pbackfail)(std::streambuf *this, int);
//   int (__thiscall *showmanyc)(std::streambuf *this);
//   int (__thiscall *underflow)(std::streambuf *this);
//   int (__thiscall *uflow)(std::streambuf *this);
//   int (__thiscall *xsgetn)(std::streambuf *this, char *, int);
//   int (__thiscall *_Xsgetn_s)(std::streambuf *this, char *, unsigned int, int);
//   int (__thiscall *xsputn)(std::streambuf *this, const char *, int);
//   std::fpos<int> *(__thiscall *seekoff)(std::streambuf *this, std::fpos<int> *result, int, int, int);
//   std::fpos<int> *(__thiscall *seekpos)(std::streambuf *this, std::fpos<int> *result, std::fpos<int>, int);
//   std::streambuf *(__thiscall *setbuf)(std::streambuf *this, char *, int);
//   int (__thiscall *sync)(std::streambuf *this);
//   void (__thiscall *imbue)(std::streambuf *this, const std::locale *);
// };

// /* 4159 */
// struct __cppobj std::ostream
// {
//   _BYTE gap0[56];
// };

// /* 4160 */
// struct /*VFT*/ std::ostream_vtbl
// {
//   void *(__thiscall *__vecDelDtor)(std::ostream *this, unsigned int);
// };

// /* 4161 */
// struct __cppobj __declspec(align(4)) std::ios : std::ios_base
// {
//   std::streambuf *_Mystrbuf;
//   std::ostream *_Tiestr;
//   char _Fillch;
// };

// /* 4162 */
// struct /*VFT*/ std::ios_vtbl
// {
//   void (__thiscall *~ios_base)(std::ios_base *this);
// };

// /* 4163 */
// struct __cppobj std::ostream::_Sentry_base
// {
//   std::ostream *_Myostr;
// };

// /* 4164 */
// struct __cppobj __declspec(align(4)) std::ostream::sentry : std::ostream::_Sentry_base
// {
//   bool _Ok;
// };

// /* 4165 */
// struct __cppobj std::bad_cast : std::exception
// {
// };

// /* 4166 */
// struct /*VFT*/ std::bad_cast_vtbl
// {
//   void (__thiscall *~exception)(std::exception *this);
//   const char *(__thiscall *what)(std::exception *this);
// };

// /* 4167 */
// struct __cppobj std::codecvt_base : std::locale::facet
// {
// };

// /* 4168 */
// struct /*VFT*/ std::codecvt_base_vtbl
// {
//   void (__thiscall *~facet)(std::locale::facet *this);
//   bool (__thiscall *do_always_noconv)(std::codecvt_base *this);
//   int (__thiscall *do_max_length)(std::codecvt_base *this);
//   int (__thiscall *do_encoding)(std::codecvt_base *this);
// };

// /* 4169 */
// struct __cppobj std::_String_const_iterator<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > : std::_Ranit_base<char,int,char const *,char const &,std::_Iterator_base_secure>
// {
//   const char *_Myptr;
// };

// /* 4170 */
// struct __cppobj Allocator<char,LocalizeStringName>
// {
// };

// /* 4171 */
// struct __cppobj std::_String_val<char,Allocator<char,LocalizeStringName> > : std::_String_base
// {
//   Allocator<char,LocalizeStringName> _Alval;
// };

// /* 4172 */
// union std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >::_Bxty
// {
//   char _Buf[16];
//   char *_Ptr;
// };

// /* 4173 */
// struct __cppobj std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > : std::_String_val<char,Allocator<char,LocalizeStringName> >
// {
//   std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >::_Bxty _Bx;
//   unsigned int _Mysize;
//   unsigned int _Myres;
// };

// /* 4174 */
// struct __cppobj __declspec(align(4)) std::istream
// {
//   _BYTE gap0[4];
//   int _Chcount;
//   _BYTE gap8[52];
// };

// /* 4175 */
// struct /*VFT*/ std::istream_vtbl
// {
//   void *(__thiscall *__vecDelDtor)(std::istream *this, unsigned int);
// };

// /* 4176 */
// struct __cppobj std::istream::_Sentry_base
// {
//   std::istream *_Myistr;
// };

// /* 4177 */
// struct __cppobj __declspec(align(4)) std::istream::sentry : std::istream::_Sentry_base
// {
//   bool _Ok;
// };

// /* 4179 */
// struct _Cvtvec
// {
//   unsigned int _Hand;
//   unsigned int _Page;
// };

// /* 4178 */
// struct __cppobj std::codecvt<unsigned short,char,int> : std::codecvt_base
// {
//   _Cvtvec _Cvt;
// };

// /* 4180 */
// struct /*VFT*/ std::codecvt<unsigned short,char,int>_vtbl
// {
//   void (__thiscall *~facet)(std::locale::facet *this);
//   bool (__thiscall *do_always_noconv)(std::codecvt_base *this);
//   int (__thiscall *do_max_length)(std::codecvt_base *this);
//   int (__thiscall *do_encoding)(std::codecvt_base *this);
//   int (__thiscall *do_in)(std::codecvt<unsigned short,char,int> *this, int *, const char *, const char *, const char **, unsigned __int16 *, unsigned __int16 *, unsigned __int16 **);
//   int (__thiscall *do_out)(std::codecvt<unsigned short,char,int> *this, int *, const unsigned __int16 *, const unsigned __int16 *, const unsigned __int16 **, char *, char *, char **);
//   int (__thiscall *do_unshift)(std::codecvt<unsigned short,char,int> *this, int *, char *, char *, char **);
//   int (__thiscall *do_length)(std::codecvt<unsigned short,char,int> *this, const int *, const char *, const char *, unsigned int);
// };

// /* 4181 */
// struct __cppobj std::ctype<wchar_t> : std::ctype_base
// {
//   _Ctypevec _Ctype;
//   _Cvtvec _Cvt;
// };

// /* 4182 */
// struct /*VFT*/ std::ctype<wchar_t>_vtbl
// {
//   void (__thiscall *~facet)(std::locale::facet *this);
//   const wchar_t *(__thiscall *do_is)(std::ctype<wchar_t> *this, const wchar_t *, const wchar_t *, __int16 *);
//   bool (__thiscall *do_is)(std::ctype<wchar_t> *this, __int16, wchar_t);
//   const wchar_t *(__thiscall *do_scan_is)(std::ctype<wchar_t> *this, __int16, const wchar_t *, const wchar_t *);
//   const wchar_t *(__thiscall *do_scan_not)(std::ctype<wchar_t> *this, __int16, const wchar_t *, const wchar_t *);
//   const wchar_t *(__thiscall *do_tolower)(std::ctype<wchar_t> *this, wchar_t *, const wchar_t *);
//   wchar_t (__thiscall *do_tolower)(std::ctype<wchar_t> *this, wchar_t);
//   const wchar_t *(__thiscall *do_toupper)(std::ctype<wchar_t> *this, wchar_t *, const wchar_t *);
//   wchar_t (__thiscall *do_toupper)(std::ctype<wchar_t> *this, wchar_t);
//   const char *(__thiscall *do_widen)(std::ctype<wchar_t> *this, const char *, const char *, wchar_t *);
//   wchar_t (__thiscall *do_widen)(std::ctype<wchar_t> *this, char);
//   const char *(__thiscall *_Do_widen_s)(std::ctype<wchar_t> *this, const char *, const char *, wchar_t *, unsigned int);
//   const wchar_t *(__thiscall *do_narrow)(std::ctype<wchar_t> *this, const wchar_t *, const wchar_t *, char, char *);
//   char (__thiscall *do_narrow)(std::ctype<wchar_t> *this, wchar_t, char);
//   const wchar_t *(__thiscall *_Do_narrow_s)(std::ctype<wchar_t> *this, const wchar_t *, const wchar_t *, char, char *, unsigned int);
// };

// /* 4183 */
// struct __cppobj std::ctype<unsigned short> : std::ctype_base
// {
//   _Ctypevec _Ctype;
//   _Cvtvec _Cvt;
// };

// /* 4184 */
// struct /*VFT*/ std::ctype<unsigned short>_vtbl
// {
//   void (__thiscall *~facet)(std::locale::facet *this);
//   const unsigned __int16 *(__thiscall *do_is)(std::ctype<unsigned short> *this, const unsigned __int16 *, const unsigned __int16 *, __int16 *);
//   bool (__thiscall *do_is)(std::ctype<unsigned short> *this, __int16, unsigned __int16);
//   const unsigned __int16 *(__thiscall *do_scan_is)(std::ctype<unsigned short> *this, __int16, const unsigned __int16 *, const unsigned __int16 *);
//   const unsigned __int16 *(__thiscall *do_scan_not)(std::ctype<unsigned short> *this, __int16, const unsigned __int16 *, const unsigned __int16 *);
//   const unsigned __int16 *(__thiscall *do_tolower)(std::ctype<unsigned short> *this, unsigned __int16 *, const unsigned __int16 *);
//   unsigned __int16 (__thiscall *do_tolower)(std::ctype<unsigned short> *this, unsigned __int16);
//   const unsigned __int16 *(__thiscall *do_toupper)(std::ctype<unsigned short> *this, unsigned __int16 *, const unsigned __int16 *);
//   unsigned __int16 (__thiscall *do_toupper)(std::ctype<unsigned short> *this, unsigned __int16);
//   const char *(__thiscall *do_widen)(std::ctype<unsigned short> *this, const char *, const char *, unsigned __int16 *);
//   unsigned __int16 (__thiscall *do_widen)(std::ctype<unsigned short> *this, char);
//   const char *(__thiscall *_Do_widen_s)(std::ctype<unsigned short> *this, const char *, const char *, unsigned __int16 *, unsigned int);
//   const unsigned __int16 *(__thiscall *do_narrow)(std::ctype<unsigned short> *this, const unsigned __int16 *, const unsigned __int16 *, char, char *);
//   char (__thiscall *do_narrow)(std::ctype<unsigned short> *this, unsigned __int16, char);
//   const unsigned __int16 *(__thiscall *_Do_narrow_s)(std::ctype<unsigned short> *this, const unsigned __int16 *, const unsigned __int16 *, char, char *, unsigned int);
// };

// /* 4185 */
// struct __cppobj std::wostream
// {
//   _BYTE gap0[56];
// };

// /* 4186 */
// struct /*VFT*/ std::wostream_vtbl
// {
//   void *(__thiscall *__vecDelDtor)(std::wostream *this, unsigned int);
// };

// /* 4187 */
// struct __cppobj __declspec(align(4)) std::wios : std::ios_base
// {
//   std::wstreambuf *_Mystrbuf;
//   std::wostream *_Tiestr;
//   wchar_t _Fillch;
// };

// /* 4188 */
// struct /*VFT*/ std::wios_vtbl
// {
//   void (__thiscall *~ios_base)(std::ios_base *this);
// };

// /* 4189 */
// struct _Collvec
// {
//   unsigned int _Hand;
//   unsigned int _Page;
// };

// /* 4190 */
// struct __cppobj std::_Timevec
// {
//   void *_Timeptr;
// };

// /* 4191 */
// struct __cppobj __declspec(align(4)) std::wistream
// {
//   _BYTE gap0[4];
//   int _Chcount;
//   _BYTE gap8[52];
// };

// /* 4192 */
// struct /*VFT*/ std::wistream_vtbl
// {
//   void *(__thiscall *__vecDelDtor)(std::wistream *this, unsigned int);
// };

// /* 4193 */
// struct __cppobj std::wistream::_Sentry_base
// {
//   std::wistream *_Myistr;
// };

// /* 4194 */
// struct __cppobj __declspec(align(4)) std::wistream::sentry : std::wistream::_Sentry_base
// {
//   bool _Ok;
// };

// /* 4195 */
// struct __cppobj std::codecvt<wchar_t,char,int> : std::codecvt_base
// {
//   _Cvtvec _Cvt;
// };

// /* 4196 */
// struct /*VFT*/ std::codecvt<wchar_t,char,int>_vtbl
// {
//   void (__thiscall *~facet)(std::locale::facet *this);
//   bool (__thiscall *do_always_noconv)(std::codecvt_base *this);
//   int (__thiscall *do_max_length)(std::codecvt_base *this);
//   int (__thiscall *do_encoding)(std::codecvt_base *this);
//   int (__thiscall *do_in)(std::codecvt<wchar_t,char,int> *this, int *, const char *, const char *, const char **, wchar_t *, wchar_t *, wchar_t **);
//   int (__thiscall *do_out)(std::codecvt<wchar_t,char,int> *this, int *, const wchar_t *, const wchar_t *, const wchar_t **, char *, char *, char **);
//   int (__thiscall *do_unshift)(std::codecvt<wchar_t,char,int> *this, int *, char *, char *, char **);
//   int (__thiscall *do_length)(std::codecvt<wchar_t,char,int> *this, const int *, const char *, const char *, unsigned int);
// };

// /* 4197 */
// struct __cppobj std::wostream::_Sentry_base
// {
//   std::wostream *_Myostr;
// };

// /* 4198 */
// struct __cppobj __declspec(align(4)) std::wostream::sentry : std::wostream::_Sentry_base
// {
//   bool _Ok;
// };

// /* 4199 */
// struct __cppobj std::ios_base::failure : std::runtime_error
// {
// };

// /* 4200 */
// struct /*VFT*/ std::ios_base::failure_vtbl
// {
//   void (__thiscall *~exception)(std::exception *this);
//   const char *(__thiscall *what)(std::exception *this);
// };

// /* 4201 */
// struct __cppobj std::ios_base::Init
// {
// };

// /* 4202 */
// struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_50
// {
//   const void *pVFTable;
//   void *spare;
//   char name[50];
// };

// /* 4203 */
// struct $_TypeDescriptor$_extraBytes_52
// {
//   const void *pVFTable;
//   void *spare;
//   char name[52];
// };

// /* 4204 */
// struct $_s__CatchableTypeArray$_extraBytes_12
// {
//   int nCatchableTypes;
//   const _s__CatchableType *arrayOfCatchableTypes[3];
// };

// /* 4205 */
// struct __cppobj LocalizeStringName : LocalizeName
// {
// };

// /* 4206 */
// struct __cppobj Allocator<char,LocalizeStringName>::rebind<char>
// {
// };

// /* 4207 */
// struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_25
// {
//   const void *pVFTable;
//   void *spare;
//   char name[25];
// };

// /* 4208 */
// struct MappedGamepadButton
// {
//   const char *btnString;
//   int btnVal;
// };

// /* 4209 */
// struct __cppobj Allocator<std::_Aux_cont,mapStringEntriesName_t>
// {
// };

// /* 4210 */
// struct __cppobj __declspec(align(4)) std::_Container_base_aux_alloc_real<Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t> > : std::_Container_base_aux
// {
//   Allocator<std::_Aux_cont,mapStringEntriesName_t> _Alaux;
// };

// /* 4211 */
// struct __cppobj std::binary_function<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,bool>
// {
// };

// /* 4212 */
// struct __cppobj std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > > : std::binary_function<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,bool>
// {
// };

// /* 4213 */
// struct __cppobj __declspec(align(4)) std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> : std::_Container_base_aux_alloc_real<Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t> >
// {
//   std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > > comp;
// };

// /* 4214 */
// struct __cppobj Allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >::_Node,mapStringEntriesName_t>
// {
// };

// /* 4215 */
// struct __cppobj __declspec(align(4)) std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> > : std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0>
// {
//   Allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >::_Node,mapStringEntriesName_t> _Alnod;
// };

// /* 4216 */
// struct __cppobj Allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >::_Node *,mapStringEntriesName_t>
// {
// };

// /* 4217 */
// struct __cppobj __declspec(align(4)) std::_Tree_ptr<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> > : std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >
// {
//   Allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >::_Node *,mapStringEntriesName_t> _Alptr;
// };

// /* 4218 */
// struct __cppobj Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>
// {
// };

// /* 4219 */
// struct __cppobj __declspec(align(4)) std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> > : std::_Tree_ptr<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >
// {
//   Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t> _Alval;
// };

// /* 4220 */
// struct __cppobj __declspec(align(4)) std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >::_Node
// {
//   std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >::_Node *_Left;
//   std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >::_Node *_Parent;
//   std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >::_Node *_Right;
//   std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > > _Myval;
//   char _Color;
//   char _Isnil;
// };

// /* 4221 */
// struct __cppobj std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >
// {
//   const std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > first;
//   std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > second;
// };

// /* 4222 */
// struct __cppobj std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> > : std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >
// {
//   std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >::_Node *_Myhead;
//   unsigned int _Mysize;
// };

// /* 4223 */
// struct __cppobj std::map<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t> > : std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >
// {
// };

// /* 4224 */
// struct __cppobj CStringEdPackage
// {
//   int m_bEndMarkerFound_ParseOnly;
//   std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > m_strCurrentEntryRef_ParseOnly;
//   std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > m_strCurrentEntryEnglish_ParseOnly;
//   std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > m_strCurrentFileRef_ParseOnly;
//   std::map<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t> > m_StringEntries;
// };

// /* 4225 */
// struct __cppobj mapStringEntriesName_t : LocalizeName
// {
// };

// /* 4226 */
// struct __cppobj std::_Iterator_with_base<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,int,std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > > const *,std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > > const &,std::_Iterator_base_aux> : std::_Iterator_base_aux
// {
// };

// /* 4227 */
// struct __cppobj std::_Bidit<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,int,std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > > const *,std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > > const &> : std::_Iterator_with_base<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,int,std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > > const *,std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > > const &,std::_Iterator_base_aux>
// {
// };

// /* 4228 */
// struct __cppobj std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >::const_iterator : std::_Bidit<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,int,std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > > const *,std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > > const &>
// {
//   std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >::_Node *_Ptr;
// };

// /* 4229 */
// struct __cppobj std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >::iterator : std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >::const_iterator
// {
// };

// /* 4230 */
// struct __cppobj __declspec(align(4)) std::pair<std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >::iterator,bool>
// {
//   std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >::iterator first;
//   bool second;
// };

// /* 4231 */
// struct __cppobj Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>
// {
// };

// /* 4232 */
// struct __cppobj Allocator<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,mapStringEntriesName_t>
// {
// };

// /* 4233 */
// struct __cppobj Allocator<char,mapStringEntriesName_t>
// {
// };

// /* 4234 */
// struct __cppobj LocalizeStringVectorName : LocalizeName
// {
// };

// /* 4235 */
// struct __cppobj Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>::rebind<std::_Aux_cont>
// {
// };

// /* 4236 */
// struct __cppobj Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>::rebind<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > > >
// {
// };

// /* 4237 */
// struct __cppobj Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>::rebind<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >::_Node>
// {
// };

// /* 4238 */
// struct __cppobj Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>::rebind<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >::_Node *>
// {
// };

// /* 4239 */
// struct __cppobj Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>::rebind<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >
// {
// };

// /* 4240 */
// struct __cppobj Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>::rebind<char>
// {
// };

// /* 4241 */
// struct __cppobj mapFlagMasksName_t : LocalizeName
// {
// };

// /* 4242 */
// struct __cppobj LocalizeStringSetName : LocalizeName
// {
// };

// /* 4243 */
// struct __cppobj EXT_Link<LocalizeEntry>
// {
//   LocalizeEntry *m_Data;
//   EXT_Link<LocalizeEntry> *m_Next;
//   EXT_Link<LocalizeEntry> *m_Last;
// };

// /* 4244 */
// struct __cppobj EXT_List<LocalizeEntry>
// {
//   unsigned int m_Count;
//   EXT_Link<LocalizeEntry> *m_Head;
//   EXT_Link<LocalizeEntry> *m_Tail;
// };

// /* 4245 */
// struct languageInfo_t
// {
//   const char *pszName;
//   const char *pszNameAbbr;
//   int bPresent;
// };

// /* 4246 */
// struct sightpointtrace_t
// {
//   float start[3];
//   float end[3];
//   int passEntityNum[2];
//   int contentmask;
//   int locational;
//   unsigned __int8 *priorityMap;
// };

// /* 4247 */
// struct ClientSnapshotData
// {
//   int snapshotSize[8];
//   int compressedSize[8];
//   int index;
// };

// /* 4248 */
// struct snapshotEntityNumbers_t
// {
//   int numSnapshotEntities;
//   int snapshotEntities[1024];
// };

// /* 4249 */
// struct reservedslot_t
// {
//   char pass[24];
//   bool inUse;
// };

// /* 4250 */
// struct __cppobj bdSecurityInfo
// {
// };

// /* 4251 */
// struct ucmd_t
// {
//   char *name;
//   void (__cdecl *func)(client_t *);
//   int allowFromOldServer;
// };

// /* 4252 */
// struct bot_threat_t
// {
//   const gentity_s *enemy;
//   float dot;
//   float distSq;
//   int acquireTime;
//   int lastSightTime;
//   int reactionEndTime;
//   int deathEndTime;
//   int strafeEndTime;
//   float lastOrigin[3];
//   float grenadeOrigin[3];
// };

// /* 4253 */
// struct __declspec(align(4)) bot_info_t
// {
//   path_t path;
//   bot_threat_t threat;
//   int weapon;
//   int sightHitNum;
//   const gentity_s *attackerEnt;
//   int adsEndTime;
//   int pitchEndTime;
//   int crouchEndTime;
//   int useButtonEndTime;
//   int weaponDelayEndTime;
//   int lastMoveTime;
//   int grenadeTime;
//   float targetPitch;
//   float scriptGoal[3];
//   float scriptGoalRadius;
//   __int16 flags;
// };

// /* 4254 */
// struct tlFileBuf
// {
//   unsigned __int8 *Buf;
//   unsigned int Size;
//   unsigned int UserData;
// };

// /* 4255 */
// struct tlSystemCallbacks
// {
//   bool (__cdecl *ReadFile)(const char *, tlFileBuf *, unsigned int, unsigned int);
//   void (__cdecl *ReleaseFile)(tlFileBuf *);
//   void (__cdecl *CriticalError)(const char *);
//   void (__cdecl *Warning)(const char *);
//   void (__cdecl *DebugPrint)(const char *);
//   void *(__cdecl *MemAlloc)(unsigned int, unsigned int, unsigned int);
//   void *(__cdecl *MemRealloc)(void *, unsigned int, unsigned int, unsigned int);
//   void (__cdecl *MemFree)(void *);
// };

// /* 4256 */
// struct __declspec(align(4)) _jqWorker
// {
//   jqWorkerType Type;
//   void *Thread;
//   unsigned int ThreadId;
//   bool Idle;
// };

// /* 4257 */
// struct __cppobj jqWorker : _jqWorker
// {
//   jqWorker *ThisPtr;
//   int Processor;
//   int WorkerID;
//   int NumQueues;
//   jqQueue WorkerSpecific;
//   jqQueue *Queues[8];
//   unsigned __int64 WorkTime;
// };

// /* 4258 */
// struct nodetype
// {
//   nodetype *left;
//   nodetype *right;
//   nodetype *parent;
//   int weight;
//   int symbol;
// };

// /* 4259 */
// struct huff_t
// {
//   int blocNode;
//   int blocPtrs;
//   nodetype *tree;
//   nodetype *loc[257];
//   nodetype **freelist;
//   nodetype nodeList[768];
//   nodetype *nodePtrs[768];
// };

// /* 4260 */
// struct huffman_t
// {
//   huff_t compressDecompress;
// };

// /* 4261 */
// struct statmonitor_s
// {
//   int endtime;
//   Material *material;
// };

// /* 4262 */
// struct RadaintToGameMapping
// {
//   int fromRadiantId;
//   int liveUpdateId;
//   int gameId;
//   int cg_gameId;
// };

// /* 4263 */
// struct RadiantCommandProcessor
// {
//   void (__cdecl *processorFunc)(const RadiantCommand *, SpawnVar *);
//   void (__cdecl *clearSelectionFunc)();
//   bool (__cdecl *conditionFunc)(const SpawnVar *);
//   const char *classname;
// };

// /* 4264 */
// struct loopmsg_t
// {
//   unsigned __int8 data[1264];
//   int datalen;
//   int port;
// };

// /* 4265 */
// struct loopback_t
// {
//   loopmsg_t msgs[16];
//   volatile int get;
//   volatile int send;
// };

// /* 4266 */
// struct DeferredMsg
// {
//   netadr_t addr;
//   unsigned __int8 data[1264];
//   int datalen;
//   netsrc_t targetLocalNetID;
// };

// /* 4267 */
// struct DeferredQueue
// {
//   DeferredMsg msgs[16];
//   volatile int get;
//   volatile int send;
// };

// /* 4268 */
// struct netFieldOrderInfo_t
// {
//   int entState[79];
//   int arcEntState[10];
//   int matchState[17];
//   int clientState[52];
//   int playerState[179];
//   int actorState[98];
//   int objective[9];
//   int hudElem[43];
// };

// /* 4269 */
// struct msg_patch_t
// {
//   int cursize;
//   int bit;
//   int patchBits;
// };

// /* 4270 */
// union MSG_WriteFloat::__l2::<unnamed_type_dat>
// {
//   float f;
//   int l;
// };

// /* 4271 */
// union MSG_ReadFloat::__l2::<unnamed_type_dat>
// {
//   float f;
//   int l;
// };

// /* 4272 */
// struct meminfo_t
// {
//   int total[2];
//   int nonSwapTotal;
//   int nonSwapMinSpecTotal;
//   int typeTotal[54][2];
// };

// /* 4273 */
// struct TempMemInfo
// {
//   int permanent;
//   int high;
//   int highExtra;
//   int hunkSize;
//   int low;
//   mem_track_t data;
// };

// /* 4274 */
// struct __cppobj bitarray<54>
// {
//   int array[2];
// };

// /* 4275 */
// struct gdt_remote_cmd_handler
// {
//   const char *assetType;
//   bool (__cdecl *action)(const char *);
// };

// /* 4276 */
// union GfxEntCellRefInfo
// {
//   float radius;
//   GfxBrushModel *bmodel;
// };

// /* 4277 */
// struct GfxVisibleLight
// {
//   int drawSurfCount;
//   GfxDrawSurf drawSurfs[1024];
// };

// /* 4278 */
// struct GfxSkinnedXModelSurfs
// {
//   void *firstSurf;
// };

// /* 4279 */
// struct __declspec(align(2)) GfxSceneModel
// {
//   XModelDrawInfo info;
//   const XModel *model;
//   const DObj *obj;
//   GfxScaledPlacement placement;
//   unsigned __int16 gfxEntIndex;
//   unsigned __int16 entnum;
//   float radius;
//   unsigned __int16 *cachedLightingHandle;
//   float lightingOrigin[3];
//   float lightingOriginToleranceSq;
//   unsigned __int8 modelShaderConstantSetIndex;
//   unsigned __int8 modelShaderConstantSetIndexExtraCam;
//   unsigned __int8 reflectionProbeIndex;
// };

// /* 4280 */
// struct GfxSceneDpvs
// {
//   int localClientNum;
//   unsigned __int8 *entVisData[7];
//   unsigned __int16 *sceneXModelIndex;
//   unsigned __int16 *sceneDObjIndex;
//   GfxEntCellRefInfo *entInfo[4];
// };

// /* 4281 */
// struct GfxSceneEntityCull
// {
//   volatile unsigned int state;
//   float mins[3];
//   float maxs[3];
//   char lods[32];
//   GfxSkinnedXModelSurfs skinnedSurfs;
// };

// /* 4282 */
// union GfxSceneEntityInfo
// {
//   const cpose_t *pose;
//   unsigned __int16 *cachedLightingHandle;
// };

// /* 4283 */
// struct __declspec(align(4)) GfxSceneEntity
// {
//   float lightingOrigin[3];
//   GfxScaledPlacement placement;
//   GfxSceneEntityCull cull;
//   unsigned __int16 gfxEntIndex;
//   unsigned __int16 entnum;
//   const DObj *obj;
//   GfxSceneEntityInfo info;
//   float lightingOriginToleranceSq;
//   unsigned __int16 gfxEntIndex2;
//   unsigned __int8 reflectionProbeIndex;
//   unsigned __int8 altXModelIndex;
//   unsigned __int8 entShaderConstantSetIndex;
//   unsigned __int8 entShaderConstantSetIndexExtraCam;
// };

// /* 4284 */
// struct __declspec(align(4)) GfxSceneBrush
// {
//   BModelDrawInfo info;
//   unsigned __int16 entnum;
//   const GfxBrushModel *bmodel;
//   GfxPlacement placement;
//   const ShaderConstantSet *brushConstantSet;
//   unsigned __int8 reflectionProbeIndex;
// };

// /* 4285 */
// struct __declspec(align(2)) GfxSceneGlassBrush
// {
//   GfxPlacement placement;
//   const GfxBrushModel *bmodel;
//   Material *altStreamingMaterial;
//   BModelDrawInfo info;
//   unsigned __int8 reflectionProbeIndex;
// };

// /* 4286 */
// struct __declspec(align(64)) GfxScene
// {
//   GfxDrawSurf bspDrawSurfs[8192];
//   GfxDrawSurf smodelDrawSurfsLight[8192];
//   GfxDrawSurf entDrawSurfsLight[8192];
//   GfxDrawSurf codemeshDrawSurfsLight[8192];
//   GfxDrawSurf bspDrawSurfsDecal[512];
//   GfxDrawSurf smodelDrawSurfsDecal[512];
//   GfxDrawSurf entDrawSurfsDecal[512];
//   GfxDrawSurf bspDrawSurfsEmissive[8192];
//   GfxDrawSurf smodelDrawSurfsEmissive[8192];
//   GfxDrawSurf entDrawSurfsEmissive[8192];
//   GfxDrawSurf fxDrawSurfsEmissive[8192];
//   GfxDrawSurf fxDrawSurfsEmissiveAuto[8192];
//   GfxDrawSurf fxDrawSurfsEmissiveDecal[8192];
//   GfxDrawSurf reflectedFxDrawSurfsEmissive[8192];
//   GfxDrawSurf reflectedFxDrawSurfsEmissiveAuto[8192];
//   GfxDrawSurf reflectedFxDrawSurfsEmissiveDecal[8192];
//   GfxDrawSurf bspSunShadowDrawSurfs0[4096];
//   GfxDrawSurf smodelSunShadowDrawSurfs0[4096];
//   GfxDrawSurf entSunShadowDrawSurfs0[4096];
//   GfxDrawSurf codemeshSunShadowDrawSurfs0[64];
//   GfxDrawSurf bspSunShadowDrawSurfs1[8192];
//   GfxDrawSurf smodelSunShadowDrawSurfs1[8192];
//   GfxDrawSurf entSunShadowDrawSurfs1[8192];
//   GfxDrawSurf codemeshSunShadowDrawSurfs1[64];
//   GfxDrawSurf bspSpotShadowDrawSurfs0[256];
//   GfxDrawSurf smodelSpotShadowDrawSurfs0[256];
//   GfxDrawSurf entSpotShadowDrawSurfs0[512];
//   GfxDrawSurf bspSpotShadowDrawSurfs1[256];
//   GfxDrawSurf smodelSpotShadowDrawSurfs1[256];
//   GfxDrawSurf entSpotShadowDrawSurfs1[512];
//   GfxDrawSurf bspSpotShadowDrawSurfs2[256];
//   GfxDrawSurf smodelSpotShadowDrawSurfs2[256];
//   GfxDrawSurf entSpotShadowDrawSurfs2[512];
//   GfxDrawSurf bspSpotShadowDrawSurfs3[256];
//   GfxDrawSurf smodelSpotShadowDrawSurfs3[256];
//   GfxDrawSurf entSpotShadowDrawSurfs3[512];
//   unsigned int shadowableLightIsUsed[32];
//   int maxDrawSurfCount[39];
//   volatile int drawSurfCount[39];
//   GfxDrawSurf *drawSurfs[39];
//   GfxDrawSurf fxDrawSurfsLight[8192];
//   GfxDrawSurf fxDrawSurfsLightAuto[8192];
//   GfxDrawSurf fxDrawSurfsLightDecal[8192];
//   GfxSceneDef def;
//   int addedLightCount;
//   GfxLight addedLight[32];
//   bool isAddedLightCulled[32];
//   float dynamicSpotLightNearPlaneOffset;
//   float dynamicSpotLightPlanes[6][4];
//   GfxVisibleLight visLight[4];
//   GfxVisibleLight visLightShadow[2];
//   unsigned int *entOverflowedDrawBuf;
//   volatile int sceneDObjCount;
//   GfxSceneEntity sceneDObj[1024];
//   unsigned __int8 sceneDObjVisData[7][1024];
//   volatile int sceneModelCount;
//   GfxSceneModel sceneModel[1024];
//   unsigned __int8 sceneModelVisData[7][1024];
//   volatile int sceneBrushCount;
//   GfxSceneBrush sceneBrush[1024];
//   unsigned __int8 sceneBrushVisData[3][1024];
//   volatile int glassBrushCount;
//   GfxSceneGlassBrush glassBrush[1024];
//   unsigned __int8 glassBrushVisData[1024];
//   unsigned int sceneDynModelCount;
//   unsigned int sceneDynBrushCount;
//   DpvsPlane shadowFarPlane[2];
//   DpvsPlane shadowNearPlane[2];
//   GfxSceneDpvs dpvs;
//   unsigned int dynSModelVisBitsCamera[64];
//   unsigned int dynSModelVisBitsSunShadow[64];
// };

// /* 4287 */
// struct DvarDumpInfo
// {
//   int count;
//   int channel;
//   const char *match;
// };

// /* 4288 */
// struct DvarSetConfigInfo
// {
//   int start;
//   int max;
//   int bit;
// };

// /* 4289 */
// struct _HTList
// {
//   void *object;
//   _HTList *next;
// };

// /* 4290 */
// struct _HTMIMEParseSet
// {
//   int size;
//   struct _HTMIMEParseEl **parsers;
//   struct _HTMIMEParseEl *regexParsers;
// };

// /* 4291 */
// struct _HTAtom
// {
//   _HTAtom *next;
//   char *name;
// };

// /* 4292 */
// struct __declspec(align(8)) _HTRequest
// {
//   int internal;
//   __int64 date;
//   HTMethod method;
//   int flush;
//   _HTPriority priority;
//   struct _HTUserProfile *userprofile;
//   struct _HTNet *net;
//   struct _HTResponse *response;
//   _HTList *error_stack;
//   int retrys;
//   int max_forwards;
//   int AAretrys;
//   int preemptive;
//   int ContentNegotiation;
//   _HTPreconditions preconditions;
//   _HTGnHd GenMask;
//   _HTRsHd ResponseMask;
//   _HTRqHd RequestMask;
//   _HTEnHd EntityMask;
//   _HTMIMEParseSet *parseSet;
//   int pars_local;
//   _HTList *conversions;
//   int conv_local;
//   _HTList *encodings;
//   int enc_local;
//   _HTList *tes;
//   int te_local;
//   _HTList *languages;
//   int lang_local;
//   _HTList *charsets;
//   int char_local;
//   _HTList *befores;
//   int befores_local;
//   _HTList *afters;
//   int afters_local;
//   char *proxy;
//   int full_uri;
//   _HTReload reload;
//   _HTList *cache_control;
//   char *default_put_name;
//   _HTList *byte_ranges;
//   _HTList *connection;
//   _HTList *expect;
//   char *realm;
//   _HTList *credentials;
//   _HTList *extra_headers;
//   _HTList *generators;
//   int gens_local;
//   _HTList *mandatory;
//   _HTList *optional;
//   struct _HTParentAnchor *anchor;
//   struct _HTChildAnchor *childAnchor;
//   struct _HTParentAnchor *parentAnchor;
//   struct _HTStream *output_stream;
//   struct _HTStream *orig_output_stream;
//   _HTAtom *output_format;
//   int connected;
//   struct _HTStream *debug_stream;
//   struct _HTStream *orig_debug_stream;
//   _HTAtom *debug_format;
//   struct _HTStream *input_stream;
//   _HTAtom *input_format;
//   int (__cdecl *PostCallback)(_HTRequest *, struct _HTStream *);
//   int (__cdecl *callback)(_HTRequest *, void *);
//   void *context;
//   _HTRequest *source;
//   struct _HTParentAnchor *source_anchor;
//   _HTRequest *mainDestination;
//   _HTList *destinations;
//   int destRequests;
//   int destStreams;
// };

// /* 4293 */
// struct _HTBasic
// {
//   char *uid;
//   char *pw;
//   int retry;
//   int proxy;
// };

// /* 4294 */
// struct GamePadCheat
// {
//   GamePadButton codeButtons[10];
//   GamePadButton holdButtons[2];
//   void (__cdecl *unlockFunc)();
//   const char *unlockCmd;
//   const char *menu;
//   const char *sound;
//   int buttonTimer;
//   int codeIndex;
// };

// /* 4295 */
// struct XZoneInfo
// {
//   const char *name;
//   int allocFlags;
//   int freeFlags;
// };

// /* 4296 */
// struct field_t
// {
//   int cursor;
//   int scroll;
//   int drawWidth;
//   int widthInPixels;
//   float charHeight;
//   int fixedSize;
//   char buffer[256];
// };

// /* 4297 */
// struct MapProfileEntry
// {
//   const char *label;
//   int accessCount;
//   unsigned __int64 ticksStart;
//   unsigned __int64 ticksTotal;
//   unsigned __int64 ticksSelf;
//   int indent;
//   MapProfileEntry *parent;
//   MapProfileElement elements[3];
// };

// /* 4298 */
// struct MapProfileElement
// {
//   unsigned __int64 ticksStart;
//   unsigned __int64 ticksTotal;
//   unsigned __int64 ticksSelf;
// };

// /* 4299 */
// struct mapLoadProfile_t
// {
//   bool isLoading;
//   int profileEntryCount;
//   MapProfileEntry profileEntries[384];
//   MapProfileEntry *currentEntry;
//   unsigned __int64 ticksStart;
//   unsigned __int64 ticksFinish;
//   unsigned __int64 ticksProfiled;
//   int elementAccessCount[3];
//   MapProfileElement elements[3];
// };

// /* 4300 */
// struct MapProfileHotSpot
// {
//   const char *label;
//   int accessCount;
//   __int64 ticksSelf;
//   __int64 ticksFile;
// };

// /* 4301 */
// struct __cppobj std::pair<MapProfileHotSpot *,MapProfileHotSpot *>
// {
//   MapProfileHotSpot *first;
//   MapProfileHotSpot *second;
// };

// /* 4302 */
// struct ClientGameState
// {
//   int flags;
//   int localClientNum;
//   int controllerIndex;
//   int uiContextIndex;
//   netsrc_t networkID;
// };

// /* 4303 */
// struct BspChunk
// {
//   LumpType type;
//   unsigned int length;
// };

// /* 4304 */
// struct BspHeader
// {
//   unsigned int ident;
//   unsigned int version;
//   unsigned int chunkCount;
//   BspChunk chunks[100];
// };

// /* 4305 */
// struct $785D3C4098AF1C3554F478A418E09E57
// {
//   char name[64];
//   BspHeader *header;
//   unsigned int fileSize;
//   unsigned int checksum;
//   LumpType loadedLumpType;
//   const void *loadedLumpData;
// };

// /* 4306 */
// struct DiskWaterCell
// {
//   __int16 waterheight;
//   char flooroffset;
//   unsigned __int8 shoreDist;
//   unsigned __int8 color[4];
// };

// /* 4307 */
// struct BspLump
// {
//   unsigned int length;
//   unsigned int offset;
// };

// /* 4308 */
// struct OldBspHeader
// {
//   unsigned int ident;
//   unsigned int version;
//   BspLump lumps[47];
// };

// /* 4309 */
// struct __declspec(align(4)) DiskWaterHeader
// {
//   int minx;
//   int miny;
//   int maxx;
//   int maxy;
//   unsigned __int16 materialIndex;
// };

// /* 4310 */
// struct __cppobj DiskBurnableCell
// {
//   int x;
//   int y;
//   DiskBurnableSample data;
//   int dataIndex;
// };

// /* 4311 */
// struct DiskPrimaryLight_Version16
// {
//   unsigned __int16 falloffStart;
//   unsigned __int8 falloffSizeLessOne;
//   unsigned __int8 type;
//   float color[3];
//   float dir[3];
//   float origin[3];
//   float radius;
//   float cosHalfFovOuter;
//   float cosHalfFovInner;
//   int exponent;
//   char defName[40];
// };

// /* 4312 */
// struct DiskPrimaryLight
// {
//   unsigned __int8 type;
//   unsigned __int8 canUseShadowMap;
//   __int16 cullDist;
//   char priority;
//   unsigned __int8 _pad[3];
//   float dir[3];
//   float origin[3];
//   float color[3];
//   float specularcolor[3];
//   float attenuation[3];
//   float angle[3];
//   float bouncecolor[3];
//   float intensity;
//   float cutOn;
//   float radius;
//   float nearEdge;
//   float farEdge;
//   float cosHalfFovOuter;
//   float cosHalfFovInner;
//   int exponent;
//   float rotationLimit;
//   float translationLimit;
//   float roundness;
//   float mipDistance;
//   float aAbB[4];
//   float cookieControl0[4];
//   float cookieControl1[4];
//   float cookieControl2[4];
//   char defName[64];
// };

// /* 4313 */
// struct DiskBurnableHeader
// {
//   int minx;
//   int miny;
//   int maxx;
//   int maxy;
// };

// /* 4314 */
// struct __cppobj DiskBurnableBlock
// {
//   DiskBurnableSample data[32];
// };

// /* 4315 */
// struct CmdText
// {
//   unsigned __int8 *data;
//   int maxsize;
//   int cmdsize;
// };

// /* 4316 */
// struct worldContents_s
// {
//   int contentsStaticModels;
//   int contentsEntities;
//   unsigned __int16 entities;
//   unsigned __int16 staticModels;
// };

// /* 4317 */
// union worldTree_s::<unnamed_type_u>
// {
//   unsigned __int16 parent;
//   unsigned __int16 nextFree;
// };

// /* 4318 */
// struct worldTree_s
// {
//   float dist;
//   unsigned __int16 axis;
//   worldTree_s::<unnamed_type_u> u;
//   unsigned __int16 child[2];
// };

// /* 4319 */
// struct worldSector_s
// {
//   worldContents_s contents;
//   worldTree_s tree;
// };

// /* 4320 */
// struct cm_world_t
// {
//   float mins[3];
//   float maxs[3];
//   unsigned __int16 freeHead;
//   worldSector_s sectors[1024];
// };

// /* 4321 */
// struct __cppobj staticmodeltrace_t
// {
//   TraceExtents extents;
//   int contents;
// };

// /* 4322 */
// struct areaParms_t
// {
//   const float *mins;
//   const float *maxs;
//   int *list;
//   int count;
//   int maxcount;
//   int contentmask;
// };

// /* 4323 */
// struct __cppobj locTraceWork_t
// {
//   int contents;
//   TraceExtents extents;
// };

// /* 4324 */
// struct leafList2_t
// {
//   unsigned int count;
//   unsigned int maxcount;
//   unsigned __int16 *list;
//   float origin[3];
//   float radius;
// };

// /* 4325 */
// struct winding_t
// {
//   int numpoints;
//   float p[4][3];
// };

// /* 4326 */
// struct __declspec(align(4)) ShowCollisionBrushPt
// {
//   float xyz[3];
//   __int16 sideIndex[3];
// };

// /* 4327 */
// struct dbrush_t
// {
//   __int16 numSides;
//   __int16 materialNum;
// };

// /* 4328 */
// struct DiskBrushModel
// {
//   float mins[3];
//   float maxs[3];
//   unsigned __int16 firstTriSoup;
//   unsigned __int16 triSoupCount;
//   int firstSurface;
//   int numSurfaces;
//   int firstBrush;
//   int numBrushes;
// };

// /* 4329 */
// union DiskCollAabbTree::<unnamed_type_u>
// {
//   int firstChildIndex;
//   int partitionIndex;
// };

// /* 4330 */
// struct DiskCollAabbTree
// {
//   float origin[3];
//   float halfSize[3];
//   unsigned __int16 materialIndex;
//   unsigned __int16 childCount;
//   DiskCollAabbTree::<unnamed_type_u> u;
// };

// /* 4331 */
// struct DiskCollBorder
// {
//   float distEq[3];
//   float zBase;
//   float zSlope;
//   float start;
//   float length;
// };

// /* 4332 */
// struct dplane_t
// {
//   float normal[3];
//   float dist;
// };

// /* 4333 */
// struct dnode_t
// {
//   int planeNum;
//   int children[2];
//   int mins[3];
//   int maxs[3];
// };

// /* 4334 */
// union dbrushside_t::<unnamed_type_u>
// {
//   int planeNum;
//   float bound;
// };

// /* 4335 */
// struct dbrushside_t
// {
//   dbrushside_t::<unnamed_type_u> u;
//   int materialNum;
// };

// /* 4336 */
// struct DiskLeaf_Version14
// {
//   int cluster;
//   int unused0;
//   int firstCollAabbIndex;
//   int collAabbCount;
//   int firstLeafBrush;
//   int numLeafBrushes;
//   int cellNum;
//   int unused1;
//   int unused2;
// };

// /* 4337 */
// struct DiskCollPartition
// {
//   unsigned __int16 checkStamp;
//   unsigned __int8 triCount;
//   unsigned __int8 borderCount;
//   int firstTriIndex;
//   int firstBorderIndex;
//   int nuinds;
//   int fuind;
// };

// /* 4338 */
// struct DiskLeaf
// {
//   int cluster;
//   int firstCollAabbIndex;
//   int collAabbCount;
//   int firstLeafBrush;
//   int numLeafBrushes;
//   int cellNum;
// };

// /* 4339 */
// struct EdgeInfo
// {
//   float v_v[3];
//   float discNormalDist;
//   float discriminant;
//   float discEdgeAxis[3];
//   float midpoint[3];
//   float start_v[3];
//   float discNormalAxis[3];
// };

// /* 4340 */
// struct audioSample_t
// {
//   unsigned __int8 *buffer;
//   int lengthInBytes;
//   int lengthInSamples;
//   int bytesPerSample;
//   int frequency;
//   bool stereo;
//   int channels;
//   int sampleOffset;
// };

// /* 4341 */
// struct __cppobj IDirectSound8 : IDirectSound
// {
// };

// /* 4342 */
// struct /*VFT*/ IDirectSound8_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *CreateSoundBuffer)(IDirectSound *this, const _DSBUFFERDESC *, IDirectSoundBuffer **, IUnknown *);
//   HRESULT (__stdcall *GetCaps)(IDirectSound *this, _DSCAPS *);
//   HRESULT (__stdcall *DuplicateSoundBuffer)(IDirectSound *this, IDirectSoundBuffer *, IDirectSoundBuffer **);
//   HRESULT (__stdcall *SetCooperativeLevel)(IDirectSound *this, HWND__ *, unsigned int);
//   HRESULT (__stdcall *Compact)(IDirectSound *this);
//   HRESULT (__stdcall *GetSpeakerConfig)(IDirectSound *this, unsigned int *);
//   HRESULT (__stdcall *SetSpeakerConfig)(IDirectSound *this, unsigned int);
//   HRESULT (__stdcall *Initialize)(IDirectSound *this, const _GUID *);
//   HRESULT (__stdcall *VerifyCertification)(IDirectSound8 *this, unsigned int *);
// };

// /* 4343 */
// struct SpeexMode
// {
//   const void *mode;
//   int (__cdecl *query)(const void *, int, void *);
//   const char *modeName;
//   int modeID;
//   int bitstream_version;
//   void *(__cdecl *enc_init)(const SpeexMode *);
//   void (__cdecl *enc_destroy)(void *);
//   int (__cdecl *enc)(void *, void *, SpeexBits *);
//   void *(__cdecl *dec_init)(const SpeexMode *);
//   void (__cdecl *dec_destroy)(void *);
//   int (__cdecl *dec)(void *, SpeexBits *, void *);
//   int (__cdecl *enc_ctl)(void *, int, void *);
//   int (__cdecl *dec_ctl)(void *, int, void *);
// };

// /* 4344 */
// struct SpeexBits
// {
//   char *chars;
//   int nbBits;
//   int charPtr;
//   int bitPtr;
//   int owner;
//   int overflow;
//   int buf_size;
//   int reserved1;
//   void *reserved2;
// };

// /* 4345 */
// struct target_t
// {
//   gentity_s *ent;
//   float offset[3];
//   int materialIndex;
//   int offscreenMaterialIndex;
//   int flags;
// };

// /* 4346 */
// struct __cppobj SaveMemoryGlob
// {
// };

// /* 4347 */
// struct SaveHeader
// {
//   int saveVersion;
//   int gameCheckSum;
//   int saveCheckSum;
//   int saveId;
//   bool demoPlayback;
//   bool splitscreen;
//   int scrCheckSum[3];
//   char mapName[256];
//   char buildNumber[128];
//   char gametype[256];
//   char buildVersionSuffix[16];
//   unsigned int networkProtocol;
//   char screenShotName[64];
//   char description[256];
//   char filename[64];
//   SaveType saveType;
//   qtime_s time;
//   int bodySize;
//   unsigned int pad[8];
// };

// /* 4348 */
// struct __declspec(align(128)) SaveGame
// {
//   SaveHeader header;
//   MemoryFile memFile;
// };

// /* 4349 */
// struct useList_t
// {
//   gentity_s *ent;
//   float score;
// };

// /* 4350 */
// struct __cppobj std::pair<useList_t *,useList_t *>
// {
//   useList_t *first;
//   useList_t *second;
// };

// /* 4351 */
// struct AntilagClientStore
// {
//   float realClientPositions[32][3];
//   float realClientAngles[32][3];
//   bool clientMoved[32];
// };

// /* 4352 */
// struct $E7E1D478F4D258BEE94A4CD6FC1DB561
// {
//   target_t targets[32];
//   unsigned int targetCount;
// };

// /* 4353 */
// struct ipFilter_s
// {
//   unsigned int mask;
//   unsigned int compare;
// };

// /* 4354 */
// struct SpawnPoint
// {
//   float origin[3];
//   float weight[3];
//   float baseWeight[3];
//   int entNum;
//   int teamMask;
//   float yaw;
//   int orderNum;
// };

// /* 4355 */
// struct SpawnInfluencerPreset
// {
//   int index;
//   eInfluencerType type;
//   eInfluencerShape shape;
//   float radius;
//   float originalLength;
//   float score;
//   eInfluencerScoreCurve score_curve;
// };

// /* 4356 */
// struct SpawnInfluencer
// {
//   bool used;
//   bool active;
//   int expireTime;
//   int disableTime;
//   int teamMask;
//   EntHandle entity;
//   SpawnInfluencerPreset *preset;
//   float boundingRadius;
//   float bounds[2];
//   float length;
//   float origin[3];
//   float forward[3];
//   float up[3];
//   float quat[4];
//   float worldQuat[4];
//   float midPoint[3];
//   int lastUpdateTime;
// };

// /* 4357 */
// struct SortedPointArray
// {
//   int spawnPointsByIndex[200];
//   int count;
//   int sortTime;
// };

// /* 4358 */
// struct __cppobj std::pair<int *,int *>
// {
//   int *first;
//   int *second;
// };

// /* 4359 */
// struct __cppobj std::pair<SpawnInfluencer * *,SpawnInfluencer * *>
// {
//   SpawnInfluencer **first;
//   SpawnInfluencer **second;
// };

// /* 4360 */
// struct __cppobj std::pair<SpawnPoint *,SpawnPoint *>
// {
//   SpawnPoint *first;
//   SpawnPoint *second;
// };

// /* 4361 */
// struct __cppobj compare_spawnpoint_score_sort
// {
//   int m_team;
// };

// /* 4362 */
// struct __cppobj compare_spawnpoint_sort
// {
// };

// /* 4363 */
// struct __cppobj compare_spawninfluencer_sort
// {
// };

// /* 4364 */
// struct ent_field_t
// {
//   const char *name;
//   int ofs;
//   int size[1];
//   fieldtype_t type;
//   void (__cdecl *callback)(gentity_s *, int);
// };

// /* 4365 */
// struct SpawnFuncEntry
// {
//   const char *classname;
//   void (__cdecl *callback)(gentity_s *, SpawnVar *);
// };

// /* 4366 */
// struct game_hudelem_s
// {
//   hudelem_s elem;
//   int clientNum;
//   int team;
//   int archived;
// };

// /* 4367 */
// struct __cppobj VehicleLocalPhysics
// {
//   trace_t groundTrace;
//   int hasGround;
//   int onGround;
// };

// /* 4368 */
// struct VehiclePhysicsBackup
// {
//   vehicle_pathpos_t pathPos;
//   vehicle_physic_t phys;
// };

// /* 4369 */
// struct BulletFireParams
// {
//   int weaponEntIndex;
//   int ignoreEntIndex;
//   float damageMultiplier;
//   int methodOfDeath;
//   float origStart[3];
//   float start[3];
//   float end[3];
//   float dir[3];
// };

 /* 4370 */
struct BuiltinFunctionDef
{
  const char* actionString;
  void(__cdecl* actionFunc)();
  int type;
};

// /* 4371 */
// struct saveField_t
// {
//   int ofs;
//   saveFieldtype_t type;
// };

// /* 4372 */
// struct __cppobj phys_simple_allocator<mover_info_t>
// {
//   int m_count;
// };

// /* 4373 */
// struct __cppobj __declspec(align(16)) mover_info_t
// {
//   phys_mat44 m_mat;
//   phys_mat44 m_prev_mat;
//   float m_origin[3];
//   float m_prev_origin[3];
//   float m_angles[3];
//   float m_prev_angles[3];
//   gentity_s *m_ent;
//   bool m_do_collision;
// };

// /* 4374 */
// struct AttractorRepulsor_t
// {
//   bool inUse;
//   bool isAttractor;
//   int entnum;
//   float origin[3];
//   float strength;
//   float maxDist;
// };

// /* 4375 */
// struct $41BC9C8D4308161FA8B4F6BF01A0A6FD
// {
//   AttractorRepulsor_t attractors[32];
// };

// /* 4376 */
// struct TIMED_RADIUS_DAMAGE
// {
//   float pos[3];
//   int life;
//   float radius;
//   float radiusSqr;
//   int damage;
//   int rate;
//   int mod;
//   int weapon;
//   int fireStarterClientNum;
// };

// /* 4377 */
// struct game_hudelem_field_t
// {
//   const char *name;
//   int ofs;
//   int size;
//   fieldtype_t type;
//   int mask;
//   int shift;
//   void (__cdecl *setter)(game_hudelem_s *, int);
//   void (__cdecl *getter)(game_hudelem_s *, int);
// };

// /* 4378 */
// struct DebugDrawBrushInfo
// {
//   int depthTest;
//   int duration;
//   float transform[4][3];
// };

// /* 4379 */
// struct WeaponComponent
// {
//   char name[32];
//   eWeaponComponentType type;
//   eAttachment attachment;
//   eAttachmentPoint attachmentPoint;
// };

// /* 4380 */
// struct WeaponComponentList
// {
//   int numComponents;
//   WeaponComponent components[7];
// };

// /* 4381 */
// struct client_fields_s
// {
//   const char *name;
//   int ofs;
//   int size[1];
//   fieldtype_t type;
//   unsigned int whichbits;
//   void (__cdecl *setter)(gclient_s *, const client_fields_s *);
//   void (__cdecl *getter)(gclient_s *, const client_fields_s *);
// };

// /* 4382 */
// struct weaponState_t
// {
//   const playerState_s *ps;
//   float xyspeed;
//   float frametime;
//   float fLastIdleFactor;
//   int time;
//   int damageTime;
//   float v_dmg_pitch;
//   float v_dmg_roll;
//   int *weapIdleTime;
//   float baseAngles[3];
//   float baseOrigin[3];
//   float recoilAngles[3];
//   float recoilSpeed[3];
//   float swayAngles[3];
//   float swayOrigin[3];
//   float swayViewAngles[3];
//   float bobAngles[3];
//   int shellShockStart;
//   int shellShockDuration;
//   int shellShockFadeTime;
// };

// /* 4383 */
// struct viewState_t
// {
//   playerState_s *ps;
//   int damageTime;
//   int time;
//   float v_dmg_pitch;
//   float v_dmg_roll;
//   float xyspeed;
//   float frametime;
//   float fLastIdleFactor;
//   int *weapIdleTime;
// };

// /* 4384 */
// struct EntHandleInfo
// {
//   void *handle;
//   unsigned __int16 next;
//   unsigned __int16 prev;
// };

// /* 4385 */
// struct EntHandleList
// {
//   unsigned __int16 infoIndex;
// };

// /* 4386 */
// struct __cppobj BulletTraceResults
// {
//   trace_t trace;
//   gentity_s *hitEnt;
//   float hitPos[3];
//   bool ignoreHitEnt;
//   int depthSurfaceType;
// };

// /* 4387 */
// struct FxCurve
// {
//   int dimensionCount;
//   int keyCount;
//   float keys[1];
// };

// /* 4388 */
// struct FxCurveIterator
// {
//   const FxCurve *master;
//   int currentKeyIndex;
// };

// /* 4389 */
// struct FX_WindInfo
// {
//   float windVector[3];
//   float lowWindAltitude;
//   float hiWindAltitude;
//   float lowWindStrengthPercent;
//   float windVectorMagnitude;
// };

// /* 4390 */
// struct FxCamera
// {
//   float origin[3];
//   volatile int isValid;
//   float frustum[6][4];
//   float axis[3][3];
//   unsigned int frustumPlaneCount;
//   unsigned int pad[2];
// };

// /* 4391 */
// struct FxSpriteInfo
// {
//   r_double_index_t *indices;
//   unsigned int indexCount;
//   Material *material;
//   const char *name;
// };

// /* 4392 */
// struct $88D60DA77564256B22C3F95D9DD45A24
// {
//   unsigned __int32 sortOrder : 8;
//   unsigned __int32 dobjHandle : 11;
//   unsigned __int32 temporalBits : 2;
//   unsigned __int32 boneIndex : 8;
//   unsigned __int32 type : 2;
//   unsigned __int32 rewindKill : 1;
// };

// /* 4393 */
// struct $58A480E6171600052C982635434E76CC
// {
//   unsigned __int32 _sortOrder : 8;
//   unsigned __int32 absDynEntId : 21;
//   unsigned __int32 _type : 2;
// };

// /* 4394 */
// union FxBoltAndSortOrder
// {
//   $88D60DA77564256B22C3F95D9DD45A24 __s0;
//   $58A480E6171600052C982635434E76CC __s1;
// };

// /* 4395 */
// struct FxSpatialFrame
// {
//   float quat[4];
//   float origin[3];
// };

// /* 4396 */
// union $A7FC777CB20AB0354B9D4E9742D6DE43
// {
//   const FxEffectDef *def;
//   const FxEffectDef *localDef;
// };

// /* 4397 */
// struct __declspec(align(16)) FxEffect
// {
//   $A7FC777CB20AB0354B9D4E9742D6DE43 ___u0;
//   unsigned __int16 firstElemHandle[3];
//   unsigned __int16 firstSortedElemHandle;
//   unsigned __int16 firstTrailHandle;
//   unsigned __int16 randomSeed;
//   unsigned __int16 owner;
//   __int16 lightR;
//   __int16 lightG;
//   __int16 lightB;
//   FxBoltAndSortOrder boltAndSortOrder;
//   volatile int frameCount;
//   int msecBegin;
//   int msecLastUpdate;
//   FxSpatialFrame frameAtSpawn;
//   FxSpatialFrame frameNow;
//   FxSpatialFrame framePrev;
//   float distanceTraveled;
//   orientation_t boneOffset;
//   unsigned int uniqueHandle;
// };

// /* 4398 */
// struct FxEffectAtomics
// {
//   volatile int status;
// };

// /* 4399 */
// struct __declspec(align(16)) FxEffectContainer
// {
//   FxEffect effect;
//   FxEffectAtomics atomics;
// };

// /* 4400 */
// struct FxElem::<unnamed_type_u>::<unnamed_type_s>::<unnamed_type_fade>
// {
//   unsigned __int8 fadeAlpha;
//   unsigned __int8 fadeAlphaPerSec;
// };

// /* 4401 */
// struct FxElem::<unnamed_type_u>::<unnamed_type_s>
// {
//   unsigned __int16 lightingHandle;
//   FxElem::<unnamed_type_u>::<unnamed_type_s>::<unnamed_type_fade> fade;
// };

// /* 4402 */
// union FxElem::<unnamed_type_u>
// {
//   float trailTexCoord;
//   FxElem::<unnamed_type_u>::<unnamed_type_s> s;
// };

// /* 4403 */
// union $A58BA6DA60295001BBA5E9F807131CF1
// {
//   int physObjId;
//   float origin[3];
// };

// /* 4404 */
// struct FxElem
// {
//   unsigned __int8 defIndex;
//   unsigned __int8 sequence;
//   unsigned __int8 atRestFraction;
//   unsigned __int8 emitResidual;
//   int msecBegin;
//   float baseVel[3];
//   $A58BA6DA60295001BBA5E9F807131CF1 ___u6;
//   FxElem::<unnamed_type_u> u;
//   unsigned int attachedEffectHandle;
//   unsigned __int16 windInterp;
//   unsigned __int8 elemSpawnVisBits;
//   unsigned __int8 pad;
// };

// /* 4405 */
// struct FxElemShared
// {
//   unsigned __int16 nextElemHandleInEffect;
//   unsigned __int16 prevElemHandleInEffect;
// };

// /* 4406 */
// struct FxElemContainer
// {
//   FxElem elem;
//   FxElemShared shared;
// };

// /* 4407 */
// union $6BECF01E6FBC8C75FD780A7A87B80381
// {
//   int nextFree;
//   FxElemContainer item;
// };

// /* 4408 */
// struct FxPool<FxElem,FxElemContainer>
// {
//   $6BECF01E6FBC8C75FD780A7A87B80381 ___u0;
// };

// /* 4409 */
// struct FxTrail
// {
//   unsigned __int16 nextTrailHandle;
//   unsigned __int16 firstElemHandle;
//   unsigned __int16 lastElemHandle;
//   char defIndex;
//   char sequence;
// };

// /* 4410 */
// union $BF1A4C93E1DDCE76D5FA73ABD2E82413
// {
//   int nextFree;
//   FxTrail item;
// };

// /* 4411 */
// struct FxPool<FxTrail,FxTrail>
// {
//   $BF1A4C93E1DDCE76D5FA73ABD2E82413 ___u0;
// };

// /* 4412 */
// struct FxTrailElem
// {
//   float origin[3];
//   float spawnDist;
//   int msecBegin;
//   unsigned __int16 nextTrailElemHandle;
//   __int16 baseVelZ;
//   char basis[2][3];
//   unsigned __int8 sequence;
//   unsigned __int8 unused;
// };

// /* 4413 */
// union $CA934D8CED7A579B8332BE75EC7DB534
// {
//   int nextFree;
//   FxTrailElem item;
// };

// /* 4414 */
// struct FxPool<FxTrailElem,FxTrailElem>
// {
//   $CA934D8CED7A579B8332BE75EC7DB534 ___u0;
// };

// /* 4415 */
// struct FxVisBlocker
// {
//   float origin[3];
//   unsigned __int16 radius;
//   unsigned __int16 visibility;
// };

// /* 4416 */
// struct FxVisState
// {
//   FxVisBlocker blocker[256];
//   volatile int blockerCount;
//   unsigned int pad[3];
// };

// /* 4417 */
// struct FxPriorityInfo
// {
//   int warningHigh[2];
//   int readIndex;
//   int pad[1];
// };

// /* 4418 */
// struct FxUniqueHandleDb::Node
// {
//   int nextNode;
//   unsigned int handle;
//   unsigned __int16 effect;
//   unsigned __int16 pad[3];
// };

// /* 4419 */
// struct FxUniqueHandleDb
// {
//   FxUniqueHandleDb::Node nodes[1024];
//   int firstFreeNode;
//   int numNodesInUse;
//   int pad[2];
// };

// /* 4420 */
// struct __declspec(align(16)) FxSystemShared
// {
//   volatile int firstFreeElem;
//   volatile int firstFreeTrailElem;
//   volatile int firstFreeTrail;
//   volatile int activeElemCount;
//   volatile int activeTrailElemCount;
//   volatile int activeTrailCount;
//   volatile int firstActiveEffect;
//   volatile int firstNewEffect;
//   volatile int firstFreeEffect;
//   unsigned __int16 activeSpotLightEffectHandle;
//   unsigned __int16 activeSpotLightElemHandle;
//   volatile int activeSpotLightEffectCount;
//   volatile int activeSpotLightElemCount;
//   unsigned __int16 allEffectHandles[1024];
//   volatile int iteratorCount;
// };

// /* 4421 */
// struct FxSystem
// {
//   FxCamera camera;
//   FxCamera cameraPrev;
//   FxCamera extraCamera;
//   FxCamera extraCameraPre;
//   FxSpriteInfo sprite;
//   FxEffectContainer *effects;
//   FxPool<FxElem,FxElemContainer> *elems;
//   FxPool<FxTrail,FxTrail> *trails;
//   FxPool<FxTrailElem,FxTrailElem> *trailElems;
//   volatile int gfxCloudCount;
//   FxVisState *visState;
//   const FxVisState *visStateBufferRead;
//   FxVisState *visStateBufferWrite;
//   __int16 activeSpotLightBoltDobj;
//   int msecNow;
//   volatile int msecDraw;
//   int frameCount;
//   bool isInitialized;
//   bool needsGarbageCollection;
//   bool isArchiving;
//   unsigned __int8 localClientNum;
//   unsigned int restartList[32];
//   FxPriorityInfo priorityInfo;
//   FxUniqueHandleDb *uniqueHandleDb;
//   bool hasStaleAttachedFx;
//   FxSystemShared *shared;
// };

// /* 4422 */
// struct FxSystemContainer
// {
//   FxSystem system;
//   FxSystemShared shared;
// };

// /* 4423 */
// struct FxMarkPoint
// {
//   float xyz[3];
//   float lmapCoord[2];
//   float normal[3];
// };

// /* 4424 */
// struct FxPointGroup
// {
//   FxMarkPoint points[2];
//   int next;
// };

// /* 4425 */
// union FxPointGroupPool
// {
//   FxPointGroupPool *nextFreePointGroup;
//   FxPointGroup pointGroup;
// };

// /* 4426 */
// struct FxReflectParams
// {
//   bool enabled;
//   float zAdd;
//   float zScale;
// };

// /* 4427 */
// union FxTriGroupPool
// {
//   FxTriGroupPool *nextFreeTriGroup;
//   FxTriGroup triGroup;
// };

// /* 4428 */
// struct GfxMarkContext
// {
//   unsigned __int8 lmapIndex;
//   unsigned __int8 primaryLightIndex;
//   unsigned __int8 reflectionProbeIndex;
//   unsigned __int8 modelTypeAndSurf;
//   unsigned __int16 modelIndex;
// };

// /* 4429 */
// struct FxTriGroup
// {
//   unsigned __int16 indices[2][3];
//   GfxMarkContext context;
//   unsigned __int8 triCount;
//   unsigned __int8 unused[1];
//   int next;
// };

// /* 4430 */
// struct FxMarkAlphaFade
// {
//   int ageLimitMsec;
//   int fadeStartAgeMsec;
// };

// /* 4431 */
// struct __declspec(align(4)) FxMark
// {
//   unsigned __int16 prevMark;
//   unsigned __int16 nextMark;
//   int frameCountDrawn;
//   int frameCountAlloced;
//   int ageMsec;
//   float origin[3];
//   float radius;
//   float texCoordAxis[3];
//   float hitNormal[3];
//   unsigned __int8 nativeColor[4];
//   Material *material;
//   int tris;
//   int points;
//   FxMarkAlphaFade alphaFade;
//   GfxMarkContext context;
//   unsigned __int16 pointCount;
//   unsigned __int8 triCount;
//   unsigned __int8 markFlags;
// };

// /* 4432 */
// struct FxMarksSystem
// {
//   int frameCount;
//   unsigned __int16 firstFreeMarkHandle;
//   unsigned __int16 firstActiveWorldMarkHandle;
//   unsigned __int16 entFirstMarkHandles[1536];
//   FxTriGroupPool *firstFreeTriGroup;
//   FxPointGroupPool *firstFreePointGroup;
//   FxMark marks[256];
//   FxTriGroupPool triGroups[1024];
//   FxPointGroupPool pointGroups[1536];
//   bool noMarks;
//   bool hasCarryIndex;
//   unsigned __int16 carryIndex;
//   unsigned int allocedMarkCount;
//   unsigned int freedMarkCount;
//   unsigned int numVisibleWorldSeethru;
//   unsigned int numVisibleEntBrushSeethru;
//   int frameTime;
// };

// /* 4433 */
// struct FxUpdateElem
// {
//   FxEffect *effect;
//   int elemIndex;
//   int atRestFraction;
//   orientation_t orient;
//   int randomSeed;
//   int sequence;
//   float msecLifeSpan;
//   int msecElemBegin;
//   int msecElemEnd;
//   int msecUpdateBegin;
//   int msecUpdateEnd;
//   float msecElapsed;
//   float normTimeUpdateEnd;
//   float *elemOrigin;
//   float *elemBaseVel;
//   float posWorld[3];
//   bool onGround;
//   int physObjId;
// };

// /* 4434 */
// struct FxCameraUpdate
// {
//   float vieworg[3];
//   float viewaxis[3][3];
//   float tanHalfFovX;
//   float tanHalfFovY;
//   float zfar;
// };

// /* 4435 */
// struct FxCmd
// {
//   FxSystem *system;
//   int localClientNum;
//   volatile int *spawnLock;
//   bool useReflection;
//   float reflectionHeight;
//   unsigned int smodelCount;
//   unsigned __int8 *smodelVisData;
//   float elemRemoveChance;
//   unsigned __int8 updateCameraType;
//   const GfxLight *visibleLights;
//   int visibleLightCount;
//   int updateEffectBegin;
//   int updateEffectEnd;
// };

// /* 4436 */
// struct FxSystemBuffers
// {
//   FxEffectContainer effects[1024];
//   FxPool<FxElem,FxElemContainer> elems[2048];
//   FxPool<FxTrail,FxTrail> trails[128];
//   FxPool<FxTrailElem,FxTrailElem> trailElems[2048];
//   FxVisState visState[2];
//   FxUniqueHandleDb uniqueHandleDb;
//   unsigned __int8 padBuffer[80];
// };

// /* 4437 */
// struct __cppobj std::pair<unsigned int *,unsigned int *>
// {
//   unsigned int *first;
//   unsigned int *second;
// };

// /* 4438 */
// struct __cppobj SpuDmaBuffer
// {
// };

// /* 4439 */
// struct FxSprite
// {
//   Material *material;
//   float pos[3];
//   unsigned __int8 rgbaColor[4];
//   float radius;
//   float minScreenRadius;
//   int flags;
// };

// /* 4440 */
// struct FxBeamInfo
// {
//   FxBeam beams[96];
//   volatile int beamCount;
// };

// /* 4441 */
// struct FxPostLight
// {
//   float begin[3];
//   float end[3];
//   float radius;
//   GfxColor color;
//   Material *material;
// };

// /* 4442 */
// struct FxPostLightInfo
// {
//   FxPostLight postLights[96];
//   int postLightCount;
// };

// /* 4443 */
// struct __declspec(align(4)) FxGenerateVertsCmd
// {
//   FxSystem *system;
//   FxBeamInfo *beamInfo;
//   FxPostLightInfo *postLightInfo;
//   FxSpriteInfo *spriteInfo;
//   int localClientNum;
//   float vieworg[3];
//   float viewaxis[3][3];
//   bool useReflection;
//   float reflectionHeight;
//   unsigned __int8 genVertsCameraType;
// };

// /* 4444 */
// struct __declspec(align(4)) FxInsertSortElem
// {
//   int defSortOrder;
//   float distToCamSq;
//   int msecBegin;
//   int defIndex;
//   unsigned __int8 elemType;
// };

// /* 4445 */
// struct FxProfileEntry
// {
//   const FxEffectDef *effectDef;
//   int effectCount;
//   int activeElemCount;
//   int pendingElemCount;
//   int trailCount;
//   int activeTrailElemCount;
//   int pendingTrailElemCount;
// };

// /* 4446 */
// struct PriorityDebugEntry
// {
//   const FxEffectDef *def;
//   int count;
// };

// /* 4447 */
// struct FxMarkTri
// {
//   unsigned __int16 indices[3];
//   GfxMarkContext context;
// };

// /* 4448 */
// struct __cppobj std::pair<FxMarkTri *,FxMarkTri *>
// {
//   FxMarkTri *first;
//   FxMarkTri *second;
// };

// /* 4449 */
// struct __declspec(align(4)) MarkInfoCollidedBModel
// {
//   GfxBrushModel *brushModel;
//   cpose_t *pose;
//   unsigned __int16 entnum;
// };

// /* 4450 */
// struct FxAddMarkCmd
// {
//   int localClientNum;
//   const FxElemDef *elemDef;
//   FxSpatialFrame spatialFrame;
//   int randomSeed;
//   unsigned int markEntnum;
// };

// /* 4451 */
// struct __declspec(align(4)) MarkInfoCollidedDObj
// {
//   DObj *dObj;
//   cpose_t *pose;
//   unsigned __int16 entnum;
// };

// /* 4452 */
// struct MarkGenContext
// {
//   int localClientNum;
//   Material *material;
//   float radius;
//   const unsigned __int8 *nativeColor;
//   const FxMarkAlphaFade *markAlpha;
// };

// /* 4453 */
// struct MarkClipPlaneSet
// {
//   float planes[11][4];
//   int planeCount;
// };

// /* 4454 */
// struct __declspec(align(4)) MarkInfo
// {
//   float origin[3];
//   float localOrigin[3];
//   float localTexCoordAxis[3];
//   float localHitNormal[3];
//   float axis[3][3];
//   float radius;
//   Material *material;
//   int maxTris;
//   FxMarkTri *tris;
//   int maxPoints;
//   FxMarkPoint *points;
//   float mins[3];
//   float maxs[3];
//   MarkClipPlaneSet clipPlanes;
//   float viewOffset[3];
//   bool markHasLightmap;
//   bool markHasReflection;
//   MarkFragmentsAgainstEnum markAgainst;
//   unsigned __int16 smodelsCollided[32];
//   int smodelCollidedCount;
//   MarkInfoCollidedDObj sceneDObjsCollided[32];
//   int sceneDObjCollidedCount;
//   MarkInfoCollidedBModel sceneBModelsCollided[32];
//   int sceneBModelCollidedCount;
//   int usedTriCount;
//   int usedPointCount;
//   void (__cdecl *callback)(void *, int, FxMarkTri *, int, FxMarkPoint *, const float *, const float *, const float *, const bool);
//   void *callbackContext;
//   bool isSeeThruDecal;
// };

// /* 4455 */
// struct FxElemPreVisualState
// {
//   float sampleLerp;
//   float sampleLerpInv;
//   const FxElemDef *elemDef;
//   const FxEffect *effect;
//   const FxElemVisStateSample *refState;
//   int randomSeed;
//   unsigned int distanceFade;
// };

// /* 4456 */
// struct FxActiveMarkSurf
// {
//   Material *material;
//   GfxMarkContext context;
//   int indexCount;
//   unsigned __int16 *indices;
//   float markHitNormal[3];
//   unsigned int visLightsMask;
// };

// /* 4457 */
// struct FxMarkDObjUpdateContext
// {
//   XModel *models[32];
//   const char *modelParentBones[32];
//   int modelCount;
//   bool isBrush;
//   unsigned __int16 brushIndex;
// };

// /* 4458 */
// struct FxEditorElemAtlas
// {
//   int behavior;
//   int index;
//   int fps;
//   int loopCount;
//   int indexRange;
//   int colIndexBits;
//   int rowIndexBits;
//   int entryCount;
// };

// /* 4459 */
// struct FxEditorTrailDef
// {
//   FxTrailVertex verts[64];
//   int vertCount;
//   unsigned __int16 inds[128];
//   int indCount;
// };

// /* 4460 */
// union $02AC52774A03C1B6F49B7C17F56F8A85
// {
//   FxElemVisuals visuals[32];
//   FxElemMarkVisuals markVisuals[16];
// };

// /* 4461 */
// struct FxEditorElemDef
// {
//   char name[256];
//   int editorFlags;
//   int flags;
//   FxFloatRange spawnRange;
//   FxFloatRange fadeInRange;
//   FxFloatRange fadeOutRange;
//   float spawnFrustumCullRadius;
//   FxSpawnDefLooping spawnLooping;
//   FxSpawnDefOneShot spawnOneShot;
//   FxIntRange spawnDelayMsec;
//   FxIntRange lifeSpanMsec;
//   FxFloatRange spawnOrigin[3];
//   FxFloatRange spawnOffsetRadius;
//   FxFloatRange spawnOffsetHeight;
//   FxFloatRange spawnAngles[3];
//   FxFloatRange angularVelocity[3];
//   FxFloatRange initialRotation;
//   float rotationAxis[4];
//   FxFloatRange gravity;
//   FxFloatRange elasticity;
//   FxEditorElemAtlas atlas;
//   float timeScale;
//   float windInfluence;
//   float velScale[2][3];
//   const FxCurve *velShape[2][3][2];
//   float rotationScale;
//   const FxCurve *rotationShape[2];
//   float sizeScale[2];
//   const FxCurve *sizeShape[2][2];
//   float scaleScale;
//   const FxCurve *scaleShape[2];
//   const FxCurve *color[2];
//   const FxCurve *alpha[2];
//   float lightingFrac;
//   float collOffset[3];
//   float collRadius;
//   const FxEffectDef *effectOnImpact;
//   const FxEffectDef *effectOnDeath;
//   int sortOrder;
//   const FxEffectDef *emission;
//   FxFloatRange emitDist;
//   FxFloatRange emitDistVariance;
//   const FxEffectDef *attachment;
//   unsigned __int8 elemType;
//   int visualCount;
//   $02AC52774A03C1B6F49B7C17F56F8A85 ___u45;
//   int trailSplitDist;
//   int trailRepeatDist;
//   float trailScrollTime;
//   FxEditorTrailDef trailDef;
//   int alphaFadeTimeMsec;
//   int maxWindMagnitude;
//   int spawnIntervalAtMaxWind;
//   int lifespanAtMaxWind;
//   float billboardTopWidth;
//   float billboardBottomWidth;
//   FxElemSpawnSound spawnSound;
//   FxIntRange cloudDensityRange;
//   float billboardPivot[2];
// };

// /* 4462 */
// struct FxElemField
// {
//   const char *keyName;
//   bool (__cdecl *handler)(const char **, FxEditorElemDef *);
// };

// /* 4463 */
// struct FxEditorEffectDef
// {
//   char name[64];
//   int elemCount;
//   unsigned __int8 flags;
//   unsigned __int8 editorFlags;
//   unsigned __int8 edPriority;
//   float boundingBoxDim[3];
//   float boundingBoxCentre[3];
//   FxEditorElemDef elems[32];
// };

// /* 4464 */
// struct FxEffectField
// {
//   const char *keyName;
//   bool (__cdecl *handler)(const char **, FxEditorEffectDef *);
// };

// /* 4465 */
// struct FxFlagDef
// {
//   const char *name;
//   int flagType;
//   int mask;
//   int value;
// };

// /* 4466 */
// struct $5F2A149FFFCA11AA1F641100FCD058F6
// {
//   int effectDefCount;
//   const FxEffectDef *effectDefs[512];
//   unsigned __int8 effectStatus[512];
//   const FxEffectDef *defaultEffect;
// };

// /* 4467 */
// struct FxFlagOutputSet
// {
//   int *flags[4];
// };

// /* 4468 */
// union FxGraph3D::<unnamed_type_u>
// {
//   float constantValue[3];
//   float (*sampleValue)[3];
// };

// /* 4469 */
// struct FxGraph3D
// {
//   int intervalCount;
//   FxGraph3D::<unnamed_type_u> u;
// };

// /* 4470 */
// union FxGraph1D::<unnamed_type_u>
// {
//   float constantValue;
//   float *sampleValue;
// };

// /* 4471 */
// struct FxGraph1D
// {
//   int intervalCount;
//   FxGraph1D::<unnamed_type_u> u;
// };

// /* 4472 */
// struct FxDrawState
// {
//   const FxSystem *system;
//   const FxEffect *effect;
//   const FxElem *elem;
//   const FxElemDef *elemDef;
//   unsigned int region;
//   orientation_t orient;
//   const FxCamera *camera;
//   FxReflectParams reflect;
//   int randomSeed;
//   float msecLifeSpan;
//   float msecElapsed;
//   float normTimeUpdateEnd;
//   float posWorld[3];
//   float velDirWorld[3];
//   FxElemVisualState visState;
//   FxElemPreVisualState preVisState;
//   float physicsLerpFrac;
//   int msecDraw;
//   float rotationAxis[3][3];
// };

// /* 4473 */
// struct FxTrailSegmentDrawState
// {
//   FxTrailDef *trailDef;
//   float posWorld[3];
//   float basis[2][3];
//   float rotation;
//   float size[2];
//   float uCoord;
//   unsigned __int8 color[4];
// };

// /* 4474 */
// struct FxEffectDefTableEntry
// {
//   unsigned int key;
//   const FxEffectDef *effectDef;
// };

// /* 4475 */
// struct FxEffectDefTable
// {
//   int count;
//   FxEffectDefTableEntry entries[1024];
// };

// /* 4476 */
// struct __declspec(align(4)) DynEntSortStruct
// {
//   float distSq;
//   unsigned __int16 id;
// };

// /* 4477 */
// struct __cppobj std::pair<DynEntSortStruct *,DynEntSortStruct *>
// {
//   DynEntSortStruct *first;
//   DynEntSortStruct *second;
// };

// /* 4478 */
// union DynEntityCollTree::<unnamed_type_u>
// {
//   unsigned __int16 parent;
//   unsigned __int16 nextFree;
// };

// /* 4479 */
// struct DynEntityCollTree
// {
//   float dist;
//   unsigned __int16 axis;
//   DynEntityCollTree::<unnamed_type_u> u;
//   unsigned __int16 child[2];
// };

// /* 4480 */
// struct __declspec(align(4)) DynEntityCollSector
// {
//   DynEntityCollTree tree;
//   int contents;
//   unsigned __int16 entListHead;
// };

// /* 4481 */
// struct __declspec(align(2)) BreakablePiece
// {
//   const XModel *model;
//   int physObjId;
//   unsigned __int16 lightingHandle;
//   bool active;
// };

// /* 4482 */
// struct node_params_t
// {
//   char classname[64];
//   char targetname[64];
//   unsigned __int16 targetname_hash;
//   char target[64];
//   char target2[64];
//   float origin[3];
//   float angles[3];
//   int used;
// };

// /* 4483 */
// struct __declspec(align(4)) DynEntityCreateParams
// {
//   char typeName[64];
//   char modelName[64];
//   char physModelName[64];
//   char destroyFxFile[64];
//   char destroySound[64];
//   char destroyPiecesFile[64];
//   char physPresetFile[64];
//   char targetname[64];
//   char target[64];
//   char destroyedModelName[64];
//   float origin[3];
//   float angles[3];
//   int health;
//   float mass;
//   float bounce;
//   float friction;
//   float centerOfMass[3];
//   bool startInPhysics;
//   bool autoActivate;
//   bool noBulletDamage;
//   bool noExplosiveDamage;
//   bool alwaysFloats;
// };

// /* 4484 */
// struct DynEntityConstraintCreateParams
// {
//   char classname[64];
//   char targetname[64];
//   char target[64];
//   char target2[64];
//   float origin[3];
//   float origin2[3];
//   float angles[3];
//   int health;
//   float minAngle;
//   float maxAngle;
//   float damp;
//   float distance;
//   float scale;
//   float force_scale;
//   float width;
//   int spawnflags;
//   float timeout;
//   char materialname[64];
// };

// /* 4485 */
// struct DynEntityCollWorld
// {
//   float mins[3];
//   float maxs[3];
//   unsigned __int16 freeHead;
//   DynEntityCollSector sectors[1024];
// };

// /* 4486 */
// struct DynEnt_FadeData
// {
//   unsigned __int16 id;
//   int startTime;
// };

// /* 4487 */
// struct DynEnt_BurnData
// {
//   unsigned __int16 id;
//   unsigned int fx;
// };

// /* 4488 */
// struct __cppobj bdTeamProfile : bdTaskResult
// {
//   unsigned __int64 m_teamID;
// };

// /* 4489 */
// struct /*VFT*/ bdTeamProfile_vtbl
// {
//   void (__thiscall *~bdTaskResult)(bdTaskResult *this);
//   bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
//   void (__thiscall *serialize)(bdTeamProfile *this, bdByteBuffer *);
// };

// /* 4490 */
// struct __cppobj __declspec(align(4)) PublicTeamProfile : bdTeamProfile
// {
//   unsigned __int64 m_memberTeamID;
//   int m_memberVERSION;
//   char m_memberDescription[33];
//   char m_memberLongDescription[257];
//   int m_memberDateFounded;
//   unsigned __int8 m_memberTeamIcon[201];
// };

// /* 4491 */
// struct /*VFT*/ PublicTeamProfile_vtbl
// {
//   void (__thiscall *~bdTaskResult)(bdTaskResult *this);
//   bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
//   void (__thiscall *serialize)(bdTeamProfile *this, bdByteBuffer *);
// };

// /* 4492 */
// struct __cppobj __declspec(align(4)) PrivateTeamProfile : bdTeamProfile
// {
//   unsigned __int64 m_memberTeamID;
//   int m_memberPrivateProfileVERSION;
//   unsigned __int8 m_memberRecommendationList[577];
// };

// /* 4493 */
// struct /*VFT*/ PrivateTeamProfile_vtbl
// {
//   void (__thiscall *~bdTaskResult)(bdTaskResult *this);
//   bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
//   unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
//   void (__thiscall *serialize)(bdTeamProfile *this, bdByteBuffer *);
// };

// /* 4494 */
// struct binaryPlayer_t
// {
//   unsigned __int8 team;
//   unsigned __int8 num_lives;
//   __int16 currentLife;
//   int kills;
//   int deaths;
//   int headshots;
//   int score;
//   int total_xp;
//   int nemesis;
//   int nemesisKills;
//   int nemesisDeaths;
//   int bitch;
//   int bitchKills;
//   int highestKillStreak;
//   int numUavCalled;
//   int numArtilleryCalled;
//   int numArtilleryKills;
//   int numDogsCalled;
//   int numDogsKills;
//   int challenges;
//   int suicides;
//   int assists;
//   unsigned __int8 hitLocations[19];
//   unsigned __int64 xuid;
//   char gamertag[32];
//   int connectivityBits;
//   int connectedBits;
// };

// /* 4495 */
// struct binaryHeader_t
// {
//   unsigned __int8 version;
//   unsigned __int8 mapID;
//   __int16 mapDuration;
//   unsigned __int8 playerCount;
//   __int16 lifeCount;
//   int alliesScore;
//   int axisScore;
// };

// /* 4496 */
// struct binaryLife_t
// {
//   __int16 spawn_time;
//   __int16 death_time;
//   __int16 weapon;
//   char attacker;
//   unsigned __int8 spawnX;
//   unsigned __int8 spawnY;
//   unsigned __int8 deathX;
//   unsigned __int8 deathY;
//   __int16 player;
// };

// /* 4497 */
// struct binaryBreadCrumbHeader_t
// {
//   unsigned __int8 version;
//   unsigned __int16 frequency;
//   int dataLength;
// };

// /* 4498 */
// struct __declspec(align(8)) MatchRecordData_t
// {
//   binaryHeader_t header;
//   binaryPlayer_t playerBuffer[50];
//   binaryLife_t lifeBuffer[1000];
//   binaryBreadCrumbHeader_t breadCrumbHeader;
//   unsigned __int8 movementBuffer[3200];
//   bool heatMapDataGenerated;
// };

// /* 4499 */
// struct __cppobj MatchMaking_PC_QUICKMATCH_Query : bdSessionParams
// {
//   unsigned int m_memberPARAM_SERVERTYPE;
//   int m_memberPARAM_NETCODE_VERSION;
//   unsigned int m_memberPARAM_MAXPLAYERS;
//   unsigned int m_memberPARAM_PLAYLIST;
//   int m_memberPARAM_PLAYLIST_VERSION;
//   unsigned int m_memberPARAM_LICENSE;
// };

// /* 4500 */
// struct /*VFT*/ MatchMaking_PC_QUICKMATCH_Query_vtbl
// {
//   void (__thiscall *~bdSessionParams)(bdSessionParams *this);
//   void (__thiscall *serialize)(bdSessionParams *this, bdByteBuffer *);
//   unsigned int (__thiscall *sizeOf)(bdSessionParams *this);
// };

// /* 4501 */
// struct __cppobj MatchMaking_PC_ZOMBIE_Query : bdSessionParams
// {
//   int m_memberPARAM_GAME_TYPE;
//   int m_memberPARAM_NETCODE_VERSION;
//   int m_memberPARAM_MAPPACKS;
//   int m_memberPARAM_PLAYLIST_VERSION;
//   int m_memberPARAM_TEAM_SIZE;
//   int m_memberPARAM_SKILL;
//   int m_memberPARAM_PLAYLIST;
// };

// /* 4502 */
// struct /*VFT*/ MatchMaking_PC_ZOMBIE_Query_vtbl
// {
//   void (__thiscall *~bdSessionParams)(bdSessionParams *this);
//   void (__thiscall *serialize)(bdSessionParams *this, bdByteBuffer *);
//   unsigned int (__thiscall *sizeOf)(bdSessionParams *this);
// };

// /* 4503 */
// struct __cppobj MatchMaking_PC_MP_Query : bdSessionParams
// {
//   unsigned int m_memberPARAM_NETCODE_VERSION;
//   unsigned int m_memberPARAM_GAMETYPE;
//   unsigned int m_memberPARAM_SERVERTYPE;
//   unsigned int m_memberPARAM_DDL_VERSION;
//   unsigned int m_memberPARAM_RANKED;
//   unsigned int m_memberPARAM_LICENSE;
// };

// /* 4504 */
// struct /*VFT*/ MatchMaking_PC_MP_Query_vtbl
// {
//   void (__thiscall *~bdSessionParams)(bdSessionParams *this);
//   void (__thiscall *serialize)(bdSessionParams *this, bdByteBuffer *);
//   unsigned int (__thiscall *sizeOf)(bdSessionParams *this);
// };

// /* 4505 */
// struct __cppobj MatchMaking_PARAM_FAVOURITE_Query : bdSessionParams
// {
//   unsigned __int64 m_memberPARAM_ADDRESS;
// };

// /* 4506 */
// struct /*VFT*/ MatchMaking_PARAM_FAVOURITE_Query_vtbl
// {
//   void (__thiscall *~bdSessionParams)(bdSessionParams *this);
//   void (__thiscall *serialize)(bdSessionParams *this, bdByteBuffer *);
//   unsigned int (__thiscall *sizeOf)(bdSessionParams *this);
// };

// /* 4507 */
// struct __cppobj MatchMaking_PC_WAGER_Query : bdSessionParams
// {
//   int m_memberPARAM_SERVERTYPE;
//   int m_memberPARAM_LICENSE;
//   int m_memberPARAM_PLAYLIST_MIN;
//   int m_memberPARAM_PLAYLIST_MAX;
//   int m_memberPARAM_NETCODE_VERSION;
//   int m_memberPARAM_PLAYLIST_VERSION;
// };

// /* 4508 */
// struct /*VFT*/ MatchMaking_PC_WAGER_Query_vtbl
// {
//   void (__thiscall *~bdSessionParams)(bdSessionParams *this);
//   void (__thiscall *serialize)(bdSessionParams *this, bdByteBuffer *);
//   unsigned int (__thiscall *sizeOf)(bdSessionParams *this);
// };

// /* 4509 */
// struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_47
// {
//   const void *pVFTable;
//   void *spare;
//   char name[47];
// };

// /* 4510 */
// struct __cppobj MatchMaking_JOIN_IN_PROGRESS_SKILL_Query : bdSessionParams
// {
//   int m_memberPARAM_GAME_TYPE;
//   int m_memberPARAM_GAME_MODE;
//   int m_memberPARAM_NETCODE_VERSION;
//   int m_memberPARAM_MAPPACKS;
//   int m_memberPARAM_PLAYLIST_VERSION;
//   int m_memberPARAM_TEAM_SIZE;
//   int m_memberPARAM_SKILL;
// };

// /* 4511 */
// struct /*VFT*/ MatchMaking_JOIN_IN_PROGRESS_SKILL_Query_vtbl
// {
//   void (__thiscall *~bdSessionParams)(bdSessionParams *this);
//   void (__thiscall *serialize)(bdSessionParams *this, bdByteBuffer *);
//   unsigned int (__thiscall *sizeOf)(bdSessionParams *this);
// };

// /* 4512 */
// struct __cppobj MatchMaking_JOIN_IN_PROGRESS_Query : bdSessionParams
// {
//   int m_memberPARAM_GAME_TYPE;
//   int m_memberPARAM_GAME_MODE;
//   int m_memberPARAM_NETCODE_VERSION;
//   int m_memberPARAM_MAPPACKS;
//   int m_memberPARAM_PLAYLIST_VERSION;
//   int m_memberPARAM_TEAM_SIZE;
// };

// /* 4513 */
// struct /*VFT*/ MatchMaking_JOIN_IN_PROGRESS_Query_vtbl
// {
//   void (__thiscall *~bdSessionParams)(bdSessionParams *this);
//   void (__thiscall *serialize)(bdSessionParams *this, bdByteBuffer *);
//   unsigned int (__thiscall *sizeOf)(bdSessionParams *this);
// };

// /* 4514 */
// struct __cppobj bdAuthUtility
// {
// };

// /* 4515 */
// struct __cppobj __declspec(align(4)) DWControllerData
// {
//   bdLobbyService *lobby;
//   DWLogonStatus logOnStatus;
//   int dwAuthTimer;
//   int logOnAttempts;
//   int framesOfErrorState;
//   bool couldNotConnectToLSP;
//   bdGetHostByName *authGetHostByName;
//   bdGetHostByName *lsgGetHostByName;
//   bdInetAddr authAddr;
//   bdInetAddr lsgAddr;
//   unsigned int ticketSize;
//   unsigned __int8 *ticket;
//   bool forceLogOn;
//   int authorizePS3TicketTimer;
//   bool bCachedCookie;
//   char cachedCookieContents[24];
// };

// /* 4516 */
// struct __cppobj dwRawInterceptor : bdPacketInterceptor
// {
// };

// /* 4517 */
// struct /*VFT*/ dwRawInterceptor_vtbl
// {
//   void (__thiscall *~bdPacketInterceptor)(bdPacketInterceptor *this);
//   bool (__thiscall *acceptPacket)(bdPacketInterceptor *this, bdSocket *, bdAddr, void *, const unsigned int, const unsigned __int8);
// };

// /* 4518 */
// struct __cppobj SecID
// {
//   bdSecurityID m_secID;
//   bool m_active;
// };

// /* 4519 */
// struct __cppobj CountedAddrHandle
// {
//   bdReference<bdAddrHandle> m_addrHandle;
//   SecID m_secIDs[3];
//   int m_primaryIndex;
// };

// /* 4520 */
// struct __cppobj dwLobbyEventHandler : bdLobbyEventHandler
// {
// };

// /* 4521 */
// struct /*VFT*/ dwLobbyEventHandler_vtbl
// {
//   void (__thiscall *~bdLobbyEventHandler)(bdLobbyEventHandler *this);
//   void (__thiscall *onPlayerStatusUpdate)(bdLobbyEventHandler *this, unsigned __int64, char *, unsigned __int8);
//   void (__thiscall *onTeamMemberStatusUpdate)(bdLobbyEventHandler *this, unsigned __int64, char *, unsigned __int64, char *, unsigned __int8);
//   void (__thiscall *onRichPresenceUpdate)(bdLobbyEventHandler *this, unsigned __int64, char *, void *, unsigned int, unsigned __int64);
//   void (__thiscall *onChatChannelUpdate)(bdLobbyEventHandler *this, unsigned __int64, unsigned __int64, char *, unsigned __int8);
//   void (__thiscall *onChatChannelMessage)(bdLobbyEventHandler *this, unsigned __int64, unsigned __int64, char *, void *, unsigned int);
//   void (__thiscall *onInstantMessage)(bdLobbyEventHandler *this, unsigned __int64, char *, void *, unsigned int, unsigned __int64);
//   void (__thiscall *onSessionInvite)(bdLobbyEventHandler *this, bdSessionInvite *);
//   void (__thiscall *onNotifyLeave)(bdLobbyEventHandler *this, unsigned __int64, bdSessionID);
//   void (__thiscall *onFriendshipProposal)(bdLobbyEventHandler *this);
//   void (__thiscall *onTeamProposal)(bdLobbyEventHandler *this);
//   void (__thiscall *onNewNotification)(bdLobbyEventHandler *this);
//   void (__thiscall *onNewMail)(bdLobbyEventHandler *this);
//   void (__thiscall *onMultipleLogon)(bdLobbyEventHandler *this, unsigned __int64);
//   void (__thiscall *onChallengesReceived)(bdLobbyEventHandler *this, bdReference<bdAntiCheatChallenges>);
//   void (__thiscall *onPlayerBanned)(bdLobbyEventHandler *this, unsigned __int64);
//   void (__thiscall *onGlobalInstantMessage)(bdLobbyEventHandler *this, unsigned __int64, char *, void *, unsigned int);
// };

// /* 4522 */
// struct __cppobj bdCreatorBase<bdGameInfo>
// {
//   bdCreatorBase<bdGameInfo>_vtbl *__vftable /*VFT*/;
// };

// /* 4525 */
// struct /*VFT*/ bdCreatorBase<bdGameInfo>_vtbl
// {
//   void (__thiscall *~bdCreatorBase<bdGameInfo>)(bdCreatorBase<bdGameInfo> *this);
//   bdGameInfo *(__thiscall *create)(bdCreatorBase<bdGameInfo> *this);
//   unsigned int (__thiscall *getSizeOf)(bdCreatorBase<bdGameInfo> *this);
// };

// /* 4523 */
// struct __cppobj bdGameInfo : bdReferencable
// {
//   unsigned int m_titleId;
//   bdSecurityID m_secID;
//   bdSecurityKey m_secKey;
//   bdReference<bdCommonAddr> m_hostAddr;
// };

// /* 4524 */
// struct /*VFT*/ bdGameInfo_vtbl
// {
//   void (__thiscall *~bdReferencable)(bdReferencable *this);
//   void (__thiscall *serialize)(bdGameInfo *this, bdBitBuffer *);
//   bool (__thiscall *deserialize)(bdGameInfo *this, const bdReference<bdCommonAddr>, bdBitBuffer *);
// };

// /* 4526 */
// struct __cppobj bdGameInfoFactoryImpl
// {
//   bdCreatorBase<bdGameInfo> *m_creator;
// };

// /* 4527 */
// struct __cppobj bdReference<bdGameInfo>
// {
//   bdGameInfo *m_ptr;
// };

// /* 4528 */
// struct __cppobj bdLANDiscoveryListener
// {
//   bdLANDiscoveryListener_vtbl *__vftable /*VFT*/;
// };

// /* 4529 */
// struct /*VFT*/ bdLANDiscoveryListener_vtbl
// {
//   void (__thiscall *~bdLANDiscoveryListener)(bdLANDiscoveryListener *this);
//   void (__thiscall *onDiscovery)(bdLANDiscoveryListener *this, bdReference<bdGameInfo>);
//   void (__thiscall *onDiscoveryFinished)(bdLANDiscoveryListener *this);
//   void (__thiscall *onRequest)(bdLANDiscoveryListener *this);
// };

// /* 4530 */
// struct __cppobj bdFastArray<bdLANDiscoveryListener *>
// {
//   bdLANDiscoveryListener **m_data;
//   unsigned int m_capacity;
//   unsigned int m_size;
// };

// /* 4531 */
// struct __cppobj bdLANDiscoveryServer
// {
//   bdReference<bdGameInfo> m_gameInfo;
//   bdSocket m_socket;
//   bdFastArray<bdLANDiscoveryListener *> m_listeners;
//   bdLANDiscoveryServer::bdStatus m_status;
// };

// /* 4532 */
// struct __cppobj bdArray<bdReference<bdGameInfo> >
// {
//   bdReference<bdGameInfo> *m_data;
//   unsigned int m_capacity;
//   unsigned int m_size;
// };

// /* 4533 */
// struct __cppobj bdSingleton<bdGameInfoFactoryImpl>
// {
// };

// /* 4534 */
// struct __cppobj bdGameInfoFactory : bdSingleton<bdGameInfoFactoryImpl>
// {
// };

// /* 4535 */
// struct __cppobj bdLANDiscoveryClient
// {
//   bdLANDiscoveryClient_vtbl *__vftable /*VFT*/;
//   __declspec(align(8)) float m_timeout;
//   bdStopwatch m_timer;
//   bdSocket m_socket;
//   unsigned __int8 m_nonce[8];
//   bdFastArray<bdLANDiscoveryListener *> m_listeners;
//   bdLANDiscoveryClient::bdStatus m_status;
// };

// /* 4536 */
// struct /*VFT*/ bdLANDiscoveryClient_vtbl
// {
//   void (__thiscall *~bdLANDiscoveryClient)(bdLANDiscoveryClient *this);
// };

// /* 4537 */
// struct __cppobj LanDiscoveryListener : bdLANDiscoveryListener
// {
//   bdArray<bdReference<bdGameInfo> > sessions;
// };

// /* 4538 */
// struct /*VFT*/ LanDiscoveryListener_vtbl
// {
//   void (__thiscall *~bdLANDiscoveryListener)(bdLANDiscoveryListener *this);
//   void (__thiscall *onDiscovery)(bdLANDiscoveryListener *this, bdReference<bdGameInfo>);
//   void (__thiscall *onDiscoveryFinished)(bdLANDiscoveryListener *this);
//   void (__thiscall *onRequest)(bdLANDiscoveryListener *this);
// };

// /* 4539 */
// struct __cppobj bdCreator<bdGameInfo,bdGameInfo> : bdCreatorBase<bdGameInfo>
// {
// };

// /* 4540 */
// struct /*VFT*/ bdCreator<bdGameInfo,bdGameInfo>_vtbl
// {
//   void (__thiscall *~bdCreatorBase<bdGameInfo>)(bdCreatorBase<bdGameInfo> *this);
//   bdGameInfo *(__thiscall *create)(bdCreatorBase<bdGameInfo> *this);
//   unsigned int (__thiscall *getSizeOf)(bdCreatorBase<bdGameInfo> *this);
// };

// /* 4541 */
// struct __cppobj bdPlatformSocket
// {
// };

// /* 4542 */
// struct __cppobj __declspec(align(2)) bdPS3AuthInfo : bdReferencable
// {
//   char m_region[4];
//   char m_domain[4];
//   bool m_AVChatAvailability;
//   bool m_ContentRatingEnabled;
//   unsigned __int8 m_age;
// };

// /* 4543 */
// struct /*VFT*/ bdPS3AuthInfo_vtbl
// {
//   void (__thiscall *~bdReferencable)(bdReferencable *this);
// };

// /* 4544 */
// struct DevGuiInput
// {
//   int selectedGamePadIndex;
//   int gamePadIndex;
//   float mousePos[2];
//   bool buttonDown[13];
//   bool prevButtonDown[13];
//   float scrollScale;
//   DevGuiInputState digitalStates[2];
//   float digitalAxis[2];
//   float digitalTimes[2];
//   DevGuiInputState analogStates[2];
//   float analogAxis[2];
//   float analogTimes[2];
//   __int16 menuScroll[2];
//   float menuScrollTime[2];
//   float digitalSliderTime;
//   float analogSliderTime;
//   float sliderScrollTime;
//   float sliderScrollMaxTimeStep;
// };

// /* 4545 */
// union DevMenuChild
// {
//   const char *command;
//   const dvar_s *dvar;
//   DevGraph *graph;
//   unsigned __int16 menu;
// };

// /* 4546 */
// struct DevMenuItem
// {
//   char label[26];
//   unsigned __int8 childType;
//   unsigned __int8 childMenuMemory;
//   __int16 sortKey;
//   unsigned __int16 nextSibling;
//   unsigned __int16 prevSibling;
//   unsigned __int16 parent;
//   DevMenuChild child;
// };

// /* 4547 */
// struct devguiGlob_t
// {
//   DevMenuItem menus[2048];
//   DevMenuItem *nextFreeMenu;
//   DevMenuItem topmostMenu;
//   bool bindNextKey;
//   bool isActive;
//   bool isInitialized;
//   bool editingMenuItem;
//   unsigned __int16 selectedMenu;
//   int selRow;
//   bool editingKnot;
//   int top;
//   int bottom;
//   int left;
//   int right;
//   int sliderWidth;
// };

// /* 4548 */
// struct ECRYPT_ctx
// {
//   unsigned int input[16];
//   unsigned __int8 output[64];
//   unsigned int cont;
// };

/* 4549 */
struct ScriptStringList
{
  int count;
  const char** strings;
};

/* 4550 */
struct XAsset
{
  XAssetType type;
  XAssetHeader header;
};

/* 4551 */
struct XAssetList
{
  ScriptStringList stringList;
  int assetCount;
  XAsset* assets;
};

// /* 4552 */
// struct StreamDelayInfo
// {
//   const void *ptr;
//   int size;
// };

// /* 4553 */
// struct XBlock
// {
//   unsigned __int8 *data;
//   unsigned int size;
// };

// /* 4554 */
// struct StreamPosInfo
// {
//   unsigned __int8 *pos;
//   unsigned int index;
// };

template <typename T>
union XAssetPoolEntry
{
  T entry;
  T* next;
};

template <typename T, int poolSize>
struct XAssetPool
{
  T* freeHead;
  XAssetPoolEntry<T> entries[poolSize];
};

// /* 4555 */
// union XAssetPoolEntry<PhysPreset>
// {
//   PhysPreset entry;
//   XAssetPoolEntry<PhysPreset> *next;
// };

// /* 4556 */
// struct XAssetPool<PhysPreset,64>
// {
//   XAssetPoolEntry<PhysPreset> *freeHead;
//   XAssetPoolEntry<PhysPreset> entries[64];
// };
extern XAssetPool<PhysPreset, 64> g_PhysPresetPool;

// /* 4557 */
// union XAssetPoolEntry<PhysConstraints>
// {
//   PhysConstraints entry;
//   XAssetPoolEntry<PhysConstraints> *next;
// };

// /* 4558 */
// struct XAssetPool<PhysConstraints,64>
// {
//   XAssetPoolEntry<PhysConstraints> *freeHead;
//   XAssetPoolEntry<PhysConstraints> entries[64];
// };
extern XAssetPool<PhysConstraints, 64> g_PhysConstraintsPool;

// /* 4559 */
// union XAssetPoolEntry<XAnimParts>
// {
//   XAnimParts entry;
//   XAssetPoolEntry<XAnimParts> *next;
// };

// /* 4560 */
// struct XAssetPool<XAnimParts,5100>
// {
//   XAssetPoolEntry<XAnimParts> *freeHead;
//   XAssetPoolEntry<XAnimParts> entries[5100];
// };
extern XAssetPool<XAnimParts, 5100> g_XAnimPartsPool;

// /* 4561 */
// union XAssetPoolEntry<XModel>
// {
//   XModel entry;
//   XAssetPoolEntry<XModel> *next;
// };

// /* 4562 */
// struct XAssetPool<XModel,1000>
// {
//   XAssetPoolEntry<XModel> *freeHead;
//   XAssetPoolEntry<XModel> entries[1000];
// };
extern XAssetPool<XModel, 1000> g_XModelPool;

// /* 4563 */
// union XAssetPoolEntry<Material>
// {
//   Material entry;
//   XAssetPoolEntry<Material> *next;
// };

// /* 4564 */
// struct XAssetPool<Material,4096>
// {
//   XAssetPoolEntry<Material> *freeHead;
//   XAssetPoolEntry<Material> entries[4096];
// };
extern XAssetPool<Material, 4096> g_MaterialPool;

// /* 4565 */
// union XAssetPoolEntry<MaterialTechniqueSet>
// {
//   MaterialTechniqueSet entry;
//   XAssetPoolEntry<MaterialTechniqueSet> *next;
// };

// /* 4566 */
// struct XAssetPool<MaterialTechniqueSet,2048>
// {
//   XAssetPoolEntry<MaterialTechniqueSet> *freeHead;
//   XAssetPoolEntry<MaterialTechniqueSet> entries[2048];
// };
extern XAssetPool<MaterialTechniqueSet, 2048> g_MaterialTechniqueSetPool;

// /* 4567 */
// union XAssetPoolEntry<GfxImage>
// {
//   GfxImage entry;
//   XAssetPoolEntry<GfxImage> *next;
// };

// /* 4568 */
// struct XAssetPool<GfxImage,4096>
// {
//   XAssetPoolEntry<GfxImage> *freeHead;
//   XAssetPoolEntry<GfxImage> entries[4096];
// };
XAssetPool<GfxImage, 4096>;

// /* 4569 */
// union XAssetPoolEntry<SndBank>
// {
//   SndBank entry;
//   XAssetPoolEntry<SndBank> *next;
// };

// /* 4570 */
// struct XAssetPool<SndBank,32>
// {
//   XAssetPoolEntry<SndBank> *freeHead;
//   XAssetPoolEntry<SndBank> entries[32];
// };
extern XAssetPool<SndBank, 32> g_SoundPool;

// /* 4571 */
// union XAssetPoolEntry<snd_alias_list_t>
// {
//   snd_alias_list_t entry;
//   XAssetPoolEntry<snd_alias_list_t> *next;
// };

// /* 4572 */
// struct XAssetPool<snd_alias_list_t,16>
// {
//   XAssetPoolEntry<snd_alias_list_t> *freeHead;
//   XAssetPoolEntry<snd_alias_list_t> entries[16];
// };
extern XAssetPool<snd_alias_list_t, 16> g_SoundPatchPool;

// /* 4573 */
// union XAssetPoolEntry<MapEnts>
// {
//   MapEnts entry;
//   XAssetPoolEntry<MapEnts> *next;
// };

// /* 4574 */
// struct XAssetPool<MapEnts,2>
// {
//   XAssetPoolEntry<MapEnts> *freeHead;
//   XAssetPoolEntry<MapEnts> entries[2];
// };
extern XAssetPool<MapEnts, 2> g_MapEntsPool;

// /* 4575 */
// union XAssetPoolEntry<GfxLightDef>
// {
//   GfxLightDef entry;
//   XAssetPoolEntry<GfxLightDef> *next;
// };

// /* 4576 */
// struct XAssetPool<GfxLightDef,32>
// {
//   XAssetPoolEntry<GfxLightDef> *freeHead;
//   XAssetPoolEntry<GfxLightDef> entries[32];
// };
extern XAssetPool<GfxLightDef, 32> g_GfxLightDefPool;

// /* 4577 */
// union XAssetPoolEntry<Font_s>
// {
//   Font_s entry;
//   XAssetPoolEntry<Font_s> *next;
// };

// /* 4578 */
// struct XAssetPool<Font_s,16>
// {
//   XAssetPoolEntry<Font_s> *freeHead;
//   XAssetPoolEntry<Font_s> entries[16];
// };
extern XAssetPool<Font_s, 16> g_FontPool;

// /* 4579 */
// union XAssetPoolEntry<MenuList>
// {
//   MenuList entry;
//   XAssetPoolEntry<MenuList> *next;
// };

// /* 4580 */
// struct XAssetPool<MenuList,128>
// {
//   XAssetPoolEntry<MenuList> *freeHead;
//   XAssetPoolEntry<MenuList> entries[128];
// };
extern XAssetPool<MenuList, 128> g_MenuListPool;

// /* 4581 */
// union XAssetPoolEntry<menuDef_t>
// {
//   menuDef_t entry;
//   XAssetPoolEntry<menuDef_t> *next;
// };

// /* 4582 */
// struct XAssetPool<menuDef_t,850>
// {
//   XAssetPoolEntry<menuDef_t> *freeHead;
//   XAssetPoolEntry<menuDef_t> entries[850];
// };
extern XAssetPool<menuDef_t, 850> g_MenuPool;

// /* 4583 */
// union XAssetPoolEntry<LocalizeEntry>
// {
//   LocalizeEntry entry;
//   XAssetPoolEntry<LocalizeEntry> *next;
// };

// /* 4584 */
// struct XAssetPool<LocalizeEntry,10240>
// {
//   XAssetPoolEntry<LocalizeEntry> *freeHead;
//   XAssetPoolEntry<LocalizeEntry> entries[10240];
// };
extern XAssetPool<LocalizeEntry, 10240> g_LocalizeEntryPool;

// /* 4585 */
// union XAssetPoolEntry<DestructibleDef>
// {
//   DestructibleDef entry;
//   XAssetPoolEntry<DestructibleDef> *next;
// };

// /* 4586 */
// struct XAssetPool<DestructibleDef,64>
// {
//   XAssetPoolEntry<DestructibleDef> *freeHead;
//   XAssetPoolEntry<DestructibleDef> entries[64];
// };
extern XAssetPool<DestructibleDef, 64> g_DestructibleDefPool;

// /* 4587 */
// union XAssetPoolEntry<WeaponVariantDef>
// {
//   WeaponVariantDef entry;
//   XAssetPoolEntry<WeaponVariantDef> *next;
// };

// /* 4588 */
// struct XAssetPool<WeaponVariantDef,2048>
// {
//   XAssetPoolEntry<WeaponVariantDef> *freeHead;
//   XAssetPoolEntry<WeaponVariantDef> entries[2048];
// };
extern XAssetPool<WeaponVariantDef, 2048> g_WeaponVariantDefPool;

// /* 4589 */
// union XAssetPoolEntry<SndDriverGlobals>
// {
//   SndDriverGlobals entry;
//   XAssetPoolEntry<SndDriverGlobals> *next;
// };

// /* 4590 */
// struct XAssetPool<SndDriverGlobals,1>
// {
//   XAssetPoolEntry<SndDriverGlobals> *freeHead;
//   XAssetPoolEntry<SndDriverGlobals> entries[1];
// };
extern XAssetPool<SndDriverGlobals, 1> g_SndDriverGlobalsPool;

// /* 4591 */
// union XAssetPoolEntry<FxEffectDef>
// {
//   FxEffectDef entry;
//   XAssetPoolEntry<FxEffectDef> *next;
// };

// /* 4592 */
// struct XAssetPool<FxEffectDef,450>
// {
//   XAssetPoolEntry<FxEffectDef> *freeHead;
//   XAssetPoolEntry<FxEffectDef> entries[450];
// };
extern XAssetPool<FxEffectDef, 450> g_FxEffectDefPool;

// /* 4593 */
// union XAssetPoolEntry<FxImpactTable>
// {
//   FxImpactTable entry;
//   XAssetPoolEntry<FxImpactTable> *next;
// };

// /* 4594 */
// struct XAssetPool<FxImpactTable,4>
// {
//   XAssetPoolEntry<FxImpactTable> *freeHead;
//   XAssetPoolEntry<FxImpactTable> entries[4];
// };
extern XAssetPool<FxImpactTable, 4> g_FxImpactTablePool;

// /* 4595 */
// union XAssetPoolEntry<RawFile>
// {
//   RawFile entry;
//   XAssetPoolEntry<RawFile> *next;
// };

// /* 4596 */
// struct XAssetPool<RawFile,1024>
// {
//   XAssetPoolEntry<RawFile> *freeHead;
//   XAssetPoolEntry<RawFile> entries[1024];
// };
extern XAssetPool<RawFile, 1024> g_RawFilePool;

// /* 4597 */
// union XAssetPoolEntry<StringTable>
// {
//   StringTable entry;
//   XAssetPoolEntry<StringTable> *next;
// };

// /* 4598 */
// struct XAssetPool<StringTable,256>
// {
//   XAssetPoolEntry<StringTable> *freeHead;
//   XAssetPoolEntry<StringTable> entries[256];
// };
extern XAssetPool<StringTable, 256> g_StringTablePool;

// /* 4599 */
// union XAssetPoolEntry<PackIndex>
// {
//   PackIndex entry;
//   XAssetPoolEntry<PackIndex> *next;
// };

// /* 4600 */
// struct XAssetPool<PackIndex,16>
// {
//   XAssetPoolEntry<PackIndex> *freeHead;
//   XAssetPoolEntry<PackIndex> entries[16];
// };
extern XAssetPool<PackIndex, 16> g_PackIndexPool;

// /* 4601 */
// union XAssetPoolEntry<XGlobals>
// {
//   XGlobals entry;
//   XAssetPoolEntry<XGlobals> *next;
// };

// /* 4602 */
// struct XAssetPool<XGlobals,1>
// {
//   XAssetPoolEntry<XGlobals> *freeHead;
//   XAssetPoolEntry<XGlobals> entries[1];
// };
extern XAssetPool<XGlobals, 1> g_XGlobalsPool;

// /* 4603 */
// union XAssetPoolEntry<ddlDef_t>
// {
//   ddlDef_t entry;
//   XAssetPoolEntry<ddlDef_t> *next;
// };

// /* 4604 */
// struct XAssetPool<ddlDef_t,24>
// {
//   XAssetPoolEntry<ddlDef_t> *freeHead;
//   XAssetPoolEntry<ddlDef_t> entries[24];
// };
extern XAssetPool<ddlDef_t, 24> g_DDLPool;

// /* 4605 */
// union XAssetPoolEntry<Glasses>
// {
//   Glasses entry;
//   XAssetPoolEntry<Glasses> *next;
// };

// /* 4606 */
// struct XAssetPool<Glasses,1>
// {
//   XAssetPoolEntry<Glasses> *freeHead;
//   XAssetPoolEntry<Glasses> entries[1];
// };
extern XAssetPool<Glasses, 1> g_GlassesPool;

// /* 4607 */
// union XAssetPoolEntry<EmblemSet>
// {
//   EmblemSet entry;
//   XAssetPoolEntry<EmblemSet> *next;
// };

// /* 4608 */
// struct XAssetPool<EmblemSet,2>
// {
//   XAssetPoolEntry<EmblemSet> *freeHead;
//   XAssetPoolEntry<EmblemSet> entries[2];
// };
extern XAssetPool<EmblemSet, 2> g_EmblemSetPool;

// /* 4609 */
// struct XAssetEntry
// {
//   XAsset asset;
//   unsigned __int8 zoneIndex;
//   bool inuse;
//   unsigned __int16 nextHash;
//   unsigned __int16 nextOverride;
//   unsigned __int16 usageFrame;
// };

// /* 4610 */
// union XAssetEntryPoolEntry
// {
//   XAssetEntry entry;
//   XAssetEntryPoolEntry *next;
// };

// /* 4611 */
// struct __declspec(align(4)) XZoneName
// {
//   char name[64];
//   int flags;
//   int fileSize;
//   FF_DIR dir;
//   bool loaded;
// };

// /* 4612 */
// struct XZone
// {
//   unsigned __int16 index;
//   int flags;
//   XBlock blocks[7];
// };

// /* 4613 */
// struct DBReorderAssetEntry
// {
//   unsigned int sequence;
//   int type;
//   const char *typeString;
//   const char *assetName;
// };

// /* 4614 */
// struct $DA8EC07E44065800A894D486E9AF9B79
// {
//   FastCriticalSection critSect;
//   char zoneName[256];
//   bool alreadyFinished;
//   bool loadedSound;
//   bool loadedLocalization;
//   DBReorderAssetEntry *lastEntry;
//   unsigned int sequence;
//   unsigned int sequenceForIncludes;
//   unsigned int entryCount;
//   DBReorderAssetEntry entries[32768];
// };

// /* 4615 */
// struct XZoneInfoInternal
// {
//   char name[64];
//   int flags;
// };

// /* 4616 */
// union XAssetPoolEntry<XModelPieces>
// {
//   XModelPieces entry;
//   XAssetPoolEntry<XModelPieces> *next;
// };

// /* 4617 */
// struct XAssetPool<XModelPieces,64>
// {
//   XAssetPoolEntry<XModelPieces> *freeHead;
//   XAssetPoolEntry<XModelPieces> entries[64];
// };
extern XAssetPool<XModelPieces, 64> g_XModelPiecesPool;

// /* 4618 */
// struct XAssetPool<menuDef_t,1>
// {
//   XAssetPoolEntry<menuDef_t> *freeHead;
//   XAssetPoolEntry<menuDef_t> entries[1];
// };
extern XAssetPool<menuDef_t, 1>;

// /* 4619 */
// struct XAssetPool<FxEffectDef,1>
// {
//   XAssetPoolEntry<FxEffectDef> *freeHead;
//   XAssetPoolEntry<FxEffectDef> entries[1];
// };
extern XAssetPool<FxEffectDef, 1>;

// /* 4620 */
// struct XAssetPool<PackIndex,1>
// {
//   XAssetPoolEntry<PackIndex> *freeHead;
//   XAssetPoolEntry<PackIndex> entries[1];
// };
extern XAssetPool<PackIndex, 1>;

// /* 4621 */
// union XAssetPoolEntry<SndPatch>
// {
//   SndPatch entry;
//   XAssetPoolEntry<SndPatch> *next;
// };

// /* 4622 */
// struct XAssetPool<SndPatch,1>
// {
//   XAssetPoolEntry<SndPatch> *freeHead;
//   XAssetPoolEntry<SndPatch> entries[1];
// };
extern XAssetPool<SndPatch, 1>;

// /* 4623 */
// struct XAssetPool<DestructibleDef,1>
// {
//   XAssetPoolEntry<DestructibleDef> *freeHead;
//   XAssetPoolEntry<DestructibleDef> entries[1];
// };
extern XAssetPool<DestructibleDef, 1>;

// /* 4624 */
// union XAssetPoolEntry<ddlRoot_t>
// {
//   ddlRoot_t entry;
//   XAssetPoolEntry<ddlRoot_t> *next;
// };

// /* 4625 */
// struct __cppobj std::pair<DBReorderAssetEntry *,DBReorderAssetEntry *>
// {
//   DBReorderAssetEntry *first;
//   DBReorderAssetEntry *second;
// };

// /* 4626 */
// struct XAssetPool<ddlRoot_t,1>
// {
//   XAssetPoolEntry<ddlRoot_t> *freeHead;
//   XAssetPoolEntry<ddlRoot_t> entries[1];
// };
extern XAssetPool<ddlRoot_t, 1>;

// /* 4627 */
// struct XAssetPool<FxImpactTable,1>
// {
//   XAssetPoolEntry<FxImpactTable> *freeHead;
//   XAssetPoolEntry<FxImpactTable> entries[1];
// };
extern XAssetPool<FxImpactTable, 1>;

// /* 4628 */
// struct XAssetPool<ddlDef_t,1>
// {
//   XAssetPoolEntry<ddlDef_t> *freeHead;
//   XAssetPoolEntry<ddlDef_t> entries[1];
// };
extern XAssetPool<ddlDef_t, 1>;

// /* 4629 */
// struct XAssetPool<XModel,1>
// {
//   XAssetPoolEntry<XModel> *freeHead;
//   XAssetPoolEntry<XModel> entries[1];
// };
extern XAssetPool<XModel, 1>;

// /* 4630 */
// struct XAssetPool<MenuList,1>
// {
//   XAssetPoolEntry<MenuList> *freeHead;
//   XAssetPoolEntry<MenuList> entries[1];
// };
extern XAssetPool<MenuList, 1>;

// /* 4631 */
// struct XAssetPool<StringTable,1>
// {
//   XAssetPoolEntry<StringTable> *freeHead;
//   XAssetPoolEntry<StringTable> entries[1];
// };
extern XAssetPool<StringTable, 1>;

// /* 4632 */
// struct XAssetPool<PhysConstraints,1>
// {
//   XAssetPoolEntry<PhysConstraints> *freeHead;
//   XAssetPoolEntry<PhysConstraints> entries[1];
// };
extern XAssetPool<PhysConstraints, 1>;

// /* 4633 */
// struct XAssetPool<Font_s,1>
// {
//   XAssetPoolEntry<Font_s> *freeHead;
//   XAssetPoolEntry<Font_s> entries[1];
// };
extern XAssetPool<Font_s, 1>;

// /* 4634 */
// struct XAssetPool<LocalizeEntry,1>
// {
//   XAssetPoolEntry<LocalizeEntry> *freeHead;
//   XAssetPoolEntry<LocalizeEntry> entries[1];
// };
extern XAssetPool<LocalizeEntry, 1>;

// /* 4635 */
// struct XAssetPool<SndBank,1>
// {
//   XAssetPoolEntry<SndBank> *freeHead;
//   XAssetPoolEntry<SndBank> entries[1];
// };
extern XAssetPool<SndBank, 1>;

// /* 4636 */
// struct XAssetPool<MaterialTechniqueSet,1>
// {
//   XAssetPoolEntry<MaterialTechniqueSet> *freeHead;
//   XAssetPoolEntry<MaterialTechniqueSet> entries[1];
// };
extern XAssetPool<MaterialTechniqueSet, 1>;

// /* 4637 */
// struct XAssetPool<RawFile,1>
// {
//   XAssetPoolEntry<RawFile> *freeHead;
//   XAssetPoolEntry<RawFile> entries[1];
// };
extern XAssetPool<RawFile, 1>;

// /* 4638 */
// struct XAssetPool<GfxLightDef,1>
// {
//   XAssetPoolEntry<GfxLightDef> *freeHead;
//   XAssetPoolEntry<GfxLightDef> entries[1];
// };
extern XAssetPool<GfxLightDef, 1>;

// /* 4639 */
// struct XAssetPool<MapEnts,1>
// {
//   XAssetPoolEntry<MapEnts> *freeHead;
//   XAssetPoolEntry<MapEnts> entries[1];
// };
extern XAssetPool<MapEnts, 1>;

// /* 4640 */
// struct XAssetPool<Material,1>
// {
//   XAssetPoolEntry<Material> *freeHead;
//   XAssetPoolEntry<Material> entries[1];
// };
extern XAssetPool<Material, 1>;

// /* 4641 */
// struct XAssetPool<XModelPieces,1>
// {
//   XAssetPoolEntry<XModelPieces> *freeHead;
//   XAssetPoolEntry<XModelPieces> entries[1];
// };
extern XAssetPool<XModelPieces, 1>;

// /* 4642 */
// struct XAssetPool<WeaponVariantDef,1>
// {
//   XAssetPoolEntry<WeaponVariantDef> *freeHead;
//   XAssetPoolEntry<WeaponVariantDef> entries[1];
// };
extern XAssetPool<WeaponVariantDef, 1>;

// /* 4643 */
// struct XAssetPool<PhysPreset,1>
// {
//   XAssetPoolEntry<PhysPreset> *freeHead;
//   XAssetPoolEntry<PhysPreset> entries[1];
// };
extern XAssetPool<PhysPreset, 1>;

// /* 4644 */
// struct XAssetPool<XAnimParts,1>
// {
//   XAssetPoolEntry<XAnimParts> *freeHead;
//   XAssetPoolEntry<XAnimParts> entries[1];
// };
extern XAssetPool<XAnimParts, 1>;

// /* 4645 */
// struct XAssetPool<GfxImage,1>
// {
//   XAssetPoolEntry<GfxImage> *freeHead;
//   XAssetPoolEntry<GfxImage> entries[1];
// };
extern XAssetPool<GfxImage, 1>;

// /* 4646 */
// struct XAssetPool<EmblemSet,1>
// {
//   XAssetPoolEntry<EmblemSet> *freeHead;
//   XAssetPoolEntry<EmblemSet> entries[1];
// };
extern XAssetPool<EmblemSet, 1>;

// /* 4647 */
// struct GfxPosTexVertex
// {
//   float xyz[3];
//   float texCoord[2];
// };

// /* 4648 */
// struct GfxWaterVertex
// {
//   unsigned __int8 pos[4];
//   unsigned __int8 normal[4];
//   GfxColor color;
//   unsigned __int8 texCoord[4];
// };

// /* 4649 */
// struct GfxPackedVertexQuant
// {
//   __int16 xyz[3];
//   __int16 binormalSign;
//   GfxColor color;
//   PackedTexCoords texCoord;
//   PackedUnitVec normal;
//   PackedUnitVec tangent;
// };

// /* 4650 */
// struct GfxStreamedPartInfo
// {
//   unsigned int levelCountAndSize;
//   unsigned __int16 width;
//   unsigned __int16 height;
//   unsigned int indexInToc;
// };

// /* 4651 */
// struct FxInt16Range
// {
//   __int16 base;
//   __int16 amplitude;
// };

// /* 4652 */
// struct FxInt8Range
// {
//   char base;
//   char amplitude;
// };

// /* 4653 */
// struct snd_reverb
// {
//   char name[32];
//   float room;
//   float roomHF;
//   float roomRolloffFactor;
//   float decayTime;
//   float decayHFRatio;
//   float reflections;
//   float reflectionsDelay;
//   float reverb;
//   float reverbDelay;
//   float diffusion;
//   float density;
//   float HFReference;
// };

// /* 4654 */
// struct ColVert
// {
//   float xyz[3];
//   float unused;
// };

// /* 4655 */
// struct DB_LoadData
// {
//   void *f;
//   const char *filename;
//   XBlock *blocks;
//   int flags;
//   int outstandingReads;
//   _OVERLAPPED overlapped;
//   z_stream_s stream;
//   unsigned __int8 *compressBufferStart;
//   unsigned __int8 *compressBufferEnd;
//   void (__cdecl *interrupt)();
//   int allocType;
//   bool abort;
//   int startTime;
//   int deflateBufferPos;
//   int deflateRemainingFileSize;
//   unsigned __int8 deflateBuffer[32768];
// };

// /* 4656 */
// struct XFile
// {
//   unsigned int size;
//   unsigned int externalSize;
//   unsigned int blockSize[7];
// };

// /* 4657 */
// struct SHA1Context
// {
//   unsigned int Message_Digest[5];
//   unsigned int Length_Low;
//   unsigned int Length_High;
//   unsigned __int8 Message_Block[64];
//   int Message_Block_Index;
//   int Computed;
//   int Corrupted;
// };

 /* 4658 */
struct PrintChannel
{
  char name[32];
  bool allow_script;
};

/* 4659 */
struct PrintChannelGlobal
{
  PrintChannel open_channels[256];
  unsigned int filters[6][8];
};

// /* 4660 */
// struct __declspec(align(4)) rankData_t
// {
//   int minxp[96];
//   int maxxp[96];
//   int rankId[96];
//   int topRow;
//   bool isValid;
// };

// /* 4661 */
// struct ping_t
// {
//   netadr_t adr;
//   int start;
//   int time;
//   char info[1024];
// };

// /* 4662 */
// struct __cppobj serverStatusInfoResponse_s
// {
//   char string[16384];
//   netadr_t address;
//   int time;
//   int startTime;
//   int pending;
//   int print;
//   int retrieved;
//   bdSecurityID secId;
// };

// /* 4663 */
// struct cacvalidateserver_t
// {
//   unsigned __int64 uid;
// };

// /* 4664 */
// struct $A3082F8D06891D11850E9B8F334529D3
// {
//   char password[24];
//   netadr_t host;
// };

// /* 4665 */
// struct quickmatch_params_t
// {
//   char mapname[32];
//   int maxping;
//   int minplayers;
//   int maxplayers;
//   bool isWager;
//   int codpoints;
// };

// /* 4666 */
// struct GfxConfiguration
// {
//   unsigned int maxClientViews;
//   unsigned int entCount;
//   unsigned int entnumNone;
//   unsigned int entnumOrdinaryEnd;
//   int threadContextCount;
//   int critSectCount;
//   const char *codeFastFileName;
//   const char *patchFastFileName;
//   const char *uiFastFileName;
//   const char *uiViewerFastFileName;
//   const char *commonFastFileName;
//   const char *modFastFileName;
//   const char *devFastFileName;
// };

// /* 4667 */
// struct keyname_t
// {
//   const char *name;
//   int keynum;
// };

// /* 4668 */
// struct KeyState
// {
//   int down;
//   int repeats;
//   const char *binding;
//   const char *binding2;
// };

// /* 4669 */
// struct PlayerKeyState
// {
//   field_t chatField;
//   int chat_team;
//   int overstrikeMode;
//   int anyKeyDown;
//   KeyState keys[256];
//   LocSelInputState locSelInputState;
// };

// /* 4670 */
// struct kbutton_t
// {
//   int down[2];
//   unsigned int downtime;
//   unsigned int msec;
//   bool active;
//   bool wasPressed;
//   float val;
// };

// /* 4671 */
// struct __cppobj AimInput
// {
//   float deltaTime;
//   float pitch;
//   float pitchAxis;
//   float pitchMax;
//   float yaw;
//   float yawAxis;
//   float yawMax;
//   float forwardAxis;
//   float rightAxis;
//   bitarray<51> button_bits;
//   int localClientNum;
// };

// /* 4672 */
// struct __declspec(align(4)) AimOutput
// {
//   float pitch;
//   float yaw;
//   float meleeChargeYaw;
//   unsigned __int8 meleeChargeDist;
// };

// /* 4673 */
// struct GamepadVirtualAxisMapping
// {
//   GamepadPhysicalAxis physicalAxis;
//   GamepadMapping mapType;
// };

// /* 4674 */
// struct GpadAxesGlob
// {
//   int axesValues[6];
//   GamepadVirtualAxisMapping virtualAxes[6];
// };

// /* 4675 */
// struct StickToCodeMap
// {
//   GamepadPhysicalAxis physicalAxis;
//   int posCode;
//   int negCode;
// };

// /* 4676 */
// struct $C9973E8CB98117584CC11D7AF6800567
// {
//   bool inited;
//   int mapDirCount;
//   char mapDirs[8][64];
//   const char **mapNames[8];
//   const dvar_s *mapEnumDvar[8];
// };

// /* 4677 */
// struct ConDrawInputGlob
// {
//   char autoCompleteChoice[64];
//   int matchIndex;
//   int matchCount;
//   const char *inputText;
//   int inputTextLen;
//   bool hasExactMatch;
//   bool mayAutoComplete;
//   float x;
//   float y;
//   float leftX;
//   float fontHeight;
// };

// /* 4678 */
// struct MessageLine
// {
//   int messageIndex;
//   int textBufPos;
//   int textBufSize;
//   int typingStartTime;
//   int lastTypingSoundTime;
//   int flags;
// };

// /* 4679 */
// struct Message
// {
//   int startTime;
//   int endTime;
// };

// /* 4680 */
// struct MessageWindow
// {
//   MessageLine *lines;
//   Message *messages;
//   char *circularTextBuffer;
//   int textBufSize;
//   int lineCount;
//   int padding;
//   int scrollTime;
//   int fadeIn;
//   int fadeOut;
//   int textBufPos;
//   int firstLineIndex;
//   int activeLineCount;
//   int messageIndex;
// };

// /* 4681 */
// struct MessageBuffer
// {
//   char gamemsgText[3][2048];
//   MessageWindow gamemsgWindows[3];
//   MessageLine gamemsgLines[3][12];
//   Message gamemsgMessages[3][12];
//   char miniconText[4096];
//   MessageWindow miniconWindow;
//   MessageLine miniconLines[100];
//   Message miniconMessages[100];
//   char errorText[1024];
//   MessageWindow errorWindow;
//   MessageLine errorLines[5];
//   Message errorMessages[5];
// };

// /* 4682 */
// struct Console
// {
//   int initialized;
//   MessageWindow consoleWindow;
//   MessageLine consoleLines[1024];
//   Message consoleMessages[1024];
//   char consoleText[32768];
//   char textTempLine[512];
//   unsigned int lineOffset;
//   int displayLineOffset;
//   int prevChannel;
//   bool outputVisible;
//   int fontHeight;
//   int visibleLineCount;
//   int visiblePixelWidth;
//   float screenMin[2];
//   float screenMax[2];
//   MessageBuffer messageBuffer[1];
//   float color[4];
// };

// /* 4683 */
// struct __declspec(align(4)) CompositeJob
// {
//   CompositeState state;
//   CompositeType type;
//   int id;
//   int layerCount;
//   CompositeEmblemLayer layers[12];
//   GfxImage *renderImage;
//   GfxImage *resultImage;
//   bool cancel;
// };

// /* 4684 */
// struct OSFILE
// {
//   RawFile *rawFile;
//   MemoryFile *memFile;
//   HunkUser *hunk;
//   int offset;
//   bool is_raw;
//   bool in_use;
//   bool is_read;
//   bool is_error;
// };

// /* 4685 */
// struct ZStringOutputStream
// {
//   void (__cdecl *put)(ZStringOutputStream *, char);
//   void *user;
//   unsigned int i;
//   unsigned int size;
// };

// /* 4686 */
// struct __cppobj ZSmallStringDecode : ZStringOutputStream
// {
//   int len;
//   char str[256];
// };

// /* 4687 */
// struct CEntityAreaParms
// {
//   const float *mins;
//   const float *maxs;
//   int contentMask;
//   int *list;
//   int maxCount;
//   int count;
// };

// /* 4688 */
// struct __declspec(align(4)) snd_weapon_shot
// {
//   int localClientNum;
//   SndEntHandle shooter;
//   unsigned int weapon;
//   float origin[3];
//   float direction[3];
//   unsigned int tagName;
//   unsigned int burstCount;
//   bool shooterIsPlayer;
//   bool shooterIsLocalPlayer;
//   bool isLastShotInClip;
//   bool isTurret;
//   bool doubleTap;
//   bool fakeFire;
// };

// /* 4689 */
// struct snd_autosim_play
// {
//   unsigned int frame;
//   snd_weapon_shot shot;
// };

// /* 4690 */
// struct snd_autosim
// {
//   snd_weapon_shot shot;
//   unsigned int lastPing;
//   unsigned int lastShot;
//   unsigned int fireTime;
//   unsigned int shotCount;
//   int used;
//   int isNew;
// };

// /* 4691 */
// struct AnimRateOffset
// {
//   int fromWeaponDef;
//   int fromWeaponVariantDef;
// };

// /* 4692 */
// struct localEntity_s
// {
//   localEntity_s *prev;
//   localEntity_s *next;
//   leType_t leType;
//   float tracerWidth;
//   float tracerLength;
//   int endTime;
//   trajectory_t pos;
//   float color[4];
//   float tracerClipDist;
//   GfxEntity refEntity;
// };

// /* 4693 */
// struct WeaponOptions::WeaponOverride::ToGold
// {
//   const Material *material;
//   const GfxImage *diffuseTexture;
//   const GfxImage *specularTexture;
//   const GfxImage *reflectionTexture;
//   const GfxImage *camoTexture;
// };

// /* 4694 */
// struct WeaponOptions::WeaponOverride
// {
//   int lastFrame;
//   const WeaponVariantDef *weapon;
//   const GfxImage *camoBaseTexture1;
//   const GfxImage *camoBaseTexture2;
//   unsigned int camoOverrideIndex1;
//   unsigned int camoOverrideIndex2;
//   unsigned int numToGold;
//   unsigned int numToBlack;
//   WeaponOptions::WeaponOverride::ToGold toGold[6];
//   WeaponOptions::WeaponOverride::ToGold toBlack[6];
// };

// /* 4695 */
// struct WeaponOptions
// {
//   const GfxImage *camoTextureOverrides[10][64];
//   const GfxImage *lensTextureOverrides[10][16];
//   const GfxImage *reticleTextureOverrides[10][64];
//   float reticleColors[16][4];
//   float lensColors[16][4];
//   Material *facepaintMaterials[64];
//   float facepaintColors[16][4];
//   Font_s *clanFont;
//   const GfxImage *emblemClearTexture;
//   WeaponOptions::WeaponOverride weaponOverrides[100];
//   int numWeaponOverrides;
//   int goldCamoIndex;
//   WeaponOptions::WeaponOverride::ToGold gold;
//   WeaponOptions::WeaponOverride::ToGold black;
//   const GfxImage *lightClanTagFont;
//   const GfxImage *darkClanTagFont;
// };

// /* 4696 */
// struct visField_t
// {
//   const char *name;
//   int offset;
//   int fieldType;
// };

// /* 4697 */
// struct cg_level_locals_t
// {
//   int scriptPrintChannel;
//   SpawnVar spawnVar;
//   int triggerIndex;
//   trigger_info_t pendingTriggerList[256];
//   trigger_info_t currentTriggerList[256];
//   int pendingTriggerListSize;
//   int currentTriggerListSize;
//   int entTriggerIndex[1536];
// };

// /* 4698 */
// struct TestEffect
// {
//   char name[64];
//   float pos[3];
//   int time;
//   int respawnTime;
// };

// /* 4699 */
// struct ClientViewParams
// {
//   float x;
//   float y;
//   float width;
//   float height;
//   ClientViewViewportSize viewportSize;
// };

// /* 4700 */
// struct __cppobj ExtraCamClientStateRestore
// {
//   unsigned __int8 m_buffer[864];
//   float m_vieworg[3];
//   float m_refdefViewAngles[3];
//   float m_viewaxis[3][3];
//   int m_localClientNum;
// };

// /* 4701 */
// struct CG_TreadmarkVehicle
// {
//   const void *objectPointer;
//   unsigned int wheelEffects[6];
// };

// /* 4702 */
// struct SPIKEACOUSTIC_PING
// {
//   int time;
//   float pos[3];
//   int spike;
// };

// /* 4703 */
// struct cent_field_t
// {
//   const char *name;
//   int ofs;
//   fieldtype_t type;
// };

// /* 4704 */
// struct CgSoundPlaybackTrackingInfo
// {
//   int entitynum;
//   float origin[3];
//   unsigned int aliasname;
//   int wasInKillcam;
// };

// /* 4705 */
// struct snd_fire_manager
// {
//   int active;
//   float location[3];
//   float level;
//   int id;
// };

// /* 4706 */
// struct __declspec(align(4)) $59835072FC2CD3936CE4A4C9F556010B
// {
//   char name[64];
//   int index;
//   bool useMouse;
// };

// /* 4707 */
// struct ScriptFunctions
// {
//   int maxSize;
//   int count;
//   int *address;
// };

// /* 4708 */
// struct cent_field_s
// {
//   const char *name;
//   int ofs;
//   int size[1];
//   fieldtype_t type;
//   void (__cdecl *setter)(centity_s *, const cent_field_s *);
//   void (__cdecl *getter)(centity_s *, const cent_field_s *);
// };

// /* 4709 */
// struct listColumnInfo_t
// {
//   listColumnTypes_t type;
//   float fWidth;
//   const char *pszName;
//   int iAlignment;
//   scoreboardColumnType_t sbColumnType;
// };

// /* 4710 */
// struct matchClientScoreData_t
// {
//   int rank;
//   unsigned __int64 xuid;
//   int clientNum;
//   Material *hRankIcon;
//   char name[32];
//   char clanAbbrev[8];
//   score_s score;
//   team_t team;
// };

// /* 4711 */
// struct __declspec(align(8)) matchScoreBoardData_t
// {
//   matchClientScoreData_t matchClientScoreData[32];
//   scoreboardColumnType_t scoreboardColumnTypes[4];
//   listColumnInfo_t inGameScoreboardColumnInfo[12];
//   int numClients;
//   int numAllies;
//   int numInGameScoreboardColumns;
// };

// /* 4712 */
// struct CG_PerfData
// {
//   int history[32];
//   int count;
//   int index;
//   int instant;
//   int total;
//   float average;
//   float variance;
//   int min;
//   int max;
// };

// /* 4713 */
// struct CG_PerfInfo
// {
//   bool initialized;
//   CG_PerfData frame;
//   CG_PerfData script;
//   CG_PerfData cscript;
//   CG_PerfData server;
//   CG_PerfData renderExec;
//   CG_PerfData renderSwap;
// };

// /* 4714 */
// struct BattleChatterParams
// {
//   unsigned __int8 WhichSoundIsPlaying;
//   unsigned int SecondAlias;
//   int EntityNum;
//   int LocalClientNum;
//   int CurrentPlayingSound;
//   float SndOrigin[3];
// };

// /* 4715 */
// struct cg_hudelem_t
// {
//   float x;
//   float y;
//   float rotation;
//   float width;
//   float height;
//   char hudElemLabel[256];
//   float labelWidth;
//   char hudElemText[256];
//   float textWidth;
//   Font_s *font;
//   float fontScale;
//   float fontHeight;
//   float color[4];
//   int timeNow;
// };

// /* 4716 */
// struct DelayListInfo
// {
//   centity_s *head;
//   centity_s *latest;
//   int size;
// };

// /* 4717 */
// struct EffectFile
// {
//   const char *nonflesh[21][31];
//   const char *flesh[21][4];
// };

// /* 4718 */
// struct cg_vertex_t
// {
//   float position[2];
//   float color[4];
//   float texCoord[2];
// };

// /* 4719 */
// struct lagometer_t
// {
//   int frameSamples[128];
//   int frameCount;
//   int snapshotFlags[128];
//   int snapshotSamples[128];
//   int entitySamples[128];
//   int changedEntitySamples[128];
//   int archivedEntitySamples[128];
//   int serverBandwidth[128];
//   int killcamTimes[128];
//   int snapshotCount;
// };

// /* 4720 */
// struct __declspec(align(4)) OverheadFade
// {
//   int nextCheckTime;
//   int lastTime;
//   int startTime;
//   bool visible;
// };

// /* 4721 */
// struct PlayerDetails
// {
//   char fullDisplayName[38];
//   char clanDisplayName[7];
//   char gamerTag[32];
//   unsigned int fullDisplayNameLength;
//   unsigned int clanDisplayLength;
//   unsigned int gamerTagDisplayLength;
//   bool inView;
//   int inViewStartTime;
//   int inViewLastTime;
// };

// /* 4722 */
// struct DrawNameEntity
// {
//   int entnum;
//   float alpha;
//   int teamIndicator;
//   float dist;
// };

// /* 4723 */
// struct CenterPrint
// {
//   int time;
//   char text[1024];
//   int priority;
// };

// /* 4724 */
// struct ScreenBurn
// {
//   int startTime;
//   int endTime;
//   int localClientNum;
// };

// /* 4725 */
// struct RopeRenderInfo
// {
//   VisualRope ropes[96];
//   int ropeCount;
// };

// /* 4726 */
// struct RopeGenerateVertsCmd
// {
//   RopeRenderInfo *ropeInfo;
//   int localClientNum;
//   float vieworg[3];
//   float viewaxis[3][3];
//   float refdef_tanHalfFovX;
//   float refdef_tanHalfFovY;
// };

// /* 4727 */
// struct HudGrenade
// {
//   float origin[3];
//   float predicted_dmg_ratio;
//   float predicted_time_ratio;
//   Material *material;
// };

// /* 4728 */
// struct CompassActor
// {
//   int lastUpdate;
//   float lastPos[2];
//   float lastEnemyPos[2];
//   float satelliteEnemyPos[2];
//   float lastYaw;
//   int pingTime;
//   int beginFadeTime;
//   int beginRadarFadeTime;
//   int beginSatelliteFadeTime;
//   int beginStaticImageFadeTime;
//   int beginVoiceFadeTime;
//   bool enemy;
//   bool inVehicle;
//   unsigned int perks[2];
//   int needsRevive;
//   float currentFadeTimeAmount;
// };

// /* 4729 */
// struct __declspec(align(4)) CompassFakeFire
// {
//   float pos[2];
//   float yaw;
//   int entityNum;
//   int beginFadeTime;
//   bool enemy;
//   bool satellite;
// };

// /* 4730 */
// struct CompassVehicle
// {
//   int entityNum;
//   int lastUpdate;
//   float lastPos[2];
//   float lastYaw;
//   team_t team;
//   int ownerIndex;
// };

// /* 4731 */
// struct __declspec(align(4)) CompassDogs
// {
//   int entityNum;
//   int lastUpdate;
//   float lastPos[2];
//   float lastYaw;
//   team_t team;
//   int ownerIndex;
//   bool enemy;
// };

// /* 4732 */
// struct __declspec(align(4)) CompassTurrets
// {
//   int entityNum;
//   int lastUpdate;
//   int beginFadeTime;
//   float lastPos[2];
//   float lastYaw;
//   team_t team;
//   int ownerIndex;
//   bool enemy;
//   bool firing;
// };

// /* 4733 */
// struct CompassArtillery
// {
//   float pos[2];
//   float realPos[2];
//   int fireTime;
// };

// /* 4734 */
// struct CompassHelicopter
// {
//   int entityNum;
//   int lastUpdate;
//   float lastPos[2];
//   float lastYaw;
//   team_t team;
//   int ownerIndex;
// };

// /* 4735 */
// struct CompassGuidedMissile
// {
//   int entityNum;
//   int lastUpdate;
//   float lastPos[2];
//   float lastYaw;
//   team_t team;
//   int ownerIndex;
// };

// /* 4736 */
// struct cgCloudLayer_t
// {
//   XModel *model;
//   float cloudCover;
//   float minHeight;
//   float maxHeight;
//   float minSpeed;
//   float maxSpeed;
//   float radius;
// };

// /* 4737 */
// struct cgCloud_t
// {
//   float pos[3];
//   float speed;
//   float qsin;
//   float qcos;
//   cgCloudLayer_t *layer;
// };

// /* 4738 */
// struct CameraShake
// {
//   int time;
//   float scale;
//   float length;
//   float radius;
//   float src[3];
//   float size;
//   float rumbleScale;
// };

// /* 4739 */
// struct CameraShakeSet
// {
//   CameraShake shakes[4];
//   float phase;
// };

// /* 4740 */
// struct punctuation_s
// {
//   char *p;
//   int n;
//   punctuation_s *next;
// };

// /* 4741 */
// struct __declspec(align(8)) token_s
// {
//   char string[1024];
//   int type;
//   int subtype;
//   unsigned int intvalue;
//   long double floatvalue;
//   char *whitespace_p;
//   char *endwhitespace_p;
//   int line;
//   int linescrossed;
//   token_s *next;
// };

// /* 4742 */
// struct __declspec(align(8)) script_s
// {
//   char filename[64];
//   char *buffer;
//   char *script_p;
//   char *end_p;
//   char *lastscript_p;
//   char *whitespace_p;
//   char *endwhitespace_p;
//   int length;
//   int line;
//   int lastline;
//   int tokenavailable;
//   int flags;
//   punctuation_s *punctuations;
//   punctuation_s **punctuationtable;
//   token_s token;
//   script_s *next;
// };

// /* 4743 */
// struct define_s
// {
//   char *name;
//   int flags;
//   int builtin;
//   int numparms;
//   token_s *parms;
//   token_s *tokens;
//   define_s *next;
//   define_s *hashnext;
// };

// /* 4744 */
// struct indent_s
// {
//   int type;
//   parseSkip_t skip;
//   script_s *script;
//   indent_s *next;
// };

// /* 4745 */
// struct source_s
// {
//   char filename[64];
//   char includepath[64];
//   punctuation_s *punctuations;
//   script_s *scriptstack;
//   token_s *tokens;
//   define_s *defines;
//   define_s **definehash;
//   indent_s *indentstack;
//   int skip;
//   token_s token;
// };

// /* 4746 */
// struct directive_s
// {
//   char *name;
//   int (__cdecl *func)(source_s *);
// };

// /* 4747 */
// struct __declspec(align(8)) value_s
// {
//   int intvalue;
//   long double floatvalue;
//   int parentheses;
//   value_s *prev;
//   value_s *next;
// };

// /* 4748 */
// struct operator_s
// {
//   int op;
//   int priority;
//   int parentheses;
//   operator_s *prev;
//   operator_s *next;
// };

// /* 4749 */
// struct VariantWind
// {
//   float wind_vector[3];
//   float rustle_angular_frequency[3];
//   float rustle_amplitude[3];
//   float blade_acceleration;
//   float blade_velocity;
//   int reset_timer;
//   int gust_start;
//   int gust_dur;
// };

// /* 4750 */
// struct __declspec(align(4)) LOCALIZED_WIND
// {
//   VariantWind wind;
//   int entnum;
//   float radius;
//   bool active;
// };

// /* 4751 */
// struct GrassWind
// {
//   float pos[2];
//   float dir[2];
//   float strength_skew;
//   int life_span;
//   int start_time;
// };

// /* 4752 */
// struct __cppobj std::pair<WeaponComponent *,WeaponComponent *>
// {
//   WeaponComponent *first;
//   WeaponComponent *second;
// };

// /* 4753 */
// struct WeaponAttachmentTableEntry
// {
//   const char *displayName;
//   const char *referenceName;
//   const char *pointName;
//   const char *imageName;
//   const char *description;
//   int cost;
//   int count;
//   int unlockLvl;
//   int unlockPLevel;
// };

// /* 4754 */
// struct __cppobj compare_weapon_component_sort
// {
// };

// /* 4755 */
// struct __declspec(align(4)) AttachmentTableEntry
// {
//   eAttachment attachmentIndex;
//   eAttachmentPoint attachmentPointIndex;
//   WeaponAttachmentTableEntry values;
//   bool compatibleAttachments[24];
//   bool isValid;
// };

// /* 4756 */
// struct WeaponFullDef
// {
//   WeaponVariantDef weapVariantDef;
//   WeaponDef weapDef;
//   XModel *gunXModel[16];
//   const char *szXAnims[66];
//   unsigned __int16 hideTags[32];
//   unsigned __int16 notetrackSoundMapKeys[20];
//   unsigned __int16 notetrackSoundMapValues[20];
//   XModel *worldModel[16];
//   float parallelBounce[31];
//   float perpendicularBounce[31];
//   float locationDamageMultipliers[19];
// };

// /* 4757 */
// struct SurfaceTypeSoundList
// {
//   char *surfaceSoundBase;
//   char **soundAliasList;
// };

// /* 4758 */
// struct __cppobj compare_attachment_sort
// {
// };

// /* 4759 */
// struct WeaponVariantDefHash
// {
//   int hash;
//   int weaponIndex;
// };

// /* 4760 */
// struct __declspec(align(4)) WeaponOptionTableEntry
// {
//   int weaponOptionIndex;
//   eWeaponOptionGroup weaponOptionGroup;
//   WeaponAttachmentTableEntry values;
//   bool isValid;
// };

// /* 4761 */
// struct __declspec(align(4)) AttachmentPointTableEntry
// {
//   eAttachmentPoint attachmentPointIndex;
//   WeaponAttachmentTableEntry values;
//   bool isValid;
// };

// /* 4762 */
// struct pmoveHandler_t
// {
//   void (__cdecl *trace)(trace_t *, const float *, const float *, const float *, const float *, int, int, col_context_t *);
//   void (__cdecl *playerEvent)(int, int);
//   bool (__cdecl *getEntityOriginAngles)(int, int, float *, float *);
//   unsigned __int16 (__cdecl *getVehicleTypeString)(int, int);
//   void (__cdecl *entityLinkFromPMove)(int, int, const int);
//   int (__cdecl *getPlayerWeapon)(const playerState_s *, const int);
//   void (__cdecl *setVehDriverInputs)(const int, const int, usercmd_s *);
//   int (__cdecl *isEntWalkable)(const int, const int);
// };

// /* 4763 */
// struct vehAnimClient_t
// {
//   bool initialized;
//   VehicleSeatPositions curSeat;
//   VehicleSeatPositions prevSeat;
//   bool moving;
//   int animStage;
//   int animIndex;
//   int tagName;
// };

 /* 4764 */
struct __declspec(align(4)) ItemInfo_t
{
  int index;
  int dw_index;
  int dw_base_index;
  bool is_passive;
  ItemGroup_t group;
  const char* name;
  const char* reference;
  int count;
  const char* image_ref;
  const char* desc;
  int num_attachments[5];
  Attachment_t attachments[24];
  int unlock_level;
  int unlock_p_level;
  DefaultClass_t default_class[20];
  bool is_default_global_item;
  int cost;
  int dw_cost;
  LoadoutSlot_t loadout_slot;
  int unclassify_at;
  int sort_key;
  int challenge_indices[3];
  bool is_null_item;
  int name_hash;
  int ref_hash;
  bool is_valid;
};

// /* 4765 */
struct UnlockableItemsData
{
  int max_item;
  int num_items;
  ItemInfo_t item_table[256];
  int default_class_loadouts[20][35];
  int default_global_items[4];
  ItemInfo_t* items_in_slot[256];
  int num_items_in_slot;
  int num_purchased_items_in_slot;
  int default_items[39];
  int actual_default_items[39];
  int clantag_feature_rows[256];
  int face_camo_patterns[64];
  int face_camo_colors[64];
  int num_clantag_features;
  int num_face_camo_patterns;
  int num_face_camo_colors;
  int professional_perk_index;
};

// /* 4766 */
// struct __cppobj phys_simple_allocator<gjkcc_info>
// {
//   int m_count;
// };

// /* 4767 */
// struct __cppobj __declspec(align(16)) gjkcc_info
// {
//   phys_mat44 m_cg_to_world_xform;
//   phys_vec3 m_cg_aabb_min;
//   phys_vec3 m_cg_aabb_max;
//   float m_mins[3];
//   float m_maxs[3];
//   phys_heap_gjk_cache_system_avl_tree m_gjk_cache;
//   gjk_query_output m_gjk_query_output;
//   int m_active;
//   bool m_is_server_thread;
//   gjk_base_t *m_cg_;
//   float m_last_origin[3];
// };

// /* 4768 */
// struct __cppobj __declspec(align(4)) gjkcc_info_database_t
// {
//   phys_inplace_avl_tree<unsigned int,generic_avl_map_node_t,generic_avl_map_node_t> m_map;
//   int m_token;
//   int m_gcci_count;
//   bool m_is_server_thread;
// };

// /* 4769 */
// struct __cppobj __declspec(align(16)) gjk_trace_input_t
// {
//   const gjk_base_t *m_cg;
//   float m_gjk_ac_eps;
//   bool m_keep_all_collisions;
//   bool m_exit_on_penetration;
//   float m_extra_time;
//   phys_heap_gjk_cache_system_avl_tree *m_gjk_cache;
//   gjk_query_output *m_query_output;
//   gjkcc_info *m_gcci;
//   gjk_query_input m_query_input;
//   phys_transient_allocator *m_allocator;
// };

// /* 4770 */
// struct __cppobj phys_link_list<gjk_trace_output_t>
// {
//   gjk_trace_output_t *m_first;
//   gjk_trace_output_t **m_last_next_ptr;
//   int m_alloc_count;
// };

// /* 4771 */
// struct __cppobj list_gjk_trace_output
// {
//   phys_link_list<gjk_trace_output_t> m_list;
//   gjk_trace_output_t *m_first_hit;
// };

// /* 4772 */
// struct /*VFT*/ player_gjk_slide_move_input_t_vtbl
// {
//   void (__thiscall *custom_process)(gjk_slide_move_input_t *this, gjk_trace_output_t *);
// };

// /* 4773 */
// struct __cppobj player_gjk_slide_move_input_t : gjk_slide_move_input_t
// {
//   pmove_t *pm;
// };

// /* 4774 */
// struct __cppobj phys_link_list<gjk_trace_output_t>::iterator
// {
//   gjk_trace_output_t *m_ptr;
// };

// /* 4775 */
// struct /*VFT*/ player_push_slide_move_input_t_vtbl
// {
//   void (__thiscall *custom_process)(gjk_slide_move_input_t *this, gjk_trace_output_t *);
// };

// /* 4776 */
// struct __cppobj player_push_slide_move_input_t : gjk_slide_move_input_t
// {
//   float velocity_[3];
// };

// /* 4777 */
// struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_37
// {
//   const void *pVFTable;
//   void *spare;
//   char name[37];
// };

// /* 4778 */
// struct viewLerpWaypoint_s
// {
//   int iFrac;
//   float fViewHeight;
//   int iOffset;
// };

// /* 4779 */
// struct MantleAnimTransition
// {
//   int upAnimIndex;
//   int overAnimIndex;
//   float height;
// };

// /* 4780 */
// struct MantleResults
// {
//   float dir[3];
//   float startPos[3];
//   float ledgePos[3];
//   float endPos[3];
//   int flags;
//   int duration;
// };

// /* 4781 */
// struct FM_ACTIVECELL_DATA
// {
//   float pos[3];
//   bool is_active;
//   int endtime;
//   int fireStarterClientNum;
//   int weaponUsed;
// };

// /* 4782 */
// struct _fm_burntree_data
// {
//   int min[3];
//   int max[3];
//   int volume;
// };

// /* 4783 */
// struct GfxStream2Vertex
// {
//   unsigned __int16 x;
//   unsigned __int16 y;
// };

// /* 4784 */
// union HalfFromFloat::__l2::<unnamed_type_v>
// {
//   float f;
//   unsigned int i;
// };

// /* 4785 */
// union FloatFromHalf::__l2::<unnamed_type_v>
// {
//   float f;
//   unsigned int i;
// };

// /* 4786 */
// struct BackgroundPurchasedCount
// {
//   unsigned int flush;
//   int count;
// };

// /* 4787 */
// struct BGDefaultEmblem
// {
//   int minlevel;
//   int maxlevel;
//   CompositeEmblemLayer layers[12];
//   int layerCount;
// };

// /* 4788 */
// struct ResultCache
// {
//   int controllerIndex;
//   unsigned int flush;
//   unsigned int use;
//   unsigned int include;
//   unsigned int exclude;
//   int count;
//   __int16 ids[1024];
// };

// /* 4789 */
// struct ai_animation_funcs_t
// {
//   void (__cdecl *pfnStart)(int, const entityState_s *, ActorAnimStates);
//   void (__cdecl *pfnThink)(int, const entityState_s *);
//   int (__cdecl *pfnLength)(int, const entityState_s *);
//   void (__cdecl *pfnSetAtEnd)(int, const entityState_s *, actorInfo_t *);
// };

// /* 4790 */
// struct AnimStateName
// {
//   unsigned __int16 *name;
//   int category;
// };

// /* 4791 */
// struct animStringItem_t
// {
//   const char *string;
//   int hash;
// };

// /* 4792 */
// struct loadAnim_t
// {
//   scr_anim_s anim;
//   int iNameHash;
//   char szAnimName[64];
// };

// /* 4793 */
// struct animVehicleSeats_t
// {
//   int seats;
// };

// /* 4794 */
// struct animConditionTable_t
// {
//   animScriptConditionTypes_t type;
//   animStringItem_t *values;
//   int minValue;
//   int maxValue;
// };

// /* 4795 */
// struct controller_info_t
// {
//   float angles[6][3];
//   float tag_origin_angles[3];
//   float tag_origin_offset[3];
// };

// /* 4796 */
// struct AimTarget
// {
//   int entIndex;
//   float worldDistSqr;
//   float heightChange;
//   float mins[3];
//   float maxs[3];
//   float velocity[3];
// };

// /* 4797 */
// struct AimTargetGlob
// {
//   AimTarget targets[64];
//   int targetCount;
// };

// /* 4798 */
// struct __declspec(align(2)) AimAssistPlayerState
// {
//   float origin[3];
//   float viewangles[3];
//   float velocity[3];
//   int eFlags;
//   int linkFlags;
//   int pm_flags;
//   int weapFlags;
//   int weaponstate;
//   float fWeaponPosFrac;
//   float viewHeightCurrent;
//   int weapIndex;
//   int meleeWeapIndex;
//   bool hasAmmo;
//   bool isDualWielding;
//   bool targetAssistDisabled;
// };

// /* 4799 */
// struct AimTweakables
// {
//   float slowdownRegionWidth;
//   float slowdownRegionHeight;
//   float autoAimRegionWidth;
//   float autoAimRegionHeight;
//   float autoMeleeRegionWidth;
//   float autoMeleeRegionHeight;
//   float lockOnRegionWidth;
//   float lockOnRegionHeight;
// };

// /* 4800 */
// struct AimScreenTarget
// {
//   int entIndex;
//   float clipMins[2];
//   float clipMaxs[2];
//   float aimPos[3];
//   float velocity[3];
//   float distSqr;
//   float crosshairDistSqr;
// };

// /* 4801 */
// struct __cppobj AimAssistGlobals
// {
//   AimAssistPlayerState ps;
//   bool initialized;
//   AimTweakables tweakables;
//   float viewOrigin[3];
//   float viewAngles[3];
//   float viewAxis[3][3];
//   float fovTurnRateScale;
//   float fovScaleInv;
//   float adsLerp;
//   float pitchDelta;
//   float yawDelta;
//   float screenWidth;
//   float screenHeight;
//   __declspec(align(16)) float screenMtx[4][4];
//   float invScreenMtx[4][4];
//   AimScreenTarget screenTargets[64];
//   int screenTargetCount;
//   int autoAimTargetEnt;
//   bool autoAimPressed;
//   bool autoAimActive;
//   float autoAimPitch;
//   float autoAimPitchTarget;
//   float autoAimYaw;
//   float autoAimYawTarget;
//   bool autoAimJustGotTarget;
//   bool autoAimHasRealTarget;
//   bool aimSlowdownActive;
//   int aimSlowdownTargetEnt;
//   int autoMeleeTargetEnt;
//   eAutoMeleeState autoMeleeState;
//   float autoMeleePitch;
//   float autoMeleePitchTarget;
//   float autoMeleeYaw;
//   float autoMeleeYawTarget;
//   int lockOnTargetEnt;
//   bitarray<51> prev_button_bits;
//   bool overrideSnapWidthAndLerp;
//   float overrideAutoaimLerpValue;
//   float overrideAutoaimWidthValue;
// };

// /* 4802 */
// struct __cppobj __declspec(align(16)) TopDownState
// {
//   bool enabled;
//   AimAssistGlobals aaGlob;
//   float pitch;
//   float yaw;
// };

// /* 4803 */
// struct _TP_CALLBACK_ENVIRON_V1::<unnamed_type_u>::<unnamed_type_s>
// {
//   unsigned __int32 LongFunction : 1;
//   unsigned __int32 Persistent : 1;
//   unsigned __int32 Private : 30;
// };

// /* 4804 */
// union _TP_CALLBACK_ENVIRON_V1::<unnamed_type_u>
// {
//   unsigned int Flags;
//   _TP_CALLBACK_ENVIRON_V1::<unnamed_type_u>::<unnamed_type_s> s;
// };

// /* 4805 */
// struct _TP_CALLBACK_ENVIRON_V1
// {
//   unsigned int Version;
//   _TP_POOL *Pool;
//   _TP_CLEANUP_GROUP *CleanupGroup;
//   void (__stdcall *CleanupGroupCancelCallback)(void *, void *);
//   void *RaceDll;
//   _ACTIVATION_CONTEXT *ActivationContext;
//   void (__stdcall *FinalizationCallback)(_TP_CALLBACK_INSTANCE *, void *);
//   _TP_CALLBACK_ENVIRON_V1::<unnamed_type_u> u;
// };

// /* 4806 */
// struct _lldiv_t
// {
//   __int64 quot;
//   __int64 rem;
// };

// /* 4807 */
// struct D3D10_TEXCUBE_SRV
// {
//   unsigned int MostDetailedMip;
//   unsigned int MipLevels;
// };

// /* 4808 */
// struct D3D10_TEX1D_SRV
// {
//   unsigned int MostDetailedMip;
//   unsigned int MipLevels;
// };

// /* 4809 */
// struct D3D10_TEX1D_ARRAY_SRV
// {
//   unsigned int MostDetailedMip;
//   unsigned int MipLevels;
//   unsigned int FirstArraySlice;
//   unsigned int ArraySize;
// };

// /* 4810 */
// struct DWRITE_FONT_FEATURE
// {
//   DWRITE_FONT_FEATURE_TAG nameTag;
//   unsigned int parameter;
// };

// /* 4811 */
// struct D3D10_TEX2D_SRV
// {
//   unsigned int MostDetailedMip;
//   unsigned int MipLevels;
// };

// /* 4812 */
// struct D3D10_TEX1D_RTV
// {
//   unsigned int MipSlice;
// };

// /* 4813 */
// union $545C80804CFDAA65132ED5A8382CA602
// {
//   unsigned int FirstElement;
//   unsigned int ElementOffset;
// };

// /* 4814 */
// union $44D74FBD1C023638CFA48FB7FF47174A
// {
//   unsigned int NumElements;
//   unsigned int ElementWidth;
// };

// /* 4815 */
// struct D3D10_BUFFER_SRV
// {
//   $545C80804CFDAA65132ED5A8382CA602 ___u0;
//   $44D74FBD1C023638CFA48FB7FF47174A ___u1;
// };

// /* 4816 */
// struct D3D10_TEX1D_ARRAY_DSV
// {
//   unsigned int MipSlice;
//   unsigned int FirstArraySlice;
//   unsigned int ArraySize;
// };

// /* 4817 */
// struct D3D10_TEX1D_ARRAY_RTV
// {
//   unsigned int MipSlice;
//   unsigned int FirstArraySlice;
//   unsigned int ArraySize;
// };

// /* 4818 */
// struct D3D10_TEX2DMS_SRV
// {
//   unsigned int UnusedField_NothingToDefine;
// };

// /* 4819 */
// struct D3D10_MAPPED_TEXTURE3D
// {
//   void *pData;
//   unsigned int RowPitch;
//   unsigned int DepthPitch;
// };

// /* 4820 */
// struct D3D10_BUFFER_RTV
// {
//   $545C80804CFDAA65132ED5A8382CA602 ___u0;
//   $44D74FBD1C023638CFA48FB7FF47174A ___u1;
// };

// /* 4821 */
// struct D3D10_MAPPED_TEXTURE2D
// {
//   void *pData;
//   unsigned int RowPitch;
// };

// /* 4822 */
// struct D3D10_TEX3D_RTV
// {
//   unsigned int MipSlice;
//   unsigned int FirstWSlice;
//   unsigned int WSize;
// };

// /* 4823 */
// struct D3D10_TEX2DMS_ARRAY_SRV
// {
//   unsigned int FirstArraySlice;
//   unsigned int ArraySize;
// };

// /* 4824 */
// struct D3D10_TEX2DMS_DSV
// {
//   unsigned int UnusedField_NothingToDefine;
// };

// /* 4825 */
// struct D3D10_TEX1D_DSV
// {
//   unsigned int MipSlice;
// };

// /* 4826 */
// struct __cppobj ID3D10DeviceChild : IUnknown
// {
// };

// /* 4827 */
// struct __cppobj ID3D10Resource : ID3D10DeviceChild
// {
// };

// /* 4828 */
// struct __cppobj ID3D10Buffer : ID3D10Resource
// {
// };

// /* 4829 */
// struct D3D10_BUFFER_DESC
// {
//   unsigned int ByteWidth;
//   D3D10_USAGE Usage;
//   unsigned int BindFlags;
//   unsigned int CPUAccessFlags;
//   unsigned int MiscFlags;
// };

// /* 4830 */
// struct __cppobj ID3D10Device : IUnknown
// {
// };

// /* 4831 */
// struct __cppobj ID3D10View : ID3D10DeviceChild
// {
// };

// /* 4832 */
// struct D3D10_TEX2D_ARRAY_SRV
// {
//   unsigned int MostDetailedMip;
//   unsigned int MipLevels;
//   unsigned int FirstArraySlice;
//   unsigned int ArraySize;
// };

// /* 4833 */
// struct D3D10_TEX3D_SRV
// {
//   unsigned int MostDetailedMip;
//   unsigned int MipLevels;
// };

// /* 4834 */
// union $B8A7002885C21609F7163A96BD10B60A
// {
//   D3D10_BUFFER_SRV Buffer;
//   D3D10_TEX1D_SRV Texture1D;
//   D3D10_TEX1D_ARRAY_SRV Texture1DArray;
//   D3D10_TEX2D_SRV Texture2D;
//   D3D10_TEX2D_ARRAY_SRV Texture2DArray;
//   D3D10_TEX2DMS_SRV Texture2DMS;
//   D3D10_TEX2DMS_ARRAY_SRV Texture2DMSArray;
//   D3D10_TEX3D_SRV Texture3D;
//   D3D10_TEXCUBE_SRV TextureCube;
// };

// /* 4835 */
// struct D3D10_SHADER_RESOURCE_VIEW_DESC
// {
//   DXGI_FORMAT Format;
//   D3D_SRV_DIMENSION ViewDimension;
//   $B8A7002885C21609F7163A96BD10B60A ___u2;
// };

// /* 4836 */
// struct __cppobj ID3D10ShaderResourceView : ID3D10View
// {
// };

// /* 4837 */
// struct __cppobj ID3D10PixelShader : ID3D10DeviceChild
// {
// };

// /* 4838 */
// struct D3D10_SAMPLER_DESC
// {
//   D3D10_FILTER Filter;
//   D3D10_TEXTURE_ADDRESS_MODE AddressU;
//   D3D10_TEXTURE_ADDRESS_MODE AddressV;
//   D3D10_TEXTURE_ADDRESS_MODE AddressW;
//   float MipLODBias;
//   unsigned int MaxAnisotropy;
//   D3D10_COMPARISON_FUNC ComparisonFunc;
//   float BorderColor[4];
//   float MinLOD;
//   float MaxLOD;
// };

// /* 4839 */
// struct __cppobj ID3D10SamplerState : ID3D10DeviceChild
// {
// };

// /* 4840 */
// struct __cppobj ID3D10VertexShader : ID3D10DeviceChild
// {
// };

// /* 4841 */
// struct __cppobj ID3D10InputLayout : ID3D10DeviceChild
// {
// };

// /* 4842 */
// struct __cppobj ID3D10GeometryShader : ID3D10DeviceChild
// {
// };

// /* 4843 */
// struct __cppobj ID3D10Asynchronous : ID3D10DeviceChild
// {
// };

// /* 4844 */
// struct D3D10_QUERY_DESC
// {
//   D3D10_QUERY Query;
//   unsigned int MiscFlags;
// };

// /* 4845 */
// struct __cppobj ID3D10Query : ID3D10Asynchronous
// {
// };

// /* 4846 */
// struct __cppobj ID3D10Predicate : ID3D10Query
// {
// };

// /* 4847 */
// struct D3D10_TEX2D_RTV
// {
//   unsigned int MipSlice;
// };

// /* 4848 */
// struct D3D10_TEX2D_ARRAY_RTV
// {
//   unsigned int MipSlice;
//   unsigned int FirstArraySlice;
//   unsigned int ArraySize;
// };

// /* 4849 */
// struct D3D10_TEX2DMS_RTV
// {
//   unsigned int UnusedField_NothingToDefine;
// };

// /* 4850 */
// struct D3D10_TEX2DMS_ARRAY_RTV
// {
//   unsigned int FirstArraySlice;
//   unsigned int ArraySize;
// };

// /* 4851 */
// union $8F5EF863EBBE314A50321B98E6D77ACD
// {
//   D3D10_BUFFER_RTV Buffer;
//   D3D10_TEX1D_RTV Texture1D;
//   D3D10_TEX1D_ARRAY_RTV Texture1DArray;
//   D3D10_TEX2D_RTV Texture2D;
//   D3D10_TEX2D_ARRAY_RTV Texture2DArray;
//   D3D10_TEX2DMS_RTV Texture2DMS;
//   D3D10_TEX2DMS_ARRAY_RTV Texture2DMSArray;
//   D3D10_TEX3D_RTV Texture3D;
// };

// /* 4852 */
// struct D3D10_RENDER_TARGET_VIEW_DESC
// {
//   DXGI_FORMAT Format;
//   D3D10_RTV_DIMENSION ViewDimension;
//   $8F5EF863EBBE314A50321B98E6D77ACD ___u2;
// };

// /* 4853 */
// struct __cppobj ID3D10RenderTargetView : ID3D10View
// {
// };

// /* 4854 */
// struct D3D10_TEX2D_DSV
// {
//   unsigned int MipSlice;
// };

// /* 4855 */
// struct D3D10_TEX2D_ARRAY_DSV
// {
//   unsigned int MipSlice;
//   unsigned int FirstArraySlice;
//   unsigned int ArraySize;
// };

// /* 4856 */
// struct D3D10_TEX2DMS_ARRAY_DSV
// {
//   unsigned int FirstArraySlice;
//   unsigned int ArraySize;
// };

// /* 4857 */
// union $30D22F2EEDCEA5A8E5E83680710F8587
// {
//   D3D10_TEX1D_DSV Texture1D;
//   D3D10_TEX1D_ARRAY_DSV Texture1DArray;
//   D3D10_TEX2D_DSV Texture2D;
//   D3D10_TEX2D_ARRAY_DSV Texture2DArray;
//   D3D10_TEX2DMS_DSV Texture2DMS;
//   D3D10_TEX2DMS_ARRAY_DSV Texture2DMSArray;
// };

// /* 4858 */
// struct D3D10_DEPTH_STENCIL_VIEW_DESC
// {
//   DXGI_FORMAT Format;
//   D3D10_DSV_DIMENSION ViewDimension;
//   $30D22F2EEDCEA5A8E5E83680710F8587 ___u2;
// };

// /* 4859 */
// struct __cppobj ID3D10DepthStencilView : ID3D10View
// {
// };

// /* 4860 */
// struct D3D10_BLEND_DESC
// {
//   int AlphaToCoverageEnable;
//   int BlendEnable[8];
//   D3D10_BLEND SrcBlend;
//   D3D10_BLEND DestBlend;
//   D3D10_BLEND_OP BlendOp;
//   D3D10_BLEND SrcBlendAlpha;
//   D3D10_BLEND DestBlendAlpha;
//   D3D10_BLEND_OP BlendOpAlpha;
//   unsigned __int8 RenderTargetWriteMask[8];
// };

// /* 4861 */
// struct __cppobj ID3D10BlendState : ID3D10DeviceChild
// {
// };

// /* 4862 */
// struct D3D10_DEPTH_STENCILOP_DESC
// {
//   D3D10_STENCIL_OP StencilFailOp;
//   D3D10_STENCIL_OP StencilDepthFailOp;
//   D3D10_STENCIL_OP StencilPassOp;
//   D3D10_COMPARISON_FUNC StencilFunc;
// };

// /* 4863 */
// struct D3D10_DEPTH_STENCIL_DESC
// {
//   int DepthEnable;
//   D3D10_DEPTH_WRITE_MASK DepthWriteMask;
//   D3D10_COMPARISON_FUNC DepthFunc;
//   int StencilEnable;
//   unsigned __int8 StencilReadMask;
//   unsigned __int8 StencilWriteMask;
//   D3D10_DEPTH_STENCILOP_DESC FrontFace;
//   D3D10_DEPTH_STENCILOP_DESC BackFace;
// };

// /* 4864 */
// struct __cppobj ID3D10DepthStencilState : ID3D10DeviceChild
// {
// };

// /* 4865 */
// struct D3D10_RASTERIZER_DESC
// {
//   D3D10_FILL_MODE FillMode;
//   D3D10_CULL_MODE CullMode;
//   int FrontCounterClockwise;
//   int DepthBias;
//   float DepthBiasClamp;
//   float SlopeScaledDepthBias;
//   int DepthClipEnable;
//   int ScissorEnable;
//   int MultisampleEnable;
//   int AntialiasedLineEnable;
// };

// /* 4866 */
// struct __cppobj ID3D10RasterizerState : ID3D10DeviceChild
// {
// };

// /* 4867 */
// const struct D3D10_VIEWPORT
// {
//   int TopLeftX;
//   int TopLeftY;
//   unsigned int Width;
//   unsigned int Height;
//   float MinDepth;
//   float MaxDepth;
// };

// /* 4868 */
// const struct D3D10_BOX
// {
//   unsigned int left;
//   unsigned int top;
//   unsigned int front;
//   unsigned int right;
//   unsigned int bottom;
//   unsigned int back;
// };

// /* 4869 */
// const struct D3D10_SUBRESOURCE_DATA
// {
//   const void *pSysMem;
//   unsigned int SysMemPitch;
//   unsigned int SysMemSlicePitch;
// };

// /* 4870 */
// const struct D3D10_TEXTURE1D_DESC
// {
//   unsigned int Width;
//   unsigned int MipLevels;
//   unsigned int ArraySize;
//   DXGI_FORMAT Format;
//   D3D10_USAGE Usage;
//   unsigned int BindFlags;
//   unsigned int CPUAccessFlags;
//   unsigned int MiscFlags;
// };

// /* 4871 */
// struct __cppobj ID3D10Texture1D : ID3D10Resource
// {
// };

// /* 4872 */
// struct DXGI_SAMPLE_DESC
// {
//   unsigned int Count;
//   unsigned int Quality;
// };

// /* 4873 */
// const struct D3D10_TEXTURE2D_DESC
// {
//   unsigned int Width;
//   unsigned int Height;
//   unsigned int MipLevels;
//   unsigned int ArraySize;
//   DXGI_FORMAT Format;
//   DXGI_SAMPLE_DESC SampleDesc;
//   D3D10_USAGE Usage;
//   unsigned int BindFlags;
//   unsigned int CPUAccessFlags;
//   unsigned int MiscFlags;
// };

// /* 4874 */
// struct __cppobj ID3D10Texture2D : ID3D10Resource
// {
// };

// /* 4875 */
// const struct D3D10_TEXTURE3D_DESC
// {
//   unsigned int Width;
//   unsigned int Height;
//   unsigned int Depth;
//   unsigned int MipLevels;
//   DXGI_FORMAT Format;
//   D3D10_USAGE Usage;
//   unsigned int BindFlags;
//   unsigned int CPUAccessFlags;
//   unsigned int MiscFlags;
// };

// /* 4876 */
// struct __cppobj ID3D10Texture3D : ID3D10Resource
// {
// };

// /* 4877 */
// const struct D3D10_INPUT_ELEMENT_DESC
// {
//   const char *SemanticName;
//   unsigned int SemanticIndex;
//   DXGI_FORMAT Format;
//   unsigned int InputSlot;
//   unsigned int AlignedByteOffset;
//   D3D10_INPUT_CLASSIFICATION InputSlotClass;
//   unsigned int InstanceDataStepRate;
// };

// /* 4878 */
// const struct __declspec(align(2)) D3D10_SO_DECLARATION_ENTRY
// {
//   const char *SemanticName;
//   unsigned int SemanticIndex;
//   unsigned __int8 StartComponent;
//   unsigned __int8 ComponentCount;
//   unsigned __int8 OutputSlot;
// };

// /* 4879 */
// const struct D3D10_COUNTER_DESC
// {
//   D3D10_COUNTER Counter;
//   unsigned int MiscFlags;
// };

// /* 4880 */
// struct __cppobj ID3D10Counter : ID3D10Asynchronous
// {
// };

// /* 4881 */
// struct __declspec(align(4)) D3D10_COUNTER_INFO
// {
//   D3D10_COUNTER LastDeviceDependentCounter;
//   unsigned int NumSimultaneousCounters;
//   unsigned __int8 NumDetectableParallelUnits;
// };

// /* 4882 */
// struct /*VFT*/ ID3D10Device_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *VSSetConstantBuffers)(ID3D10Device *this, unsigned int, unsigned int, ID3D10Buffer *const *);
//   void (__stdcall *PSSetShaderResources)(ID3D10Device *this, unsigned int, unsigned int, ID3D10ShaderResourceView *const *);
//   void (__stdcall *PSSetShader)(ID3D10Device *this, ID3D10PixelShader *);
//   void (__stdcall *PSSetSamplers)(ID3D10Device *this, unsigned int, unsigned int, ID3D10SamplerState *const *);
//   void (__stdcall *VSSetShader)(ID3D10Device *this, ID3D10VertexShader *);
//   void (__stdcall *DrawIndexed)(ID3D10Device *this, unsigned int, unsigned int, int);
//   void (__stdcall *Draw)(ID3D10Device *this, unsigned int, unsigned int);
//   void (__stdcall *PSSetConstantBuffers)(ID3D10Device *this, unsigned int, unsigned int, ID3D10Buffer *const *);
//   void (__stdcall *IASetInputLayout)(ID3D10Device *this, ID3D10InputLayout *);
//   void (__stdcall *IASetVertexBuffers)(ID3D10Device *this, unsigned int, unsigned int, ID3D10Buffer *const *, const unsigned int *, const unsigned int *);
//   void (__stdcall *IASetIndexBuffer)(ID3D10Device *this, ID3D10Buffer *, DXGI_FORMAT, unsigned int);
//   void (__stdcall *DrawIndexedInstanced)(ID3D10Device *this, unsigned int, unsigned int, unsigned int, int, unsigned int);
//   void (__stdcall *DrawInstanced)(ID3D10Device *this, unsigned int, unsigned int, unsigned int, unsigned int);
//   void (__stdcall *GSSetConstantBuffers)(ID3D10Device *this, unsigned int, unsigned int, ID3D10Buffer *const *);
//   void (__stdcall *GSSetShader)(ID3D10Device *this, ID3D10GeometryShader *);
//   void (__stdcall *IASetPrimitiveTopology)(ID3D10Device *this, D3D_PRIMITIVE_TOPOLOGY);
//   void (__stdcall *VSSetShaderResources)(ID3D10Device *this, unsigned int, unsigned int, ID3D10ShaderResourceView *const *);
//   void (__stdcall *VSSetSamplers)(ID3D10Device *this, unsigned int, unsigned int, ID3D10SamplerState *const *);
//   void (__stdcall *SetPredication)(ID3D10Device *this, ID3D10Predicate *, int);
//   void (__stdcall *GSSetShaderResources)(ID3D10Device *this, unsigned int, unsigned int, ID3D10ShaderResourceView *const *);
//   void (__stdcall *GSSetSamplers)(ID3D10Device *this, unsigned int, unsigned int, ID3D10SamplerState *const *);
//   void (__stdcall *OMSetRenderTargets)(ID3D10Device *this, unsigned int, ID3D10RenderTargetView *const *, ID3D10DepthStencilView *);
//   void (__stdcall *OMSetBlendState)(ID3D10Device *this, ID3D10BlendState *, const float *, unsigned int);
//   void (__stdcall *OMSetDepthStencilState)(ID3D10Device *this, ID3D10DepthStencilState *, unsigned int);
//   void (__stdcall *SOSetTargets)(ID3D10Device *this, unsigned int, ID3D10Buffer *const *, const unsigned int *);
//   void (__stdcall *DrawAuto)(ID3D10Device *this);
//   void (__stdcall *RSSetState)(ID3D10Device *this, ID3D10RasterizerState *);
//   void (__stdcall *RSSetViewports)(ID3D10Device *this, unsigned int, const D3D10_VIEWPORT *);
//   void (__stdcall *RSSetScissorRects)(ID3D10Device *this, unsigned int, const tagRECT *);
//   void (__stdcall *CopySubresourceRegion)(ID3D10Device *this, ID3D10Resource *, unsigned int, unsigned int, unsigned int, unsigned int, ID3D10Resource *, unsigned int, const D3D10_BOX *);
//   void (__stdcall *CopyResource)(ID3D10Device *this, ID3D10Resource *, ID3D10Resource *);
//   void (__stdcall *UpdateSubresource)(ID3D10Device *this, ID3D10Resource *, unsigned int, const D3D10_BOX *, const void *, unsigned int, unsigned int);
//   void (__stdcall *ClearRenderTargetView)(ID3D10Device *this, ID3D10RenderTargetView *, const float *);
//   void (__stdcall *ClearDepthStencilView)(ID3D10Device *this, ID3D10DepthStencilView *, unsigned int, float, unsigned __int8);
//   void (__stdcall *GenerateMips)(ID3D10Device *this, ID3D10ShaderResourceView *);
//   void (__stdcall *ResolveSubresource)(ID3D10Device *this, ID3D10Resource *, unsigned int, ID3D10Resource *, unsigned int, DXGI_FORMAT);
//   void (__stdcall *VSGetConstantBuffers)(ID3D10Device *this, unsigned int, unsigned int, ID3D10Buffer **);
//   void (__stdcall *PSGetShaderResources)(ID3D10Device *this, unsigned int, unsigned int, ID3D10ShaderResourceView **);
//   void (__stdcall *PSGetShader)(ID3D10Device *this, ID3D10PixelShader **);
//   void (__stdcall *PSGetSamplers)(ID3D10Device *this, unsigned int, unsigned int, ID3D10SamplerState **);
//   void (__stdcall *VSGetShader)(ID3D10Device *this, ID3D10VertexShader **);
//   void (__stdcall *PSGetConstantBuffers)(ID3D10Device *this, unsigned int, unsigned int, ID3D10Buffer **);
//   void (__stdcall *IAGetInputLayout)(ID3D10Device *this, ID3D10InputLayout **);
//   void (__stdcall *IAGetVertexBuffers)(ID3D10Device *this, unsigned int, unsigned int, ID3D10Buffer **, unsigned int *, unsigned int *);
//   void (__stdcall *IAGetIndexBuffer)(ID3D10Device *this, ID3D10Buffer **, DXGI_FORMAT *, unsigned int *);
//   void (__stdcall *GSGetConstantBuffers)(ID3D10Device *this, unsigned int, unsigned int, ID3D10Buffer **);
//   void (__stdcall *GSGetShader)(ID3D10Device *this, ID3D10GeometryShader **);
//   void (__stdcall *IAGetPrimitiveTopology)(ID3D10Device *this, D3D_PRIMITIVE_TOPOLOGY *);
//   void (__stdcall *VSGetShaderResources)(ID3D10Device *this, unsigned int, unsigned int, ID3D10ShaderResourceView **);
//   void (__stdcall *VSGetSamplers)(ID3D10Device *this, unsigned int, unsigned int, ID3D10SamplerState **);
//   void (__stdcall *GetPredication)(ID3D10Device *this, ID3D10Predicate **, int *);
//   void (__stdcall *GSGetShaderResources)(ID3D10Device *this, unsigned int, unsigned int, ID3D10ShaderResourceView **);
//   void (__stdcall *GSGetSamplers)(ID3D10Device *this, unsigned int, unsigned int, ID3D10SamplerState **);
//   void (__stdcall *OMGetRenderTargets)(ID3D10Device *this, unsigned int, ID3D10RenderTargetView **, ID3D10DepthStencilView **);
//   void (__stdcall *OMGetBlendState)(ID3D10Device *this, ID3D10BlendState **, float *, unsigned int *);
//   void (__stdcall *OMGetDepthStencilState)(ID3D10Device *this, ID3D10DepthStencilState **, unsigned int *);
//   void (__stdcall *SOGetTargets)(ID3D10Device *this, unsigned int, ID3D10Buffer **, unsigned int *);
//   void (__stdcall *RSGetState)(ID3D10Device *this, ID3D10RasterizerState **);
//   void (__stdcall *RSGetViewports)(ID3D10Device *this, unsigned int *, D3D10_VIEWPORT *);
//   void (__stdcall *RSGetScissorRects)(ID3D10Device *this, unsigned int *, tagRECT *);
//   HRESULT (__stdcall *GetDeviceRemovedReason)(ID3D10Device *this);
//   HRESULT (__stdcall *SetExceptionMode)(ID3D10Device *this, unsigned int);
//   unsigned int (__stdcall *GetExceptionMode)(ID3D10Device *this);
//   HRESULT (__stdcall *GetPrivateData)(ID3D10Device *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D10Device *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D10Device *this, const _GUID *, const IUnknown *);
//   void (__stdcall *ClearState)(ID3D10Device *this);
//   void (__stdcall *Flush)(ID3D10Device *this);
//   HRESULT (__stdcall *CreateBuffer)(ID3D10Device *this, const D3D10_BUFFER_DESC *, const D3D10_SUBRESOURCE_DATA *, ID3D10Buffer **);
//   HRESULT (__stdcall *CreateTexture1D)(ID3D10Device *this, const D3D10_TEXTURE1D_DESC *, const D3D10_SUBRESOURCE_DATA *, ID3D10Texture1D **);
//   HRESULT (__stdcall *CreateTexture2D)(ID3D10Device *this, const D3D10_TEXTURE2D_DESC *, const D3D10_SUBRESOURCE_DATA *, ID3D10Texture2D **);
//   HRESULT (__stdcall *CreateTexture3D)(ID3D10Device *this, const D3D10_TEXTURE3D_DESC *, const D3D10_SUBRESOURCE_DATA *, ID3D10Texture3D **);
//   HRESULT (__stdcall *CreateShaderResourceView)(ID3D10Device *this, ID3D10Resource *, const D3D10_SHADER_RESOURCE_VIEW_DESC *, ID3D10ShaderResourceView **);
//   HRESULT (__stdcall *CreateRenderTargetView)(ID3D10Device *this, ID3D10Resource *, const D3D10_RENDER_TARGET_VIEW_DESC *, ID3D10RenderTargetView **);
//   HRESULT (__stdcall *CreateDepthStencilView)(ID3D10Device *this, ID3D10Resource *, const D3D10_DEPTH_STENCIL_VIEW_DESC *, ID3D10DepthStencilView **);
//   HRESULT (__stdcall *CreateInputLayout)(ID3D10Device *this, const D3D10_INPUT_ELEMENT_DESC *, unsigned int, const void *, unsigned int, ID3D10InputLayout **);
//   HRESULT (__stdcall *CreateVertexShader)(ID3D10Device *this, const void *, unsigned int, ID3D10VertexShader **);
//   HRESULT (__stdcall *CreateGeometryShader)(ID3D10Device *this, const void *, unsigned int, ID3D10GeometryShader **);
//   HRESULT (__stdcall *CreateGeometryShaderWithStreamOutput)(ID3D10Device *this, const void *, unsigned int, const D3D10_SO_DECLARATION_ENTRY *, unsigned int, unsigned int, ID3D10GeometryShader **);
//   HRESULT (__stdcall *CreatePixelShader)(ID3D10Device *this, const void *, unsigned int, ID3D10PixelShader **);
//   HRESULT (__stdcall *CreateBlendState)(ID3D10Device *this, const D3D10_BLEND_DESC *, ID3D10BlendState **);
//   HRESULT (__stdcall *CreateDepthStencilState)(ID3D10Device *this, const D3D10_DEPTH_STENCIL_DESC *, ID3D10DepthStencilState **);
//   HRESULT (__stdcall *CreateRasterizerState)(ID3D10Device *this, const D3D10_RASTERIZER_DESC *, ID3D10RasterizerState **);
//   HRESULT (__stdcall *CreateSamplerState)(ID3D10Device *this, const D3D10_SAMPLER_DESC *, ID3D10SamplerState **);
//   HRESULT (__stdcall *CreateQuery)(ID3D10Device *this, const D3D10_QUERY_DESC *, ID3D10Query **);
//   HRESULT (__stdcall *CreatePredicate)(ID3D10Device *this, const D3D10_QUERY_DESC *, ID3D10Predicate **);
//   HRESULT (__stdcall *CreateCounter)(ID3D10Device *this, const D3D10_COUNTER_DESC *, ID3D10Counter **);
//   HRESULT (__stdcall *CheckFormatSupport)(ID3D10Device *this, DXGI_FORMAT, unsigned int *);
//   HRESULT (__stdcall *CheckMultisampleQualityLevels)(ID3D10Device *this, DXGI_FORMAT, unsigned int, unsigned int *);
//   void (__stdcall *CheckCounterInfo)(ID3D10Device *this, D3D10_COUNTER_INFO *);
//   HRESULT (__stdcall *CheckCounter)(ID3D10Device *this, const D3D10_COUNTER_DESC *, D3D10_COUNTER_TYPE *, unsigned int *, char *, unsigned int *, char *, unsigned int *, char *, unsigned int *);
//   unsigned int (__stdcall *GetCreationFlags)(ID3D10Device *this);
//   HRESULT (__stdcall *OpenSharedResource)(ID3D10Device *this, void *, const _GUID *, void **);
//   void (__stdcall *SetTextFilterSize)(ID3D10Device *this, unsigned int, unsigned int);
//   void (__stdcall *GetTextFilterSize)(ID3D10Device *this, unsigned int *, unsigned int *);
// };

// /* 4883 */
// struct /*VFT*/ ID3D10DeviceChild_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D10DeviceChild *this, ID3D10Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D10DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D10DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D10DeviceChild *this, const _GUID *, const IUnknown *);
// };

// /* 4884 */
// struct D3D11_MAPPED_SUBRESOURCE
// {
//   void *pData;
//   unsigned int RowPitch;
//   unsigned int DepthPitch;
// };

// /* 4885 */
// struct __cppobj IDWriteLocalizedStrings : IUnknown
// {
// };

// /* 4886 */
// struct /*VFT*/ IDWriteLocalizedStrings_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   unsigned int (__stdcall *GetCount)(IDWriteLocalizedStrings *this);
//   HRESULT (__stdcall *FindLocaleName)(IDWriteLocalizedStrings *this, const wchar_t *, unsigned int *, int *);
//   HRESULT (__stdcall *GetLocaleNameLength)(IDWriteLocalizedStrings *this, unsigned int, unsigned int *);
//   HRESULT (__stdcall *GetLocaleName)(IDWriteLocalizedStrings *this, unsigned int, wchar_t *, unsigned int);
//   HRESULT (__stdcall *GetStringLength)(IDWriteLocalizedStrings *this, unsigned int, unsigned int *);
//   HRESULT (__stdcall *GetString)(IDWriteLocalizedStrings *this, unsigned int, wchar_t *, unsigned int);
// };

// /* 4887 */
// const struct D3D11_BUFFER_DESC
// {
//   unsigned int ByteWidth;
//   D3D11_USAGE Usage;
//   unsigned int BindFlags;
//   unsigned int CPUAccessFlags;
//   unsigned int MiscFlags;
//   unsigned int StructureByteStride;
// };

// /* 4888 */
// const struct D3D11_SUBRESOURCE_DATA
// {
//   const void *pSysMem;
//   unsigned int SysMemPitch;
//   unsigned int SysMemSlicePitch;
// };

// /* 4889 */
// struct __cppobj ID3D11DeviceChild : IUnknown
// {
// };

// /* 4890 */
// struct __cppobj ID3D11Resource : ID3D11DeviceChild
// {
// };

// /* 4891 */
// struct __cppobj ID3D11Buffer : ID3D11Resource
// {
// };

// /* 4892 */
// struct __cppobj ID3D11Device : IUnknown
// {
// };

// /* 4893 */
// const struct D3D11_TEXTURE1D_DESC
// {
//   unsigned int Width;
//   unsigned int MipLevels;
//   unsigned int ArraySize;
//   DXGI_FORMAT Format;
//   D3D11_USAGE Usage;
//   unsigned int BindFlags;
//   unsigned int CPUAccessFlags;
//   unsigned int MiscFlags;
// };

// /* 4894 */
// struct __cppobj ID3D11Texture1D : ID3D11Resource
// {
// };

// /* 4895 */
// const struct D3D11_TEXTURE2D_DESC
// {
//   unsigned int Width;
//   unsigned int Height;
//   unsigned int MipLevels;
//   unsigned int ArraySize;
//   DXGI_FORMAT Format;
//   DXGI_SAMPLE_DESC SampleDesc;
//   D3D11_USAGE Usage;
//   unsigned int BindFlags;
//   unsigned int CPUAccessFlags;
//   unsigned int MiscFlags;
// };

// /* 4896 */
// struct __cppobj ID3D11Texture2D : ID3D11Resource
// {
// };

// /* 4897 */
// const struct D3D11_TEXTURE3D_DESC
// {
//   unsigned int Width;
//   unsigned int Height;
//   unsigned int Depth;
//   unsigned int MipLevels;
//   DXGI_FORMAT Format;
//   D3D11_USAGE Usage;
//   unsigned int BindFlags;
//   unsigned int CPUAccessFlags;
//   unsigned int MiscFlags;
// };

// /* 4898 */
// struct __cppobj ID3D11Texture3D : ID3D11Resource
// {
// };

// /* 4899 */
// struct D3D11_BUFFER_SRV
// {
//   $545C80804CFDAA65132ED5A8382CA602 ___u0;
//   $44D74FBD1C023638CFA48FB7FF47174A ___u1;
// };

// /* 4900 */
// struct D3D11_TEX1D_SRV
// {
//   unsigned int MostDetailedMip;
//   unsigned int MipLevels;
// };

// /* 4901 */
// struct D3D11_TEX1D_ARRAY_SRV
// {
//   unsigned int MostDetailedMip;
//   unsigned int MipLevels;
//   unsigned int FirstArraySlice;
//   unsigned int ArraySize;
// };

// /* 4902 */
// struct D3D11_TEX2D_SRV
// {
//   unsigned int MostDetailedMip;
//   unsigned int MipLevels;
// };

// /* 4903 */
// struct D3D11_TEX2D_ARRAY_SRV
// {
//   unsigned int MostDetailedMip;
//   unsigned int MipLevels;
//   unsigned int FirstArraySlice;
//   unsigned int ArraySize;
// };

// /* 4904 */
// struct D3D11_TEX2DMS_SRV
// {
//   unsigned int UnusedField_NothingToDefine;
// };

// /* 4905 */
// struct D3D11_TEX2DMS_ARRAY_SRV
// {
//   unsigned int FirstArraySlice;
//   unsigned int ArraySize;
// };

// /* 4906 */
// struct D3D11_TEX3D_SRV
// {
//   unsigned int MostDetailedMip;
//   unsigned int MipLevels;
// };

// /* 4907 */
// struct D3D11_TEXCUBE_SRV
// {
//   unsigned int MostDetailedMip;
//   unsigned int MipLevels;
// };

// /* 4908 */
// struct D3D11_TEXCUBE_ARRAY_SRV
// {
//   unsigned int MostDetailedMip;
//   unsigned int MipLevels;
//   unsigned int First2DArrayFace;
//   unsigned int NumCubes;
// };

// /* 4909 */
// struct D3D11_BUFFEREX_SRV
// {
//   unsigned int FirstElement;
//   unsigned int NumElements;
//   unsigned int Flags;
// };

// /* 4910 */
// union $FD0DAE1C543464282520C88382FFAA1A
// {
//   D3D11_BUFFER_SRV Buffer;
//   D3D11_TEX1D_SRV Texture1D;
//   D3D11_TEX1D_ARRAY_SRV Texture1DArray;
//   D3D11_TEX2D_SRV Texture2D;
//   D3D11_TEX2D_ARRAY_SRV Texture2DArray;
//   D3D11_TEX2DMS_SRV Texture2DMS;
//   D3D11_TEX2DMS_ARRAY_SRV Texture2DMSArray;
//   D3D11_TEX3D_SRV Texture3D;
//   D3D11_TEXCUBE_SRV TextureCube;
//   D3D11_TEXCUBE_ARRAY_SRV TextureCubeArray;
//   D3D11_BUFFEREX_SRV BufferEx;
// };

// /* 4911 */
// const struct D3D11_SHADER_RESOURCE_VIEW_DESC
// {
//   DXGI_FORMAT Format;
//   D3D_SRV_DIMENSION ViewDimension;
//   $FD0DAE1C543464282520C88382FFAA1A ___u2;
// };

// /* 4912 */
// struct __cppobj ID3D11View : ID3D11DeviceChild
// {
// };

// /* 4913 */
// struct __cppobj ID3D11ShaderResourceView : ID3D11View
// {
// };

// /* 4914 */
// struct D3D11_BUFFER_UAV
// {
//   unsigned int FirstElement;
//   unsigned int NumElements;
//   unsigned int Flags;
// };

// /* 4915 */
// struct D3D11_TEX1D_UAV
// {
//   unsigned int MipSlice;
// };

// /* 4916 */
// struct D3D11_TEX1D_ARRAY_UAV
// {
//   unsigned int MipSlice;
//   unsigned int FirstArraySlice;
//   unsigned int ArraySize;
// };

// /* 4917 */
// struct D3D11_TEX2D_UAV
// {
//   unsigned int MipSlice;
// };

// /* 4918 */
// struct D3D11_TEX2D_ARRAY_UAV
// {
//   unsigned int MipSlice;
//   unsigned int FirstArraySlice;
//   unsigned int ArraySize;
// };

// /* 4919 */
// struct D3D11_TEX3D_UAV
// {
//   unsigned int MipSlice;
//   unsigned int FirstWSlice;
//   unsigned int WSize;
// };

// /* 4920 */
// union $2F1F0F33CD08C83F4BBEE02441D171F0
// {
//   D3D11_BUFFER_UAV Buffer;
//   D3D11_TEX1D_UAV Texture1D;
//   D3D11_TEX1D_ARRAY_UAV Texture1DArray;
//   D3D11_TEX2D_UAV Texture2D;
//   D3D11_TEX2D_ARRAY_UAV Texture2DArray;
//   D3D11_TEX3D_UAV Texture3D;
// };

// /* 4921 */
// const struct D3D11_UNORDERED_ACCESS_VIEW_DESC
// {
//   DXGI_FORMAT Format;
//   D3D11_UAV_DIMENSION ViewDimension;
//   $2F1F0F33CD08C83F4BBEE02441D171F0 ___u2;
// };

// /* 4922 */
// struct __cppobj ID3D11UnorderedAccessView : ID3D11View
// {
// };

// /* 4923 */
// struct D3D11_BUFFER_RTV
// {
//   $545C80804CFDAA65132ED5A8382CA602 ___u0;
//   $44D74FBD1C023638CFA48FB7FF47174A ___u1;
// };

// /* 4924 */
// struct D3D11_TEX1D_RTV
// {
//   unsigned int MipSlice;
// };

// /* 4925 */
// struct D3D11_TEX1D_ARRAY_RTV
// {
//   unsigned int MipSlice;
//   unsigned int FirstArraySlice;
//   unsigned int ArraySize;
// };

// /* 4926 */
// struct D3D11_TEX2D_RTV
// {
//   unsigned int MipSlice;
// };

// /* 4927 */
// struct D3D11_TEX2D_ARRAY_RTV
// {
//   unsigned int MipSlice;
//   unsigned int FirstArraySlice;
//   unsigned int ArraySize;
// };

// /* 4928 */
// struct D3D11_TEX2DMS_RTV
// {
//   unsigned int UnusedField_NothingToDefine;
// };

// /* 4929 */
// struct D3D11_TEX2DMS_ARRAY_RTV
// {
//   unsigned int FirstArraySlice;
//   unsigned int ArraySize;
// };

// /* 4930 */
// struct D3D11_TEX3D_RTV
// {
//   unsigned int MipSlice;
//   unsigned int FirstWSlice;
//   unsigned int WSize;
// };

// /* 4931 */
// union $510CC569F5AEF5AA2E6280B383BCEA8C
// {
//   D3D11_BUFFER_RTV Buffer;
//   D3D11_TEX1D_RTV Texture1D;
//   D3D11_TEX1D_ARRAY_RTV Texture1DArray;
//   D3D11_TEX2D_RTV Texture2D;
//   D3D11_TEX2D_ARRAY_RTV Texture2DArray;
//   D3D11_TEX2DMS_RTV Texture2DMS;
//   D3D11_TEX2DMS_ARRAY_RTV Texture2DMSArray;
//   D3D11_TEX3D_RTV Texture3D;
// };

// /* 4932 */
// const struct D3D11_RENDER_TARGET_VIEW_DESC
// {
//   DXGI_FORMAT Format;
//   D3D11_RTV_DIMENSION ViewDimension;
//   $510CC569F5AEF5AA2E6280B383BCEA8C ___u2;
// };

// /* 4933 */
// struct __cppobj ID3D11RenderTargetView : ID3D11View
// {
// };

// /* 4934 */
// struct D3D11_TEX1D_DSV
// {
//   unsigned int MipSlice;
// };

// /* 4935 */
// struct D3D11_TEX1D_ARRAY_DSV
// {
//   unsigned int MipSlice;
//   unsigned int FirstArraySlice;
//   unsigned int ArraySize;
// };

// /* 4936 */
// struct D3D11_TEX2D_DSV
// {
//   unsigned int MipSlice;
// };

// /* 4937 */
// struct D3D11_TEX2D_ARRAY_DSV
// {
//   unsigned int MipSlice;
//   unsigned int FirstArraySlice;
//   unsigned int ArraySize;
// };

// /* 4938 */
// struct D3D11_TEX2DMS_DSV
// {
//   unsigned int UnusedField_NothingToDefine;
// };

// /* 4939 */
// struct D3D11_TEX2DMS_ARRAY_DSV
// {
//   unsigned int FirstArraySlice;
//   unsigned int ArraySize;
// };

// /* 4940 */
// union $968FDAD2F8003D8337922D9BD2FC689A
// {
//   D3D11_TEX1D_DSV Texture1D;
//   D3D11_TEX1D_ARRAY_DSV Texture1DArray;
//   D3D11_TEX2D_DSV Texture2D;
//   D3D11_TEX2D_ARRAY_DSV Texture2DArray;
//   D3D11_TEX2DMS_DSV Texture2DMS;
//   D3D11_TEX2DMS_ARRAY_DSV Texture2DMSArray;
// };

// /* 4941 */
// const struct D3D11_DEPTH_STENCIL_VIEW_DESC
// {
//   DXGI_FORMAT Format;
//   D3D11_DSV_DIMENSION ViewDimension;
//   unsigned int Flags;
//   $968FDAD2F8003D8337922D9BD2FC689A ___u3;
// };

// /* 4942 */
// struct __cppobj ID3D11DepthStencilView : ID3D11View
// {
// };

// /* 4943 */
// const struct D3D11_INPUT_ELEMENT_DESC
// {
//   const char *SemanticName;
//   unsigned int SemanticIndex;
//   DXGI_FORMAT Format;
//   unsigned int InputSlot;
//   unsigned int AlignedByteOffset;
//   D3D11_INPUT_CLASSIFICATION InputSlotClass;
//   unsigned int InstanceDataStepRate;
// };

// /* 4944 */
// struct __cppobj ID3D11InputLayout : ID3D11DeviceChild
// {
// };

// /* 4945 */
// struct __cppobj ID3D11ClassLinkage : ID3D11DeviceChild
// {
// };

// /* 4946 */
// struct __cppobj ID3D11ClassInstance : ID3D11DeviceChild
// {
// };

// /* 4947 */
// struct D3D11_CLASS_INSTANCE_DESC
// {
//   unsigned int InstanceId;
//   unsigned int InstanceIndex;
//   unsigned int TypeId;
//   unsigned int ConstantBuffer;
//   unsigned int BaseConstantBufferOffset;
//   unsigned int BaseTexture;
//   unsigned int BaseSampler;
//   int Created;
// };

// /* 4948 */
// struct __cppobj ID3D11VertexShader : ID3D11DeviceChild
// {
// };

// /* 4949 */
// struct __cppobj ID3D11GeometryShader : ID3D11DeviceChild
// {
// };

// /* 4950 */
// const struct __declspec(align(2)) D3D11_SO_DECLARATION_ENTRY
// {
//   unsigned int Stream;
//   const char *SemanticName;
//   unsigned int SemanticIndex;
//   unsigned __int8 StartComponent;
//   unsigned __int8 ComponentCount;
//   unsigned __int8 OutputSlot;
// };

// /* 4951 */
// struct __cppobj ID3D11PixelShader : ID3D11DeviceChild
// {
// };

// /* 4952 */
// struct __cppobj ID3D11HullShader : ID3D11DeviceChild
// {
// };

// /* 4953 */
// struct __cppobj ID3D11DomainShader : ID3D11DeviceChild
// {
// };

// /* 4954 */
// struct __cppobj ID3D11ComputeShader : ID3D11DeviceChild
// {
// };

// /* 4955 */
// struct __declspec(align(4)) D3D11_RENDER_TARGET_BLEND_DESC
// {
//   int BlendEnable;
//   D3D11_BLEND SrcBlend;
//   D3D11_BLEND DestBlend;
//   D3D11_BLEND_OP BlendOp;
//   D3D11_BLEND SrcBlendAlpha;
//   D3D11_BLEND DestBlendAlpha;
//   D3D11_BLEND_OP BlendOpAlpha;
//   unsigned __int8 RenderTargetWriteMask;
// };

// /* 4956 */
// const struct D3D11_BLEND_DESC
// {
//   int AlphaToCoverageEnable;
//   int IndependentBlendEnable;
//   D3D11_RENDER_TARGET_BLEND_DESC RenderTarget[8];
// };

// /* 4957 */
// struct __cppobj ID3D11BlendState : ID3D11DeviceChild
// {
// };

// /* 4958 */
// struct D3D11_DEPTH_STENCILOP_DESC
// {
//   D3D11_STENCIL_OP StencilFailOp;
//   D3D11_STENCIL_OP StencilDepthFailOp;
//   D3D11_STENCIL_OP StencilPassOp;
//   D3D11_COMPARISON_FUNC StencilFunc;
// };

// /* 4959 */
// const struct D3D11_DEPTH_STENCIL_DESC
// {
//   int DepthEnable;
//   D3D11_DEPTH_WRITE_MASK DepthWriteMask;
//   D3D11_COMPARISON_FUNC DepthFunc;
//   int StencilEnable;
//   unsigned __int8 StencilReadMask;
//   unsigned __int8 StencilWriteMask;
//   D3D11_DEPTH_STENCILOP_DESC FrontFace;
//   D3D11_DEPTH_STENCILOP_DESC BackFace;
// };

// /* 4960 */
// struct __cppobj ID3D11DepthStencilState : ID3D11DeviceChild
// {
// };

// /* 4961 */
// const struct D3D11_RASTERIZER_DESC
// {
//   D3D11_FILL_MODE FillMode;
//   D3D11_CULL_MODE CullMode;
//   int FrontCounterClockwise;
//   int DepthBias;
//   float DepthBiasClamp;
//   float SlopeScaledDepthBias;
//   int DepthClipEnable;
//   int ScissorEnable;
//   int MultisampleEnable;
//   int AntialiasedLineEnable;
// };

// /* 4962 */
// struct __cppobj ID3D11RasterizerState : ID3D11DeviceChild
// {
// };

// /* 4963 */
// const struct D3D11_SAMPLER_DESC
// {
//   D3D11_FILTER Filter;
//   D3D11_TEXTURE_ADDRESS_MODE AddressU;
//   D3D11_TEXTURE_ADDRESS_MODE AddressV;
//   D3D11_TEXTURE_ADDRESS_MODE AddressW;
//   float MipLODBias;
//   unsigned int MaxAnisotropy;
//   D3D11_COMPARISON_FUNC ComparisonFunc;
//   float BorderColor[4];
//   float MinLOD;
//   float MaxLOD;
// };

// /* 4964 */
// struct __cppobj ID3D11SamplerState : ID3D11DeviceChild
// {
// };

// /* 4965 */
// const struct D3D11_QUERY_DESC
// {
//   D3D11_QUERY Query;
//   unsigned int MiscFlags;
// };

// /* 4966 */
// struct __cppobj ID3D11Asynchronous : ID3D11DeviceChild
// {
// };

// /* 4967 */
// struct __cppobj ID3D11Query : ID3D11Asynchronous
// {
// };

// /* 4968 */
// struct __cppobj ID3D11Predicate : ID3D11Query
// {
// };

// /* 4969 */
// const struct D3D11_COUNTER_DESC
// {
//   D3D11_COUNTER Counter;
//   unsigned int MiscFlags;
// };

// /* 4970 */
// struct __cppobj ID3D11Counter : ID3D11Asynchronous
// {
// };

// /* 4971 */
// struct __cppobj ID3D11DeviceContext : ID3D11DeviceChild
// {
// };

// /* 4972 */
// const struct D3D11_VIEWPORT
// {
//   float TopLeftX;
//   float TopLeftY;
//   float Width;
//   float Height;
//   float MinDepth;
//   float MaxDepth;
// };

// /* 4973 */
// const struct D3D11_BOX
// {
//   unsigned int left;
//   unsigned int top;
//   unsigned int front;
//   unsigned int right;
//   unsigned int bottom;
//   unsigned int back;
// };

// /* 4974 */
// struct __cppobj ID3D11CommandList : ID3D11DeviceChild
// {
// };

// /* 4975 */
// struct __declspec(align(4)) D3D11_COUNTER_INFO
// {
//   D3D11_COUNTER LastDeviceDependentCounter;
//   unsigned int NumSimultaneousCounters;
//   unsigned __int8 NumDetectableParallelUnits;
// };

// /* 4976 */
// struct /*VFT*/ ID3D11Device_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *CreateBuffer)(ID3D11Device *this, const D3D11_BUFFER_DESC *, const D3D11_SUBRESOURCE_DATA *, ID3D11Buffer **);
//   HRESULT (__stdcall *CreateTexture1D)(ID3D11Device *this, const D3D11_TEXTURE1D_DESC *, const D3D11_SUBRESOURCE_DATA *, ID3D11Texture1D **);
//   HRESULT (__stdcall *CreateTexture2D)(ID3D11Device *this, const D3D11_TEXTURE2D_DESC *, const D3D11_SUBRESOURCE_DATA *, ID3D11Texture2D **);
//   HRESULT (__stdcall *CreateTexture3D)(ID3D11Device *this, const D3D11_TEXTURE3D_DESC *, const D3D11_SUBRESOURCE_DATA *, ID3D11Texture3D **);
//   HRESULT (__stdcall *CreateShaderResourceView)(ID3D11Device *this, ID3D11Resource *, const D3D11_SHADER_RESOURCE_VIEW_DESC *, ID3D11ShaderResourceView **);
//   HRESULT (__stdcall *CreateUnorderedAccessView)(ID3D11Device *this, ID3D11Resource *, const D3D11_UNORDERED_ACCESS_VIEW_DESC *, ID3D11UnorderedAccessView **);
//   HRESULT (__stdcall *CreateRenderTargetView)(ID3D11Device *this, ID3D11Resource *, const D3D11_RENDER_TARGET_VIEW_DESC *, ID3D11RenderTargetView **);
//   HRESULT (__stdcall *CreateDepthStencilView)(ID3D11Device *this, ID3D11Resource *, const D3D11_DEPTH_STENCIL_VIEW_DESC *, ID3D11DepthStencilView **);
//   HRESULT (__stdcall *CreateInputLayout)(ID3D11Device *this, const D3D11_INPUT_ELEMENT_DESC *, unsigned int, const void *, unsigned int, ID3D11InputLayout **);
//   HRESULT (__stdcall *CreateVertexShader)(ID3D11Device *this, const void *, unsigned int, ID3D11ClassLinkage *, ID3D11VertexShader **);
//   HRESULT (__stdcall *CreateGeometryShader)(ID3D11Device *this, const void *, unsigned int, ID3D11ClassLinkage *, ID3D11GeometryShader **);
//   HRESULT (__stdcall *CreateGeometryShaderWithStreamOutput)(ID3D11Device *this, const void *, unsigned int, const D3D11_SO_DECLARATION_ENTRY *, unsigned int, const unsigned int *, unsigned int, unsigned int, ID3D11ClassLinkage *, ID3D11GeometryShader **);
//   HRESULT (__stdcall *CreatePixelShader)(ID3D11Device *this, const void *, unsigned int, ID3D11ClassLinkage *, ID3D11PixelShader **);
//   HRESULT (__stdcall *CreateHullShader)(ID3D11Device *this, const void *, unsigned int, ID3D11ClassLinkage *, ID3D11HullShader **);
//   HRESULT (__stdcall *CreateDomainShader)(ID3D11Device *this, const void *, unsigned int, ID3D11ClassLinkage *, ID3D11DomainShader **);
//   HRESULT (__stdcall *CreateComputeShader)(ID3D11Device *this, const void *, unsigned int, ID3D11ClassLinkage *, ID3D11ComputeShader **);
//   HRESULT (__stdcall *CreateClassLinkage)(ID3D11Device *this, ID3D11ClassLinkage **);
//   HRESULT (__stdcall *CreateBlendState)(ID3D11Device *this, const D3D11_BLEND_DESC *, ID3D11BlendState **);
//   HRESULT (__stdcall *CreateDepthStencilState)(ID3D11Device *this, const D3D11_DEPTH_STENCIL_DESC *, ID3D11DepthStencilState **);
//   HRESULT (__stdcall *CreateRasterizerState)(ID3D11Device *this, const D3D11_RASTERIZER_DESC *, ID3D11RasterizerState **);
//   HRESULT (__stdcall *CreateSamplerState)(ID3D11Device *this, const D3D11_SAMPLER_DESC *, ID3D11SamplerState **);
//   HRESULT (__stdcall *CreateQuery)(ID3D11Device *this, const D3D11_QUERY_DESC *, ID3D11Query **);
//   HRESULT (__stdcall *CreatePredicate)(ID3D11Device *this, const D3D11_QUERY_DESC *, ID3D11Predicate **);
//   HRESULT (__stdcall *CreateCounter)(ID3D11Device *this, const D3D11_COUNTER_DESC *, ID3D11Counter **);
//   HRESULT (__stdcall *CreateDeferredContext)(ID3D11Device *this, unsigned int, ID3D11DeviceContext **);
//   HRESULT (__stdcall *OpenSharedResource)(ID3D11Device *this, void *, const _GUID *, void **);
//   HRESULT (__stdcall *CheckFormatSupport)(ID3D11Device *this, DXGI_FORMAT, unsigned int *);
//   HRESULT (__stdcall *CheckMultisampleQualityLevels)(ID3D11Device *this, DXGI_FORMAT, unsigned int, unsigned int *);
//   void (__stdcall *CheckCounterInfo)(ID3D11Device *this, D3D11_COUNTER_INFO *);
//   HRESULT (__stdcall *CheckCounter)(ID3D11Device *this, const D3D11_COUNTER_DESC *, D3D11_COUNTER_TYPE *, unsigned int *, char *, unsigned int *, char *, unsigned int *, char *, unsigned int *);
//   HRESULT (__stdcall *CheckFeatureSupport)(ID3D11Device *this, D3D11_FEATURE, void *, unsigned int);
//   HRESULT (__stdcall *GetPrivateData)(ID3D11Device *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D11Device *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D11Device *this, const _GUID *, const IUnknown *);
//   D3D_FEATURE_LEVEL (__stdcall *GetFeatureLevel)(ID3D11Device *this);
//   unsigned int (__stdcall *GetCreationFlags)(ID3D11Device *this);
//   HRESULT (__stdcall *GetDeviceRemovedReason)(ID3D11Device *this);
//   void (__stdcall *GetImmediateContext)(ID3D11Device *this, ID3D11DeviceContext **);
//   HRESULT (__stdcall *SetExceptionMode)(ID3D11Device *this, unsigned int);
//   unsigned int (__stdcall *GetExceptionMode)(ID3D11Device *this);
// };

// /* 4977 */
// struct /*VFT*/ ID3D11DeviceChild_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D11DeviceChild *this, ID3D11Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D11DeviceChild *this, const _GUID *, const IUnknown *);
// };

// /* 4978 */
// struct DWRITE_GLYPH_METRICS
// {
//   int leftSideBearing;
//   unsigned int advanceWidth;
//   int rightSideBearing;
//   int topSideBearing;
//   unsigned int advanceHeight;
//   int bottomSideBearing;
//   int verticalOriginY;
// };

// /* 4979 */
// struct __cppobj IDWriteFontFileStream : IUnknown
// {
// };

// /* 4980 */
// struct /*VFT*/ IDWriteFontFileStream_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *ReadFileFragment)(IDWriteFontFileStream *this, const void **, unsigned __int64, unsigned __int64, void **);
//   void (__stdcall *ReleaseFileFragment)(IDWriteFontFileStream *this, void *);
//   HRESULT (__stdcall *GetFileSize)(IDWriteFontFileStream *this, unsigned __int64 *);
//   HRESULT (__stdcall *GetLastWriteTime)(IDWriteFontFileStream *this, unsigned __int64 *);
// };

// /* 4981 */
// struct __cppobj IDWriteFontCollection : IUnknown
// {
// };

// /* 4982 */
// struct __cppobj IDWriteFontList : IUnknown
// {
// };

// /* 4983 */
// struct __cppobj IDWriteFontFamily : IDWriteFontList
// {
// };

// /* 4984 */
// struct __cppobj IDWriteFont : IUnknown
// {
// };

// /* 4985 */
// struct DWRITE_FONT_METRICS
// {
//   unsigned __int16 designUnitsPerEm;
//   unsigned __int16 ascent;
//   unsigned __int16 descent;
//   __int16 lineGap;
//   unsigned __int16 capHeight;
//   unsigned __int16 xHeight;
//   __int16 underlinePosition;
//   unsigned __int16 underlineThickness;
//   __int16 strikethroughPosition;
//   unsigned __int16 strikethroughThickness;
// };

// /* 4986 */
// struct __cppobj IDWriteFontFace : IUnknown
// {
// };

// /* 4987 */
// struct __cppobj IDWriteFontFile : IUnknown
// {
// };

// /* 4988 */
// struct __cppobj IDWriteFontFileLoader : IUnknown
// {
// };

// /* 4989 */
// struct /*VFT*/ IDWriteFontFileLoader_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *CreateStreamFromKey)(IDWriteFontFileLoader *this, const void *, unsigned int, IDWriteFontFileStream **);
// };

// /* 4990 */
// struct /*VFT*/ IDWriteFontFile_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetReferenceKey)(IDWriteFontFile *this, const void **, unsigned int *);
//   HRESULT (__stdcall *GetLoader)(IDWriteFontFile *this, IDWriteFontFileLoader **);
//   HRESULT (__stdcall *Analyze)(IDWriteFontFile *this, int *, DWRITE_FONT_FILE_TYPE *, DWRITE_FONT_FACE_TYPE *, unsigned int *);
// };

// /* 4991 */
// const struct DWRITE_GLYPH_OFFSET
// {
//   float advanceOffset;
//   float ascenderOffset;
// };

// /* 4992 */
// struct __cppobj ID2D1SimplifiedGeometrySink : IUnknown
// {
// };

// /* 4993 */
// struct D2D_POINT_2F
// {
//   float x;
//   float y;
// };

// /* 4994 */
// const struct D2D1_BEZIER_SEGMENT
// {
//   D2D_POINT_2F point1;
//   D2D_POINT_2F point2;
//   D2D_POINT_2F point3;
// };

// /* 4995 */
// struct /*VFT*/ ID2D1SimplifiedGeometrySink_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *SetFillMode)(ID2D1SimplifiedGeometrySink *this, D2D1_FILL_MODE);
//   void (__stdcall *SetSegmentFlags)(ID2D1SimplifiedGeometrySink *this, D2D1_PATH_SEGMENT);
//   void (__stdcall *BeginFigure)(ID2D1SimplifiedGeometrySink *this, D2D_POINT_2F, D2D1_FIGURE_BEGIN);
//   void (__stdcall *AddLines)(ID2D1SimplifiedGeometrySink *this, const D2D_POINT_2F *, unsigned int);
//   void (__stdcall *AddBeziers)(ID2D1SimplifiedGeometrySink *this, const D2D1_BEZIER_SEGMENT *, unsigned int);
//   void (__stdcall *EndFigure)(ID2D1SimplifiedGeometrySink *this, D2D1_FIGURE_END);
//   HRESULT (__stdcall *Close)(ID2D1SimplifiedGeometrySink *this);
// };

// /* 4996 */
// struct __cppobj IDWriteRenderingParams : IUnknown
// {
// };

// /* 4997 */
// struct /*VFT*/ IDWriteRenderingParams_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   float (__stdcall *GetGamma)(IDWriteRenderingParams *this);
//   float (__stdcall *GetEnhancedContrast)(IDWriteRenderingParams *this);
//   float (__stdcall *GetClearTypeLevel)(IDWriteRenderingParams *this);
//   DWRITE_PIXEL_GEOMETRY (__stdcall *GetPixelGeometry)(IDWriteRenderingParams *this);
//   DWRITE_RENDERING_MODE (__stdcall *GetRenderingMode)(IDWriteRenderingParams *this);
// };

// /* 4998 */
// const struct DWRITE_MATRIX
// {
//   float m11;
//   float m12;
//   float m21;
//   float m22;
//   float dx;
//   float dy;
// };

// /* 4999 */
// struct /*VFT*/ IDWriteFontFace_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   DWRITE_FONT_FACE_TYPE (__stdcall *GetType)(IDWriteFontFace *this);
//   HRESULT (__stdcall *GetFiles)(IDWriteFontFace *this, unsigned int *, IDWriteFontFile **);
//   unsigned int (__stdcall *GetIndex)(IDWriteFontFace *this);
//   DWRITE_FONT_SIMULATIONS (__stdcall *GetSimulations)(IDWriteFontFace *this);
//   int (__stdcall *IsSymbolFont)(IDWriteFontFace *this);
//   void (__stdcall *GetMetrics)(IDWriteFontFace *this, DWRITE_FONT_METRICS *);
//   unsigned __int16 (__stdcall *GetGlyphCount)(IDWriteFontFace *this);
//   HRESULT (__stdcall *GetDesignGlyphMetrics)(IDWriteFontFace *this, const unsigned __int16 *, unsigned int, DWRITE_GLYPH_METRICS *, int);
//   HRESULT (__stdcall *GetGlyphIndicesA)(IDWriteFontFace *this, const unsigned int *, unsigned int, unsigned __int16 *);
//   HRESULT (__stdcall *TryGetFontTable)(IDWriteFontFace *this, unsigned int, const void **, unsigned int *, void **, int *);
//   void (__stdcall *ReleaseFontTable)(IDWriteFontFace *this, void *);
//   HRESULT (__stdcall *GetGlyphRunOutline)(IDWriteFontFace *this, float, const unsigned __int16 *, const float *, const DWRITE_GLYPH_OFFSET *, unsigned int, int, int, ID2D1SimplifiedGeometrySink *);
//   HRESULT (__stdcall *GetRecommendedRenderingMode)(IDWriteFontFace *this, float, float, DWRITE_MEASURING_MODE, IDWriteRenderingParams *, DWRITE_RENDERING_MODE *);
//   HRESULT (__stdcall *GetGdiCompatibleMetrics)(IDWriteFontFace *this, float, float, const DWRITE_MATRIX *, DWRITE_FONT_METRICS *);
//   HRESULT (__stdcall *GetGdiCompatibleGlyphMetrics)(IDWriteFontFace *this, float, float, const DWRITE_MATRIX *, int, const unsigned __int16 *, unsigned int, DWRITE_GLYPH_METRICS *, int);
// };

// /* 5000 */
// struct /*VFT*/ IDWriteFont_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetFontFamily)(IDWriteFont *this, IDWriteFontFamily **);
//   DWRITE_FONT_WEIGHT (__stdcall *GetWeight)(IDWriteFont *this);
//   DWRITE_FONT_STRETCH (__stdcall *GetStretch)(IDWriteFont *this);
//   DWRITE_FONT_STYLE (__stdcall *GetStyle)(IDWriteFont *this);
//   int (__stdcall *IsSymbolFont)(IDWriteFont *this);
//   HRESULT (__stdcall *GetFaceNames)(IDWriteFont *this, IDWriteLocalizedStrings **);
//   HRESULT (__stdcall *GetInformationalStrings)(IDWriteFont *this, DWRITE_INFORMATIONAL_STRING_ID, IDWriteLocalizedStrings **, int *);
//   DWRITE_FONT_SIMULATIONS (__stdcall *GetSimulations)(IDWriteFont *this);
//   void (__stdcall *GetMetrics)(IDWriteFont *this, DWRITE_FONT_METRICS *);
//   HRESULT (__stdcall *HasCharacter)(IDWriteFont *this, unsigned int, int *);
//   HRESULT (__stdcall *CreateFontFace)(IDWriteFont *this, IDWriteFontFace **);
// };

// /* 5001 */
// struct /*VFT*/ IDWriteFontCollection_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   unsigned int (__stdcall *GetFontFamilyCount)(IDWriteFontCollection *this);
//   HRESULT (__stdcall *GetFontFamily)(IDWriteFontCollection *this, unsigned int, IDWriteFontFamily **);
//   HRESULT (__stdcall *FindFamilyName)(IDWriteFontCollection *this, const wchar_t *, unsigned int *, int *);
//   HRESULT (__stdcall *GetFontFromFontFace)(IDWriteFontCollection *this, IDWriteFontFace *, IDWriteFont **);
// };

// /* 5002 */
// struct /*VFT*/ IDWriteFontList_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetFontCollection)(IDWriteFontList *this, IDWriteFontCollection **);
//   unsigned int (__stdcall *GetFontCount)(IDWriteFontList *this);
//   HRESULT (__stdcall *GetFont)(IDWriteFontList *this, unsigned int, IDWriteFont **);
// };

// /* 5003 */
// struct DWRITE_UNDERLINE
// {
//   float width;
//   float thickness;
//   float offset;
//   float runHeight;
//   DWRITE_READING_DIRECTION readingDirection;
//   DWRITE_FLOW_DIRECTION flowDirection;
//   const wchar_t *localeName;
//   DWRITE_MEASURING_MODE measuringMode;
// };

// /* 5004 */
// struct __cppobj IDWriteTypography : IUnknown
// {
// };

// /* 5005 */
// struct /*VFT*/ IDWriteTypography_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *AddFontFeature)(IDWriteTypography *this, DWRITE_FONT_FEATURE);
//   unsigned int (__stdcall *GetFontFeatureCount)(IDWriteTypography *this);
//   HRESULT (__stdcall *GetFontFeature)(IDWriteTypography *this, unsigned int, DWRITE_FONT_FEATURE *);
// };

// /* 5006 */
// struct DWRITE_TEXT_METRICS
// {
//   float left;
//   float top;
//   float width;
//   float widthIncludingTrailingWhitespace;
//   float height;
//   float layoutWidth;
//   float layoutHeight;
//   unsigned int maxBidiReorderingDepth;
//   unsigned int lineCount;
// };

// /* 5007 */
// struct DWRITE_LINE_METRICS
// {
//   unsigned int length;
//   unsigned int trailingWhitespaceLength;
//   unsigned int newlineLength;
//   float height;
//   float baseline;
//   int isTrimmed;
// };

// /* 5008 */
// struct DWRITE_TEXT_RANGE
// {
//   unsigned int startPosition;
//   unsigned int length;
// };

// /* 5009 */
// struct __cppobj IDWritePixelSnapping : IUnknown
// {
// };

// /* 5010 */
// struct /*VFT*/ IDWritePixelSnapping_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *IsPixelSnappingDisabled)(IDWritePixelSnapping *this, void *, int *);
//   HRESULT (__stdcall *GetCurrentTransform)(IDWritePixelSnapping *this, void *, DWRITE_MATRIX *);
//   HRESULT (__stdcall *GetPixelsPerDip)(IDWritePixelSnapping *this, void *, float *);
// };

// /* 5011 */
// struct DWRITE_GLYPH_RUN_DESCRIPTION
// {
//   const wchar_t *localeName;
//   const wchar_t *string;
//   unsigned int stringLength;
//   const unsigned __int16 *clusterMap;
//   unsigned int textPosition;
// };

// /* 5012 */
// struct DWRITE_HIT_TEST_METRICS
// {
//   unsigned int textPosition;
//   unsigned int length;
//   float left;
//   float top;
//   float width;
//   float height;
//   unsigned int bidiLevel;
//   int isText;
//   int isTrimmed;
// };

// /* 5013 */
// struct __cppobj ID2D1Factory : IUnknown
// {
// };

// /* 5014 */
// const struct D2D_RECT_F
// {
//   float left;
//   float top;
//   float right;
//   float bottom;
// };

// /* 5015 */
// struct __cppobj ID2D1Resource : IUnknown
// {
// };

// /* 5016 */
// const struct D2D_MATRIX_3X2_F
// {
//   float _11;
//   float _12;
//   float _21;
//   float _22;
//   float _31;
//   float _32;
// };

// /* 5017 */
// struct __cppobj ID2D1Geometry : ID2D1Resource
// {
// };

// /* 5018 */
// struct __cppobj ID2D1StrokeStyle : ID2D1Resource
// {
// };

// /* 5019 */
// const struct D2D1_TRIANGLE
// {
//   D2D_POINT_2F point1;
//   D2D_POINT_2F point2;
//   D2D_POINT_2F point3;
// };

// /* 5020 */
// struct __cppobj ID2D1TessellationSink : IUnknown
// {
// };

// /* 5021 */
// struct /*VFT*/ ID2D1TessellationSink_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *AddTriangles)(ID2D1TessellationSink *this, const D2D1_TRIANGLE *, unsigned int);
//   HRESULT (__stdcall *Close)(ID2D1TessellationSink *this);
// };

// /* 5022 */
// struct __cppobj ID2D1RectangleGeometry : ID2D1Geometry
// {
// };

// /* 5023 */
// const struct D2D1_ROUNDED_RECT
// {
//   D2D_RECT_F rect;
//   float radiusX;
//   float radiusY;
// };

// /* 5024 */
// struct __cppobj ID2D1RoundedRectangleGeometry : ID2D1Geometry
// {
// };

// /* 5025 */
// const struct D2D1_ELLIPSE
// {
//   D2D_POINT_2F point;
//   float radiusX;
//   float radiusY;
// };

// /* 5026 */
// struct __cppobj ID2D1EllipseGeometry : ID2D1Geometry
// {
// };

// /* 5027 */
// struct __cppobj ID2D1GeometryGroup : ID2D1Geometry
// {
// };

// /* 5028 */
// struct __cppobj ID2D1TransformedGeometry : ID2D1Geometry
// {
// };

// /* 5029 */
// struct __cppobj ID2D1GeometrySink : ID2D1SimplifiedGeometrySink
// {
// };

// /* 5030 */
// const struct D2D1_QUADRATIC_BEZIER_SEGMENT
// {
//   D2D_POINT_2F point1;
//   D2D_POINT_2F point2;
// };

// /* 5031 */
// struct D2D_SIZE_F
// {
//   float width;
//   float height;
// };

// /* 5032 */
// const struct D2D1_ARC_SEGMENT
// {
//   D2D_POINT_2F point;
//   D2D_SIZE_F size;
//   float rotationAngle;
//   D2D1_SWEEP_DIRECTION sweepDirection;
//   D2D1_ARC_SIZE arcSize;
// };

// /* 5033 */
// struct /*VFT*/ ID2D1GeometrySink_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *SetFillMode)(ID2D1SimplifiedGeometrySink *this, D2D1_FILL_MODE);
//   void (__stdcall *SetSegmentFlags)(ID2D1SimplifiedGeometrySink *this, D2D1_PATH_SEGMENT);
//   void (__stdcall *BeginFigure)(ID2D1SimplifiedGeometrySink *this, D2D_POINT_2F, D2D1_FIGURE_BEGIN);
//   void (__stdcall *AddLines)(ID2D1SimplifiedGeometrySink *this, const D2D_POINT_2F *, unsigned int);
//   void (__stdcall *AddBeziers)(ID2D1SimplifiedGeometrySink *this, const D2D1_BEZIER_SEGMENT *, unsigned int);
//   void (__stdcall *EndFigure)(ID2D1SimplifiedGeometrySink *this, D2D1_FIGURE_END);
//   HRESULT (__stdcall *Close)(ID2D1SimplifiedGeometrySink *this);
//   void (__stdcall *AddLine)(ID2D1GeometrySink *this, D2D_POINT_2F);
//   void (__stdcall *AddBezier)(ID2D1GeometrySink *this, const D2D1_BEZIER_SEGMENT *);
//   void (__stdcall *AddQuadraticBezier)(ID2D1GeometrySink *this, const D2D1_QUADRATIC_BEZIER_SEGMENT *);
//   void (__stdcall *AddQuadraticBeziers)(ID2D1GeometrySink *this, const D2D1_QUADRATIC_BEZIER_SEGMENT *, unsigned int);
//   void (__stdcall *AddArc)(ID2D1GeometrySink *this, const D2D1_ARC_SEGMENT *);
// };

// /* 5034 */
// struct __cppobj ID2D1PathGeometry : ID2D1Geometry
// {
// };

// /* 5035 */
// const struct D2D1_STROKE_STYLE_PROPERTIES
// {
//   D2D1_CAP_STYLE startCap;
//   D2D1_CAP_STYLE endCap;
//   D2D1_CAP_STYLE dashCap;
//   D2D1_LINE_JOIN lineJoin;
//   float miterLimit;
//   D2D1_DASH_STYLE dashStyle;
//   float dashOffset;
// };

// /* 5036 */
// const struct D2D1_DRAWING_STATE_DESCRIPTION
// {
//   D2D1_ANTIALIAS_MODE antialiasMode;
//   D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode;
//   unsigned __int64 tag1;
//   unsigned __int64 tag2;
//   D2D_MATRIX_3X2_F transform;
// };

// /* 5037 */
// struct __cppobj ID2D1DrawingStateBlock : ID2D1Resource
// {
// };

// /* 5038 */
// struct __cppobj IWICBitmapSource : IUnknown
// {
// };

// /* 5039 */
// struct __cppobj IWICPalette : IUnknown
// {
// };

// /* 5040 */
// struct /*VFT*/ IWICPalette_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *InitializePredefined)(IWICPalette *this, WICBitmapPaletteType, int);
//   HRESULT (__stdcall *InitializeCustom)(IWICPalette *this, unsigned int *, unsigned int);
//   HRESULT (__stdcall *InitializeFromBitmap)(IWICPalette *this, IWICBitmapSource *, unsigned int, int);
//   HRESULT (__stdcall *InitializeFromPalette)(IWICPalette *this, IWICPalette *);
//   HRESULT (__stdcall *GetType)(IWICPalette *this, WICBitmapPaletteType *);
//   HRESULT (__stdcall *GetColorCount)(IWICPalette *this, unsigned int *);
//   HRESULT (__stdcall *GetColors)(IWICPalette *this, unsigned int, unsigned int *, unsigned int *);
//   HRESULT (__stdcall *IsBlackWhite)(IWICPalette *this, int *);
//   HRESULT (__stdcall *IsGrayscale)(IWICPalette *this, int *);
//   HRESULT (__stdcall *HasAlpha)(IWICPalette *this, int *);
// };

// /* 5041 */
// const struct WICRect
// {
//   int X;
//   int Y;
//   int Width;
//   int Height;
// };

// /* 5042 */
// struct /*VFT*/ IWICBitmapSource_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetSize)(IWICBitmapSource *this, unsigned int *, unsigned int *);
//   HRESULT (__stdcall *GetPixelFormat)(IWICBitmapSource *this, _GUID *);
//   HRESULT (__stdcall *GetResolution)(IWICBitmapSource *this, long double *, long double *);
//   HRESULT (__stdcall *CopyPalette)(IWICBitmapSource *this, IWICPalette *);
//   HRESULT (__stdcall *CopyPixels)(IWICBitmapSource *this, const WICRect *, unsigned int, unsigned int, unsigned __int8 *);
// };

// /* 5043 */
// struct __cppobj IWICBitmapLock : IUnknown
// {
// };

// /* 5044 */
// struct /*VFT*/ IWICBitmapLock_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetSize)(IWICBitmapLock *this, unsigned int *, unsigned int *);
//   HRESULT (__stdcall *GetStride)(IWICBitmapLock *this, unsigned int *);
//   HRESULT (__stdcall *GetDataPointer)(IWICBitmapLock *this, unsigned int *, unsigned __int8 **);
//   HRESULT (__stdcall *GetPixelFormat)(IWICBitmapLock *this, _GUID *);
// };

// /* 5045 */
// struct __cppobj IWICBitmap : IWICBitmapSource
// {
// };

// /* 5046 */
// struct /*VFT*/ IWICBitmap_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetSize)(IWICBitmapSource *this, unsigned int *, unsigned int *);
//   HRESULT (__stdcall *GetPixelFormat)(IWICBitmapSource *this, _GUID *);
//   HRESULT (__stdcall *GetResolution)(IWICBitmapSource *this, long double *, long double *);
//   HRESULT (__stdcall *CopyPalette)(IWICBitmapSource *this, IWICPalette *);
//   HRESULT (__stdcall *CopyPixels)(IWICBitmapSource *this, const WICRect *, unsigned int, unsigned int, unsigned __int8 *);
//   HRESULT (__stdcall *Lock)(IWICBitmap *this, const WICRect *, unsigned int, IWICBitmapLock **);
//   HRESULT (__stdcall *SetPalette)(IWICBitmap *this, IWICPalette *);
//   HRESULT (__stdcall *SetResolution)(IWICBitmap *this, long double, long double);
// };

// /* 5047 */
// struct D2D1_PIXEL_FORMAT
// {
//   DXGI_FORMAT format;
//   D2D1_ALPHA_MODE alphaMode;
// };

// /* 5048 */
// const struct D2D1_RENDER_TARGET_PROPERTIES
// {
//   D2D1_RENDER_TARGET_TYPE type;
//   D2D1_PIXEL_FORMAT pixelFormat;
//   float dpiX;
//   float dpiY;
//   D2D1_RENDER_TARGET_USAGE usage;
//   D2D1_FEATURE_LEVEL minLevel;
// };

// /* 5049 */
// struct __cppobj ID2D1RenderTarget : ID2D1Resource
// {
// };

// /* 5050 */
// struct D2D_SIZE_U
// {
//   unsigned int width;
//   unsigned int height;
// };

// /* 5051 */
// const struct D2D1_HWND_RENDER_TARGET_PROPERTIES
// {
//   HWND__ *hwnd;
//   D2D_SIZE_U pixelSize;
//   D2D1_PRESENT_OPTIONS presentOptions;
// };

// /* 5052 */
// struct __cppobj ID2D1HwndRenderTarget : ID2D1RenderTarget
// {
// };

// /* 5053 */
// struct __cppobj IDXGIObject : IUnknown
// {
// };

// /* 5054 */
// struct /*VFT*/ IDXGIObject_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *SetPrivateData)(IDXGIObject *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(IDXGIObject *this, const _GUID *, const IUnknown *);
//   HRESULT (__stdcall *GetPrivateData)(IDXGIObject *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *GetParent)(IDXGIObject *this, const _GUID *, void **);
// };

// /* 5055 */
// struct __cppobj IDXGIDeviceSubObject : IDXGIObject
// {
// };

// /* 5056 */
// struct /*VFT*/ IDXGIDeviceSubObject_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *SetPrivateData)(IDXGIObject *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(IDXGIObject *this, const _GUID *, const IUnknown *);
//   HRESULT (__stdcall *GetPrivateData)(IDXGIObject *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *GetParent)(IDXGIObject *this, const _GUID *, void **);
//   HRESULT (__stdcall *GetDevice)(IDXGIDeviceSubObject *this, const _GUID *, void **);
// };

// /* 5057 */
// struct DXGI_SURFACE_DESC
// {
//   unsigned int Width;
//   unsigned int Height;
//   DXGI_FORMAT Format;
//   DXGI_SAMPLE_DESC SampleDesc;
// };

// /* 5058 */
// struct __cppobj IDXGISurface : IDXGIDeviceSubObject
// {
// };

// /* 5059 */
// struct DXGI_MAPPED_RECT
// {
//   int Pitch;
//   unsigned __int8 *pBits;
// };

// /* 5060 */
// struct /*VFT*/ IDXGISurface_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *SetPrivateData)(IDXGIObject *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(IDXGIObject *this, const _GUID *, const IUnknown *);
//   HRESULT (__stdcall *GetPrivateData)(IDXGIObject *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *GetParent)(IDXGIObject *this, const _GUID *, void **);
//   HRESULT (__stdcall *GetDevice)(IDXGIDeviceSubObject *this, const _GUID *, void **);
//   HRESULT (__stdcall *GetDesc)(IDXGISurface *this, DXGI_SURFACE_DESC *);
//   HRESULT (__stdcall *Map)(IDXGISurface *this, DXGI_MAPPED_RECT *, unsigned int);
//   HRESULT (__stdcall *Unmap)(IDXGISurface *this);
// };

// /* 5061 */
// struct __cppobj ID2D1DCRenderTarget : ID2D1RenderTarget
// {
// };

// /* 5062 */
// struct /*VFT*/ ID2D1Factory_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *ReloadSystemMetrics)(ID2D1Factory *this);
//   void (__stdcall *GetDesktopDpi)(ID2D1Factory *this, float *, float *);
//   HRESULT (__stdcall *CreateRectangleGeometry)(ID2D1Factory *this, const D2D_RECT_F *, ID2D1RectangleGeometry **);
//   HRESULT (__stdcall *CreateRoundedRectangleGeometry)(ID2D1Factory *this, const D2D1_ROUNDED_RECT *, ID2D1RoundedRectangleGeometry **);
//   HRESULT (__stdcall *CreateEllipseGeometry)(ID2D1Factory *this, const D2D1_ELLIPSE *, ID2D1EllipseGeometry **);
//   HRESULT (__stdcall *CreateGeometryGroup)(ID2D1Factory *this, D2D1_FILL_MODE, ID2D1Geometry **, unsigned int, ID2D1GeometryGroup **);
//   HRESULT (__stdcall *CreateTransformedGeometry)(ID2D1Factory *this, ID2D1Geometry *, const D2D_MATRIX_3X2_F *, ID2D1TransformedGeometry **);
//   HRESULT (__stdcall *CreatePathGeometry)(ID2D1Factory *this, ID2D1PathGeometry **);
//   HRESULT (__stdcall *CreateStrokeStyle)(ID2D1Factory *this, const D2D1_STROKE_STYLE_PROPERTIES *, const float *, unsigned int, ID2D1StrokeStyle **);
//   HRESULT (__stdcall *CreateDrawingStateBlock)(ID2D1Factory *this, const D2D1_DRAWING_STATE_DESCRIPTION *, IDWriteRenderingParams *, ID2D1DrawingStateBlock **);
//   HRESULT (__stdcall *CreateWicBitmapRenderTarget)(ID2D1Factory *this, IWICBitmap *, const D2D1_RENDER_TARGET_PROPERTIES *, ID2D1RenderTarget **);
//   HRESULT (__stdcall *CreateHwndRenderTarget)(ID2D1Factory *this, const D2D1_RENDER_TARGET_PROPERTIES *, const D2D1_HWND_RENDER_TARGET_PROPERTIES *, ID2D1HwndRenderTarget **);
//   HRESULT (__stdcall *CreateDxgiSurfaceRenderTarget)(ID2D1Factory *this, IDXGISurface *, const D2D1_RENDER_TARGET_PROPERTIES *, ID2D1RenderTarget **);
//   HRESULT (__stdcall *CreateDCRenderTarget)(ID2D1Factory *this, const D2D1_RENDER_TARGET_PROPERTIES *, ID2D1DCRenderTarget **);
// };

// /* 5063 */
// struct /*VFT*/ ID2D1Resource_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetFactory)(ID2D1Resource *this, ID2D1Factory **);
// };

// /* 5064 */
// const struct D2D1_BITMAP_PROPERTIES
// {
//   D2D1_PIXEL_FORMAT pixelFormat;
//   float dpiX;
//   float dpiY;
// };

// /* 5065 */
// struct __cppobj ID2D1Bitmap : ID2D1Resource
// {
// };

// /* 5066 */
// const struct D2D_POINT_2U
// {
//   unsigned int x;
//   unsigned int y;
// };

// /* 5067 */
// const struct D2D_RECT_U
// {
//   unsigned int left;
//   unsigned int top;
//   unsigned int right;
//   unsigned int bottom;
// };

// /* 5068 */
// struct /*VFT*/ ID2D1Bitmap_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetFactory)(ID2D1Resource *this, ID2D1Factory **);
//   D2D_SIZE_F (__stdcall *GetSize)(ID2D1Bitmap *this);
//   D2D_SIZE_U (__stdcall *GetPixelSize)(ID2D1Bitmap *this);
//   D2D1_PIXEL_FORMAT (__stdcall *GetPixelFormat)(ID2D1Bitmap *this);
//   void (__stdcall *GetDpi)(ID2D1Bitmap *this, float *, float *);
//   HRESULT (__stdcall *CopyFromBitmap)(ID2D1Bitmap *this, const D2D_POINT_2U *, ID2D1Bitmap *, const D2D_RECT_U *);
//   HRESULT (__stdcall *CopyFromRenderTarget)(ID2D1Bitmap *this, const D2D_POINT_2U *, ID2D1RenderTarget *, const D2D_RECT_U *);
//   HRESULT (__stdcall *CopyFromMemory)(ID2D1Bitmap *this, const D2D_RECT_U *, const void *, unsigned int);
// };

// /* 5069 */
// const struct D2D1_BITMAP_BRUSH_PROPERTIES
// {
//   D2D1_EXTEND_MODE extendModeX;
//   D2D1_EXTEND_MODE extendModeY;
//   D2D1_BITMAP_INTERPOLATION_MODE interpolationMode;
// };

// /* 5070 */
// const struct D2D1_BRUSH_PROPERTIES
// {
//   float opacity;
//   D2D_MATRIX_3X2_F transform;
// };

// /* 5071 */
// struct __cppobj ID2D1Brush : ID2D1Resource
// {
// };

// /* 5072 */
// struct /*VFT*/ ID2D1Brush_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetFactory)(ID2D1Resource *this, ID2D1Factory **);
//   void (__stdcall *SetOpacity)(ID2D1Brush *this, float);
//   void (__stdcall *SetTransform)(ID2D1Brush *this, const D2D_MATRIX_3X2_F *);
//   float (__stdcall *GetOpacity)(ID2D1Brush *this);
//   void (__stdcall *GetTransform)(ID2D1Brush *this, D2D_MATRIX_3X2_F *);
// };

// /* 5073 */
// struct __cppobj ID2D1BitmapBrush : ID2D1Brush
// {
// };

// /* 5074 */
// struct /*VFT*/ ID2D1BitmapBrush_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetFactory)(ID2D1Resource *this, ID2D1Factory **);
//   void (__stdcall *SetOpacity)(ID2D1Brush *this, float);
//   void (__stdcall *SetTransform)(ID2D1Brush *this, const D2D_MATRIX_3X2_F *);
//   float (__stdcall *GetOpacity)(ID2D1Brush *this);
//   void (__stdcall *GetTransform)(ID2D1Brush *this, D2D_MATRIX_3X2_F *);
//   void (__stdcall *SetExtendModeX)(ID2D1BitmapBrush *this, D2D1_EXTEND_MODE);
//   void (__stdcall *SetExtendModeY)(ID2D1BitmapBrush *this, D2D1_EXTEND_MODE);
//   void (__stdcall *SetInterpolationMode)(ID2D1BitmapBrush *this, D2D1_BITMAP_INTERPOLATION_MODE);
//   void (__stdcall *SetBitmap)(ID2D1BitmapBrush *this, ID2D1Bitmap *);
//   D2D1_EXTEND_MODE (__stdcall *GetExtendModeX)(ID2D1BitmapBrush *this);
//   D2D1_EXTEND_MODE (__stdcall *GetExtendModeY)(ID2D1BitmapBrush *this);
//   D2D1_BITMAP_INTERPOLATION_MODE (__stdcall *GetInterpolationMode)(ID2D1BitmapBrush *this);
//   void (__stdcall *GetBitmap)(ID2D1BitmapBrush *this, ID2D1Bitmap **);
// };

// /* 5075 */
// struct __cppobj ID2D1SolidColorBrush : ID2D1Brush
// {
// };

// /* 5076 */
// struct /*VFT*/ ID2D1SolidColorBrush_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetFactory)(ID2D1Resource *this, ID2D1Factory **);
//   void (__stdcall *SetOpacity)(ID2D1Brush *this, float);
//   void (__stdcall *SetTransform)(ID2D1Brush *this, const D2D_MATRIX_3X2_F *);
//   float (__stdcall *GetOpacity)(ID2D1Brush *this);
//   void (__stdcall *GetTransform)(ID2D1Brush *this, D2D_MATRIX_3X2_F *);
//   void (__stdcall *SetColor)(ID2D1SolidColorBrush *this, const _D3DCOLORVALUE *);
//   _D3DCOLORVALUE *(__stdcall *GetColor)(ID2D1SolidColorBrush *this, _D3DCOLORVALUE *result);
// };

// /* 5077 */
// const struct D2D1_GRADIENT_STOP
// {
//   float position;
//   _D3DCOLORVALUE color;
// };

// /* 5078 */
// struct __cppobj ID2D1GradientStopCollection : ID2D1Resource
// {
// };

// /* 5079 */
// struct /*VFT*/ ID2D1GradientStopCollection_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetFactory)(ID2D1Resource *this, ID2D1Factory **);
//   unsigned int (__stdcall *GetGradientStopCount)(ID2D1GradientStopCollection *this);
//   void (__stdcall *GetGradientStops)(ID2D1GradientStopCollection *this, D2D1_GRADIENT_STOP *, unsigned int);
//   D2D1_GAMMA (__stdcall *GetColorInterpolationGamma)(ID2D1GradientStopCollection *this);
//   D2D1_EXTEND_MODE (__stdcall *GetExtendMode)(ID2D1GradientStopCollection *this);
// };

// /* 5080 */
// const struct D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES
// {
//   D2D_POINT_2F startPoint;
//   D2D_POINT_2F endPoint;
// };

// /* 5081 */
// struct __cppobj ID2D1LinearGradientBrush : ID2D1Brush
// {
// };

// /* 5082 */
// struct /*VFT*/ ID2D1LinearGradientBrush_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetFactory)(ID2D1Resource *this, ID2D1Factory **);
//   void (__stdcall *SetOpacity)(ID2D1Brush *this, float);
//   void (__stdcall *SetTransform)(ID2D1Brush *this, const D2D_MATRIX_3X2_F *);
//   float (__stdcall *GetOpacity)(ID2D1Brush *this);
//   void (__stdcall *GetTransform)(ID2D1Brush *this, D2D_MATRIX_3X2_F *);
//   void (__stdcall *SetStartPoint)(ID2D1LinearGradientBrush *this, D2D_POINT_2F);
//   void (__stdcall *SetEndPoint)(ID2D1LinearGradientBrush *this, D2D_POINT_2F);
//   D2D_POINT_2F (__stdcall *GetStartPoint)(ID2D1LinearGradientBrush *this);
//   D2D_POINT_2F (__stdcall *GetEndPoint)(ID2D1LinearGradientBrush *this);
//   void (__stdcall *GetGradientStopCollection)(ID2D1LinearGradientBrush *this, ID2D1GradientStopCollection **);
// };

// /* 5083 */
// const struct D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES
// {
//   D2D_POINT_2F center;
//   D2D_POINT_2F gradientOriginOffset;
//   float radiusX;
//   float radiusY;
// };

// /* 5084 */
// struct __cppobj ID2D1RadialGradientBrush : ID2D1Brush
// {
// };

// /* 5085 */
// struct /*VFT*/ ID2D1RadialGradientBrush_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetFactory)(ID2D1Resource *this, ID2D1Factory **);
//   void (__stdcall *SetOpacity)(ID2D1Brush *this, float);
//   void (__stdcall *SetTransform)(ID2D1Brush *this, const D2D_MATRIX_3X2_F *);
//   float (__stdcall *GetOpacity)(ID2D1Brush *this);
//   void (__stdcall *GetTransform)(ID2D1Brush *this, D2D_MATRIX_3X2_F *);
//   void (__stdcall *SetCenter)(ID2D1RadialGradientBrush *this, D2D_POINT_2F);
//   void (__stdcall *SetGradientOriginOffset)(ID2D1RadialGradientBrush *this, D2D_POINT_2F);
//   void (__stdcall *SetRadiusX)(ID2D1RadialGradientBrush *this, float);
//   void (__stdcall *SetRadiusY)(ID2D1RadialGradientBrush *this, float);
//   D2D_POINT_2F (__stdcall *GetCenter)(ID2D1RadialGradientBrush *this);
//   D2D_POINT_2F (__stdcall *GetGradientOriginOffset)(ID2D1RadialGradientBrush *this);
//   float (__stdcall *GetRadiusX)(ID2D1RadialGradientBrush *this);
//   float (__stdcall *GetRadiusY)(ID2D1RadialGradientBrush *this);
//   void (__stdcall *GetGradientStopCollection)(ID2D1RadialGradientBrush *this, ID2D1GradientStopCollection **);
// };

// /* 5086 */
// struct __cppobj ID2D1BitmapRenderTarget : ID2D1RenderTarget
// {
// };

// /* 5087 */
// struct __cppobj ID2D1Layer : ID2D1Resource
// {
// };

// /* 5088 */
// struct /*VFT*/ ID2D1Layer_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetFactory)(ID2D1Resource *this, ID2D1Factory **);
//   D2D_SIZE_F (__stdcall *GetSize)(ID2D1Layer *this);
// };

// /* 5089 */
// struct __cppobj ID2D1Mesh : ID2D1Resource
// {
// };

// /* 5090 */
// struct /*VFT*/ ID2D1Mesh_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetFactory)(ID2D1Resource *this, ID2D1Factory **);
//   HRESULT (__stdcall *Open)(ID2D1Mesh *this, ID2D1TessellationSink **);
// };

// /* 5091 */
// struct __cppobj IDWriteTextFormat : IUnknown
// {
// };

// /* 5092 */
// const struct DWRITE_TRIMMING
// {
//   DWRITE_TRIMMING_GRANULARITY granularity;
//   unsigned int delimiter;
//   unsigned int delimiterCount;
// };

// /* 5093 */
// const struct DWRITE_GLYPH_RUN
// {
//   IDWriteFontFace *fontFace;
//   float fontEmSize;
//   unsigned int glyphCount;
//   const unsigned __int16 *glyphIndices;
//   const float *glyphAdvances;
//   const DWRITE_GLYPH_OFFSET *glyphOffsets;
//   int isSideways;
//   unsigned int bidiLevel;
// };

// /* 5094 */
// struct __cppobj IDWriteTextRenderer : IDWritePixelSnapping
// {
// };

// /* 5095 */
// const struct DWRITE_STRIKETHROUGH
// {
//   float width;
//   float thickness;
//   float offset;
//   DWRITE_READING_DIRECTION readingDirection;
//   DWRITE_FLOW_DIRECTION flowDirection;
//   const wchar_t *localeName;
//   DWRITE_MEASURING_MODE measuringMode;
// };

// /* 5096 */
// struct __cppobj IDWriteInlineObject : IUnknown
// {
// };

// /* 5097 */
// struct /*VFT*/ IDWriteTextRenderer_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *IsPixelSnappingDisabled)(IDWritePixelSnapping *this, void *, int *);
//   HRESULT (__stdcall *GetCurrentTransform)(IDWritePixelSnapping *this, void *, DWRITE_MATRIX *);
//   HRESULT (__stdcall *GetPixelsPerDip)(IDWritePixelSnapping *this, void *, float *);
//   HRESULT (__stdcall *DrawGlyphRun)(IDWriteTextRenderer *this, void *, float, float, DWRITE_MEASURING_MODE, const DWRITE_GLYPH_RUN *, const DWRITE_GLYPH_RUN_DESCRIPTION *, IUnknown *);
//   HRESULT (__stdcall *DrawUnderline)(IDWriteTextRenderer *this, void *, float, float, const DWRITE_UNDERLINE *, IUnknown *);
//   HRESULT (__stdcall *DrawStrikethrough)(IDWriteTextRenderer *this, void *, float, float, const DWRITE_STRIKETHROUGH *, IUnknown *);
//   HRESULT (__stdcall *DrawInlineObject)(IDWriteTextRenderer *this, void *, float, float, IDWriteInlineObject *, int, int, IUnknown *);
// };

// /* 5098 */
// struct DWRITE_INLINE_OBJECT_METRICS
// {
//   float width;
//   float height;
//   float baseline;
//   int supportsSideways;
// };

// /* 5099 */
// struct DWRITE_OVERHANG_METRICS
// {
//   float left;
//   float top;
//   float right;
//   float bottom;
// };

// /* 5100 */
// struct /*VFT*/ IDWriteInlineObject_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *Draw)(IDWriteInlineObject *this, void *, IDWriteTextRenderer *, float, float, int, int, IUnknown *);
//   HRESULT (__stdcall *GetMetrics)(IDWriteInlineObject *this, DWRITE_INLINE_OBJECT_METRICS *);
//   HRESULT (__stdcall *GetOverhangMetrics)(IDWriteInlineObject *this, DWRITE_OVERHANG_METRICS *);
//   HRESULT (__stdcall *GetBreakConditions)(IDWriteInlineObject *this, DWRITE_BREAK_CONDITION *, DWRITE_BREAK_CONDITION *);
// };

// /* 5101 */
// struct /*VFT*/ IDWriteTextFormat_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *SetTextAlignment)(IDWriteTextFormat *this, DWRITE_TEXT_ALIGNMENT);
//   HRESULT (__stdcall *SetParagraphAlignment)(IDWriteTextFormat *this, DWRITE_PARAGRAPH_ALIGNMENT);
//   HRESULT (__stdcall *SetWordWrapping)(IDWriteTextFormat *this, DWRITE_WORD_WRAPPING);
//   HRESULT (__stdcall *SetReadingDirection)(IDWriteTextFormat *this, DWRITE_READING_DIRECTION);
//   HRESULT (__stdcall *SetFlowDirection)(IDWriteTextFormat *this, DWRITE_FLOW_DIRECTION);
//   HRESULT (__stdcall *SetIncrementalTabStop)(IDWriteTextFormat *this, float);
//   HRESULT (__stdcall *SetTrimming)(IDWriteTextFormat *this, const DWRITE_TRIMMING *, IDWriteInlineObject *);
//   HRESULT (__stdcall *SetLineSpacing)(IDWriteTextFormat *this, DWRITE_LINE_SPACING_METHOD, float, float);
//   DWRITE_TEXT_ALIGNMENT (__stdcall *GetTextAlignment)(IDWriteTextFormat *this);
//   DWRITE_PARAGRAPH_ALIGNMENT (__stdcall *GetParagraphAlignment)(IDWriteTextFormat *this);
//   DWRITE_WORD_WRAPPING (__stdcall *GetWordWrapping)(IDWriteTextFormat *this);
//   DWRITE_READING_DIRECTION (__stdcall *GetReadingDirection)(IDWriteTextFormat *this);
//   DWRITE_FLOW_DIRECTION (__stdcall *GetFlowDirection)(IDWriteTextFormat *this);
//   float (__stdcall *GetIncrementalTabStop)(IDWriteTextFormat *this);
//   HRESULT (__stdcall *GetTrimming)(IDWriteTextFormat *this, DWRITE_TRIMMING *, IDWriteInlineObject **);
//   HRESULT (__stdcall *GetLineSpacing)(IDWriteTextFormat *this, DWRITE_LINE_SPACING_METHOD *, float *, float *);
//   HRESULT (__stdcall *GetFontCollection)(IDWriteTextFormat *this, IDWriteFontCollection **);
//   unsigned int (__stdcall *GetFontFamilyNameLength)(IDWriteTextFormat *this);
//   HRESULT (__stdcall *GetFontFamilyName)(IDWriteTextFormat *this, wchar_t *, unsigned int);
//   DWRITE_FONT_WEIGHT (__stdcall *GetFontWeight)(IDWriteTextFormat *this);
//   DWRITE_FONT_STYLE (__stdcall *GetFontStyle)(IDWriteTextFormat *this);
//   DWRITE_FONT_STRETCH (__stdcall *GetFontStretch)(IDWriteTextFormat *this);
//   float (__stdcall *GetFontSize)(IDWriteTextFormat *this);
//   unsigned int (__stdcall *GetLocaleNameLength)(IDWriteTextFormat *this);
//   HRESULT (__stdcall *GetLocaleName)(IDWriteTextFormat *this, wchar_t *, unsigned int);
// };

// /* 5102 */
// struct __cppobj IDWriteTextLayout : IDWriteTextFormat
// {
// };

// /* 5103 */
// struct DWRITE_CLUSTER_METRICS
// {
//   float width;
//   unsigned __int16 length;
//   unsigned __int16 canWrapLineAfter : 1;
//   unsigned __int16 isWhitespace : 1;
//   unsigned __int16 isNewline : 1;
//   unsigned __int16 isSoftHyphen : 1;
//   unsigned __int16 isRightToLeft : 1;
//   unsigned __int16 padding : 11;
// };

// /* 5104 */
// struct /*VFT*/ IDWriteTextLayout_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *SetTextAlignment)(IDWriteTextFormat *this, DWRITE_TEXT_ALIGNMENT);
//   HRESULT (__stdcall *SetParagraphAlignment)(IDWriteTextFormat *this, DWRITE_PARAGRAPH_ALIGNMENT);
//   HRESULT (__stdcall *SetWordWrapping)(IDWriteTextFormat *this, DWRITE_WORD_WRAPPING);
//   HRESULT (__stdcall *SetReadingDirection)(IDWriteTextFormat *this, DWRITE_READING_DIRECTION);
//   HRESULT (__stdcall *SetFlowDirection)(IDWriteTextFormat *this, DWRITE_FLOW_DIRECTION);
//   HRESULT (__stdcall *SetIncrementalTabStop)(IDWriteTextFormat *this, float);
//   HRESULT (__stdcall *SetTrimming)(IDWriteTextFormat *this, const DWRITE_TRIMMING *, IDWriteInlineObject *);
//   HRESULT (__stdcall *SetLineSpacing)(IDWriteTextFormat *this, DWRITE_LINE_SPACING_METHOD, float, float);
//   DWRITE_TEXT_ALIGNMENT (__stdcall *GetTextAlignment)(IDWriteTextFormat *this);
//   DWRITE_PARAGRAPH_ALIGNMENT (__stdcall *GetParagraphAlignment)(IDWriteTextFormat *this);
//   DWRITE_WORD_WRAPPING (__stdcall *GetWordWrapping)(IDWriteTextFormat *this);
//   DWRITE_READING_DIRECTION (__stdcall *GetReadingDirection)(IDWriteTextFormat *this);
//   DWRITE_FLOW_DIRECTION (__stdcall *GetFlowDirection)(IDWriteTextFormat *this);
//   float (__stdcall *GetIncrementalTabStop)(IDWriteTextFormat *this);
//   HRESULT (__stdcall *GetTrimming)(IDWriteTextFormat *this, DWRITE_TRIMMING *, IDWriteInlineObject **);
//   HRESULT (__stdcall *GetLineSpacing)(IDWriteTextFormat *this, DWRITE_LINE_SPACING_METHOD *, float *, float *);
//   HRESULT (__stdcall *GetFontCollection)(IDWriteTextFormat *this, IDWriteFontCollection **);
//   unsigned int (__stdcall *GetFontFamilyNameLength)(IDWriteTextFormat *this);
//   HRESULT (__stdcall *GetFontFamilyName)(IDWriteTextFormat *this, wchar_t *, unsigned int);
//   DWRITE_FONT_WEIGHT (__stdcall *GetFontWeight)(IDWriteTextFormat *this);
//   DWRITE_FONT_STYLE (__stdcall *GetFontStyle)(IDWriteTextFormat *this);
//   DWRITE_FONT_STRETCH (__stdcall *GetFontStretch)(IDWriteTextFormat *this);
//   float (__stdcall *GetFontSize)(IDWriteTextFormat *this);
//   unsigned int (__stdcall *GetLocaleNameLength)(IDWriteTextFormat *this);
//   HRESULT (__stdcall *GetLocaleName)(IDWriteTextFormat *this, wchar_t *, unsigned int);
//   HRESULT (__stdcall *SetMaxWidth)(IDWriteTextLayout *this, float);
//   HRESULT (__stdcall *SetMaxHeight)(IDWriteTextLayout *this, float);
//   HRESULT (__stdcall *SetFontCollection)(IDWriteTextLayout *this, IDWriteFontCollection *, DWRITE_TEXT_RANGE);
//   HRESULT (__stdcall *SetFontFamilyName)(IDWriteTextLayout *this, const wchar_t *, DWRITE_TEXT_RANGE);
//   HRESULT (__stdcall *SetFontWeight)(IDWriteTextLayout *this, DWRITE_FONT_WEIGHT, DWRITE_TEXT_RANGE);
//   HRESULT (__stdcall *SetFontStyle)(IDWriteTextLayout *this, DWRITE_FONT_STYLE, DWRITE_TEXT_RANGE);
//   HRESULT (__stdcall *SetFontStretch)(IDWriteTextLayout *this, DWRITE_FONT_STRETCH, DWRITE_TEXT_RANGE);
//   HRESULT (__stdcall *SetFontSize)(IDWriteTextLayout *this, float, DWRITE_TEXT_RANGE);
//   HRESULT (__stdcall *SetUnderline)(IDWriteTextLayout *this, int, DWRITE_TEXT_RANGE);
//   HRESULT (__stdcall *SetStrikethrough)(IDWriteTextLayout *this, int, DWRITE_TEXT_RANGE);
//   HRESULT (__stdcall *SetDrawingEffect)(IDWriteTextLayout *this, IUnknown *, DWRITE_TEXT_RANGE);
//   HRESULT (__stdcall *SetInlineObject)(IDWriteTextLayout *this, IDWriteInlineObject *, DWRITE_TEXT_RANGE);
//   HRESULT (__stdcall *SetTypography)(IDWriteTextLayout *this, IDWriteTypography *, DWRITE_TEXT_RANGE);
//   HRESULT (__stdcall *SetLocaleName)(IDWriteTextLayout *this, const wchar_t *, DWRITE_TEXT_RANGE);
//   float (__stdcall *GetMaxWidth)(IDWriteTextLayout *this);
//   float (__stdcall *GetMaxHeight)(IDWriteTextLayout *this);
//   HRESULT (__stdcall *GetFontCollection)(IDWriteTextLayout *this, unsigned int, IDWriteFontCollection **, DWRITE_TEXT_RANGE *);
//   HRESULT (__stdcall *GetFontFamilyNameLength)(IDWriteTextLayout *this, unsigned int, unsigned int *, DWRITE_TEXT_RANGE *);
//   HRESULT (__stdcall *GetFontFamilyName)(IDWriteTextLayout *this, unsigned int, wchar_t *, unsigned int, DWRITE_TEXT_RANGE *);
//   HRESULT (__stdcall *GetFontWeight)(IDWriteTextLayout *this, unsigned int, DWRITE_FONT_WEIGHT *, DWRITE_TEXT_RANGE *);
//   HRESULT (__stdcall *GetFontStyle)(IDWriteTextLayout *this, unsigned int, DWRITE_FONT_STYLE *, DWRITE_TEXT_RANGE *);
//   HRESULT (__stdcall *GetFontStretch)(IDWriteTextLayout *this, unsigned int, DWRITE_FONT_STRETCH *, DWRITE_TEXT_RANGE *);
//   HRESULT (__stdcall *GetFontSize)(IDWriteTextLayout *this, unsigned int, float *, DWRITE_TEXT_RANGE *);
//   HRESULT (__stdcall *GetUnderline)(IDWriteTextLayout *this, unsigned int, int *, DWRITE_TEXT_RANGE *);
//   HRESULT (__stdcall *GetStrikethrough)(IDWriteTextLayout *this, unsigned int, int *, DWRITE_TEXT_RANGE *);
//   HRESULT (__stdcall *GetDrawingEffect)(IDWriteTextLayout *this, unsigned int, IUnknown **, DWRITE_TEXT_RANGE *);
//   HRESULT (__stdcall *GetInlineObject)(IDWriteTextLayout *this, unsigned int, IDWriteInlineObject **, DWRITE_TEXT_RANGE *);
//   HRESULT (__stdcall *GetTypography)(IDWriteTextLayout *this, unsigned int, IDWriteTypography **, DWRITE_TEXT_RANGE *);
//   HRESULT (__stdcall *GetLocaleNameLength)(IDWriteTextLayout *this, unsigned int, unsigned int *, DWRITE_TEXT_RANGE *);
//   HRESULT (__stdcall *GetLocaleName)(IDWriteTextLayout *this, unsigned int, wchar_t *, unsigned int, DWRITE_TEXT_RANGE *);
//   HRESULT (__stdcall *Draw)(IDWriteTextLayout *this, void *, IDWriteTextRenderer *, float, float);
//   HRESULT (__stdcall *GetLineMetrics)(IDWriteTextLayout *this, DWRITE_LINE_METRICS *, unsigned int, unsigned int *);
//   HRESULT (__stdcall *GetMetrics)(IDWriteTextLayout *this, DWRITE_TEXT_METRICS *);
//   HRESULT (__stdcall *GetOverhangMetrics)(IDWriteTextLayout *this, DWRITE_OVERHANG_METRICS *);
//   HRESULT (__stdcall *GetClusterMetrics)(IDWriteTextLayout *this, DWRITE_CLUSTER_METRICS *, unsigned int, unsigned int *);
//   HRESULT (__stdcall *DetermineMinWidth)(IDWriteTextLayout *this, float *);
//   HRESULT (__stdcall *HitTestPoint)(IDWriteTextLayout *this, float, float, int *, int *, DWRITE_HIT_TEST_METRICS *);
//   HRESULT (__stdcall *HitTestTextPosition)(IDWriteTextLayout *this, unsigned int, int, float *, float *, DWRITE_HIT_TEST_METRICS *);
//   HRESULT (__stdcall *HitTestTextRange)(IDWriteTextLayout *this, unsigned int, unsigned int, float, float, DWRITE_HIT_TEST_METRICS *, unsigned int, unsigned int *);
// };

// /* 5105 */
// const struct D2D1_LAYER_PARAMETERS
// {
//   D2D_RECT_F contentBounds;
//   ID2D1Geometry *geometricMask;
//   D2D1_ANTIALIAS_MODE maskAntialiasMode;
//   D2D_MATRIX_3X2_F maskTransform;
//   float opacity;
//   ID2D1Brush *opacityBrush;
//   D2D1_LAYER_OPTIONS layerOptions;
// };

// /* 5106 */
// struct /*VFT*/ ID2D1RenderTarget_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetFactory)(ID2D1Resource *this, ID2D1Factory **);
//   HRESULT (__stdcall *CreateBitmap)(ID2D1RenderTarget *this, D2D_SIZE_U, const void *, unsigned int, const D2D1_BITMAP_PROPERTIES *, ID2D1Bitmap **);
//   HRESULT (__stdcall *CreateBitmapFromWicBitmap)(ID2D1RenderTarget *this, IWICBitmapSource *, const D2D1_BITMAP_PROPERTIES *, ID2D1Bitmap **);
//   HRESULT (__stdcall *CreateSharedBitmap)(ID2D1RenderTarget *this, const _GUID *, void *, const D2D1_BITMAP_PROPERTIES *, ID2D1Bitmap **);
//   HRESULT (__stdcall *CreateBitmapBrush)(ID2D1RenderTarget *this, ID2D1Bitmap *, const D2D1_BITMAP_BRUSH_PROPERTIES *, const D2D1_BRUSH_PROPERTIES *, ID2D1BitmapBrush **);
//   HRESULT (__stdcall *CreateSolidColorBrush)(ID2D1RenderTarget *this, const _D3DCOLORVALUE *, const D2D1_BRUSH_PROPERTIES *, ID2D1SolidColorBrush **);
//   HRESULT (__stdcall *CreateGradientStopCollection)(ID2D1RenderTarget *this, const D2D1_GRADIENT_STOP *, unsigned int, D2D1_GAMMA, D2D1_EXTEND_MODE, ID2D1GradientStopCollection **);
//   HRESULT (__stdcall *CreateLinearGradientBrush)(ID2D1RenderTarget *this, const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES *, const D2D1_BRUSH_PROPERTIES *, ID2D1GradientStopCollection *, ID2D1LinearGradientBrush **);
//   HRESULT (__stdcall *CreateRadialGradientBrush)(ID2D1RenderTarget *this, const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES *, const D2D1_BRUSH_PROPERTIES *, ID2D1GradientStopCollection *, ID2D1RadialGradientBrush **);
//   HRESULT (__stdcall *CreateCompatibleRenderTarget)(ID2D1RenderTarget *this, const D2D_SIZE_F *, const D2D_SIZE_U *, const D2D1_PIXEL_FORMAT *, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, ID2D1BitmapRenderTarget **);
//   HRESULT (__stdcall *CreateLayer)(ID2D1RenderTarget *this, const D2D_SIZE_F *, ID2D1Layer **);
//   HRESULT (__stdcall *CreateMesh)(ID2D1RenderTarget *this, ID2D1Mesh **);
//   void (__stdcall *DrawLine)(ID2D1RenderTarget *this, D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush *, float, ID2D1StrokeStyle *);
//   void (__stdcall *DrawRectangle)(ID2D1RenderTarget *this, const D2D_RECT_F *, ID2D1Brush *, float, ID2D1StrokeStyle *);
//   void (__stdcall *FillRectangle)(ID2D1RenderTarget *this, const D2D_RECT_F *, ID2D1Brush *);
//   void (__stdcall *DrawRoundedRectangle)(ID2D1RenderTarget *this, const D2D1_ROUNDED_RECT *, ID2D1Brush *, float, ID2D1StrokeStyle *);
//   void (__stdcall *FillRoundedRectangle)(ID2D1RenderTarget *this, const D2D1_ROUNDED_RECT *, ID2D1Brush *);
//   void (__stdcall *DrawEllipse)(ID2D1RenderTarget *this, const D2D1_ELLIPSE *, ID2D1Brush *, float, ID2D1StrokeStyle *);
//   void (__stdcall *FillEllipse)(ID2D1RenderTarget *this, const D2D1_ELLIPSE *, ID2D1Brush *);
//   void (__stdcall *DrawGeometry)(ID2D1RenderTarget *this, ID2D1Geometry *, ID2D1Brush *, float, ID2D1StrokeStyle *);
//   void (__stdcall *FillGeometry)(ID2D1RenderTarget *this, ID2D1Geometry *, ID2D1Brush *, ID2D1Brush *);
//   void (__stdcall *FillMesh)(ID2D1RenderTarget *this, ID2D1Mesh *, ID2D1Brush *);
//   void (__stdcall *FillOpacityMask)(ID2D1RenderTarget *this, ID2D1Bitmap *, ID2D1Brush *, D2D1_OPACITY_MASK_CONTENT, const D2D_RECT_F *, const D2D_RECT_F *);
//   void (__stdcall *DrawBitmap)(ID2D1RenderTarget *this, ID2D1Bitmap *, const D2D_RECT_F *, float, D2D1_BITMAP_INTERPOLATION_MODE, const D2D_RECT_F *);
//   void (__stdcall *DrawTextA)(ID2D1RenderTarget *this, const wchar_t *, unsigned int, IDWriteTextFormat *, const D2D_RECT_F *, ID2D1Brush *, D2D1_DRAW_TEXT_OPTIONS, DWRITE_MEASURING_MODE);
//   void (__stdcall *DrawTextLayout)(ID2D1RenderTarget *this, D2D_POINT_2F, IDWriteTextLayout *, ID2D1Brush *, D2D1_DRAW_TEXT_OPTIONS);
//   void (__stdcall *DrawGlyphRun)(ID2D1RenderTarget *this, D2D_POINT_2F, const DWRITE_GLYPH_RUN *, ID2D1Brush *, DWRITE_MEASURING_MODE);
//   void (__stdcall *SetTransform)(ID2D1RenderTarget *this, const D2D_MATRIX_3X2_F *);
//   void (__stdcall *GetTransform)(ID2D1RenderTarget *this, D2D_MATRIX_3X2_F *);
//   void (__stdcall *SetAntialiasMode)(ID2D1RenderTarget *this, D2D1_ANTIALIAS_MODE);
//   D2D1_ANTIALIAS_MODE (__stdcall *GetAntialiasMode)(ID2D1RenderTarget *this);
//   void (__stdcall *SetTextAntialiasMode)(ID2D1RenderTarget *this, D2D1_TEXT_ANTIALIAS_MODE);
//   D2D1_TEXT_ANTIALIAS_MODE (__stdcall *GetTextAntialiasMode)(ID2D1RenderTarget *this);
//   void (__stdcall *SetTextRenderingParams)(ID2D1RenderTarget *this, IDWriteRenderingParams *);
//   void (__stdcall *GetTextRenderingParams)(ID2D1RenderTarget *this, IDWriteRenderingParams **);
//   void (__stdcall *SetTags)(ID2D1RenderTarget *this, unsigned __int64, unsigned __int64);
//   void (__stdcall *GetTags)(ID2D1RenderTarget *this, unsigned __int64 *, unsigned __int64 *);
//   void (__stdcall *PushLayer)(ID2D1RenderTarget *this, const D2D1_LAYER_PARAMETERS *, ID2D1Layer *);
//   void (__stdcall *PopLayer)(ID2D1RenderTarget *this);
//   HRESULT (__stdcall *Flush)(ID2D1RenderTarget *this, unsigned __int64 *, unsigned __int64 *);
//   void (__stdcall *SaveDrawingState)(ID2D1RenderTarget *this, ID2D1DrawingStateBlock *);
//   void (__stdcall *RestoreDrawingState)(ID2D1RenderTarget *this, ID2D1DrawingStateBlock *);
//   void (__stdcall *PushAxisAlignedClip)(ID2D1RenderTarget *this, const D2D_RECT_F *, D2D1_ANTIALIAS_MODE);
//   void (__stdcall *PopAxisAlignedClip)(ID2D1RenderTarget *this);
//   void (__stdcall *Clear)(ID2D1RenderTarget *this, const _D3DCOLORVALUE *);
//   void (__stdcall *BeginDraw)(ID2D1RenderTarget *this);
//   HRESULT (__stdcall *EndDraw)(ID2D1RenderTarget *this, unsigned __int64 *, unsigned __int64 *);
//   D2D1_PIXEL_FORMAT (__stdcall *GetPixelFormat)(ID2D1RenderTarget *this);
//   void (__stdcall *SetDpi)(ID2D1RenderTarget *this, float, float);
//   void (__stdcall *GetDpi)(ID2D1RenderTarget *this, float *, float *);
//   D2D_SIZE_F (__stdcall *GetSize)(ID2D1RenderTarget *this);
//   D2D_SIZE_U (__stdcall *GetPixelSize)(ID2D1RenderTarget *this);
//   unsigned int (__stdcall *GetMaximumBitmapSize)(ID2D1RenderTarget *this);
//   int (__stdcall *IsSupported)(ID2D1RenderTarget *this, const D2D1_RENDER_TARGET_PROPERTIES *);
// };

// /* 5107 */
// struct __cppobj _D3DX11_TEXTURE_LOAD_INFO
// {
//   D3D11_BOX *pSrcBox;
//   D3D11_BOX *pDstBox;
//   unsigned int SrcFirstMip;
//   unsigned int DstFirstMip;
//   unsigned int NumMips;
//   unsigned int SrcFirstElement;
//   unsigned int DstFirstElement;
//   unsigned int NumElements;
//   unsigned int Filter;
//   unsigned int MipFilter;
// };

// /* 5108 */
// struct __cppobj CD3D11_BLEND_DESC : D3D11_BLEND_DESC
// {
// };

// /* 5109 */
// struct __cppobj CD3D11_DEFAULT
// {
// };

// /* 5110 */
// struct D3DX10_IMAGE_INFO
// {
//   unsigned int Width;
//   unsigned int Height;
//   unsigned int Depth;
//   unsigned int ArraySize;
//   unsigned int MipLevels;
//   unsigned int MiscFlags;
//   DXGI_FORMAT Format;
//   D3D10_RESOURCE_DIMENSION ResourceDimension;
//   D3DX10_IMAGE_FILE_FORMAT ImageFileFormat;
// };

// /* 5111 */
// struct __cppobj D3DX10_IMAGE_LOAD_INFO
// {
//   unsigned int Width;
//   unsigned int Height;
//   unsigned int Depth;
//   unsigned int FirstMipLevel;
//   unsigned int MipLevels;
//   D3D10_USAGE Usage;
//   unsigned int BindFlags;
//   unsigned int CpuAccessFlags;
//   unsigned int MiscFlags;
//   DXGI_FORMAT Format;
//   unsigned int Filter;
//   unsigned int MipFilter;
//   D3DX10_IMAGE_INFO *pSrcInfo;
// };

// /* 5112 */
// struct _D3DX10_FONT_DESCA
// {
//   int Height;
//   unsigned int Width;
//   unsigned int Weight;
//   unsigned int MipLevels;
//   int Italic;
//   unsigned __int8 CharSet;
//   unsigned __int8 OutputPrecision;
//   unsigned __int8 Quality;
//   unsigned __int8 PitchAndFamily;
//   char FaceName[32];
// };

// /* 5113 */
// struct __cppobj D2D1::ColorF : _D3DCOLORVALUE
// {
// };

// /* 5114 */
// struct __cppobj D2D1::Matrix3x2F : D2D_MATRIX_3X2_F
// {
// };

// /* 5115 */
// struct _D3DX10_FONT_DESCW
// {
//   int Height;
//   unsigned int Width;
//   unsigned int Weight;
//   unsigned int MipLevels;
//   int Italic;
//   unsigned __int8 CharSet;
//   unsigned __int8 OutputPrecision;
//   unsigned __int8 Quality;
//   unsigned __int8 PitchAndFamily;
//   wchar_t FaceName[32];
// };

// /* 5116 */
// struct __cppobj CD3D11_BUFFER_DESC : D3D11_BUFFER_DESC
// {
// };

// /* 5117 */
// struct __cppobj CD3D11_TEXTURE1D_DESC : D3D11_TEXTURE1D_DESC
// {
// };

// /* 5118 */
// struct __cppobj CD3D11_RECT : tagRECT
// {
// };

// /* 5119 */
// struct __cppobj CD3D11_BOX : D3D11_BOX
// {
// };

// /* 5120 */
// struct __cppobj CD3D11_SHADER_RESOURCE_VIEW_DESC : D3D11_SHADER_RESOURCE_VIEW_DESC
// {
// };

// /* 5121 */
// struct __cppobj _D3DX10_SPRITE
// {
//   D3DXMATRIX matWorld;
//   D3DXVECTOR2 TexCoord;
//   D3DXVECTOR2 TexSize;
//   D3DXCOLOR ColorModulate;
//   ID3D10ShaderResourceView *pTexture;
//   unsigned int TextureIndex;
// };

// /* 5122 */
// struct D3DX11_IMAGE_INFO
// {
//   unsigned int Width;
//   unsigned int Height;
//   unsigned int Depth;
//   unsigned int ArraySize;
//   unsigned int MipLevels;
//   unsigned int MiscFlags;
//   DXGI_FORMAT Format;
//   D3D11_RESOURCE_DIMENSION ResourceDimension;
//   D3DX11_IMAGE_FILE_FORMAT ImageFileFormat;
// };

// /* 5123 */
// struct __cppobj ID3DX10Font : IUnknown
// {
// };

// /* 5124 */
// struct __cppobj ID3DX10Sprite : IUnknown
// {
// };

// /* 5125 */
// struct /*VFT*/ ID3DX10Sprite_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *Begin)(ID3DX10Sprite *this, unsigned int);
//   HRESULT (__stdcall *DrawSpritesBuffered)(ID3DX10Sprite *this, _D3DX10_SPRITE *, unsigned int);
//   HRESULT (__stdcall *Flush)(ID3DX10Sprite *this);
//   HRESULT (__stdcall *DrawSpritesImmediate)(ID3DX10Sprite *this, _D3DX10_SPRITE *, unsigned int, unsigned int, unsigned int);
//   HRESULT (__stdcall *End)(ID3DX10Sprite *this);
//   HRESULT (__stdcall *GetViewTransform)(ID3DX10Sprite *this, D3DXMATRIX *);
//   HRESULT (__stdcall *SetViewTransform)(ID3DX10Sprite *this, D3DXMATRIX *);
//   HRESULT (__stdcall *GetProjectionTransform)(ID3DX10Sprite *this, D3DXMATRIX *);
//   HRESULT (__stdcall *SetProjectionTransform)(ID3DX10Sprite *this, D3DXMATRIX *);
//   HRESULT (__stdcall *GetDevice)(ID3DX10Sprite *this, ID3D10Device **);
// };

// /* 5126 */
// struct /*VFT*/ ID3DX10Font_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetDevice)(ID3DX10Font *this, ID3D10Device **);
//   HRESULT (__stdcall *GetDescA)(ID3DX10Font *this, _D3DX10_FONT_DESCA *);
//   HRESULT (__stdcall *GetDescW)(ID3DX10Font *this, _D3DX10_FONT_DESCW *);
//   int (__stdcall *GetTextMetricsA)(ID3DX10Font *this, tagTEXTMETRICA *);
//   int (__stdcall *GetTextMetricsW)(ID3DX10Font *this, tagTEXTMETRICW *);
//   HDC__ *(__stdcall *GetDC)(ID3DX10Font *this);
//   HRESULT (__stdcall *GetGlyphData)(ID3DX10Font *this, unsigned int, ID3D10ShaderResourceView **, tagRECT *, tagPOINT *);
//   HRESULT (__stdcall *PreloadCharacters)(ID3DX10Font *this, unsigned int, unsigned int);
//   HRESULT (__stdcall *PreloadGlyphs)(ID3DX10Font *this, unsigned int, unsigned int);
//   HRESULT (__stdcall *PreloadTextA)(ID3DX10Font *this, const char *, int);
//   HRESULT (__stdcall *PreloadTextW)(ID3DX10Font *this, const wchar_t *, int);
//   int (__stdcall *DrawTextA)(ID3DX10Font *this, ID3DX10Sprite *, const char *, int, tagRECT *, unsigned int, D3DXCOLOR);
//   int (__stdcall *DrawTextW)(ID3DX10Font *this, ID3DX10Sprite *, const wchar_t *, int, tagRECT *, unsigned int, D3DXCOLOR);
// };

// /* 5127 */
// struct __cppobj CD3D11_DEPTH_STENCIL_VIEW_DESC : D3D11_DEPTH_STENCIL_VIEW_DESC
// {
// };

// /* 5128 */
// struct __cppobj CD3D11_TEXTURE3D_DESC : D3D11_TEXTURE3D_DESC
// {
// };

// /* 5129 */
// struct __cppobj _D3DX10_TEXTURE_LOAD_INFO
// {
//   D3D10_BOX *pSrcBox;
//   D3D10_BOX *pDstBox;
//   unsigned int SrcFirstMip;
//   unsigned int DstFirstMip;
//   unsigned int NumMips;
//   unsigned int SrcFirstElement;
//   unsigned int DstFirstElement;
//   unsigned int NumElements;
//   unsigned int Filter;
//   unsigned int MipFilter;
// };

// /* 5130 */
// struct __cppobj D3DX11_IMAGE_LOAD_INFO
// {
//   unsigned int Width;
//   unsigned int Height;
//   unsigned int Depth;
//   unsigned int FirstMipLevel;
//   unsigned int MipLevels;
//   D3D11_USAGE Usage;
//   unsigned int BindFlags;
//   unsigned int CpuAccessFlags;
//   unsigned int MiscFlags;
//   DXGI_FORMAT Format;
//   unsigned int Filter;
//   unsigned int MipFilter;
//   D3DX11_IMAGE_INFO *pSrcInfo;
// };

// /* 5131 */
// struct __cppobj CD3D11_QUERY_DESC : D3D11_QUERY_DESC
// {
// };

// /* 5132 */
// struct __cppobj CD3D11_VIEWPORT : D3D11_VIEWPORT
// {
// };

// /* 5133 */
// struct __cppobj CD3D11_DEPTH_STENCIL_DESC : D3D11_DEPTH_STENCIL_DESC
// {
// };

// /* 5134 */
// struct __cppobj CD3D11_SAMPLER_DESC : D3D11_SAMPLER_DESC
// {
// };

// /* 5135 */
// struct __cppobj CD3D10_TEXTURE3D_DESC : D3D10_TEXTURE3D_DESC
// {
// };

// /* 5136 */
// struct __cppobj CD3D10_TEXTURE2D_DESC : D3D10_TEXTURE2D_DESC
// {
// };

// /* 5137 */
// struct D2D1_FACTORY_OPTIONS
// {
//   D2D1_DEBUG_LEVEL debugLevel;
// };

// /* 5138 */
// struct __cppobj CD3D11_RENDER_TARGET_VIEW_DESC : D3D11_RENDER_TARGET_VIEW_DESC
// {
// };

// /* 5139 */
// struct __cppobj CD3D11_TEXTURE2D_DESC : D3D11_TEXTURE2D_DESC
// {
// };

// /* 5140 */
// struct __cppobj CD3D10_TEXTURE1D_DESC : D3D10_TEXTURE1D_DESC
// {
// };

// /* 5141 */
// struct __cppobj CD3D11_COUNTER_DESC : D3D11_COUNTER_DESC
// {
// };

// /* 5142 */
// struct __cppobj CD3D10_BUFFER_DESC : D3D10_BUFFER_DESC
// {
// };

// /* 5143 */
// struct __cppobj CD3D11_UNORDERED_ACCESS_VIEW_DESC : D3D11_UNORDERED_ACCESS_VIEW_DESC
// {
// };

// /* 5144 */
// struct __cppobj CD3D11_RASTERIZER_DESC : D3D11_RASTERIZER_DESC
// {
// };

// /* 5145 */
// struct _PROCESS_MEMORY_COUNTERS
// {
//   unsigned int cb;
//   unsigned int PageFaultCount;
//   unsigned int PeakWorkingSetSize;
//   unsigned int WorkingSetSize;
//   unsigned int QuotaPeakPagedPoolUsage;
//   unsigned int QuotaPagedPoolUsage;
//   unsigned int QuotaPeakNonPagedPoolUsage;
//   unsigned int QuotaNonPagedPoolUsage;
//   unsigned int PagefileUsage;
//   unsigned int PeakPagefileUsage;
// };

// /* 5146 */
// struct __cppobj tlPcQPF
// {
// };

// /* 5147 */
// struct $409DFF2A380C4FFE2B587D0390AC124E
// {
//   unsigned __int16 wProcessorArchitecture;
//   unsigned __int16 wReserved;
// };

// /* 5148 */
// union $3EFF97728D04AE5E61469C0D44B4756A
// {
//   unsigned int dwOemId;
//   $409DFF2A380C4FFE2B587D0390AC124E __s1;
// };

// /* 5149 */
// struct _SYSTEM_INFO
// {
//   $3EFF97728D04AE5E61469C0D44B4756A ___u0;
//   unsigned int dwPageSize;
//   void *lpMinimumApplicationAddress;
//   void *lpMaximumApplicationAddress;
//   unsigned int dwActiveProcessorMask;
//   unsigned int dwNumberOfProcessors;
//   unsigned int dwProcessorType;
//   unsigned int dwAllocationGranularity;
//   unsigned __int16 wProcessorLevel;
//   unsigned __int16 wProcessorRevision;
// };

// /* 5150 */
// struct __cppobj phys_list_condition_functor_has_rigid_body_and_user_rigid_body
// {
//   rigid_body *m_rb;
// };

// /* 5151 */
// struct __cppobj phys_list_condition_functor_has_no_constraints
// {
// };

// /* 5152 */
// struct __cppobj phys_list_condition_functor_has_rigid_body
// {
//   rigid_body *m_rb;
// };

// /* 5153 */
// struct __cppobj phys_list_condition_functor_has_user_rigid_body
// {
// };

// /* 5154 */
// struct __cppobj bpi_environment_collision_info
// {
//   broad_phase_base *m_bpb_i_start;
//   broad_phase_base *m_bpb_i_end;
//   int m_bpb_count;
//   int m_bpb_last_count;
// };

// /* 5155 */
// struct broad_phase_prolog_task_input
// {
//   phys_vec3 *m_aabb_min;
//   phys_vec3 *m_aabb_max;
// };

// /* 5156 */
// struct __cppobj phys_simple_allocator<axis_aligned_sweep_and_prune::sap_node>
// {
//   int m_count;
// };

// /* 5157 */
// struct axis_aligned_sweep_and_prune::axis_element
// {
//   axis_aligned_sweep_and_prune::sap_node *m_node;
//   int m_min_max;
//   float m_val;
//   int m_ae_list_index;
//   axis_aligned_sweep_and_prune::axis_element *m_next;
// };

// /* 5158 */
// struct axis_aligned_sweep_and_prune::sap_node
// {
//   broad_phase_base *m_bpb;
//   __unaligned __declspec(align(1)) axis_aligned_sweep_and_prune::axis_element m_ae1[3][2];
//   int m_updated;
// };

// /* 5159 */
// struct __cppobj phys_simple_allocator<axis_aligned_sweep_and_prune::active_pair>
// {
//   int m_count;
// };

// /* 5160 */
// struct axis_aligned_sweep_and_prune::active_pair
// {
//   axis_aligned_sweep_and_prune::sap_node *m_p1;
//   axis_aligned_sweep_and_prune::sap_node *m_p2;
//   axis_aligned_sweep_and_prune::active_pair *m_next;
//   phys_gjk_cache_info *m_gjk_ci;
// };

// /* 5161 */
// struct __cppobj axis_aligned_sweep_and_prune
// {
//   phys_simple_allocator<axis_aligned_sweep_and_prune::sap_node> m_sap_node_allocator;
//   axis_aligned_sweep_and_prune::axis_element *m_x_list;
//   axis_aligned_sweep_and_prune::axis_element *m_y_list;
//   axis_aligned_sweep_and_prune::axis_element *m_z_list;
//   bool (__cdecl *m_should_collide_callback)(const broad_phase_base *, const broad_phase_base *);
//   phys_simple_allocator<axis_aligned_sweep_and_prune::active_pair> m_active_pair_allocator;
//   int m_max_num_active_pairs;
//   axis_aligned_sweep_and_prune::active_pair *m_list_bpi_bpi;
//   axis_aligned_sweep_and_prune::active_pair *m_list_bpi_bpg;
//   axis_aligned_sweep_and_prune::active_pair *m_list_bpg_bpg;
// };

// /* 5162 */
// struct __cppobj gjk_sep_dir
// {
// };

// /* 5163 */
// struct narrow_phase_collision_task_input
// {
//   contact_point_info **m_list_output_cpi;
//   rigid_body_constraint_contact *m_rbc_contact_search_tree_root;
//   phys_collision_pair **m_list_pcp_iterator;
// };

// /* 5164 */
// struct __cppobj phys_simple_link_list<pulse_sum_constraint_solver::user_rigid_body_restore_info>::iterator
// {
//   pulse_sum_constraint_solver::user_rigid_body_restore_info *m_ptr;
// };

// /* 5165 */
// struct __cppobj phys_simple_link_list<pulse_sum_constraint_solver::temp_user_rigid_body>::iterator
// {
//   pulse_sum_constraint_solver::temp_user_rigid_body *m_ptr;
// };

// /* 5166 */
// struct constraint_solver_task_input
// {
//   rigid_body **m_list_island;
//   int m_list_island_count;
//   int *m_list_island_cur;
//   int m_psys_psc_visit_counter;
//   int m_psys_next_psc_visit_counter;
//   int m_psys_max_vel_iters;
//   int m_psys_max_vel_pos_iters;
//   float m_outside_delta_t;
// };

// /* 5167 */
// struct phys_inplace_avl_tree<user_rigid_body *,pulse_sum_constraint_solver::temp_user_rigid_body,pulse_sum_constraint_solver::temp_user_rigid_body::avl_tree_accessor>::stack_item
// {
//   pulse_sum_constraint_solver::temp_user_rigid_body **m_node;
//   int m_child;
// };

// /* 5168 */
// volatile struct tagged_void_pointer_t
// {
//   void *m_ptr;
//   unsigned int m_tag;
// };

// /* 5169 */
// struct phys_slot_pool
// {
//   volatile tagged_void_pointer_t m_first_free_slot;
//   unsigned int m_map_key;
//   phys_slot_pool *m_hash_next;
//   int m_total_slot_count;
//   int m_allocated_slot_count;
// };

// /* 5170 */
// struct __cppobj minspec_hash_table<phys_slot_pool,64>
// {
//   phys_slot_pool *m_hash_table[64];
//   unsigned int m_mod;
//   unsigned int m_highest_collision;
//   unsigned int m_total_collisions;
// };

// /* 5171 */
// struct __cppobj phys_memory_manager
// {
//   char *m_buffer_start;
//   char *m_buffer_end;
//   char *m_buffer_cur;
//   int m_list_slot_pool_count;
//   minspec_read_write_mutex m_slot_pool_map_mutex;
//   minspec_hash_table<phys_slot_pool,64> m_slot_pool_map;
//   minspec_mutex m_slot_pool_allocate_mutex;
//   __declspec(align(8)) phys_slot_pool m_list_preallocated_slot_pools[28];
//   int m_list_preallocated_slot_pools_count;
// };

// /* 5172 */
// struct phys_slot_pool::extra_info
// {
//   phys_slot_pool *m_slot_pool_owner;
//   void *m_allocation_owner;
// };

// /* 5173 */
// union _lzo_config_check::__l2::<unnamed_type_u>
// {
//   unsigned __int8 c[8];
//   unsigned int l[2];
// };

// /* 5174 */
// struct GfxDynamicIndices
// {
//   volatile int used;
//   int total;
//   unsigned __int16 *indices;
// };

// /* 5175 */
// struct GfxPackedVertexNormal
// {
//   PackedUnitVec normal;
//   PackedUnitVec tangent;
// };

// /* 5176 */
// struct __declspec(align(4)) GfxBuffers
// {
//   GfxDynamicIndices smodelCache;
//   IDirect3DVertexBuffer9 *smodelCacheVb;
//   GfxIndexBufferState preTessIndexBufferPool[2];
//   GfxIndexBufferState *preTessIndexBuffer;
//   int preTessBufferFrame;
//   GfxIndexBufferState dynamicIndexBufferPool[1];
//   GfxIndexBufferState *dynamicIndexBuffer;
//   GfxVertexBufferState skinnedCacheVbPool[2];
//   unsigned __int8 *skinnedCacheLockAddr;
//   GfxVertexBufferState dynamicVertexBufferPool[1];
//   GfxVertexBufferState *dynamicVertexBuffer;
//   IDirect3DVertexBuffer9 *particleCloudVertexBuffer;
//   IDirect3DIndexBuffer9 *particleCloudIndexBuffer;
//   int dynamicBufferFrame;
//   volatile unsigned int dynamicBufferCurrentFrame[2];
//   GfxPackedVertexNormal skinnedCacheNormals[2][147456];
//   GfxPackedVertexNormal *skinnedCacheNormalsAddr;
//   GfxPackedVertexNormal *oldSkinnedCacheNormalsAddr;
//   unsigned int skinnedCacheNormalsFrameCount;
//   bool fastSkin;
//   bool skinCache;
// };

// /* 5177 */
// struct GfxDrawSurfList
// {
//   GfxDrawSurf *current;
//   GfxDrawSurf *end;
// };

// /* 5178 */
// struct GfxBspPreTessDrawSurf
// {
//   unsigned __int16 baseSurfIndex;
//   unsigned __int16 totalTriCount;
// };

// /* 5179 */
// struct GfxDelayedCmdBuf
// {
//   int primDrawSurfPos;
//   unsigned int primDrawSurfSize;
//   GfxDrawSurf drawSurfKey;
// };

// /* 5180 */
// struct GfxBspDrawSurfData
// {
//   GfxDelayedCmdBuf delayedCmdBuf;
//   GfxDrawSurfList drawSurfList;
// };

// /* 5181 */
// struct __declspec(align(4)) GfxDrawMethod
// {
//   GfxDrawSceneMethod drawScene;
//   unsigned __int8 baseTechType;
//   unsigned __int8 emissiveTechType;
//   unsigned __int8 litTechType[16][7][2][2];
// };

// /* 5182 */
// struct DpvsGlob_sunShadow
// {
//   float viewDir[3];
//   float viewDirDist;
//   float sunShadowDrawDist;
// };

// /* 5183 */
// struct PortalHeapNode
// {
//   GfxPortal *portal;
//   float dist;
// };

// /* 5184 */
// union GfxHullPointsPool
// {
//   GfxHullPointsPool *nextFree;
//   float points[64][2];
// };

// /* 5185 */
// struct DpvsView
// {
//   unsigned int renderFxFlagsCull;
//   DpvsPlane frustumPlanes[14];
//   int frustumPlaneCount;
// };

// /* 5186 */
// struct DpvsGlob
// {
//   DpvsPlane nearPlane;
//   DpvsPlane farPlane;
//   bool farPlaneEnabled;
//   const GfxMatrix *viewProjMtx;
//   const GfxMatrix *invViewProjMtx;
//   const GfxMatrix *projMtx;
//   float viewOrg[4];
//   int viewOrgIsDir;
//   DpvsGlob_sunShadow sunShadow;
//   int queuedCount;
//   PortalHeapNode *portalQueue;
//   GfxHullPointsPool *nextFreeHullPoints;
//   float cullDist;
//   DpvsPlane childPlanes[2048];
//   DpvsView views[4][3];
//   DpvsPlane *sideFrustumPlanes;
//   unsigned int *entVisBits[4];
//   unsigned int *cellCasterBitsForCell;
//   unsigned int cellVisibleBits[32];
//   unsigned int cellForceInvisibleBits[32];
//   __declspec(align(16)) float occluderPlanes[320][4];
//   int numOccluders;
// };

// /* 5187 */
// struct GfxCachedSModelSurf
// {
//   unsigned int baseVertIndex;
//   unsigned __int16 lodIndex;
//   unsigned __int16 smodelIndex;
// };

// /* 5188 */
// struct GfxSModelDrawSurfData
// {
//   GfxDelayedCmdBuf delayedCmdBuf;
//   GfxDrawSurfList drawSurfList;
// };

// /* 5189 */
// struct GfxStaticModelPreTessSurf::<unnamed_type_fields>
// {
//   unsigned __int8 surfIndex;
//   unsigned __int8 lod;
//   unsigned __int16 cachedIndex;
// };

// /* 5190 */
// union GfxStaticModelPreTessSurf
// {
//   GfxStaticModelPreTessSurf::<unnamed_type_fields> fields;
//   unsigned int packed;
// };

// /* 5191 */
// struct GfxSModelDrawSurfLightingData
// {
//   GfxDelayedCmdBuf delayedCmdBuf;
//   GfxDrawSurfList drawSurf[3];
// };

// /* 5192 */
// struct GfxStaticModelId
// {
//   unsigned __int16 surfType;
//   unsigned __int16 objectId;
// };

// /* 5193 */
// struct GfxDrawConsts
// {
//   float outdoorLookupMatrix[4][4];
//   GfxScaledPlacement identityPlacement;
// };

// /* 5194 */
// struct DiskGfxReflectionProbeVolumeData
// {
//   float volumePlanes[6][4];
// };

// /* 5195 */
// struct DiskGfxReflectionProbe
// {
//   float origin[3];
//   unsigned __int8 pixels[262224];
//   DiskGfxReflectionProbeVolumeData probeVolumes[16];
//   unsigned int probeVolumeCount;
//   char colorCorrectionFilename[64];
//   char name[64];
// };

// /* 5196 */
// struct mnode_load_t
// {
//   int cellIndex;
//   int planeIndex;
//   unsigned int children[2];
// };

// /* 5197 */
// struct r_lightmapMerge_t
// {
//   unsigned __int8 index;
//   float shift[2];
//   float scale[2];
// };

// /* 5198 */
// struct GfxBspLoad
// {
//   unsigned int bspVersion;
//   const dmaterial_t *diskMaterials;
//   unsigned int materialCount;
//   float outdoorMins[3];
//   float outdoorMaxs[3];
//   r_lightmapMerge_t lmapMergeInfo[32];
// };

// /* 5199 */
// struct r_globals_load_t
// {
//   int *cullGroupIndices;
//   float (*portalVerts)[3];
//   GfxAabbTree *aabbTrees;
//   int aabbTreeCount;
//   int nodeCount;
//   mnode_load_t *nodes;
//   int reflectionProbesLoaded;
//   int staticModelReflectionProbesLoaded;
//   GfxBspLoad load;
// };

// /* 5200 */
// struct DiskGfxReflectionProbe11
// {
//   float origin[3];
//   unsigned __int8 pixels[262224];
// };

// /* 5201 */
// struct __cppobj std::pair<GfxSurface *,GfxSurface *>
// {
//   GfxSurface *first;
//   GfxSurface *second;
// };

// /* 5202 */
// struct GfxStaticModelCombinedInst
// {
//   GfxStaticModelDrawInst smodelDrawInst;
//   GfxStaticModelInst smodelInst;
//   int isDynamicModel;
// };

// /* 5203 */
// struct __cppobj std::pair<GfxStaticModelCombinedInst *,GfxStaticModelCombinedInst *>
// {
//   GfxStaticModelCombinedInst *first;
//   GfxStaticModelCombinedInst *second;
// };

// /* 5204 */
// struct AnnotatedLightGridPoint
// {
//   unsigned __int16 pos[3];
//   GfxLightGridEntry entry;
// };

// /* 5205 */
// struct __cppobj std::pair<AnnotatedLightGridPoint *,AnnotatedLightGridPoint *>
// {
//   AnnotatedLightGridPoint *first;
//   AnnotatedLightGridPoint *second;
// };

// /* 5206 */
// struct DiskGfxCell_Version21
// {
//   float mins[3];
//   float maxs[3];
//   unsigned __int16 aabbTreeIndex[2];
//   int firstPortal;
//   int portalCount;
//   int firstCullGroup;
//   int cullGroupCount;
// };

// /* 5207 */
// struct DiskGfxAabbTree
// {
//   unsigned int firstSurface;
//   unsigned int surfaceCount;
//   unsigned int childCount;
// };

// /* 5208 */
// struct DiskGfxDummyReflectionProbe
// {
//   float origin[3];
//   char colorCorrectionFilename[64];
//   unsigned __int8 pixels[144];
// };

// /* 5209 */
// struct __declspec(align(4)) DiskLodChain
// {
//   float origin[3];
//   float lastDist;
//   unsigned int firstLodInfo;
//   unsigned __int16 lodInfoCount;
// };

// /* 5210 */
// struct INFO
// {
//   char name[64];
//   char origin[64];
// };

// /* 5211 */
// struct GfxLightGridEntry_Version15
// {
//   unsigned int xyzHighBits;
//   unsigned __int8 xyzLowBitsAndPrimaryVis;
//   unsigned __int8 needsTrace;
//   unsigned __int16 colorsIndex;
// };

// /* 5212 */
// struct DiskGfxCell_Version14
// {
//   float mins[3];
//   float maxs[3];
//   int aabbTreeIndex;
//   int firstPortal;
//   int portalCount;
//   int firstCullGroup;
//   int cullGroupCount;
//   int unused0;
//   int unused1;
// };

// /* 5213 */
// struct DiskGfxOutdoorBounds
// {
//   float bounds[2][3];
// };

// /* 5214 */
// struct DiskTriangleSoup_Version8
// {
//   unsigned __int16 materialIndex;
//   unsigned __int8 lightmapIndex;
//   unsigned __int8 reflectionProbeIndex;
//   int firstVertex;
//   unsigned __int16 vertexCount;
//   unsigned __int16 indexCount;
//   int firstIndex;
// };

// /* 5215 */
// struct DiskHeroOnlyLight
// {
//   unsigned __int8 type;
//   unsigned __int8 unused[3];
//   float color[3];
//   float dir[3];
//   float origin[3];
//   float radius;
//   float cosHalfFovOuter;
//   float cosHalfFovInner;
//   int exponent;
// };

// /* 5216 */
// struct DiskGfxOccluder
// {
//   char name[16];
//   float pts[4][3];
// };

// /* 5217 */
// struct DiskLightRegionHull
// {
//   float kdopMidPoint[9];
//   float kdopHalfSize[9];
//   unsigned int axisCount;
// };

// /* 5218 */
// struct DiskTriangleSoup
// {
//   unsigned __int16 materialIndex;
//   unsigned __int8 lightmapIndex;
//   unsigned __int8 reflectionProbeIndex;
//   unsigned __int8 primaryLightIndex;
//   bool hasPrimaryLightConflict;
//   bool castsSunShadow;
//   __int16 castsShadow;
//   int vertexLayerData;
//   unsigned int firstVertex;
//   unsigned __int16 vertexCount;
//   unsigned __int16 indexCount;
//   int firstIndex;
// };

// /* 5219 */
// struct __cppobj Stream2Usage
// {
//   int firstVertex;
//   int byteOffset;
//   unsigned __int16 vertexCount;
//   Stream2Usage *next;
// };

// /* 5220 */
// struct DiskGfxVolumePlane
// {
//   float plane[4];
// };

// /* 5221 */
// struct DiskGfxLightCorona
// {
//   float origin[3];
//   float radius;
//   float color[3];
//   float intensity;
// };

// /* 5222 */
// struct r_lightmapGroup_t
// {
//   int wideCount;
//   int highCount;
// };

// /* 5223 */
// struct GfxLightGridHeader
// {
//   unsigned __int16 mins[3];
//   unsigned __int16 maxs[3];
//   unsigned int rowAxis;
//   unsigned int colAxis;
//   unsigned __int16 rowDataStart[8192];
// };

// /* 5224 */
// struct DiskGfxPortal
// {
//   int planeIndex;
//   int cellIndex;
//   int firstPortalVertex;
//   int portalVertexCount;
// };

// /* 5225 */
// struct DiskGfxVertex
// {
//   float xyz[3];
//   float normal[3];
//   unsigned __int8 color[4];
//   float texCoord[2];
//   float lmapCoord[2];
//   float tangent[3];
//   float binormal[3];
// };

// /* 5226 */
// struct DiskGfxExposureVolume
// {
//   unsigned int control;
//   float exposure;
//   float luminanceIncreaseScale;
//   float luminanceDecreaseScale;
//   float featherRange;
//   float featherAdjust;
//   float boundingSphere[4];
// };

// /* 5227 */
// struct DiskLightRegion
// {
//   unsigned __int8 hullCount;
// };

// /* 5228 */
// struct __declspec(align(4)) DiskLodInfo
// {
//   float dist;
//   unsigned int firstSurf;
//   unsigned __int16 surfCount;
// };

// /* 5229 */
// struct DiskLightRegionAxis
// {
//   float dir[3];
//   float midPoint;
//   float halfSize;
// };

// /* 5230 */
// struct DiskGfxShadowMapVolume
// {
//   unsigned int control;
//   unsigned int paddingforlater[3];
// };

// /* 5231 */
// struct DiskTriangleSoup_Version12
// {
//   unsigned __int16 materialIndex;
//   unsigned __int8 lightmapIndex;
//   unsigned __int8 reflectionProbeIndex;
//   int vertexLayerData;
//   int firstVertex;
//   unsigned __int16 vertexCount;
//   unsigned __int16 indexCount;
//   int firstIndex;
// };

// /* 5232 */
// struct DiskGfxCullGroup
// {
//   float mins[3];
//   float maxs[3];
//   unsigned int firstSurface;
//   unsigned int surfaceCount;
// };

// /* 5233 */
// struct GfxLightGridRow
// {
//   unsigned __int16 colStart;
//   unsigned __int16 colCount;
//   unsigned __int16 zStart;
//   unsigned __int16 zCount;
//   unsigned int firstEntry;
// };

// /* 5234 */
// struct __declspec(align(4)) DiskGfxCell
// {
//   float mins[3];
//   float maxs[3];
//   unsigned __int16 aabbTreeIndex;
//   int firstPortal;
//   int portalCount;
//   int firstCullGroup;
//   int cullGroupCount;
//   unsigned __int8 reflectionProbeCount;
//   unsigned __int8 reflectionProbes[64];
// };

// /* 5235 */
// struct GfxParticleCloudVertex
// {
//   __int16 xyz[3];
//   __int16 corner;
// };

// /* 5236 */
// struct DxCapsCheckBits
// {
//   int offset;
//   unsigned int setBits;
//   unsigned int clearBits;
//   DxCapsResponse response;
//   const char *msg;
// };

// /* 5237 */
// struct DxCapsCheckInteger
// {
//   int offset;
//   unsigned int min;
//   unsigned int max;
//   DxCapsResponse response;
//   const char *msg;
// };

// /* 5238 */
// struct __declspec(align(4)) CinematicHunk
// {
//   void *base;
//   void *atFront;
//   void *atBack;
//   void *end;
//   void *lastAllocPtr;
//   bool fragmented;
// };

// /* 5239 */
// struct CinematicTextureSet
// {
//   GfxImage imageY[2];
//   GfxImage imageCr[2];
//   GfxImage imageCb[2];
//   GfxImage imageA[2];
//   GfxImage drawImageY;
//   GfxImage drawImageCr;
//   GfxImage drawImageCb;
//   GfxImage drawImageA;
//   void *Ytexture[2];
//   void *cRtexture[2];
//   void *cBtexture[2];
//   void *Atexture[2];
// };

// /* 5240 */
// struct CinematicGlob
// {
//   char currentCinematicName[256];
//   char targetCinematicName[256];
//   char nextCinematicName[256];
//   unsigned int nextCinematicPlaybackFlags;
//   unsigned int playbackFlags;
//   unsigned int timeInMsec;
//   unsigned int binkIOSize;
//   bool isPreloaded;
//   bool firstFrameNotify;
//   bool lastFrameNotify;
//   bool targetCinematicChanged;
//   bool cinematicFinished;
//   volatile bool fullSyncNextUpdate;
//   bool playbackStarted;
//   CIN_IOSTATE fileIoState;
//   bool usingAlpha;
//   BINK *bink;
//   BINKTEXTURESET binkTextureSet;
//   CinematicHunk masterHunk;
//   CinematicHunk binkHunk;
//   CinematicHunk residentHunk;
//   int activeImageFrame;
//   int framesStopped;
//   CinematicEnum currentPaused;
//   CinematicEnum targetPaused;
//   _BYTE textureSets[1248];
//   int activeTextureSet;
//   int activeImageFrameTextureSet;
//   GfxImage *nextYTexture;
//   GfxImage *nextCRTexture;
//   GfxImage *nextCBTexture;
//   GfxImage *nextATexture;
//   void *memPool;
//   float playbackVolume;
//   bool underrun;
//   int lastTime;
//   int gap[8];
//   int gptr;
// };

// /* 5241 */
// struct _bink_duck
// {
//   unsigned int start;
//   unsigned int end;
// };

// /* 5242 */
// struct CINE_JQ_CMD
// {
//   int dummy;
// };

// /* 5243 */
// struct BINKREALTIME
// {
//   unsigned int FrameNum;
//   unsigned int FrameRate;
//   unsigned int FrameRateDiv;
//   unsigned int Frames;
//   unsigned int FramesTime;
//   unsigned int FramesVideoDecompTime;
//   unsigned int FramesAudioDecompTime;
//   unsigned int FramesReadTime;
//   unsigned int FramesIdleReadTime;
//   unsigned int FramesThreadReadTime;
//   unsigned int FramesBlitTime;
//   unsigned int ReadBufferSize;
//   unsigned int ReadBufferUsed;
//   unsigned int FramesDataRate;
// };

// /* 5244 */
// struct GfxCmdBuf
// {
//   IDirect3DDevice9 *device;
// };

// /* 5245 */
// struct __declspec(align(8)) SkinXModelCmd
// {
//   void *modelSurfs;
//   const DObjAnimMat *mat;
//   int surfacePartBits[5];
//   float viewoffset[3];
//   unsigned __int16 surfCount;
// };

// /* 5246 */
// union $428C0DFD0D9970E1A3749A5754AD806F
// {
//   const DObjAnimMat *baseMat;
//   const DObjAnimMat *baseMat_local;
// };

// /* 5247 */
// struct __declspec(align(2)) GfxModelSurfaceInfo
// {
//   $428C0DFD0D9970E1A3749A5754AD806F ___u0;
//   unsigned __int8 boneIndex;
//   unsigned __int8 boneCount;
//   unsigned __int16 gfxEntIndex;
//   unsigned __int16 lightingHandle;
//   unsigned __int8 dobjModelIndex;
// };

// /* 5248 */
// union $BFB86953EFC7B86272823EA22BE25520
// {
//   GfxPackedVertex *skinnedVert;
//   int oldSkinnedCachedOffset;
// };

// /* 5249 */
// struct GfxModelSkinnedSurface
// {
//   int skinnedCachedOffset;
//   XSurface *xsurf;
//   GfxModelSurfaceInfo info;
//   $BFB86953EFC7B86272823EA22BE25520 ___u3;
// };

// /* 5250 */
// struct GfxModelRigidSurface
// {
//   GfxModelSkinnedSurface surf;
//   GfxScaledPlacement placement;
// };

// /* 5251 */
// struct DpvsDynamicCellCmd
// {
//   const DpvsPlane *planes;
//   unsigned int cellIndex;
//   unsigned __int16 viewIndex;
//   unsigned __int8 planeCount;
//   unsigned __int8 frustumPlaneCount;
// };

// /* 5252 */
// struct BModelSurface
// {
//   GfxScaledPlacement *placement;
//   GfxSurface *surf;
//   ShaderConstantSet *shaderConstSet;
//   float bmodelBurnAmt;
//   float bmodelFadeAmt;
// };

// /* 5253 */
// struct FilterEntInfo
// {
//   int localClientNum;
//   unsigned int entnum;
//   GfxEntCellRefInfo info;
//   unsigned int cellOffset;
// };

// /* 5254 */
// union $FE217278708CFE8B64B0580037FD6900
// {
//   const GfxCell *cell;
//   const GfxCell *cell_local;
// };

// /* 5255 */
// struct DpvsStaticCellCmd
// {
//   const DpvsPlane *planes;
//   $FE217278708CFE8B64B0580037FD6900 ___u1;
//   unsigned __int8 planeCount;
//   unsigned __int8 frustumPlaneCount;
//   unsigned __int16 viewIndex;
// };

// /* 5256 */
// union R_SetDpvsPlaneSides::__l2::<unnamed_type_u>
// {
//   float f;
//   int i;
// };

// /* 5257 */
// struct DpvsEntityCmd
// {
//   GfxSceneEntity *sceneEnt;
//   const DpvsPlane *planes;
//   unsigned __int16 planeCount;
//   unsigned __int16 cellIndex;
//   unsigned __int8 *entVisData;
// };

// /* 5258 */
// struct DpvsPlanes
// {
//   const DpvsPlane *planes;
//   int count;
// };

// /* 5259 */
// struct DpvsClipPlanes
// {
//   DpvsPlane planes[16];
//   unsigned int count;
// };

// /* 5260 */
// struct GfxCmdBufContext::<unnamed_tag>::<unnamed_type_local>
// {
//   GfxCmdBufSourceState *source;
//   GfxCmdBufState *state;
// };

// /* 5261 */
// struct $3EA432785AEAE4553212959C4AFFD2B6
// {
//   GfxCmdBufSourceState *source;
//   GfxCmdBufState *state;
// };

// /* 5262 */
// union $0D780F032CF8B7DC914666D21A791DAB
// {
//   $3EA432785AEAE4553212959C4AFFD2B6 __s0;
//   GfxCmdBufContext::<unnamed_tag>::<unnamed_type_local> local;
// };

// /* 5263 */
// struct GfxCmdBufContext
// {
//   $0D780F032CF8B7DC914666D21A791DAB ___u0;
// };

// /* 5264 */
// struct GfxDrawPrimArgs
// {
//   int vertexCount;
//   int triCount;
//   int baseIndex;
// };

// /* 5265 */
// struct GfxTrianglesDrawStream
// {
//   GfxTexture *whiteTexture;
//   const unsigned int *primDrawSurfPos;
//   const GfxTexture *reflectionProbeTexture;
//   const GfxTexture *lightmapPrimaryTexture;
//   const GfxTexture *lightmapSecondaryTexture;
//   const GfxTexture *lightmapSecondaryTextureB;
//   unsigned int customSamplerFlags;
//   int hasSunDirChanged;
// };

// /* 5266 */
// struct GfxReadCmdBuf
// {
//   const unsigned int *primDrawSurfPos;
// };

// /* 5267 */
// struct __cppobj GfxStaticModelDrawStream
// {
//   const unsigned int *primDrawSurfPos;
//   const GfxTexture *reflectionProbeTexture;
//   unsigned int customSamplerFlags;
//   GfxFrameStats *frameStats;
//   GfxPrimStats *primStats;
//   int usingCrossFade;
//   XSurface *localSurf;
//   unsigned int smodelCount;
//   const unsigned __int16 *smodelList;
//   unsigned int reflectionProbeIndex;
//   unsigned __int32 viewInfoIndex : 2;
//   unsigned __int32 which_lod : 2;
//   unsigned __int32 pad : 28;
//   const DynSModelClientView *dynSModelView;
//   const DynSModelGfxState *dynSModelState;
// };

// /* 5268 */
// struct SunShadowMapUserData
// {
//   const GfxSunShadowPartition *partition;
//   const GfxDrawSurfListInfo *drawList;
// };

// /* 5269 */
// struct __cppobj GfxSortDrawSurfsInterface
// {
// };

// /* 5270 */
// struct __cppobj GfxReverseSortDrawSurfsInterface
// {
// };

// /* 5271 */
// struct GfxExposureHeader
// {
//   unsigned int identifier;
//   unsigned int date;
//   unsigned int typeVersion;
//   unsigned int numberSize;
// };

// /* 5272 */
// struct GfxExposureSettings
// {
//   GfxExposureHeader header;
//   GfxExposureValue exposureValues[256];
// };

// /* 5273 */
// struct __cppobj __declspec(align(4)) ExtraCamConfig
// {
//   unsigned int renderTargetWidth;
//   unsigned int renderTargetHeight;
//   float aspectRatio;
//   bool initialized;
// };

// /* 5274 */
// struct ForceBoundsInfo
// {
//   float persistForceBounds[2][3];
//   float instantForceBounds[2][3];
//   float windForceBounds[2][2];
// };

// /* 5275 */
// struct __cppobj __declspec(align(4)) DrawStateWorkerSharedBuffer
// {
//   unsigned __int16 visibleDynSModelList[2048];
//   PerFrameFoliageInfo frameInfo;
//   ForceBoundsInfo forceBounds;
//   bool inUse;
// };

// /* 5276 */
// struct ActiveModelNode
// {
//   float curSquashValue;
//   unsigned __int16 modelIndex;
//   unsigned __int16 nextNode;
// };

// /* 5277 */
// struct ModelHashTable<ActiveModelNode,63,128>
// {
//   ActiveModelNode m_nodes[128];
//   unsigned __int16 m_table[63];
//   unsigned __int16 m_firstFreeNode;
// };

// /* 5278 */
// struct __cppobj __declspec(align(4)) ClientFoliageInfo
// {
//   PerFrameFoliageInfo perFrame[2];
//   GrassPersistForce persistantForces[8];
//   float clientPlayerPos[3];
//   bool clientIsActive;
// };

// /* 5279 */
// struct FoliageShakeParams
// {
//   float maxAge;
//   float radius;
//   float strength;
//   float frequency;
//   float locForwardExtension;
// };

// /* 5280 */
// struct DynSModelDrawStateCmd
// {
//   PerFrameFoliageInfo *frameInfo;
//   unsigned __int16 *smodelList;
//   unsigned int listBegin;
//   unsigned int listEnd;
//   DynSModelClientView *view;
//   DynSModelGfxState *dynData;
//   unsigned int persistForceIndexOffset;
//   unsigned int instantForceIndexOffset;
//   ForceBoundsInfo *boundsInfo;
// };

// /* 5281 */
// struct FoliageShaderConstantBlock
// {
//   float grassParms[4];
//   float grassForce0[4];
//   float grassForce1[4];
//   float windForce0[4];
// };

// /* 5282 */
// struct DynSModelClient
// {
//   int localClientNum;
//   unsigned int *visBitsCamera;
//   unsigned int *visBitsSunShadow;
//   unsigned int numDynSModel;
//   unsigned int numDynSModelInMap;
// };

// /* 5283 */
// struct __declspec(align(4)) GfxSceneSize
// {
//   int width;
//   int height;
//   int compositeX;
//   int compositeY;
//   int compositeW;
//   int compositeH;
//   float aspect;
//   bool panAndScan;
// };

// /* 5284 */
// struct GfxGamutInfo
// {
//   float xRed;
//   float yRed;
//   float xGreen;
//   float yGreen;
//   float xBlue;
//   float yBlue;
//   float xWhite;
//   float yWhite;
//   float gammaRed;
//   float gammaGreen;
//   float gammaBlue;
//   GfxDisplayGamma gammaType;
// };

// /* 5285 */
// struct GfxDisplayInfo
// {
//   bool isHiDef;
//   bool isWideScreen;
//   GfxDisplayStandard outputDisplayVideoStandard;
//   unsigned __int16 outputDisplayWidth;
//   unsigned __int16 outputDisplayHeight;
//   float outputDisplayHz;
//   GfxDisplayMode renderDisplayMode;
//   unsigned __int16 renderDisplayWidth;
//   unsigned __int16 renderDisplayHeight;
//   GfxSceneSize sceneSize[14];
//   float displayfade;
//   float contrastAdjust;
//   float brightnessAdjust;
//   GfxEDIDMode hasEDID;
//   GfxGamutInfo referenceGamut;
//   GfxGamutInfo outputGamut;
//   GfxGamutInfo EDIDGamut;
// };

// /* 5286 */
// struct NVDX_ObjectHandle__
// {
//   int unused;
// };

// /* 5287 */
// struct $240FF632105687D15E57E43F247C9BAA
// {
//   GfxImage *imageHashTable[2048];
//   int picmip;
//   int picmipBump;
//   int picmipSpec;
//   CardMemory totalMemory;
// };

// /* 5288 */
// struct __cppobj std::pair<GfxImage * *,GfxImage * *>
// {
//   GfxImage **first;
//   GfxImage **second;
// };

// /* 5289 */
// struct ImageList
// {
//   unsigned int count;
//   GfxImage *image[4096];
// };

// /* 5290 */
// struct __declspec(align(4)) $3429FE2B485ED1F097C487ED1F67B3DD
// {
//   GfxImage *image;
//   bool loadHighmip;
//   int (__cdecl *OpenFileRead)(const char *, int *);
//   bool ret;
// };

// /* 5291 */
// struct BuiltinImageConstructorTable
// {
//   const char *name;
//   void (__cdecl *LoadCallback)(GfxImage *);
// };

// /* 5292 */
// struct GfxImageFileHeader
// {
//   char tag[3];
//   unsigned __int8 version;
//   unsigned __int8 format;
//   unsigned __int8 flags;
//   __int16 dimensions[3];
//   float gamma;
//   int fileSizeForPicmip[8];
// };

// /* 5293 */
// struct __declspec(align(4)) WaveletDecode
// {
//   unsigned __int16 value;
//   unsigned __int16 bit;
//   const unsigned __int8 *data;
//   int width;
//   int height;
//   int channels;
//   int bpp;
//   int mipLevel;
//   bool dataInitialized;
// };

// /* 5294 */
// struct WaveletHuffmanDecode
// {
//   __int16 value;
//   __int16 bits;
// };

// /* 5295 */
// struct ddscolor_t::<unnamed_type_c>
// {
//   unsigned __int16 b : 5;
//   unsigned __int16 g : 6;
//   unsigned __int16 r : 5;
// };

// /* 5296 */
// union ddscolor_t
// {
//   ddscolor_t::<unnamed_type_c> c;
//   unsigned __int16 rgb;
// };

// /* 5297 */
// struct DdsBlock_Dxt1_t
// {
//   ddscolor_t color0;
//   ddscolor_t color1;
//   unsigned __int8 bits[4];
// };

// /* 5298 */
// struct DdsBlock_Dxt3_t
// {
//   unsigned __int8 alpha[8];
//   DdsBlock_Dxt1_t color;
// };

// /* 5299 */
// struct GfxRawPixel
// {
//   unsigned __int8 r;
//   unsigned __int8 g;
//   unsigned __int8 b;
//   unsigned __int8 a;
// };

// /* 5300 */
// struct GfxRawImage
// {
//   char name[64];
//   GfxRefBlendMode blendMode;
//   bool hasAlpha;
//   int width;
//   int height;
//   float gamma;
//   GfxRawPixel *pixels;
// };

// /* 5301 */
// struct DdsBlock_Dxt5_t
// {
//   unsigned __int8 alpha0;
//   unsigned __int8 alpha1;
//   unsigned __int8 alpha[6];
//   DdsBlock_Dxt1_t color;
// };

// /* 5302 */
// struct GfxWindowParms
// {
//   HWND__ *hwnd;
//   int hz;
//   bool fullscreen;
//   int x;
//   int y;
//   int sceneWidth;
//   int sceneHeight;
//   int displayWidth;
//   int displayHeight;
//   int aaSamples;
// };

// /* 5303 */
// struct GfxAssets
// {
//   IDirect3DQuery9 *pixelCountQuery[4];
// };

// /* 5304 */
// struct NV_GET_CURRENT_SLI_STATE
// {
//   unsigned int version;
//   unsigned int maxNumAFRGroups;
//   unsigned int numAFRGroups;
//   unsigned int currentAFRIndex;
//   unsigned int nextFrameAFRIndex;
//   unsigned int previousFrameAFRIndex;
//   unsigned int bIsCurAFRGroupNew;
// };

// /* 5305 */
// struct GfxGammaRamp
// {
//   unsigned __int16 entries[256];
// };

// /* 5306 */
// struct GfxEnumMonitors
// {
//   int monitorIndex;
//   HMONITOR__ *foundMonitor;
// };

// /* 5315 */
// union $985051285AB838B711572F193DE40719
// {
//   int i[8];
//   char s[80];
// };

// /* 5307 */
// struct jpeg_error_mgr
// {
//   void (__cdecl *error_exit)(jpeg_common_struct *);
//   void (__cdecl *emit_message)(jpeg_common_struct *, int);
//   void (__cdecl *output_message)(jpeg_common_struct *);
//   void (__cdecl *format_message)(jpeg_common_struct *, char *);
//   void (__cdecl *reset_error_mgr)(jpeg_common_struct *);
//   int msg_code;
//   $985051285AB838B711572F193DE40719 msg_parm;
//   int trace_level;
//   int num_warnings;
//   const char *const *jpeg_message_table;
//   int last_jpeg_message;
//   const char *const *addon_message_table;
//   int first_addon_message;
//   int last_addon_message;
//   void (*exit)(...);
//   void (__cdecl *printf)(char *);
// };

// /* 5312 */
// struct jpeg_alloc
// {
//   void *(__cdecl *malloc)(unsigned int);
//   void (__cdecl *free)(void *);
// };

// /* 5308 */
// struct jpeg_common_struct
// {
//   jpeg_error_mgr *err;
//   jpeg_memory_mgr *mem;
//   jpeg_progress_mgr *progress;
//   void *client_data;
//   unsigned __int8 is_decompressor;
//   int global_state;
//   jpeg_alloc alloc;
// };

// /* 5313 */
// struct jpeg_memory_mgr
// {
//   void *(__cdecl *alloc_small)(jpeg_common_struct *, int, unsigned int);
//   void *(__cdecl *alloc_large)(jpeg_common_struct *, int, unsigned int);
//   unsigned __int8 **(__cdecl *alloc_sarray)(jpeg_common_struct *, int, unsigned int, unsigned int);
//   __int16 (**(__cdecl *alloc_barray)(jpeg_common_struct *, int, unsigned int, unsigned int))[64];
//   jvirt_sarray_control *(__cdecl *request_virt_sarray)(jpeg_common_struct *, int, unsigned __int8, unsigned int, unsigned int, unsigned int);
//   jvirt_barray_control *(__cdecl *request_virt_barray)(jpeg_common_struct *, int, unsigned __int8, unsigned int, unsigned int, unsigned int);
//   void (__cdecl *realize_virt_arrays)(jpeg_common_struct *);
//   unsigned __int8 **(__cdecl *access_virt_sarray)(jpeg_common_struct *, jvirt_sarray_control *, unsigned int, unsigned int, unsigned __int8);
//   __int16 (**(__cdecl *access_virt_barray)(jpeg_common_struct *, jvirt_barray_control *, unsigned int, unsigned int, unsigned __int8))[64];
//   void (__cdecl *free_pool)(jpeg_common_struct *, int);
//   void (__cdecl *self_destruct)(jpeg_common_struct *);
//   int max_memory_to_use;
//   int max_alloc_chunk;
//   jpeg_alloc alloc;
// };

// /* 5314 */
// struct jpeg_progress_mgr
// {
//   void (__cdecl *progress_monitor)(jpeg_common_struct *);
//   int pass_counter;
//   int pass_limit;
//   int completed_passes;
//   int total_passes;
// };

// /* 5309 */
// struct jvirt_sarray_control
// {
//   unsigned __int8 **mem_buffer;
//   unsigned int rows_in_array;
//   unsigned int samplesperrow;
//   unsigned int maxaccess;
//   unsigned int rows_in_mem;
//   unsigned int rowsperchunk;
//   unsigned int cur_start_row;
//   unsigned int first_undef_row;
//   unsigned __int8 pre_zero;
//   unsigned __int8 dirty;
//   unsigned __int8 b_s_open;
//   jvirt_sarray_control *next;
//   backing_store_struct b_s_info;
// };

// /* 5311 */
// struct jvirt_barray_control
// {
//   __int16 (**mem_buffer)[64];
//   unsigned int rows_in_array;
//   unsigned int blocksperrow;
//   unsigned int maxaccess;
//   unsigned int rows_in_mem;
//   unsigned int rowsperchunk;
//   unsigned int cur_start_row;
//   unsigned int first_undef_row;
//   unsigned __int8 pre_zero;
//   unsigned __int8 dirty;
//   unsigned __int8 b_s_open;
//   jvirt_barray_control *next;
//   backing_store_struct b_s_info;
// };

// /* 5310 */
// struct backing_store_struct
// {
//   void (__cdecl *read_backing_store)(jpeg_common_struct *, backing_store_struct *, void *, int, int);
//   void (__cdecl *write_backing_store)(jpeg_common_struct *, backing_store_struct *, void *, int, int);
//   void (__cdecl *close_backing_store)(jpeg_common_struct *, backing_store_struct *);
//   _iobuf *temp_file;
//   char temp_name[64];
// };

// /* 5316 */
// struct jpeg_source_mgr
// {
//   const unsigned __int8 *next_input_byte;
//   unsigned int bytes_in_buffer;
//   void (__cdecl *init_source)(jpeg_decompress_struct *);
//   unsigned __int8 (__cdecl *fill_input_buffer)(jpeg_decompress_struct *);
//   void (__cdecl *skip_input_data)(jpeg_decompress_struct *, int);
//   unsigned __int8 (__cdecl *resync_to_restart)(jpeg_decompress_struct *, int);
//   void (__cdecl *term_source)(jpeg_decompress_struct *);
// };

// /* 5321 */
// struct __declspec(align(8)) jpeg_decompress_struct
// {
//   jpeg_error_mgr *err;
//   jpeg_memory_mgr *mem;
//   jpeg_progress_mgr *progress;
//   void *client_data;
//   unsigned __int8 is_decompressor;
//   int global_state;
//   jpeg_alloc alloc;
//   jpeg_source_mgr *src;
//   unsigned int image_width;
//   unsigned int image_height;
//   int num_components;
//   J_COLOR_SPACE jpeg_color_space;
//   J_COLOR_SPACE out_color_space;
//   unsigned int scale_num;
//   unsigned int scale_denom;
//   long double output_gamma;
//   unsigned __int8 buffered_image;
//   unsigned __int8 raw_data_out;
//   J_DCT_METHOD dct_method;
//   unsigned __int8 do_fancy_upsampling;
//   unsigned __int8 do_block_smoothing;
//   unsigned __int8 quantize_colors;
//   J_DITHER_MODE dither_mode;
//   unsigned __int8 two_pass_quantize;
//   int desired_number_of_colors;
//   unsigned __int8 enable_1pass_quant;
//   unsigned __int8 enable_external_quant;
//   unsigned __int8 enable_2pass_quant;
//   unsigned int output_width;
//   unsigned int output_height;
//   int out_color_components;
//   int output_components;
//   int rec_outbuf_height;
//   int actual_number_of_colors;
//   unsigned __int8 **colormap;
//   unsigned int output_scanline;
//   int input_scan_number;
//   unsigned int input_iMCU_row;
//   int output_scan_number;
//   unsigned int output_iMCU_row;
//   int (*coef_bits)[64];
//   JQUANT_TBL *quant_tbl_ptrs[4];
//   JHUFF_TBL *dc_huff_tbl_ptrs[4];
//   JHUFF_TBL *ac_huff_tbl_ptrs[4];
//   int data_precision;
//   jpeg_component_info *comp_info;
//   unsigned __int8 progressive_mode;
//   unsigned __int8 arith_code;
//   unsigned __int8 arith_dc_L[16];
//   unsigned __int8 arith_dc_U[16];
//   unsigned __int8 arith_ac_K[16];
//   unsigned int restart_interval;
//   unsigned __int8 saw_JFIF_marker;
//   unsigned __int8 JFIF_major_version;
//   unsigned __int8 JFIF_minor_version;
//   unsigned __int8 density_unit;
//   unsigned __int16 X_density;
//   unsigned __int16 Y_density;
//   unsigned __int8 saw_Adobe_marker;
//   unsigned __int8 Adobe_transform;
//   unsigned __int8 CCIR601_sampling;
//   jpeg_marker_struct *marker_list;
//   int max_h_samp_factor;
//   int max_v_samp_factor;
//   int min_DCT_scaled_size;
//   unsigned int total_iMCU_rows;
//   unsigned __int8 *sample_range_limit;
//   int comps_in_scan;
//   jpeg_component_info *cur_comp_info[4];
//   unsigned int MCUs_per_row;
//   unsigned int MCU_rows_in_scan;
//   int blocks_in_MCU;
//   int MCU_membership[10];
//   int Ss;
//   int Se;
//   int Ah;
//   int Al;
//   int unread_marker;
//   jpeg_decomp_master *master;
//   jpeg_d_main_controller *main;
//   jpeg_d_coef_controller *coef;
//   jpeg_d_post_controller *post;
//   jpeg_input_controller *inputctl;
//   jpeg_marker_reader *marker;
//   jpeg_entropy_decoder *entropy;
//   jpeg_inverse_dct *idct;
//   jpeg_upsampler *upsample;
//   jpeg_color_deconverter *cconvert;
//   jpeg_color_quantizer *cquantize;
// };

// /* 5317 */
// struct __declspec(align(2)) JQUANT_TBL
// {
//   unsigned __int16 quantval[64];
//   unsigned __int8 sent_table;
// };

// /* 5318 */
// struct JHUFF_TBL
// {
//   unsigned __int8 bits[17];
//   unsigned __int8 huffval[256];
//   unsigned __int8 sent_table;
// };

// /* 5319 */
// struct jpeg_component_info
// {
//   int component_id;
//   int component_index;
//   int h_samp_factor;
//   int v_samp_factor;
//   int quant_tbl_no;
//   int dc_tbl_no;
//   int ac_tbl_no;
//   unsigned int width_in_blocks;
//   unsigned int height_in_blocks;
//   int DCT_scaled_size;
//   unsigned int downsampled_width;
//   unsigned int downsampled_height;
//   unsigned __int8 component_needed;
//   int MCU_width;
//   int MCU_height;
//   int MCU_blocks;
//   int MCU_sample_width;
//   int last_col_width;
//   int last_row_height;
//   JQUANT_TBL *quant_table;
//   void *dct_table;
// };

// /* 5320 */
// struct jpeg_marker_struct
// {
//   jpeg_marker_struct *next;
//   unsigned __int8 marker;
//   unsigned int original_length;
//   unsigned int data_length;
//   unsigned __int8 *data;
// };

// /* 5322 */
// struct __declspec(align(4)) jpeg_decomp_master
// {
//   void (__cdecl *prepare_for_output_pass)(jpeg_decompress_struct *);
//   void (__cdecl *finish_output_pass)(jpeg_decompress_struct *);
//   unsigned __int8 is_dummy_pass;
// };

// /* 5323 */
// struct jpeg_d_main_controller
// {
//   void (__cdecl *start_pass)(jpeg_decompress_struct *, J_BUF_MODE);
//   void (__cdecl *process_data)(jpeg_decompress_struct *, unsigned __int8 **, unsigned int *, unsigned int);
// };

// /* 5324 */
// struct jpeg_d_coef_controller
// {
//   void (__cdecl *start_input_pass)(jpeg_decompress_struct *);
//   int (__cdecl *consume_data)(jpeg_decompress_struct *);
//   void (__cdecl *start_output_pass)(jpeg_decompress_struct *);
//   int (__cdecl *decompress_data)(jpeg_decompress_struct *, unsigned __int8 ***);
//   jvirt_barray_control **coef_arrays;
// };

// /* 5325 */
// struct jpeg_d_post_controller
// {
//   void (__cdecl *start_pass)(jpeg_decompress_struct *, J_BUF_MODE);
//   void (__cdecl *post_process_data)(jpeg_decompress_struct *, unsigned __int8 ***, unsigned int *, unsigned int, unsigned __int8 **, unsigned int *, unsigned int);
// };

// /* 5326 */
// struct __declspec(align(4)) jpeg_input_controller
// {
//   int (__cdecl *consume_input)(jpeg_decompress_struct *);
//   void (__cdecl *reset_input_controller)(jpeg_decompress_struct *);
//   void (__cdecl *start_input_pass)(jpeg_decompress_struct *);
//   void (__cdecl *finish_input_pass)(jpeg_decompress_struct *);
//   unsigned __int8 has_multiple_scans;
//   unsigned __int8 eoi_reached;
// };

// /* 5327 */
// struct jpeg_marker_reader
// {
//   void (__cdecl *reset_marker_reader)(jpeg_decompress_struct *);
//   int (__cdecl *read_markers)(jpeg_decompress_struct *);
//   unsigned __int8 (__cdecl *read_restart_marker)(jpeg_decompress_struct *);
//   unsigned __int8 saw_SOI;
//   unsigned __int8 saw_SOF;
//   int next_restart_num;
//   unsigned int discarded_bytes;
// };

// /* 5328 */
// struct __declspec(align(4)) jpeg_entropy_decoder
// {
//   void (__cdecl *start_pass)(jpeg_decompress_struct *);
//   unsigned __int8 (__cdecl *decode_mcu)(jpeg_decompress_struct *, __int16 (**)[64]);
//   unsigned __int8 insufficient_data;
// };

// /* 5329 */
// struct jpeg_inverse_dct
// {
//   void (__cdecl *start_pass)(jpeg_decompress_struct *);
//   void (__cdecl *inverse_DCT[10])(jpeg_decompress_struct *, jpeg_component_info *, __int16 *, unsigned __int8 **, unsigned int);
// };

// /* 5330 */
// struct __declspec(align(4)) jpeg_upsampler
// {
//   void (__cdecl *start_pass)(jpeg_decompress_struct *);
//   void (__cdecl *upsample)(jpeg_decompress_struct *, unsigned __int8 ***, unsigned int *, unsigned int, unsigned __int8 **, unsigned int *, unsigned int);
//   unsigned __int8 need_context_rows;
// };

// /* 5331 */
// struct jpeg_color_deconverter
// {
//   void (__cdecl *start_pass)(jpeg_decompress_struct *);
//   void (__cdecl *color_convert)(jpeg_decompress_struct *, unsigned __int8 ***, unsigned int, unsigned __int8 **, int);
// };

// /* 5332 */
// struct jpeg_color_quantizer
// {
//   void (__cdecl *start_pass)(jpeg_decompress_struct *, unsigned __int8);
//   void (__cdecl *color_quantize)(jpeg_decompress_struct *, unsigned __int8 **, unsigned __int8 **, int);
//   void (__cdecl *finish_pass)(jpeg_decompress_struct *);
//   void (__cdecl *new_color_map)(jpeg_decompress_struct *);
// };

// /* 5333 */
// union jpeg_error_mgr::<unnamed_type_msg_parm>
// {
//   int i[8];
//   char s[80];
// };

// /* 5334 */
// struct jpeg_compress_struct
// {
//   jpeg_error_mgr *err;
//   jpeg_memory_mgr *mem;
//   jpeg_progress_mgr *progress;
//   void *client_data;
//   unsigned __int8 is_decompressor;
//   int global_state;
//   jpeg_alloc alloc;
//   jpeg_destination_mgr *dest;
//   unsigned int image_width;
//   unsigned int image_height;
//   int input_components;
//   J_COLOR_SPACE in_color_space;
//   long double input_gamma;
//   int data_precision;
//   int num_components;
//   J_COLOR_SPACE jpeg_color_space;
//   jpeg_component_info *comp_info;
//   JQUANT_TBL *quant_tbl_ptrs[4];
//   JHUFF_TBL *dc_huff_tbl_ptrs[4];
//   JHUFF_TBL *ac_huff_tbl_ptrs[4];
//   unsigned __int8 arith_dc_L[16];
//   unsigned __int8 arith_dc_U[16];
//   unsigned __int8 arith_ac_K[16];
//   int num_scans;
//   const jpeg_scan_info *scan_info;
//   unsigned __int8 raw_data_in;
//   unsigned __int8 arith_code;
//   unsigned __int8 optimize_coding;
//   unsigned __int8 CCIR601_sampling;
//   int smoothing_factor;
//   J_DCT_METHOD dct_method;
//   unsigned int restart_interval;
//   int restart_in_rows;
//   unsigned __int8 write_JFIF_header;
//   unsigned __int8 JFIF_major_version;
//   unsigned __int8 JFIF_minor_version;
//   unsigned __int8 density_unit;
//   unsigned __int16 X_density;
//   unsigned __int16 Y_density;
//   unsigned __int8 write_Adobe_marker;
//   unsigned int next_scanline;
//   unsigned __int8 progressive_mode;
//   int max_h_samp_factor;
//   int max_v_samp_factor;
//   unsigned int total_iMCU_rows;
//   int comps_in_scan;
//   jpeg_component_info *cur_comp_info[4];
//   unsigned int MCUs_per_row;
//   unsigned int MCU_rows_in_scan;
//   int blocks_in_MCU;
//   int MCU_membership[10];
//   int Ss;
//   int Se;
//   int Ah;
//   int Al;
//   jpeg_comp_master *master;
//   jpeg_c_main_controller *main;
//   jpeg_c_prep_controller *prep;
//   jpeg_c_coef_controller *coef;
//   jpeg_marker_writer *marker;
//   jpeg_color_converter *cconvert;
//   jpeg_downsampler *downsample;
//   jpeg_forward_dct *fdct;
//   jpeg_entropy_encoder *entropy;
//   jpeg_scan_info *script_space;
//   int script_space_size;
// };

// /* 5335 */
// struct jpeg_destination_mgr
// {
//   unsigned __int8 *next_output_byte;
//   unsigned int free_in_buffer;
//   void (__cdecl *init_destination)(jpeg_compress_struct *);
//   unsigned __int8 (__cdecl *empty_output_buffer)(jpeg_compress_struct *);
//   void (__cdecl *term_destination)(jpeg_compress_struct *);
// };

// /* 5336 */
// const struct jpeg_scan_info
// {
//   int comps_in_scan;
//   int component_index[4];
//   int Ss;
//   int Se;
//   int Ah;
//   int Al;
// };

// /* 5337 */
// struct __declspec(align(4)) jpeg_comp_master
// {
//   void (__cdecl *prepare_for_pass)(jpeg_compress_struct *);
//   void (__cdecl *pass_startup)(jpeg_compress_struct *);
//   void (__cdecl *finish_pass)(jpeg_compress_struct *);
//   unsigned __int8 call_pass_startup;
//   unsigned __int8 is_last_pass;
// };

// /* 5338 */
// struct jpeg_c_main_controller
// {
//   void (__cdecl *start_pass)(jpeg_compress_struct *, J_BUF_MODE);
//   void (__cdecl *process_data)(jpeg_compress_struct *, unsigned __int8 **, unsigned int *, unsigned int);
// };

// /* 5339 */
// struct jpeg_c_prep_controller
// {
//   void (__cdecl *start_pass)(jpeg_compress_struct *, J_BUF_MODE);
//   void (__cdecl *pre_process_data)(jpeg_compress_struct *, unsigned __int8 **, unsigned int *, unsigned int, unsigned __int8 ***, unsigned int *, unsigned int);
// };

// /* 5340 */
// struct jpeg_c_coef_controller
// {
//   void (__cdecl *start_pass)(jpeg_compress_struct *, J_BUF_MODE);
//   unsigned __int8 (__cdecl *compress_data)(jpeg_compress_struct *, unsigned __int8 ***);
// };

// /* 5341 */
// struct jpeg_marker_writer
// {
//   void (__cdecl *write_file_header)(jpeg_compress_struct *);
//   void (__cdecl *write_frame_header)(jpeg_compress_struct *);
//   void (__cdecl *write_scan_header)(jpeg_compress_struct *);
//   void (__cdecl *write_file_trailer)(jpeg_compress_struct *);
//   void (__cdecl *write_tables_only)(jpeg_compress_struct *);
//   void (__cdecl *write_marker_header)(jpeg_compress_struct *, int, unsigned int);
//   void (__cdecl *write_marker_byte)(jpeg_compress_struct *, int);
// };

// /* 5342 */
// struct jpeg_color_converter
// {
//   void (__cdecl *start_pass)(jpeg_compress_struct *);
//   void (__cdecl *color_convert)(jpeg_compress_struct *, unsigned __int8 **, unsigned __int8 ***, unsigned int, int);
// };

// /* 5343 */
// struct __declspec(align(4)) jpeg_downsampler
// {
//   void (__cdecl *start_pass)(jpeg_compress_struct *);
//   void (__cdecl *downsample)(jpeg_compress_struct *, unsigned __int8 ***, unsigned int, unsigned __int8 ***, unsigned int);
//   unsigned __int8 need_context_rows;
// };

// /* 5344 */
// struct jpeg_forward_dct
// {
//   void (__cdecl *start_pass)(jpeg_compress_struct *);
//   void (__cdecl *forward_DCT)(jpeg_compress_struct *, jpeg_component_info *, unsigned __int8 **, __int16 (*)[64], unsigned int, unsigned int, unsigned int);
// };

// /* 5345 */
// struct jpeg_entropy_encoder
// {
//   void (__cdecl *start_pass)(jpeg_compress_struct *, unsigned __int8);
//   unsigned __int8 (__cdecl *encode_mcu)(jpeg_compress_struct *, __int16 (**)[64]);
//   void (__cdecl *finish_pass)(jpeg_compress_struct *);
// };

// /* 5346 */
// struct my_destination_mgr
// {
//   jpeg_destination_mgr pub;
//   unsigned __int8 *outfile;
//   int size;
// };

// /* 5347 */
// struct LightGlobals
// {
//   int defCount;
//   GfxLightDef *defs[64];
// };

// /* 5348 */
// struct StaticModelLightCallback
// {
//   unsigned __int8 *smodelVisData;
//   float position[3];
//   float radiusSq;
// };

// /* 5349 */
// struct __cppobj std::pair<GfxSurface * *,GfxSurface * *>
// {
//   GfxSurface **first;
//   GfxSurface **second;
// };

// /* 5350 */
// struct BspSpotLightCallback
// {
//   const unsigned __int8 *surfaceVisData;
// };

// /* 5351 */
// struct LightDefCopyConfig
// {
//   unsigned __int8 *dest;
//   unsigned int zoom;
// };

// /* 5352 */
// struct FxWorldMarkPoint
// {
//   float xyz[3];
//   float vertWeights[3];
// };

// /* 5353 */
// struct MarkModelCoreContext
// {
//   MarkInfo *markInfo;
//   GfxMarkContext *markContext;
//   const float *markOrigin;
//   const float *markDir;
//   const MarkClipPlaneSet *clipPlanes;
//   const float (*transformMatrix)[3];
//   const float (*transformNormalMatrix)[3];
// };

// /* 5354 */
// struct FxModelMarkPoint
// {
//   float xyz[3];
//   float vertWeights[3];
// };

// /* 5355 */
// struct BuiltInMaterialTable
// {
//   const char *name;
//   Material **material;
// };

// /* 5356 */
// struct PerMapMaterialTable
// {
//   const char *name;
//   Material **material;
// };

// /* 5357 */
// struct $5803DA4EE1143C7EE9D14DA3FE11ED2E
// {
//   int techniqueSetCount;
//   MaterialTechniqueSet *techniqueSetHashTable[2048];
// };

// /* 5358 */
// struct stream_source_info_t
// {
//   unsigned __int8 Stream;
//   unsigned __int8 Offset;
//   unsigned __int8 Type;
// };

// /* 5359 */
// struct stream_dest_info_t
// {
//   unsigned __int8 Usage;
//   unsigned __int8 UsageIndex;
// };

// /* 5360 */
// struct __cppobj std::pair<MaterialMemory *,MaterialMemory *>
// {
//   MaterialMemory *first;
//   MaterialMemory *second;
// };

// /* 5361 */
// struct MaterialList
// {
//   unsigned int count;
//   MaterialMemory sorted[4096];
// };

// /* 5362 */
// struct GfxShaderConstantBlock
// {
//   unsigned int count;
//   unsigned __int16 dest[32];
//   const float *value[32];
// };

// /* 5363 */
// struct CodeConstantSource
// {
//   const char *name;
//   unsigned __int8 source;
//   const CodeConstantSource *subtable;
//   int arrayCount;
//   int arrayStride;
// };

// /* 5364 */
// struct MtlStateMapBitName
// {
//   const char *name;
//   int bits;
// };

// /* 5365 */
// struct MtlStateMapBitGroup
// {
//   const char *name;
//   const MtlStateMapBitName *bitNames;
//   int stateBitsMask[2];
// };

// /* 5366 */
// struct LayeredTechniqueSetName
// {
//   const char *inputName;
//   const char *namePrefixRegister;
//   const char *namePrefixGenerate;
//   const char *nameChunk;
// };

// /* 5367 */
// struct ScriptableConstant
// {
//   unsigned __int8 source;
//   const char *sourceName;
// };

// /* 5368 */
// struct MaterialTypeInfo
// {
//   const char *prefix;
//   const char *techniqueSetPrefix;
//   unsigned int prefixLen;
// };

// /* 5369 */
// struct GfxCachedShaderText
// {
//   const char *name;
//   const char *text;
//   int textSize;
// };

// /* 5370 */
// struct MaterialString
// {
//   const char *string;
//   unsigned int hash;
// };

// /* 5371 */
// struct MaterialStateMapRule
// {
//   unsigned int stateBitsMask[2];
//   unsigned int stateBitsValue[2];
//   unsigned int stateBitsSet[2];
//   unsigned int stateBitsClear[2];
// };

// /* 5372 */
// struct MaterialStateMapRuleSet
// {
//   int ruleCount;
//   MaterialStateMapRule rules[1];
// };

// /* 5373 */
// struct MaterialStateMap
// {
//   const char *name;
//   MaterialStateMapRuleSet *ruleSet[10];
// };

// /* 5374 */
// struct $5F54D0B6D1FDD060CFB66D862A893CC4
// {
//   unsigned int cachedShaderCount;
//   GfxCachedShaderText *cachedShaderText;
//   unsigned int vertexDeclCount;
//   MaterialVertexDeclaration vertexDeclHashTable[64];
//   unsigned int literalCount;
//   float literalTable[32][4];
//   unsigned int stringCount;
//   MaterialString stringHashTable[1024];
//   unsigned int vertexShaderCount;
//   MaterialVertexShader *vertexShaderHashTable[5120];
//   unsigned int pixelShaderCount;
//   MaterialPixelShader *pixelShaderHashTable[20480];
//   unsigned int stateMapCount;
//   MaterialStateMap *stateMapHashTable[64];
//   unsigned int techniqueCount;
//   MaterialTechnique *techniqueHashTable[16384];
//   const MaterialRaw *sortMtlRaw;
// };

// /* 5375 */
// struct CodeSamplerSource
// {
//   const char *name;
//   MaterialTextureSource source;
//   const CodeSamplerSource *subtable;
//   int arrayCount;
//   int arrayStride;
// };

// /* 5376 */
// struct _D3DXSHADER_TYPEINFO
// {
//   unsigned __int16 Class;
//   unsigned __int16 Type;
//   unsigned __int16 Rows;
//   unsigned __int16 Columns;
//   unsigned __int16 Elements;
//   unsigned __int16 StructMembers;
//   unsigned int StructMemberInfo;
// };

// /* 5377 */
// struct GfxAssembledShaderTextFile
// {
//   unsigned int srcLine;
//   unsigned int destLine;
//   char fileName[256];
// };

// /* 5378 */
// struct GfxAssembledShaderText
// {
//   char *string;
//   unsigned int used;
//   unsigned int total;
//   unsigned int currentDestLine;
//   bool overflowed;
//   unsigned int fileCount;
//   GfxAssembledShaderTextFile files[128];
// };

// /* 5379 */
// struct __cppobj std::pair<GfxCachedShaderText *,GfxCachedShaderText *>
// {
//   GfxCachedShaderText *first;
//   GfxCachedShaderText *second;
// };

// /* 5380 */
// struct __cppobj std::pair<Material * *,Material * *>
// {
//   Material **first;
//   Material **second;
// };

// /* 5381 */
// struct __declspec(align(4)) ShaderUniformDef
// {
//   ShaderParamType type;
//   const char *name;
//   unsigned __int16 index;
//   unsigned __int16 resourceDest;
//   bool isTransposed;
//   bool isAssigned;
// };

// /* 5382 */
// struct MaterialWaterDef
// {
//   int textureWidth;
//   float horizontalWorldLength;
//   float verticalWorldLength;
//   float amplitude;
//   float windSpeed;
//   float windDirection[2];
//   water_t *map;
// };

// /* 5383 */
// struct __declspec(align(4)) ShaderIndexRange
// {
//   unsigned int first;
//   unsigned int count;
//   bool isImplicit;
// };

// /* 5384 */
// struct ShaderArgumentDest
// {
//   ShaderIndexRange indexRange;
//   const char *paramName;
// };

// /* 5385 */
// struct _D3DXSHADER_CONSTANTINFO
// {
//   unsigned int Name;
//   unsigned __int16 RegisterSet;
//   unsigned __int16 RegisterIndex;
//   unsigned __int16 RegisterCount;
//   unsigned __int16 Reserved;
//   unsigned int TypeInfo;
//   unsigned int DefaultValue;
// };

// /* 5386 */
// struct _D3DXSHADER_CONSTANTTABLE
// {
//   unsigned int Size;
//   unsigned int Creator;
//   unsigned int Version;
//   unsigned int Constants;
//   unsigned int ConstantInfo;
//   unsigned int Flags;
//   unsigned int Target;
// };

// /* 5387 */
// struct ShaderVaryingDef
// {
//   const char *name;
//   unsigned __int8 streamDest;
//   unsigned __int8 resourceDest;
//   bool isAssigned;
//   bool isSpecialFragmentRegister;
// };

// /* 5388 */
// struct _D3DXSEMANTIC
// {
//   unsigned int Usage;
//   unsigned int UsageIndex;
// };

// /* 5389 */
// struct ShaderParameterSet
// {
//   ShaderUniformDef uniformInputs[512];
//   ShaderVaryingDef varyingInputs[512];
//   ShaderVaryingDef outputs[16];
//   unsigned int uniformInputCount;
//   unsigned int varyingInputCount;
//   unsigned int outputCount;
// };

// /* 5390 */
// union ShaderArgumentSource::<unnamed_type_u>
// {
//   const float *literalConst;
//   unsigned __int16 codeIndex;
//   const char *name;
// };

// /* 5391 */
// struct ShaderArgumentSource
// {
//   ShaderIndexRange indexRange;
//   unsigned __int16 type;
//   ShaderArgumentSource::<unnamed_type_u> u;
// };

// /* 5392 */
// struct GfxMeshGlobals
// {
//   GfxQuadMeshData fullSceneViewMesh[4];
//   GfxMeshData spotShadowClearMeshData[4];
//   GfxMeshData sunShadowClearMeshData[2];
// };

// /* 5393 */
// struct __cppobj std::pair<XModel * *,XModel * *>
// {
//   XModel **first;
//   XModel **second;
// };

// /* 5394 */
// struct ModelList
// {
//   int count;
//   XModel *sorted[2048];
// };

// /* 5395 */
// struct GfxSmodelLightGlob::<unnamed_type_local>
// {
//   unsigned __int16 smodelIndex[4096];
//   unsigned int usedFrameCount[4096];
//   unsigned int entryLimit;
//   unsigned int assignedCount;
//   unsigned int freeableCount;
//   unsigned int frameCount;
//   int anyNewLighting;
//   unsigned int pad[27];
// };

// /* 5396 */
// struct GfxSmodelLightGlob
// {
//   unsigned __int16 freeableHandles[4096];
//   unsigned int lightingBits[2048];
//   GfxSmodelLightGlob::<unnamed_type_local> local;
// };

// /* 5397 */
// struct $D83B18AC5ED51685DB5F92059A920C50
// {
//   unsigned int baseIndex;
// };

// /* 5398 */
// struct $18E3DCACD37255418531E8411574380C
// {
//   float invImageHeight;
//   $D83B18AC5ED51685DB5F92059A920C50 xmodel;
//   unsigned int totalEntryLimit;
//   unsigned int entryBitsY;
//   unsigned int imageHeight;
//   const GfxEntity *entities;
//   unsigned int modFrameCount;
//   GfxImage *image;
//   unsigned int xmodelEntryLimit;
//   GfxLightingInfo *lightingInfo;
//   float (*lightingOrigins)[3];
//   int allocModelFail;
//   unsigned int *pixelFreeBits[4];
//   unsigned int *prevPrevPixelFreeBits;
//   unsigned int *prevPixelFreeBits;
//   unsigned int *currPixelFreeBits;
//   unsigned int pixelFreeBitsSize;
//   unsigned int pixelFreeBitsWordCount;
//   unsigned int pixelFreeRover;
//   _D3DLOCKED_BOX lockedBox;
// };

// /* 5399 */
// struct GfxFindLightForSphere
// {
//   const GfxViewInfo *viewInfo;
//   float origin[3];
//   float radius;
// };

// /* 5400 */
// struct CalcLightingCmd
// {
//   unsigned int entryIndex;
//   float lightingOrigin[3];
//   unsigned int nonSunPrimaryLightIndex;
//   GfxModelLightExtrapolation extrapolateBehavior;
//   bool useHeroLighting;
//   unsigned __int8 *primaryLightIndex1;
//   unsigned __int8 *primaryLightIndex2;
//   unsigned __int8 *pixels;
//   unsigned __int8 *modelLightGlobPrimaryLightIndex;
// };

// /* 5401 */
// struct GfxFindLightForBox
// {
//   const GfxViewInfo *viewInfo;
//   float midPoint[3];
//   float halfSize[3];
// };

// /* 5402 */
// struct __cppobj Sse_SkinVertexSimple_0
// {
// };

// /* 5403 */
// struct __cppobj Sse_SkinVertexSimple_3
// {
// };

// /* 5404 */
// struct __cppobj Sse_SkinVertex_0
// {
// };

// /* 5405 */
// struct __cppobj Sse_SkinVertexSimple_1
// {
// };

// /* 5406 */
// struct SseMatrix
// {
//   __m128 col0;
//   __m128 col1;
//   __m128 col2;
//   __m128 col3;
// };

// /* 5407 */
// struct __cppobj Sse_SkinVertex_1
// {
// };

// /* 5408 */
// struct __cppobj Sse_SkinVertex_2
// {
// };

// /* 5409 */
// struct __cppobj Sse_SkinVertexSimple_2
// {
// };

// /* 5410 */
// struct __cppobj Sse_SkinVertex_3
// {
// };

// /* 5411 */
// struct OutdoorGlob
// {
//   float bbox[2][3];
//   float scale[3];
//   float invScale[3];
//   float add[3];
//   unsigned __int8 *pic;
// };

// /* 5412 */
// struct GfxPixelCostColorCode
// {
//   unsigned __int8 count;
//   unsigned __int8 r;
//   unsigned __int8 g;
//   unsigned __int8 b;
//   const char *colorName;
// };

// /* 5413 */
// struct GfxDecodedLightGridColors
// {
//   float rgb[56][4];
// };

// /* 5414 */
// struct GfxShadowedLightEntry
// {
//   unsigned __int8 shadowableLightIndex;
//   bool isFadingOut;
//   float fade;
// };

// /* 5415 */
// struct GfxShadowedLightHistory
// {
//   GfxShadowedLightEntry entries[4];
//   unsigned int entryCount;
//   unsigned int lastUpdateTime;
// };

// /* 5416 */
// struct GfxCandidateShadowedLight
// {
//   unsigned int shadowableLightIndex;
//   float score;
// };

// /* 5417 */
// struct ColorCorrectionData
// {
//   char name[64];
//   float black_level;
//   float white_level;
//   float gamma;
//   float saturation;
//   float range;
// };

// /* 5418 */
// struct GfxCmdSaveScreen
// {
//   GfxCmdHeader header;
//   int screenTimerId;
// };

// /* 5419 */
// struct GfxCmdStretchPicRotateXY
// {
//   GfxCmdHeader header;
//   const Material *material;
//   float x;
//   float y;
//   float w0;
//   float w;
//   float h;
//   float s0;
//   float t0;
//   float s1;
//   float t1;
//   GfxColor color;
//   float rotation;
// };

// /* 5420 */
// struct GfxCmdSaveScreenSection
// {
//   GfxCmdHeader header;
//   float s0;
//   float t0;
//   float ds;
//   float dt;
//   int screenTimerId;
// };

// /* 5421 */
// struct GfxCmdSetViewport
// {
//   GfxCmdHeader header;
//   GfxViewport viewport;
// };

// /* 5422 */
// struct GfxCmdDrawFramed2D
// {
//   GfxCmdHeader header;
//   float x;
//   float y;
//   float w;
//   float h;
//   float thicknessW;
//   float thicknessH;
//   float thicknessTex;
//   int sides;
//   GfxColor color;
//   const Material *material;
// };

// /* 5423 */
// struct GfxCmdResolveComposite
// {
//   GfxCmdHeader header;
//   void (__cdecl *callback)(GfxImage *);
// };

// /* 5424 */
// struct GfxCmdDrawText3D
// {
//   GfxCmdHeader header;
//   float org[3];
//   Font_s *font;
//   float xPixelStep[3];
//   float yPixelStep[3];
//   GfxColor color;
//   char text[4];
// };

// /* 5425 */
// struct GfxCmdStretchRaw
// {
//   GfxCmdHeader header;
//   int x;
//   int y;
//   int w;
//   int h;
//   int cols;
//   int rows;
//   const unsigned __int8 *data;
//   int client;
//   int dirty;
// };

// /* 5426 */
// struct __declspec(align(2)) GfxCmdDrawText2D
// {
//   GfxCmdHeader header;
//   float x;
//   float y;
//   float w;
//   float rotation;
//   Font_s *font;
//   float xScale;
//   float yScale;
//   GfxColor color;
//   int maxChars;
//   int renderFlags;
//   int cursorPos;
//   char cursorLetter;
//   GfxColor glowForceColor;
//   int fxBirthTime;
//   int fxLetterTime;
//   int fxDecayStartTime;
//   int fxDecayDuration;
//   int fxRedactDecayStartTime;
//   int fxRedactDecayDuration;
//   const Material *fxMaterial;
//   const Material *fxMaterialGlow;
//   float padding;
//   char text[3];
// };

// /* 5427 */
// struct GfxCmdDrawQuadPic
// {
//   GfxCmdHeader header;
//   const Material *material;
//   float verts[4][2];
//   float w;
//   GfxColor color;
// };

// /* 5428 */
// struct GfxCmdDrawEmblemLayer
// {
//   GfxCmdHeader header;
//   const Material *material;
//   const GfxImage *image;
//   int colorIdx;
//   float outlineSize;
//   float smoothSize;
//   GfxQuadVertex verts[4];
// };

// /* 5429 */
// struct GfxCmdClearScreen
// {
//   GfxCmdHeader header;
//   unsigned __int8 whichToClear;
//   unsigned __int8 stencil;
//   float depth;
//   float color[4];
// };

// /* 5430 */
// struct GfxCmdDrawPoints
// {
//   GfxCmdHeader header;
//   __int16 pointCount;
//   unsigned __int8 size;
//   unsigned __int8 dimensions;
//   GfxPointVertex verts[1];
// };

// /* 5431 */
// struct GfxCmdSetMaterialColor
// {
//   GfxCmdHeader header;
//   float color[4];
// };

// /* 5432 */
// struct __declspec(align(4)) GfxCmdDrawTriangles
// {
//   GfxCmdHeader header;
//   const Material *material;
//   unsigned __int8 techType;
//   __int16 indexCount;
//   __int16 vertexCount;
// };

// /* 5433 */
// struct GfxCmdSetCustomConstant
// {
//   GfxCmdHeader header;
//   unsigned int type;
//   float vec[4];
// };

// /* 5434 */
// struct GfxCmdSetScissor
// {
//   GfxCmdHeader header;
//   int enabled;
//   GfxViewport scissor;
// };

// /* 5435 */
// struct GfxCmdStretchComposite
// {
//   GfxCmdHeader header;
//   GfxImage *image;
//   float x;
//   float y;
//   float w;
//   float h;
//   float s0;
//   float t0;
//   float s1;
//   float t1;
//   GfxColor color;
// };

// /* 5436 */
// struct GfxCmdDrawLines
// {
//   GfxCmdHeader header;
//   __int16 lineCount;
//   unsigned __int8 width;
//   unsigned __int8 dimensions;
//   GfxPointVertex verts[2];
// };

// /* 5437 */
// struct GfxCmdStretchPic
// {
//   GfxCmdHeader header;
//   const Material *material;
//   float x;
//   float y;
//   float w0;
//   float w;
//   float h;
//   float s0;
//   float t0;
//   float s1;
//   float t1;
//   GfxColor color;
// };

// /* 5438 */
// struct GfxCmdDrawQuadList2D
// {
//   GfxCmdHeader header;
//   const Material *material;
//   int quadCount;
// };

// /* 5439 */
// struct GfxCmdStretchPicRotateST
// {
//   GfxCmdHeader header;
//   const Material *material;
//   float x;
//   float y;
//   float w;
//   float h;
//   float centerS;
//   float centerT;
//   float radiusST;
//   float scaleFinalS;
//   float scaleFinalT;
//   GfxColor color;
//   float rotation;
// };

// /* 5440 */
// struct GfxCmdBlendSavedScreenFlashed
// {
//   GfxCmdHeader header;
//   float intensityWhiteout;
//   float intensityScreengrab;
//   float s0;
//   float t0;
//   float ds;
//   float dt;
// };

// /* 5441 */
// struct GfxCmdPCCopyImageGenMIP
// {
//   GfxCmdHeader header;
//   void (__cdecl *callback)(void *);
//   GfxImage *image;
//   void *job;
// };

// /* 5442 */
// struct GfxCmdBlendSavedScreenBlurred
// {
//   GfxCmdHeader header;
//   int fadeMsec;
//   float s0;
//   float t0;
//   float ds;
//   float dt;
//   int screenTimerId;
// };

// /* 5443 */
// struct GfxCmdProjectionSet
// {
//   GfxCmdHeader header;
//   GfxProjectionTypes projection;
// };

// /* 5444 */
// struct GfxCmdDrawFullScreenColoredQuad
// {
//   GfxCmdHeader header;
//   const Material *material;
//   float s0;
//   float t0;
//   float s1;
//   float t1;
//   GfxColor color;
// };

// /* 5445 */
// struct __cppobj GfxRenderTargetTexture
// {
// };

// /* 5446 */
// struct ExtraCamSettings
// {
//   bool enabled;
//   int width;
//   int height;
//   int location;
// };

// /* 5447 */
// struct NvDisplayHandle__
// {
//   int unused;
// };

// /* 5448 */
// struct NV_DISPLAY_DRIVER_VERSION
// {
//   unsigned int version;
//   unsigned int drvVersion;
//   unsigned int bldChangeListNum;
//   char szBuildBranchString[64];
//   char szAdapterString[64];
// };

// /* 5449 */
// struct SceneEntCmd
// {
//   const GfxViewInfo *viewInfo;
// };

// /* 5450 */
// struct GfxSceneParms
// {
//   int localClientNum;
//   float blurRadius;
//   float sunVisibility;
//   GfxDepthOfField dof;
//   GfxLightScale charPrimaryLightScale;
//   GfxFilm film;
//   GfxBloom bloom;
//   GfxCompositeFx flameFx;
//   GfxReviveFx reviveFx;
//   GfxCompositeFx waterSheetingFx;
//   GfxDoubleVision doubleVision;
//   GfxGenericFilter genericFilter;
//   GfxPoison poisonFx;
//   GfxCompositeFx electrifiedFx;
//   GfxCompositeFx transportedFx;
//   GfxSaveScreenFx saveScreenFx;
//   bool isRenderingFullScreen;
//   bool playerTeleported;
//   GfxViewport sceneViewport;
//   GfxViewport displayViewport;
//   GfxViewport scissorViewport;
//   const GfxLight *primaryLights;
//   float sceneX;
//   float sceneY;
//   float sceneW;
//   float sceneH;
// };

// /* 5451 */
// struct $069481853E63AB7B456FCC17924CBF75
// {
//   unsigned __int8 *pixels[6];
//   float *pixelsHDR[6];
//   float *pixelsHDRcorrected[6];
// };

// /* 5452 */
// struct SFilterProgress
// {
//   int m_CurrentFace;
//   int m_CurrentRow;
//   int m_CurrentMipLevel;
//   int m_StartFace;
//   int m_EndFace;
//   float m_FractionCompleted;
// };

// /* 5453 */
// struct __cppobj CImageSurface
// {
//   int m_Width;
//   int m_Height;
//   int m_NumChannels;
//   float *m_ImgData;
// };

// /* 5454 */
// struct __cppobj CCubeMapProcessor
// {
//   int m_Status;
//   int m_NumFilterThreads;
//   char m_bThreadInitialized[2];
//   void *m_ThreadHandle[2];
//   unsigned int m_ThreadID[2];
//   SFilterProgress m_ThreadProgress[2];
//   wchar_t m_ProgressString[4096];
//   float m_BaseFilterAngle;
//   float m_InitialMipAngle;
//   float m_MipAnglePerLevelScale;
//   int m_InputSize;
//   int m_OutputSize;
//   int m_NumMipLevels;
//   int m_NumChannels;
//   float *m_FilterLUT;
//   int m_NumFilterLUTEntries;
//   CImageSurface m_NormCubeMap[6];
//   CImageSurface m_InputSurface[6];
//   CImageSurface m_OutputSurface[16][6];
// };

// /* 5455 */
// struct GfxShaderConstantState::<unnamed_type_fields>
// {
//   MaterialArgumentCodeConst codeConst;
//   unsigned int version;
// };

// /* 5456 */
// union GfxShaderConstantState
// {
//   GfxShaderConstantState::<unnamed_type_fields> fields;
//   unsigned __int64 packed;
// };

// /* 5457 */
// struct __cppobj ScopedShaderConstantSetUndo
// {
//   GfxCmdBufSourceState *m_sourceState;
//   ShaderConstantSet m_scs;
// };

// /* 5458 */
// struct SunFlareDynamic
// {
//   float flareIntensity;
//   float sunVisibilityAdjust;
//   float currentBlind;
//   float currentGlare;
//   int lastTime;
//   float lastVisibility;
//   float lastDot;
//   bool error;
//   bool sunQueryIssued[2];
//   IDirect3DQuery9 *sunQuery[2];
//   int hitNum;
// };

// /* 5459 */
// struct GfxSpotShadowEntCmd
// {
//   GfxSceneEntity *sceneEnt;
//   const GfxLight *light;
// };

// /* 5460 */
// struct static_model_tree_list_t
// {
//   static_model_tree_list_t *prev;
//   static_model_tree_list_t *next;
// };

// /* 5461 */
// struct static_model_node_t
// {
//   __int16 usedVerts;
//   bool inuse;
//   unsigned __int8 reserved;
// };

// /* 5462 */
// struct static_model_tree_t
// {
//   static_model_tree_list_t usedlist;
//   unsigned int frameCount;
//   static_model_node_t nodes[63];
// };

// /* 5463 */
// struct static_model_node_list_t
// {
//   static_model_node_list_t *prev;
//   static_model_node_list_t *next;
// };

// /* 5464 */
// union static_model_leaf_t
// {
//   GfxCachedSModelSurf cachedSurf;
//   static_model_node_list_t freenode;
// };

// /* 5465 */
// struct static_model_cache_t
// {
//   static_model_tree_t trees[512];
//   static_model_leaf_t leafs[512][32];
//   static_model_node_list_t freelist[4][6];
//   static_model_tree_list_t usedlist[4];
// };

// /* 5466 */
// struct SkinCachedStaticModelCmd
// {
//   unsigned __int16 cacheIndex;
//   unsigned __int16 firstPatchVert;
// };

// /* 5467 */
// struct GfxSModelSurfStats
// {
//   XModel *model;
//   unsigned int lod;
//   unsigned int smcAllocBits;
//   unsigned int useCount;
// };

// /* 5468 */
// struct __cppobj std::pair<GfxSModelSurfStats *,GfxSModelSurfStats *>
// {
//   GfxSModelSurfStats *first;
//   GfxSModelSurfStats *second;
// };

// /* 5469 */
// struct __cppobj std::pair<GfxStaticModelDrawInst const * *,GfxStaticModelDrawInst const * *>
// {
//   const GfxStaticModelDrawInst **first;
//   const GfxStaticModelDrawInst **second;
// };

// /* 5470 */
// struct __declspec(align(4)) pendingRequest
// {
//   int id[1];
//   GfxImage *image;
//   int imagePart;
//   unsigned __int8 *buffer;
//   int bufferSize;
//   int startTime;
//   float importance;
//   stream_status status;
//   stream_status partStatus[1];
//   int numParts;
//   int bytesToCopy;
//   bool highMip;
// };

// /* 5471 */
// struct streamerHintInfo
// {
//   int entNum;
//   float origin[3];
//   float angles[3];
//   float importance;
// };

// /* 5472 */
// struct __cppobj importance_only_pred
// {
// };

// /* 5473 */
// struct __cppobj importance_and_offset_pred
// {
// };

// /* 5474 */
// struct StreamCombineCmd
// {
//   StreamFrontendGlob *frontend;
// };

// /* 5475 */
// struct __declspec(align(4)) StreamSortCmd
// {
//   StreamFrontendGlob *frontend;
//   bool diskOrder;
// };

// /* 5476 */
// struct StreamUpdateCmd
// {
//   StreamFrontendGlob *frontend;
//   float viewPos[3];
//   float maxDistSq;
//   float distanceScale[2];
// };

// /* 5477 */
// struct distance_data
// {
//   float importance;
//   float distanceForHimip;
// };

// /* 5478 */
// struct StreamAllocGlob
// {
//   FastCriticalSection lock;
// };

// /* 5479 */
// struct ShadowGlobals
// {
//   const MaterialTechnique *defaultShadowCasterTechnique;
// };

// /* 5480 */
// struct _DDSCAPS
// {
//   unsigned int dwCaps;
// };

// /* 5481 */
// union $83FB4F737B5EDC31066F75BACF4F71E0
// {
//   unsigned int dwCaps4;
//   unsigned int dwVolumeDepth;
// };

// /* 5482 */
// struct _DDSCAPS2
// {
//   unsigned int dwCaps;
//   unsigned int dwCaps2;
//   unsigned int dwCaps3;
//   $83FB4F737B5EDC31066F75BACF4F71E0 ___u3;
// };

// /* 5483 */
// struct _DDCAPS_DX7
// {
//   unsigned int dwSize;
//   unsigned int dwCaps;
//   unsigned int dwCaps2;
//   unsigned int dwCKeyCaps;
//   unsigned int dwFXCaps;
//   unsigned int dwFXAlphaCaps;
//   unsigned int dwPalCaps;
//   unsigned int dwSVCaps;
//   unsigned int dwAlphaBltConstBitDepths;
//   unsigned int dwAlphaBltPixelBitDepths;
//   unsigned int dwAlphaBltSurfaceBitDepths;
//   unsigned int dwAlphaOverlayConstBitDepths;
//   unsigned int dwAlphaOverlayPixelBitDepths;
//   unsigned int dwAlphaOverlaySurfaceBitDepths;
//   unsigned int dwZBufferBitDepths;
//   unsigned int dwVidMemTotal;
//   unsigned int dwVidMemFree;
//   unsigned int dwMaxVisibleOverlays;
//   unsigned int dwCurrVisibleOverlays;
//   unsigned int dwNumFourCCCodes;
//   unsigned int dwAlignBoundarySrc;
//   unsigned int dwAlignSizeSrc;
//   unsigned int dwAlignBoundaryDest;
//   unsigned int dwAlignSizeDest;
//   unsigned int dwAlignStrideAlign;
//   unsigned int dwRops[8];
//   _DDSCAPS ddsOldCaps;
//   unsigned int dwMinOverlayStretch;
//   unsigned int dwMaxOverlayStretch;
//   unsigned int dwMinLiveVideoStretch;
//   unsigned int dwMaxLiveVideoStretch;
//   unsigned int dwMinHwCodecStretch;
//   unsigned int dwMaxHwCodecStretch;
//   unsigned int dwReserved1;
//   unsigned int dwReserved2;
//   unsigned int dwReserved3;
//   unsigned int dwSVBCaps;
//   unsigned int dwSVBCKeyCaps;
//   unsigned int dwSVBFXCaps;
//   unsigned int dwSVBRops[8];
//   unsigned int dwVSBCaps;
//   unsigned int dwVSBCKeyCaps;
//   unsigned int dwVSBFXCaps;
//   unsigned int dwVSBRops[8];
//   unsigned int dwSSBCaps;
//   unsigned int dwSSBCKeyCaps;
//   unsigned int dwSSBFXCaps;
//   unsigned int dwSSBRops[8];
//   unsigned int dwMaxVideoPorts;
//   unsigned int dwCurrVideoPorts;
//   unsigned int dwSVBCaps2;
//   unsigned int dwNLVBCaps;
//   unsigned int dwNLVBCaps2;
//   unsigned int dwNLVBCKeyCaps;
//   unsigned int dwNLVBFXCaps;
//   unsigned int dwNLVBRops[8];
//   _DDSCAPS2 ddsCaps;
// };

// /* 5484 */
// struct __declspec(align(8)) tagDDDEVICEIDENTIFIER2
// {
//   char szDriver[512];
//   char szDescription[512];
//   _LARGE_INTEGER liDriverVersion;
//   unsigned int dwVendorId;
//   unsigned int dwDeviceId;
//   unsigned int dwSubSysId;
//   unsigned int dwRevision;
//   _GUID guidDeviceIdentifier;
//   unsigned int dwWHQLLevel;
// };

// /* 5485 */
// struct __cppobj IDirectDrawSurface : IUnknown
// {
// };

// /* 5486 */
// struct _DDCOLORKEY
// {
//   unsigned int dwColorSpaceLowValue;
//   unsigned int dwColorSpaceHighValue;
// };

// /* 5487 */
// union $DB9E4A57EDF4089A40382F3D15E9C2EC
// {
//   unsigned int dwZDestConst;
//   IDirectDrawSurface *lpDDSZBufferDest;
// };

// /* 5488 */
// union $96D8CF2F2FF43ABD8A833A44A47889BE
// {
//   unsigned int dwZSrcConst;
//   IDirectDrawSurface *lpDDSZBufferSrc;
// };

// /* 5489 */
// union $14CCA1ADB54AF87F95DEEEE447454734
// {
//   unsigned int dwAlphaDestConst;
//   IDirectDrawSurface *lpDDSAlphaDest;
// };

// /* 5490 */
// union $7981BF1EB1EAF00839F9B0985A17862A
// {
//   unsigned int dwAlphaSrcConst;
//   IDirectDrawSurface *lpDDSAlphaSrc;
// };

// /* 5491 */
// union $D74A3FF3DFCE5063D38D2632530ABEDF
// {
//   unsigned int dwFillColor;
//   unsigned int dwFillDepth;
//   unsigned int dwFillPixel;
//   IDirectDrawSurface *lpDDSPattern;
// };

// /* 5492 */
// struct _DDBLTFX
// {
//   unsigned int dwSize;
//   unsigned int dwDDFX;
//   unsigned int dwROP;
//   unsigned int dwDDROP;
//   unsigned int dwRotationAngle;
//   unsigned int dwZBufferOpCode;
//   unsigned int dwZBufferLow;
//   unsigned int dwZBufferHigh;
//   unsigned int dwZBufferBaseDest;
//   unsigned int dwZDestConstBitDepth;
//   $DB9E4A57EDF4089A40382F3D15E9C2EC ___u10;
//   unsigned int dwZSrcConstBitDepth;
//   $96D8CF2F2FF43ABD8A833A44A47889BE ___u12;
//   unsigned int dwAlphaEdgeBlendBitDepth;
//   unsigned int dwAlphaEdgeBlend;
//   unsigned int dwReserved;
//   unsigned int dwAlphaDestConstBitDepth;
//   $14CCA1ADB54AF87F95DEEEE447454734 ___u17;
//   unsigned int dwAlphaSrcConstBitDepth;
//   $7981BF1EB1EAF00839F9B0985A17862A ___u19;
//   $D74A3FF3DFCE5063D38D2632530ABEDF ___u20;
//   _DDCOLORKEY ddckDestColorkey;
//   _DDCOLORKEY ddckSrcColorkey;
// };

// /* 5493 */
// struct _DDBLTBATCH
// {
//   tagRECT *lprDest;
//   IDirectDrawSurface *lpDDSSrc;
//   tagRECT *lprSrc;
//   unsigned int dwFlags;
//   _DDBLTFX *lpDDBltFx;
// };

// /* 5494 */
// struct _DDPIXELFORMAT::<unnamed_tag>::<unnamed_type_MultiSampleCaps>
// {
//   unsigned __int16 wFlipMSTypes;
//   unsigned __int16 wBltMSTypes;
// };

// /* 5495 */
// union $DAED55BFC94E6097478CA68F0B175AFE
// {
//   unsigned int dwRGBBitCount;
//   unsigned int dwYUVBitCount;
//   unsigned int dwZBufferBitDepth;
//   unsigned int dwAlphaBitDepth;
//   unsigned int dwLuminanceBitCount;
//   unsigned int dwBumpBitCount;
//   unsigned int dwPrivateFormatBitCount;
// };

// /* 5496 */
// union $CF4E6002FA4B19EC2239361E8AC5A039
// {
//   unsigned int dwRBitMask;
//   unsigned int dwYBitMask;
//   unsigned int dwStencilBitDepth;
//   unsigned int dwLuminanceBitMask;
//   unsigned int dwBumpDuBitMask;
//   unsigned int dwOperations;
// };

// /* 5497 */
// union $1D2D375C893E4ABE23F2C99AA0F5D428
// {
//   unsigned int dwGBitMask;
//   unsigned int dwUBitMask;
//   unsigned int dwZBitMask;
//   unsigned int dwBumpDvBitMask;
//   _DDPIXELFORMAT::<unnamed_tag>::<unnamed_type_MultiSampleCaps> MultiSampleCaps;
// };

// /* 5498 */
// union $01AE0C4CAA17A9DEB3CF9215716A3B58
// {
//   unsigned int dwBBitMask;
//   unsigned int dwVBitMask;
//   unsigned int dwStencilBitMask;
//   unsigned int dwBumpLuminanceBitMask;
// };

// /* 5499 */
// union $F006553FDB25FB59A59693178CCFF094
// {
//   unsigned int dwRGBAlphaBitMask;
//   unsigned int dwYUVAlphaBitMask;
//   unsigned int dwLuminanceAlphaBitMask;
//   unsigned int dwRGBZBitMask;
//   unsigned int dwYUVZBitMask;
// };

// /* 5500 */
// struct _DDPIXELFORMAT
// {
//   unsigned int dwSize;
//   unsigned int dwFlags;
//   unsigned int dwFourCC;
//   $DAED55BFC94E6097478CA68F0B175AFE ___u3;
//   $CF4E6002FA4B19EC2239361E8AC5A039 ___u4;
//   $1D2D375C893E4ABE23F2C99AA0F5D428 ___u5;
//   $01AE0C4CAA17A9DEB3CF9215716A3B58 ___u6;
//   $F006553FDB25FB59A59693178CCFF094 ___u7;
// };

// /* 5501 */
// union $00F4D6FA838FAD5B65924731E0E9CCBC
// {
//   int lPitch;
//   unsigned int dwLinearSize;
// };

// /* 5502 */
// union $EF599A003DBF63C31A82D22AC5A5ECD5
// {
//   unsigned int dwMipMapCount;
//   unsigned int dwZBufferBitDepth;
//   unsigned int dwRefreshRate;
// };

// /* 5503 */
// struct _DDSURFACEDESC
// {
//   unsigned int dwSize;
//   unsigned int dwFlags;
//   unsigned int dwHeight;
//   unsigned int dwWidth;
//   $00F4D6FA838FAD5B65924731E0E9CCBC ___u4;
//   unsigned int dwBackBufferCount;
//   $EF599A003DBF63C31A82D22AC5A5ECD5 ___u6;
//   unsigned int dwAlphaBitDepth;
//   unsigned int dwReserved;
//   void *lpSurface;
//   _DDCOLORKEY ddckCKDestOverlay;
//   _DDCOLORKEY ddckCKDestBlt;
//   _DDCOLORKEY ddckCKSrcOverlay;
//   _DDCOLORKEY ddckCKSrcBlt;
//   _DDPIXELFORMAT ddpfPixelFormat;
//   _DDSCAPS ddsCaps;
// };

// /* 5504 */
// struct __cppobj IDirectDrawClipper : IUnknown
// {
// };

// /* 5505 */
// struct __cppobj IDirectDraw : IUnknown
// {
// };

// /* 5506 */
// struct __cppobj IDirectDrawPalette : IUnknown
// {
// };

// /* 5507 */
// struct /*VFT*/ IDirectDrawPalette_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetCaps)(IDirectDrawPalette *this, unsigned int *);
//   HRESULT (__stdcall *GetEntries)(IDirectDrawPalette *this, unsigned int, unsigned int, unsigned int, tagPALETTEENTRY *);
//   HRESULT (__stdcall *Initialize)(IDirectDrawPalette *this, IDirectDraw *, unsigned int, tagPALETTEENTRY *);
//   HRESULT (__stdcall *SetEntries)(IDirectDrawPalette *this, unsigned int, unsigned int, unsigned int, tagPALETTEENTRY *);
// };

// /* 5508 */
// struct /*VFT*/ IDirectDraw_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *Compact)(IDirectDraw *this);
//   HRESULT (__stdcall *CreateClipper)(IDirectDraw *this, unsigned int, IDirectDrawClipper **, IUnknown *);
//   HRESULT (__stdcall *CreatePalette)(IDirectDraw *this, unsigned int, tagPALETTEENTRY *, IDirectDrawPalette **, IUnknown *);
//   HRESULT (__stdcall *CreateSurface)(IDirectDraw *this, _DDSURFACEDESC *, IDirectDrawSurface **, IUnknown *);
//   HRESULT (__stdcall *DuplicateSurface)(IDirectDraw *this, IDirectDrawSurface *, IDirectDrawSurface **);
//   HRESULT (__stdcall *EnumDisplayModes)(IDirectDraw *this, unsigned int, _DDSURFACEDESC *, void *, HRESULT (__stdcall *)(_DDSURFACEDESC *, void *));
//   HRESULT (__stdcall *EnumSurfaces)(IDirectDraw *this, unsigned int, _DDSURFACEDESC *, void *, HRESULT (__stdcall *)(IDirectDrawSurface *, _DDSURFACEDESC *, void *));
//   HRESULT (__stdcall *FlipToGDISurface)(IDirectDraw *this);
//   HRESULT (__stdcall *GetCaps)(IDirectDraw *this, _DDCAPS_DX7 *, _DDCAPS_DX7 *);
//   HRESULT (__stdcall *GetDisplayMode)(IDirectDraw *this, _DDSURFACEDESC *);
//   HRESULT (__stdcall *GetFourCCCodes)(IDirectDraw *this, unsigned int *, unsigned int *);
//   HRESULT (__stdcall *GetGDISurface)(IDirectDraw *this, IDirectDrawSurface **);
//   HRESULT (__stdcall *GetMonitorFrequency)(IDirectDraw *this, unsigned int *);
//   HRESULT (__stdcall *GetScanLine)(IDirectDraw *this, unsigned int *);
//   HRESULT (__stdcall *GetVerticalBlankStatus)(IDirectDraw *this, int *);
//   HRESULT (__stdcall *Initialize)(IDirectDraw *this, _GUID *);
//   HRESULT (__stdcall *RestoreDisplayMode)(IDirectDraw *this);
//   HRESULT (__stdcall *SetCooperativeLevel)(IDirectDraw *this, HWND__ *, unsigned int);
//   HRESULT (__stdcall *SetDisplayMode)(IDirectDraw *this, unsigned int, unsigned int, unsigned int);
//   HRESULT (__stdcall *WaitForVerticalBlank)(IDirectDraw *this, unsigned int, void *);
// };

// /* 5509 */
// struct /*VFT*/ IDirectDrawClipper_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetClipList)(IDirectDrawClipper *this, tagRECT *, _RGNDATA *, unsigned int *);
//   HRESULT (__stdcall *GetHWnd)(IDirectDrawClipper *this, HWND__ **);
//   HRESULT (__stdcall *Initialize)(IDirectDrawClipper *this, IDirectDraw *, unsigned int);
//   HRESULT (__stdcall *IsClipListChanged)(IDirectDrawClipper *this, int *);
//   HRESULT (__stdcall *SetClipList)(IDirectDrawClipper *this, _RGNDATA *, unsigned int);
//   HRESULT (__stdcall *SetHWnd)(IDirectDrawClipper *this, unsigned int, HWND__ *);
// };

// /* 5510 */
// struct _DDOVERLAYFX
// {
//   unsigned int dwSize;
//   unsigned int dwAlphaEdgeBlendBitDepth;
//   unsigned int dwAlphaEdgeBlend;
//   unsigned int dwReserved;
//   unsigned int dwAlphaDestConstBitDepth;
//   $14CCA1ADB54AF87F95DEEEE447454734 ___u5;
//   unsigned int dwAlphaSrcConstBitDepth;
//   $7981BF1EB1EAF00839F9B0985A17862A ___u7;
//   _DDCOLORKEY dckDestColorkey;
//   _DDCOLORKEY dckSrcColorkey;
//   unsigned int dwDDFX;
//   unsigned int dwFlags;
// };

// /* 5511 */
// struct /*VFT*/ IDirectDrawSurface_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *AddAttachedSurface)(IDirectDrawSurface *this, IDirectDrawSurface *);
//   HRESULT (__stdcall *AddOverlayDirtyRect)(IDirectDrawSurface *this, tagRECT *);
//   HRESULT (__stdcall *Blt)(IDirectDrawSurface *this, tagRECT *, IDirectDrawSurface *, tagRECT *, unsigned int, _DDBLTFX *);
//   HRESULT (__stdcall *BltBatch)(IDirectDrawSurface *this, _DDBLTBATCH *, unsigned int, unsigned int);
//   HRESULT (__stdcall *BltFast)(IDirectDrawSurface *this, unsigned int, unsigned int, IDirectDrawSurface *, tagRECT *, unsigned int);
//   HRESULT (__stdcall *DeleteAttachedSurface)(IDirectDrawSurface *this, unsigned int, IDirectDrawSurface *);
//   HRESULT (__stdcall *EnumAttachedSurfaces)(IDirectDrawSurface *this, void *, HRESULT (__stdcall *)(IDirectDrawSurface *, _DDSURFACEDESC *, void *));
//   HRESULT (__stdcall *EnumOverlayZOrders)(IDirectDrawSurface *this, unsigned int, void *, HRESULT (__stdcall *)(IDirectDrawSurface *, _DDSURFACEDESC *, void *));
//   HRESULT (__stdcall *Flip)(IDirectDrawSurface *this, IDirectDrawSurface *, unsigned int);
//   HRESULT (__stdcall *GetAttachedSurface)(IDirectDrawSurface *this, _DDSCAPS *, IDirectDrawSurface **);
//   HRESULT (__stdcall *GetBltStatus)(IDirectDrawSurface *this, unsigned int);
//   HRESULT (__stdcall *GetCaps)(IDirectDrawSurface *this, _DDSCAPS *);
//   HRESULT (__stdcall *GetClipper)(IDirectDrawSurface *this, IDirectDrawClipper **);
//   HRESULT (__stdcall *GetColorKey)(IDirectDrawSurface *this, unsigned int, _DDCOLORKEY *);
//   HRESULT (__stdcall *GetDC)(IDirectDrawSurface *this, HDC__ **);
//   HRESULT (__stdcall *GetFlipStatus)(IDirectDrawSurface *this, unsigned int);
//   HRESULT (__stdcall *GetOverlayPosition)(IDirectDrawSurface *this, int *, int *);
//   HRESULT (__stdcall *GetPalette)(IDirectDrawSurface *this, IDirectDrawPalette **);
//   HRESULT (__stdcall *GetPixelFormat)(IDirectDrawSurface *this, _DDPIXELFORMAT *);
//   HRESULT (__stdcall *GetSurfaceDesc)(IDirectDrawSurface *this, _DDSURFACEDESC *);
//   HRESULT (__stdcall *Initialize)(IDirectDrawSurface *this, IDirectDraw *, _DDSURFACEDESC *);
//   HRESULT (__stdcall *IsLost)(IDirectDrawSurface *this);
//   HRESULT (__stdcall *Lock)(IDirectDrawSurface *this, tagRECT *, _DDSURFACEDESC *, unsigned int, void *);
//   HRESULT (__stdcall *ReleaseDC)(IDirectDrawSurface *this, HDC__ *);
//   HRESULT (__stdcall *Restore)(IDirectDrawSurface *this);
//   HRESULT (__stdcall *SetClipper)(IDirectDrawSurface *this, IDirectDrawClipper *);
//   HRESULT (__stdcall *SetColorKey)(IDirectDrawSurface *this, unsigned int, _DDCOLORKEY *);
//   HRESULT (__stdcall *SetOverlayPosition)(IDirectDrawSurface *this, int, int);
//   HRESULT (__stdcall *SetPalette)(IDirectDrawSurface *this, IDirectDrawPalette *);
//   HRESULT (__stdcall *Unlock)(IDirectDrawSurface *this, void *);
//   HRESULT (__stdcall *UpdateOverlay)(IDirectDrawSurface *this, tagRECT *, IDirectDrawSurface *, tagRECT *, unsigned int, _DDOVERLAYFX *);
//   HRESULT (__stdcall *UpdateOverlayDisplay)(IDirectDrawSurface *this, unsigned int);
//   HRESULT (__stdcall *UpdateOverlayZOrder)(IDirectDrawSurface *this, unsigned int, IDirectDrawSurface *);
// };

// /* 5512 */
// union $DE343801BC75A137C516A9D9B3162490
// {
//   unsigned int dwBackBufferCount;
//   unsigned int dwDepth;
// };

// /* 5513 */
// union $FA885138A45ED3CE38760E5920CA9439
// {
//   unsigned int dwMipMapCount;
//   unsigned int dwRefreshRate;
//   unsigned int dwSrcVBHandle;
// };

// /* 5514 */
// union $5A3F4D0C42F25707BC338F5D29E727BA
// {
//   _DDCOLORKEY ddckCKDestOverlay;
//   unsigned int dwEmptyFaceColor;
// };

// /* 5515 */
// union $AA784F5947B7DD85A423B335A592853B
// {
//   _DDPIXELFORMAT ddpfPixelFormat;
//   unsigned int dwFVF;
// };

// /* 5516 */
// struct _DDSURFACEDESC2
// {
//   unsigned int dwSize;
//   unsigned int dwFlags;
//   unsigned int dwHeight;
//   unsigned int dwWidth;
//   $00F4D6FA838FAD5B65924731E0E9CCBC ___u4;
//   $DE343801BC75A137C516A9D9B3162490 ___u5;
//   $FA885138A45ED3CE38760E5920CA9439 ___u6;
//   unsigned int dwAlphaBitDepth;
//   unsigned int dwReserved;
//   void *lpSurface;
//   $5A3F4D0C42F25707BC338F5D29E727BA ___u10;
//   _DDCOLORKEY ddckCKDestBlt;
//   _DDCOLORKEY ddckCKSrcOverlay;
//   _DDCOLORKEY ddckCKSrcBlt;
//   $AA784F5947B7DD85A423B335A592853B ___u14;
//   _DDSCAPS2 ddsCaps;
//   unsigned int dwTextureStage;
// };

// /* 5517 */
// struct __cppobj IDirectDrawSurface7 : IUnknown
// {
// };

// /* 5518 */
// struct /*VFT*/ IDirectDrawSurface7_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *AddAttachedSurface)(IDirectDrawSurface7 *this, IDirectDrawSurface7 *);
//   HRESULT (__stdcall *AddOverlayDirtyRect)(IDirectDrawSurface7 *this, tagRECT *);
//   HRESULT (__stdcall *Blt)(IDirectDrawSurface7 *this, tagRECT *, IDirectDrawSurface7 *, tagRECT *, unsigned int, _DDBLTFX *);
//   HRESULT (__stdcall *BltBatch)(IDirectDrawSurface7 *this, _DDBLTBATCH *, unsigned int, unsigned int);
//   HRESULT (__stdcall *BltFast)(IDirectDrawSurface7 *this, unsigned int, unsigned int, IDirectDrawSurface7 *, tagRECT *, unsigned int);
//   HRESULT (__stdcall *DeleteAttachedSurface)(IDirectDrawSurface7 *this, unsigned int, IDirectDrawSurface7 *);
//   HRESULT (__stdcall *EnumAttachedSurfaces)(IDirectDrawSurface7 *this, void *, HRESULT (__stdcall *)(IDirectDrawSurface7 *, _DDSURFACEDESC2 *, void *));
//   HRESULT (__stdcall *EnumOverlayZOrders)(IDirectDrawSurface7 *this, unsigned int, void *, HRESULT (__stdcall *)(IDirectDrawSurface7 *, _DDSURFACEDESC2 *, void *));
//   HRESULT (__stdcall *Flip)(IDirectDrawSurface7 *this, IDirectDrawSurface7 *, unsigned int);
//   HRESULT (__stdcall *GetAttachedSurface)(IDirectDrawSurface7 *this, _DDSCAPS2 *, IDirectDrawSurface7 **);
//   HRESULT (__stdcall *GetBltStatus)(IDirectDrawSurface7 *this, unsigned int);
//   HRESULT (__stdcall *GetCaps)(IDirectDrawSurface7 *this, _DDSCAPS2 *);
//   HRESULT (__stdcall *GetClipper)(IDirectDrawSurface7 *this, IDirectDrawClipper **);
//   HRESULT (__stdcall *GetColorKey)(IDirectDrawSurface7 *this, unsigned int, _DDCOLORKEY *);
//   HRESULT (__stdcall *GetDC)(IDirectDrawSurface7 *this, HDC__ **);
//   HRESULT (__stdcall *GetFlipStatus)(IDirectDrawSurface7 *this, unsigned int);
//   HRESULT (__stdcall *GetOverlayPosition)(IDirectDrawSurface7 *this, int *, int *);
//   HRESULT (__stdcall *GetPalette)(IDirectDrawSurface7 *this, IDirectDrawPalette **);
//   HRESULT (__stdcall *GetPixelFormat)(IDirectDrawSurface7 *this, _DDPIXELFORMAT *);
//   HRESULT (__stdcall *GetSurfaceDesc)(IDirectDrawSurface7 *this, _DDSURFACEDESC2 *);
//   HRESULT (__stdcall *Initialize)(IDirectDrawSurface7 *this, IDirectDraw *, _DDSURFACEDESC2 *);
//   HRESULT (__stdcall *IsLost)(IDirectDrawSurface7 *this);
//   HRESULT (__stdcall *Lock)(IDirectDrawSurface7 *this, tagRECT *, _DDSURFACEDESC2 *, unsigned int, void *);
//   HRESULT (__stdcall *ReleaseDC)(IDirectDrawSurface7 *this, HDC__ *);
//   HRESULT (__stdcall *Restore)(IDirectDrawSurface7 *this);
//   HRESULT (__stdcall *SetClipper)(IDirectDrawSurface7 *this, IDirectDrawClipper *);
//   HRESULT (__stdcall *SetColorKey)(IDirectDrawSurface7 *this, unsigned int, _DDCOLORKEY *);
//   HRESULT (__stdcall *SetOverlayPosition)(IDirectDrawSurface7 *this, int, int);
//   HRESULT (__stdcall *SetPalette)(IDirectDrawSurface7 *this, IDirectDrawPalette *);
//   HRESULT (__stdcall *Unlock)(IDirectDrawSurface7 *this, tagRECT *);
//   HRESULT (__stdcall *UpdateOverlay)(IDirectDrawSurface7 *this, tagRECT *, IDirectDrawSurface7 *, tagRECT *, unsigned int, _DDOVERLAYFX *);
//   HRESULT (__stdcall *UpdateOverlayDisplay)(IDirectDrawSurface7 *this, unsigned int);
//   HRESULT (__stdcall *UpdateOverlayZOrder)(IDirectDrawSurface7 *this, unsigned int, IDirectDrawSurface7 *);
//   HRESULT (__stdcall *GetDDInterface)(IDirectDrawSurface7 *this, void **);
//   HRESULT (__stdcall *PageLock)(IDirectDrawSurface7 *this, unsigned int);
//   HRESULT (__stdcall *PageUnlock)(IDirectDrawSurface7 *this, unsigned int);
//   HRESULT (__stdcall *SetSurfaceDesc)(IDirectDrawSurface7 *this, _DDSURFACEDESC2 *, unsigned int);
//   HRESULT (__stdcall *SetPrivateData)(IDirectDrawSurface7 *this, const _GUID *, void *, unsigned int, unsigned int);
//   HRESULT (__stdcall *GetPrivateData)(IDirectDrawSurface7 *this, const _GUID *, void *, unsigned int *);
//   HRESULT (__stdcall *FreePrivateData)(IDirectDrawSurface7 *this, const _GUID *);
//   HRESULT (__stdcall *GetUniquenessValue)(IDirectDrawSurface7 *this, unsigned int *);
//   HRESULT (__stdcall *ChangeUniquenessValue)(IDirectDrawSurface7 *this);
//   HRESULT (__stdcall *SetPriority)(IDirectDrawSurface7 *this, unsigned int);
//   HRESULT (__stdcall *GetPriority)(IDirectDrawSurface7 *this, unsigned int *);
//   HRESULT (__stdcall *SetLOD)(IDirectDrawSurface7 *this, unsigned int);
//   HRESULT (__stdcall *GetLOD)(IDirectDrawSurface7 *this, unsigned int *);
// };

// /* 5519 */
// struct __cppobj __declspec(align(4)) DDraw
// {
//   HRESULT (__stdcall *pDirectDrawCreateEx)(_GUID *, void **, const _GUID *, IUnknown *);
//   HRESULT (__stdcall *pDirectDrawEnumerateEx)(int (__stdcall *)(_GUID *, char *, char *, void *, HMONITOR__ *), void *, unsigned int);
//   HINSTANCE__ *hDDraw;
//   _GUID *lpGUID;
//   bool Initialized;
// };

// /* 5520 */
// struct __cppobj IDirectDraw7 : IUnknown
// {
// };

// /* 5521 */
// struct /*VFT*/ IDirectDraw7_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *Compact)(IDirectDraw7 *this);
//   HRESULT (__stdcall *CreateClipper)(IDirectDraw7 *this, unsigned int, IDirectDrawClipper **, IUnknown *);
//   HRESULT (__stdcall *CreatePalette)(IDirectDraw7 *this, unsigned int, tagPALETTEENTRY *, IDirectDrawPalette **, IUnknown *);
//   HRESULT (__stdcall *CreateSurface)(IDirectDraw7 *this, _DDSURFACEDESC2 *, IDirectDrawSurface7 **, IUnknown *);
//   HRESULT (__stdcall *DuplicateSurface)(IDirectDraw7 *this, IDirectDrawSurface7 *, IDirectDrawSurface7 **);
//   HRESULT (__stdcall *EnumDisplayModes)(IDirectDraw7 *this, unsigned int, _DDSURFACEDESC2 *, void *, HRESULT (__stdcall *)(_DDSURFACEDESC2 *, void *));
//   HRESULT (__stdcall *EnumSurfaces)(IDirectDraw7 *this, unsigned int, _DDSURFACEDESC2 *, void *, HRESULT (__stdcall *)(IDirectDrawSurface7 *, _DDSURFACEDESC2 *, void *));
//   HRESULT (__stdcall *FlipToGDISurface)(IDirectDraw7 *this);
//   HRESULT (__stdcall *GetCaps)(IDirectDraw7 *this, _DDCAPS_DX7 *, _DDCAPS_DX7 *);
//   HRESULT (__stdcall *GetDisplayMode)(IDirectDraw7 *this, _DDSURFACEDESC2 *);
//   HRESULT (__stdcall *GetFourCCCodes)(IDirectDraw7 *this, unsigned int *, unsigned int *);
//   HRESULT (__stdcall *GetGDISurface)(IDirectDraw7 *this, IDirectDrawSurface7 **);
//   HRESULT (__stdcall *GetMonitorFrequency)(IDirectDraw7 *this, unsigned int *);
//   HRESULT (__stdcall *GetScanLine)(IDirectDraw7 *this, unsigned int *);
//   HRESULT (__stdcall *GetVerticalBlankStatus)(IDirectDraw7 *this, int *);
//   HRESULT (__stdcall *Initialize)(IDirectDraw7 *this, _GUID *);
//   HRESULT (__stdcall *RestoreDisplayMode)(IDirectDraw7 *this);
//   HRESULT (__stdcall *SetCooperativeLevel)(IDirectDraw7 *this, HWND__ *, unsigned int);
//   HRESULT (__stdcall *SetDisplayMode)(IDirectDraw7 *this, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int);
//   HRESULT (__stdcall *WaitForVerticalBlank)(IDirectDraw7 *this, unsigned int, void *);
//   HRESULT (__stdcall *GetAvailableVidMem)(IDirectDraw7 *this, _DDSCAPS2 *, unsigned int *, unsigned int *);
//   HRESULT (__stdcall *GetSurfaceFromDC)(IDirectDraw7 *this, HDC__ *, IDirectDrawSurface7 **);
//   HRESULT (__stdcall *RestoreAllSurfaces)(IDirectDraw7 *this);
//   HRESULT (__stdcall *TestCooperativeLevel)(IDirectDraw7 *this);
//   HRESULT (__stdcall *GetDeviceIdentifier)(IDirectDraw7 *this, tagDDDEVICEIDENTIFIER2 *, unsigned int);
//   HRESULT (__stdcall *StartModeTest)(IDirectDraw7 *this, tagSIZE *, unsigned int, unsigned int);
//   HRESULT (__stdcall *EvaluateMode)(IDirectDraw7 *this, unsigned int, unsigned int *);
// };

// /* 5522 */
// struct __cppobj Ui3dStatus
// {
//   bool initialized;
//   bool rendering;
//   unsigned __int16 width;
//   unsigned __int16 height;
//   bool useDisplaySize;
//   int pmemLocation;
//   bool hasPingPongBuffer;
//   float blurRadius;
// };

// /* 5523 */
// struct Ui3dTextureWindow
// {
//   GfxViewport vp;
//   ScreenPlacement scrPlace;
//   float normX;
//   float normY;
//   float normW;
//   float normH;
//   int numRenderCmds;
// };

// /* 5524 */
// struct WaterGlob
// {
//   complex_s H[4096];
//   unsigned __int8 pixels[4096];
// };

// /* 5525 */
// struct WaterGlobStatic
// {
//   float sinTable[1024];
//   complex_s fftTrigTable[256];
//   int fftBitswap[256];
// };

// /* 5526 */
// struct waterconfig_t
// {
//   int framerate;
//   float waveDamping;
//   float waveSeedHeight;
//   float waveSeedRadius;
//   float waveSeedDelay;
//   float gridScale;
//   float curlAmount;
//   float curlMax;
//   float curlReduce;
//   float minShoreHeight;
//   float foamAppear;
//   float foamDisappear;
//   float windAmount;
//   float windMax;
//   float windDir[3];
//   float particleGravity;
//   float particleLimit;
//   float particleLength;
//   float particleWidth;
// };

// /* 5527 */
// struct __cppobj __declspec(align(16)) channel_t<float4>::cache_t
// {
//   float4 pad0;
//   float4 data[256];
//   float4 pad1;
//   int y;
//   bool modified;
// };

// /* 5528 */
// struct __cppobj __declspec(align(16)) channel_t<float4>
// {
//   float4 *v;
//   unsigned int bufferSize;
//   channel_t<float4>::cache_t cache[4];
//   int cache_now;
// };

// /* 5529 */
// struct __cppobj channel_t<short>::cache_t
// {
//   __int16 pad0;
//   __declspec(align(16)) __int16 data[256];
//   __int16 pad1;
//   int y;
//   bool modified;
// };

// /* 5530 */
// struct __cppobj __declspec(align(16)) channel_t<short>
// {
//   __int16 *v;
//   unsigned int bufferSize;
//   channel_t<short>::cache_t cache[4];
//   int cache_now;
// };

// /* 5531 */
// struct __cppobj channel_t<char>::cache_t
// {
//   char pad0;
//   __declspec(align(16)) char data[256];
//   char pad1;
//   int y;
//   bool modified;
// };

// /* 5532 */
// struct __cppobj __declspec(align(16)) channel_t<char>
// {
//   char *v;
//   unsigned int bufferSize;
//   channel_t<char>::cache_t cache[4];
//   int cache_now;
// };

// /* 5533 */
// struct __cppobj channel_t<GfxColor>::cache_t
// {
//   GfxColor pad0;
//   __declspec(align(16)) GfxColor data[256];
//   GfxColor pad1;
//   int y;
//   bool modified;
// };

// /* 5534 */
// struct __cppobj __declspec(align(16)) channel_t<GfxColor>
// {
//   GfxColor *v;
//   unsigned int bufferSize;
//   channel_t<GfxColor>::cache_t cache[4];
//   int cache_now;
// };

// /* 5535 */
// struct tilemesh_t
// {
//   int srcU;
//   int srcV;
//   int worldX;
//   int worldY;
//   int worldZ;
//   int lastSkinTime;
//   unsigned int baseVertex;
//   GfxWaterVertex *lockedData;
// };

// /* 5536 */
// struct __cppobj fifo_t<tilemesh_t,4>
// {
//   unsigned int head;
//   unsigned int tail;
//   tilemesh_t data[4];
// };

// /* 5537 */
// struct __cppobj tile_t
// {
//   int srcU;
//   int srcV;
//   int worldX;
//   int worldY;
//   int worldZ;
//   bool occupied;
//   float minMax[2][3];
//   unsigned int lastUpdateTime;
//   fifo_t<tilemesh_t,4> meshes;
// };

// /* 5538 */
// struct __cppobj waterdata_t
// {
//   float waveTimeleft;
//   channel_t<float4> buffer[2];
//   channel_t<short> waterheight;
//   channel_t<char> flooroffset;
//   channel_t<char> shoredist;
//   channel_t<GfxColor> colors;
//   unsigned int frame;
//   bool enabled;
//   int timeDelta;
//   Material *sprayMaterial;
//   int gridX;
//   int gridY;
//   int centerU;
//   int centerV;
//   float localSurfaceDistance;
//   float localEyeHeight;
//   float speedScale;
//   float oldEyePos[3];
//   int tileTriCount[2];
//   IDirect3DIndexBuffer9 *indexBuffer[2];
//   IDirect3DVertexBuffer9 *vertexBuffer;
//   GfxWaterVertex *lockedData;
//   tile_t tiles[256];
// };

// /* 5539 */
// struct debugpoint_t
// {
//   float pos[3];
// };

// /* 5540 */
// struct __cppobj fifo_t<debugpoint_t,16>
// {
//   unsigned int head;
//   unsigned int tail;
//   debugpoint_t data[16];
// };

// /* 5541 */
// struct WaterSimulationCmdUpdate
// {
//   unsigned int startTile;
//   unsigned int srcBuf;
//   unsigned int destBuf;
// };

// /* 5542 */
// union $BA4DB92FA92A04906B613D40695622EE
// {
//   tilemesh_t *meshesEA[16];
//   tilemesh_t *meshes[16];
// };

// /* 5543 */
// struct WaterSimulationCmdSkin
// {
//   unsigned int startTile;
//   unsigned int srcBuf;
//   $BA4DB92FA92A04906B613D40695622EE ___u2;
// };

// /* 5544 */
// struct WaterSimulationCmd
// {
//   WaterSimulationCmdUpdate update;
//   WaterSimulationCmdSkin skin;
// };

// /* 5545 */
// struct meshExpire_t
// {
//   unsigned int framesLeft;
//   unsigned int baseVertex;
// };

// /* 5546 */
// struct __cppobj fifo_t<meshExpire_t,1024>
// {
//   unsigned int head;
//   unsigned int tail;
//   meshExpire_t data[1024];
// };

// /* 5547 */
// struct GfxModelWaterSurface
// {
//   IDirect3DIndexBuffer9 *ib;
//   IDirect3DVertexBuffer9 *vb0;
//   IDirect3DVertexBuffer9 *vb1;
//   unsigned int baseVertex0;
//   unsigned int baseVertex1;
//   float interpolate;
//   int vertCount;
//   int triCount;
//   float origin[3];
// };

// /* 5548 */
// struct WaterSimInfo
// {
//   float pos[3];
//   float tangent[3];
//   float binormal[3];
//   float normal[3];
//   float waveVelocity[3];
// };

// /* 5549 */
// struct GfxCustomWind
// {
//   float rustleAngle[3];
//   float location[3];
//   float radius;
// };

// /* 5550 */
// struct __declspec(align(8)) WindState
// {
//   float windDirection[3];
//   float windSpringAngle[16];
//   float windRustleAngle[16][3];
//   float speed;
//   GfxCustomWind customWind;
// };

// /* 5551 */
// struct math::Float4
// {
//   float x;
//   float y;
//   float z;
//   float w;
// };

// /* 5552 */
// struct LodChainState
// {
//   float m_fade;
//   unsigned __int8 m_lastLevel;
//   unsigned __int8 m_curLevel;
//   const GfxWorldLodChain *m_lodChain;
// };

// /* 5553 */
// struct math::Vector4::Constant
// {
//   float x;
//   float y;
//   float z;
//   float w;
// };

// /* 5554 */
// struct __cppobj math::Dir3
// {
//   math::Float4 v;
// };

// /* 5555 */
// struct __cppobj math::DiagMat33
// {
//   math::Float4 v;
// };

// /* 5556 */
// struct math::DiagMat33::Packed
// {
//   float x;
//   float y;
//   float z;
// };

// /* 5557 */
// struct __cppobj math::DiagMat44
// {
//   math::Float4 v;
// };

// /* 5558 */
// struct __cppobj math::Vector4
// {
//   math::Float4 v;
// };

// /* 5559 */
// struct __cppobj math::TranMat43
// {
//   math::Float4 v;
// };

// /* 5560 */
// struct __cppobj math::Mat34
// {
//   math::Vector4 x;
//   math::Vector4 y;
//   math::Vector4 z;
// };

// /* 5561 */
// struct __cppobj math::Position3
// {
//   math::Float4 v;
// };

// /* 5562 */
// struct __cppobj math::Mat43
// {
//   math::Dir3 x;
//   math::Dir3 y;
//   math::Dir3 z;
//   math::Position3 w;
// };

// /* 5563 */
// struct __cppobj math::Dir3::Packed
// {
//   float x;
//   float y;
//   float z;
// };

// /* 5564 */
// struct math::Dir3::Constant
// {
//   float x;
//   float y;
//   float z;
//   float w;
// };

// /* 5565 */
// struct __cppobj math::Mat33
// {
//   math::Dir3 x;
//   math::Dir3 y;
//   math::Dir3 z;
// };

// /* 5566 */
// struct math::DiagMat44::Packed
// {
//   float x;
//   float y;
//   float z;
//   float w;
// };

// /* 5567 */
// struct math::TranMat43::Packed
// {
//   float x;
//   float y;
//   float z;
// };

// /* 5568 */
// struct __cppobj math::Mat44
// {
//   math::Vector4 x;
//   math::Vector4 y;
//   math::Vector4 z;
//   math::Vector4 w;
// };

// /* 5569 */
// struct __cppobj math::Position3::Packed
// {
//   float x;
//   float y;
//   float z;
// };

// /* 5570 */
// struct math::Position3::Constant
// {
//   float x;
//   float y;
//   float z;
//   float w;
// };

// /* 5571 */
// struct __cppobj math::Quaternion
// {
//   math::Float4 v;
// };

// /* 5572 */
// struct math::Quaternion::Packed
// {
//   float x;
//   float y;
//   float z;
//   float w;
// };

// /* 5573 */
// struct math::Quaternion::Constant
// {
//   float x;
//   float y;
//   float z;
//   float w;
// };

// /* 5574 */
// struct __cppobj math::Vector4::Packed
// {
//   float x;
//   float y;
//   float z;
//   float w;
// };

// /* 5575 */
// struct __cppobj math::Mat43::Packed
// {
//   math::Dir3::Packed x;
//   math::Dir3::Packed y;
//   math::Dir3::Packed z;
//   math::Position3::Packed w;
// };

// /* 5576 */
// struct __cppobj math::Mat44::Packed
// {
//   math::Vector4::Packed x;
//   math::Vector4::Packed y;
//   math::Vector4::Packed z;
//   math::Vector4::Packed w;
// };

// /* 5577 */
// struct XVertexInfo_s
// {
//   float normal[3];
//   unsigned __int8 color[4];
//   float binormal[3];
//   float texCoordX;
//   float tangent[3];
//   float texCoordY;
//   float offset[3];
//   unsigned __int8 numWeights;
//   unsigned __int8 pad;
//   __int16 boneOffset;
// };

// /* 5578 */
// struct XBlendLoadInfo
// {
//   unsigned __int16 boneOffset;
//   unsigned __int16 boneWeight;
// };

// /* 5579 */
// struct XVertexBuffer
// {
//   XVertexInfo_s v;
//   XBlendLoadInfo w[1];
// };

// /* 5580 */
// struct __cppobj std::binary_function<unsigned __int64,unsigned __int64,bool>
// {
// };

// /* 5581 */
// struct __cppobj std::less<unsigned __int64> : std::binary_function<unsigned __int64,unsigned __int64,bool>
// {
// };

// /* 5582 */
// struct __cppobj std::_Allocator_base<std::_Aux_cont>
// {
// };

// /* 5583 */
// struct __cppobj std::allocator<std::_Aux_cont> : std::_Allocator_base<std::_Aux_cont>
// {
// };

// /* 5584 */
// struct __cppobj __declspec(align(4)) std::_Container_base_aux_alloc_real<std::allocator<unsigned __int64> > : std::_Container_base_aux
// {
//   std::allocator<std::_Aux_cont> _Alaux;
// };

// /* 5585 */
// struct __cppobj __declspec(align(4)) std::_Tset_traits<unsigned __int64,std::less<unsigned __int64>,std::allocator<unsigned __int64>,0> : std::_Container_base_aux_alloc_real<std::allocator<unsigned __int64> >
// {
//   std::less<unsigned __int64> comp;
// };

// /* 5586 */
// struct __cppobj std::_Allocator_base<std::_Tree_nod<std::_Tset_traits<unsigned __int64,std::less<unsigned __int64>,std::allocator<unsigned __int64>,0> >::_Node>
// {
// };

// /* 5587 */
// struct __cppobj std::allocator<std::_Tree_nod<std::_Tset_traits<unsigned __int64,std::less<unsigned __int64>,std::allocator<unsigned __int64>,0> >::_Node> : std::_Allocator_base<std::_Tree_nod<std::_Tset_traits<unsigned __int64,std::less<unsigned __int64>,std::allocator<unsigned __int64>,0> >::_Node>
// {
// };

// /* 5588 */
// struct __cppobj __declspec(align(4)) std::_Tree_nod<std::_Tset_traits<unsigned __int64,std::less<unsigned __int64>,std::allocator<unsigned __int64>,0> > : std::_Tset_traits<unsigned __int64,std::less<unsigned __int64>,std::allocator<unsigned __int64>,0>
// {
//   std::allocator<std::_Tree_nod<std::_Tset_traits<unsigned __int64,std::less<unsigned __int64>,std::allocator<unsigned __int64>,0> >::_Node> _Alnod;
// };

// /* 5589 */
// struct __cppobj std::_Allocator_base<std::_Tree_nod<std::_Tset_traits<unsigned __int64,std::less<unsigned __int64>,std::allocator<unsigned __int64>,0> >::_Node *>
// {
// };

// /* 5590 */
// struct __cppobj std::allocator<std::_Tree_nod<std::_Tset_traits<unsigned __int64,std::less<unsigned __int64>,std::allocator<unsigned __int64>,0> >::_Node *> : std::_Allocator_base<std::_Tree_nod<std::_Tset_traits<unsigned __int64,std::less<unsigned __int64>,std::allocator<unsigned __int64>,0> >::_Node *>
// {
// };

// /* 5591 */
// struct __cppobj __declspec(align(4)) std::_Tree_ptr<std::_Tset_traits<unsigned __int64,std::less<unsigned __int64>,std::allocator<unsigned __int64>,0> > : std::_Tree_nod<std::_Tset_traits<unsigned __int64,std::less<unsigned __int64>,std::allocator<unsigned __int64>,0> >
// {
//   std::allocator<std::_Tree_nod<std::_Tset_traits<unsigned __int64,std::less<unsigned __int64>,std::allocator<unsigned __int64>,0> >::_Node *> _Alptr;
// };

// /* 5592 */
// struct __cppobj std::_Allocator_base<unsigned __int64>
// {
// };

// /* 5593 */
// struct __cppobj std::allocator<unsigned __int64> : std::_Allocator_base<unsigned __int64>
// {
// };

// /* 5594 */
// struct __cppobj __declspec(align(4)) std::_Tree_val<std::_Tset_traits<unsigned __int64,std::less<unsigned __int64>,std::allocator<unsigned __int64>,0> > : std::_Tree_ptr<std::_Tset_traits<unsigned __int64,std::less<unsigned __int64>,std::allocator<unsigned __int64>,0> >
// {
//   std::allocator<unsigned __int64> _Alval;
// };

// /* 5595 */
// struct __cppobj __declspec(align(8)) std::_Tree_nod<std::_Tset_traits<unsigned __int64,std::less<unsigned __int64>,std::allocator<unsigned __int64>,0> >::_Node
// {
//   std::_Tree_nod<std::_Tset_traits<unsigned __int64,std::less<unsigned __int64>,std::allocator<unsigned __int64>,0> >::_Node *_Left;
//   std::_Tree_nod<std::_Tset_traits<unsigned __int64,std::less<unsigned __int64>,std::allocator<unsigned __int64>,0> >::_Node *_Parent;
//   std::_Tree_nod<std::_Tset_traits<unsigned __int64,std::less<unsigned __int64>,std::allocator<unsigned __int64>,0> >::_Node *_Right;
//   unsigned __int64 _Myval;
//   char _Color;
//   char _Isnil;
// };

// /* 5596 */
// struct __cppobj std::_Iterator_with_base<std::bidirectional_iterator_tag,unsigned __int64,int,unsigned __int64 const *,unsigned __int64 const &,std::_Iterator_base_aux> : std::_Iterator_base_aux
// {
// };

// /* 5597 */
// struct __cppobj std::_Bidit<unsigned __int64,int,unsigned __int64 const *,unsigned __int64 const &> : std::_Iterator_with_base<std::bidirectional_iterator_tag,unsigned __int64,int,unsigned __int64 const *,unsigned __int64 const &,std::_Iterator_base_aux>
// {
// };

// /* 5598 */
// struct __cppobj std::_Tree<std::_Tset_traits<unsigned __int64,std::less<unsigned __int64>,std::allocator<unsigned __int64>,0> >::const_iterator : std::_Bidit<unsigned __int64,int,unsigned __int64 const *,unsigned __int64 const &>
// {
//   std::_Tree_nod<std::_Tset_traits<unsigned __int64,std::less<unsigned __int64>,std::allocator<unsigned __int64>,0> >::_Node *_Ptr;
// };

// /* 5599 */
// struct __cppobj std::_Tree<std::_Tset_traits<unsigned __int64,std::less<unsigned __int64>,std::allocator<unsigned __int64>,0> >::iterator : std::_Tree<std::_Tset_traits<unsigned __int64,std::less<unsigned __int64>,std::allocator<unsigned __int64>,0> >::const_iterator
// {
// };

// /* 5600 */
// struct __cppobj __declspec(align(4)) std::pair<std::_Tree<std::_Tset_traits<unsigned __int64,std::less<unsigned __int64>,std::allocator<unsigned __int64>,0> >::iterator,bool>
// {
//   std::_Tree<std::_Tset_traits<unsigned __int64,std::less<unsigned __int64>,std::allocator<unsigned __int64>,0> >::iterator first;
//   bool second;
// };

// /* 5601 */
// struct __cppobj std::_Tree<std::_Tset_traits<unsigned __int64,std::less<unsigned __int64>,std::allocator<unsigned __int64>,0> > : std::_Tree_val<std::_Tset_traits<unsigned __int64,std::less<unsigned __int64>,std::allocator<unsigned __int64>,0> >
// {
//   std::_Tree_nod<std::_Tset_traits<unsigned __int64,std::less<unsigned __int64>,std::allocator<unsigned __int64>,0> >::_Node *_Myhead;
//   unsigned int _Mysize;
// };

// /* 5602 */
// struct __cppobj std::set<unsigned __int64> : std::_Tree<std::_Tset_traits<unsigned __int64,std::less<unsigned __int64>,std::allocator<unsigned __int64>,0> >
// {
// };

// /* 5603 */
// struct __cppobj std::allocator<unsigned __int64>::rebind<std::_Aux_cont>
// {
// };

// /* 5604 */
// struct __cppobj std::allocator<unsigned __int64>::rebind<unsigned __int64>
// {
// };

// /* 5605 */
// struct __cppobj std::allocator<unsigned __int64>::rebind<std::_Tree_nod<std::_Tset_traits<unsigned __int64,std::less<unsigned __int64>,std::allocator<unsigned __int64>,0> >::_Node>
// {
// };

// /* 5606 */
// struct __cppobj std::allocator<unsigned __int64>::rebind<std::_Tree_nod<std::_Tset_traits<unsigned __int64,std::less<unsigned __int64>,std::allocator<unsigned __int64>,0> >::_Node *>
// {
// };

// /* 5607 */
// struct __cppobj std::allocator<unsigned __int64>::rebind<char>
// {
// };

// /* 5608 */
// struct XVertexInfo0
// {
//   unsigned __int16 boneOffset;
// };

// /* 5609 */
// struct XVertexInfo3
// {
//   XVertexInfo0 vert0;
//   XBlendLoadInfo blend[3];
// };

// /* 5610 */
// struct XVertexInfo2
// {
//   XVertexInfo0 vert0;
//   XBlendLoadInfo blend[2];
// };

// /* 5611 */
// struct XVertexInfo1
// {
//   XVertexInfo0 vert0;
//   XBlendLoadInfo blend[1];
// };

// /* 5612 */
// union XModelReadSurface::__l2::<unnamed_type_$S1>
// {
//   XVertexInfo_s *verts;
//   XBlendLoadInfo *blends;
// };

// /* 5613 */
// struct GfxDrawSurfListArgs
// {
//   GfxCmdBufContext context;
//   unsigned int firstDrawSurfIndex;
//   const GfxDrawSurfListInfo *info;
// };

// /* 5614 */
// struct GfxRenderCommandExecState
// {
//   const void *cmd;
// };

// /* 5615 */
// struct r_backEndGlobals_t
// {
//   int glowCount;
//   GfxImage *glowImage;
//   GfxImage *godRaysImage;
//   Font_s *debugFont;
//   GfxFrameStats frameStatsMax;
// };

// /* 5616 */
// struct Corona
// {
//   bool inUse;
//   GfxLightCorona *info;
//   int timeSinceSpawned;
//   float currentVisibility;
//   float targetVisibility;
//   int hitNum;
//   bool wasEverVisible;
//   bool queryIssued[5];
//   IDirect3DQuery9 *query[5];
//   IDirect3DQuery9 *queryMax[5];
// };

// /* 5617 */
// struct CoronaState
// {
//   unsigned int numActive;
//   unsigned int numPending;
//   Corona active[16];
//   Corona pending[16];
// };

// /* 5618 */
// struct GfxPointLitSurfsInfo
// {
//   const GfxViewInfo *viewInfo;
//   GfxMeshData *clearQuadMesh;
//   const GfxDrawSurfListInfo *drawSurfInfo;
//   unsigned int x;
//   unsigned int y;
//   unsigned int w;
//   unsigned int h;
// };

// /* 5619 */
// struct __declspec(align(4)) GfxImageFilterPass
// {
//   const Material *material;
//   float srcWidth;
//   float srcHeight;
//   int dstWidth;
//   int dstHeight;
//   int tapHalfCount;
//   float tapOffsetsAndWeights[8][4];
//   unsigned __int8 src;
//   unsigned __int8 dst;
// };

// /* 5620 */
// struct __declspec(align(4)) GfxImageFilter
// {
//   int passCount;
//   GfxImageFilterPass passes[32];
//   GfxImage *sourceImage;
//   unsigned __int8 finalTarget;
// };

// /* 5621 */
// struct __declspec(align(8)) htab
// {
//   unsigned __int64 value;
//   htab *next;
// };

// /* 5622 */
// struct $9852ADCC24082DDE846E51E98DD2BB07
// {
//   _iobuf *fp;
// };

// /* 5623 */
// struct StencilLogBits
// {
//   const char *description;
//   int enableMask;
//   int passShift;
//   int failShift;
//   int zfailShift;
//   int funcShift;
// };

// /* 5624 */
// struct StateBitsTable
// {
//   int stateBits;
//   const char *name;
// };

// /* 5625 */
// struct __declspec(align(4)) GfxPixelCostKey::<unnamed_type_mtl>
// {
//   const Material *material;
//   unsigned __int8 techType;
// };

// /* 5626 */
// union GfxPixelCostKey
// {
//   GfxPixelCostKey::<unnamed_type_mtl> mtl;
//   unsigned __int64 packed;
// };

// /* 5627 */
// struct GfxPixelCostRecord
// {
//   unsigned __int16 costHistory[12];
//   GfxPixelCostKey key;
// };

// /* 5628 */
// struct $9D859F26A5F8F99B27DDEE61231D15DA
// {
//   GfxPixelCostMode savedMode;
//   long double msecOverhead;
//   unsigned __int64 timeBegin;
//   long double msecElapsed;
//   int frameIndex;
//   int expectedCount;
//   int recordCount;
//   GfxPixelCostRecord records[2048];
// };

// /* 5629 */
// struct GfxPixelCostShaderTime
// {
//   const MaterialPixelShader *shader;
//   float msec;
//   unsigned int primCount;
// };

// /* 5630 */
// struct r_resource_action
// {
//   int action;
//   void *resource;
//   void *data;
//   int p1;
//   int p2;
//   int p3;
// };

// /* 5631 */
// struct SpotShadowMapUserData
// {
//   const GfxSpotShadow *spotShadow;
//   const GfxDrawSurfListInfo *drawList;
// };

// /* 5632 */
// struct __declspec(align(4)) StreamBackendGlob
// {
//   unsigned int imageDirty[128];
//   unsigned int maxLodBiasDirty[128];
//   bool imagesDirty;
//   bool maxLodDirty;
// };

// /* 5633 */
// struct PostAttribute
// {
//   unsigned int Deref;
//   SA_YesNoMaybe Valid;
//   SA_YesNoMaybe Null;
//   SA_YesNoMaybe Tainted;
//   SA_AccessType Access;
//   unsigned int ValidElementsConst;
//   unsigned int ValidBytesConst;
//   const wchar_t *ValidElements;
//   const wchar_t *ValidBytes;
//   const wchar_t *ValidElementsLength;
//   const wchar_t *ValidBytesLength;
//   unsigned int WritableElementsConst;
//   unsigned int WritableBytesConst;
//   const wchar_t *WritableElements;
//   const wchar_t *WritableBytes;
//   const wchar_t *WritableElementsLength;
//   const wchar_t *WritableBytesLength;
//   unsigned int ElementSizeConst;
//   const wchar_t *ElementSize;
//   SA_YesNoMaybe NullTerminated;
//   SA_YesNoMaybe MustCheck;
//   const wchar_t *Condition;
// };

// /* 5634 */
// struct FormatStringAttribute
// {
//   const wchar_t *Style;
//   const wchar_t *UnformattedAlternative;
// };

// /* 5635 */
// struct PreAttribute
// {
//   unsigned int Deref;
//   SA_YesNoMaybe Valid;
//   SA_YesNoMaybe Null;
//   SA_YesNoMaybe Tainted;
//   SA_AccessType Access;
//   unsigned int ValidElementsConst;
//   unsigned int ValidBytesConst;
//   const wchar_t *ValidElements;
//   const wchar_t *ValidBytes;
//   const wchar_t *ValidElementsLength;
//   const wchar_t *ValidBytesLength;
//   unsigned int WritableElementsConst;
//   unsigned int WritableBytesConst;
//   const wchar_t *WritableElements;
//   const wchar_t *WritableBytes;
//   const wchar_t *WritableElementsLength;
//   const wchar_t *WritableBytesLength;
//   unsigned int ElementSizeConst;
//   const wchar_t *ElementSize;
//   SA_YesNoMaybe NullTerminated;
//   const wchar_t *Condition;
// };

// /* 5636 */
// struct $BC236CFBD570C18489EB46681F52D83D
// {
//   char *locale;
//   unsigned __int16 *wlocale;
//   int *refcount;
//   int *wrefcount;
// };

// /* 5637 */
// struct my_coef_controller
// {
//   jpeg_c_coef_controller pub;
//   unsigned int iMCU_row_num;
//   unsigned int mcu_ctr;
//   int MCU_vert_offset;
//   int MCU_rows_per_iMCU_row;
//   __int16 (*MCU_buffer[10])[64];
//   jvirt_barray_control *whole_image[10];
// };

// /* 5638 */
// struct my_color_converter
// {
//   jpeg_color_converter pub;
//   int *rgb_ycc_tab;
// };

// /* 5639 */
// struct my_fdct_controller
// {
//   jpeg_forward_dct pub;
//   void (__cdecl *do_dct)(int *);
//   int *divisors[4];
//   void (__cdecl *do_float_dct)(float *);
//   float *float_divisors[4];
// };

// /* 5640 */
// struct savable_state
// {
//   unsigned int EOBRUN;
//   int last_dc_val[4];
// };

// /* 5641 */
// struct working_state
// {
//   unsigned __int8 *next_output_byte;
//   unsigned int free_in_buffer;
//   savable_state cur;
//   _BYTE gap1C[4];
//   jpeg_compress_struct *cinfo;
// };

// /* 5642 */
// struct c_derived_tbl
// {
//   unsigned int ehufco[256];
//   char ehufsi[256];
// };

// /* 5643 */
// struct huff_entropy_encoder
// {
//   jpeg_entropy_encoder pub;
//   savable_state saved;
//   _BYTE gap20[4];
//   unsigned int restarts_to_go;
//   int next_restart_num;
//   c_derived_tbl *dc_derived_tbls[4];
//   c_derived_tbl *ac_derived_tbls[4];
//   int *dc_count_ptrs[4];
//   int *ac_count_ptrs[4];
// };

// /* 5644 */
// struct my_main_controller
// {
//   jpeg_c_main_controller pub;
//   unsigned int cur_iMCU_row;
//   unsigned int rowgroup_ctr;
//   unsigned __int8 suspended;
//   J_BUF_MODE pass_mode;
//   unsigned __int8 **buffer[10];
// };

// /* 5645 */
// struct my_marker_writer
// {
//   jpeg_marker_writer pub;
//   unsigned int last_restart_interval;
// };

// /* 5646 */
// struct my_comp_master
// {
//   jpeg_comp_master pub;
//   c_pass_type pass_type;
//   int pass_number;
//   int total_passes;
//   int scan_number;
// };

// /* 5647 */
// struct phuff_entropy_encoder
// {
//   jpeg_entropy_encoder pub;
//   unsigned __int8 gather_statistics;
//   unsigned __int8 *next_output_byte;
//   unsigned int free_in_buffer;
//   int put_buffer;
//   int put_bits;
//   jpeg_compress_struct *cinfo;
//   int last_dc_val[4];
//   int ac_tbl_no;
//   unsigned int EOBRUN;
//   unsigned int BE;
//   char *bit_buffer;
//   unsigned int restarts_to_go;
//   int next_restart_num;
//   c_derived_tbl *derived_tbls[4];
//   int *count_ptrs[4];
// };

// /* 5648 */
// struct my_prep_controller
// {
//   jpeg_c_prep_controller pub;
//   unsigned __int8 **color_buf[10];
//   unsigned int rows_to_go;
//   int next_buf_row;
//   int this_row_group;
//   int next_buf_stop;
// };

// /* 5649 */
// struct my_downsampler
// {
//   jpeg_downsampler pub;
//   void (__cdecl *methods[10])(jpeg_compress_struct *, jpeg_component_info *, unsigned __int8 **, unsigned __int8 **);
// };

// /* 5650 */
// struct __declspec(align(4)) my_source_mgr
// {
//   jpeg_source_mgr pub;
//   unsigned __int8 start_of_file;
// };

// /* 5651 */
// struct my_color_deconverter
// {
//   jpeg_color_deconverter pub;
//   int *Cr_r_tab;
//   int *Cb_b_tab;
//   int *Cr_g_tab;
//   int *Cb_g_tab;
// };

// /* 5652 */
// struct my_idct_controller
// {
//   jpeg_inverse_dct pub;
//   int cur_method[10];
// };

// /* 5653 */
// struct bitread_perm_state
// {
//   int get_buffer;
//   int bits_left;
// };

// /* 5654 */
// struct d_derived_tbl
// {
//   int maxcode[18];
//   int valoffset[17];
//   JHUFF_TBL *pub;
//   int look_nbits[256];
//   unsigned __int8 look_sym[256];
// };

// /* 5655 */
// struct $16488923742FD3ABC134D2BECC0315DC
// {
//   _BYTE gap0[16];
//   unsigned int restarts_to_go;
// };

// /* 5656 */
// union $B44689FEF0582F196D814E241924FEFD
// {
//   savable_state saved;
//   $16488923742FD3ABC134D2BECC0315DC __s1;
// };

// /* 5657 */
// struct huff_entropy_decoder
// {
//   jpeg_entropy_decoder pub;
//   bitread_perm_state bitstate;
//   $B44689FEF0582F196D814E241924FEFD ___u2;
//   d_derived_tbl *dc_derived_tbls[4];
//   d_derived_tbl *ac_derived_tbls[4];
//   d_derived_tbl *dc_cur_tbls[10];
//   d_derived_tbl *ac_cur_tbls[10];
//   unsigned __int8 dc_needed[10];
//   unsigned __int8 ac_needed[10];
// };

// /* 5658 */
// struct bitread_working_state
// {
//   const unsigned __int8 *next_input_byte;
//   unsigned int bytes_in_buffer;
//   int get_buffer;
//   int bits_left;
//   jpeg_decompress_struct *cinfo;
// };

// /* 5659 */
// struct __declspec(align(4)) my_input_controller
// {
//   jpeg_input_controller pub;
//   unsigned __int8 inheaders;
// };

// /* 5660 */
// struct my_marker_reader
// {
//   jpeg_marker_reader pub;
//   unsigned __int8 (__cdecl *process_COM)(jpeg_decompress_struct *);
//   unsigned __int8 (__cdecl *process_APPn[16])(jpeg_decompress_struct *);
//   unsigned int length_limit_COM;
//   unsigned int length_limit_APPn[16];
//   jpeg_marker_struct *cur_marker;
//   unsigned int bytes_read;
// };

// /* 5661 */
// struct my_decomp_master
// {
//   jpeg_decomp_master pub;
//   int pass_number;
//   unsigned __int8 using_merged_upsample;
//   jpeg_color_quantizer *quantizer_1pass;
//   jpeg_color_quantizer *quantizer_2pass;
// };

// /* 5662 */
// struct my_upsampler
// {
//   jpeg_upsampler pub;
//   void (__cdecl *upmethod)(jpeg_decompress_struct *, unsigned __int8 ***, unsigned int, unsigned __int8 **);
//   int *Cr_r_tab;
//   int *Cb_b_tab;
//   int *Cr_g_tab;
//   int *Cb_g_tab;
//   unsigned __int8 *spare_row;
//   unsigned __int8 spare_full;
//   unsigned int out_row_width;
//   unsigned int rows_to_go;
// };

// /* 5663 */
// struct phuff_entropy_decoder
// {
//   jpeg_entropy_decoder pub;
//   bitread_perm_state bitstate;
//   savable_state saved;
//   unsigned int restarts_to_go;
//   d_derived_tbl *derived_tbls[4];
//   d_derived_tbl *ac_derived_tbl;
// };

// /* 5664 */
// struct my_post_controller
// {
//   jpeg_d_post_controller pub;
//   jvirt_sarray_control *whole_image;
//   unsigned __int8 **buffer;
//   unsigned int strip_height;
//   unsigned int starting_row;
//   unsigned int next_row;
// };

// /* 5666 */
// struct $4465BC03E43079C07D5C17129F1A6901
// {
//   small_pool_struct *next;
//   unsigned int bytes_used;
//   unsigned int bytes_left;
// };

// /* 5665 */
// union __declspec(align(8)) small_pool_struct
// {
//   $4465BC03E43079C07D5C17129F1A6901 hdr;
//   long double dummy;
// };

// /* 5668 */
// struct $4E5B90717F609D4349E2DD499E5C1FFE
// {
//   large_pool_struct *next;
//   unsigned int bytes_used;
//   unsigned int bytes_left;
// };

// /* 5667 */
// union __declspec(align(8)) large_pool_struct
// {
//   $4E5B90717F609D4349E2DD499E5C1FFE hdr;
//   long double dummy;
// };

// /* 5669 */
// struct my_memory_mgr
// {
//   jpeg_memory_mgr pub;
//   small_pool_struct *small_list[2];
//   large_pool_struct *large_list[2];
//   jvirt_sarray_control *virt_sarray_list;
//   jvirt_barray_control *virt_barray_list;
//   int total_space_allocated;
//   unsigned int last_rowsperchunk;
// };

// /* 5670 */
// struct __declspec(align(4)) my_cquantizer
// {
//   jpeg_color_quantizer pub;
//   unsigned __int8 **sv_colormap;
//   int sv_actual;
//   unsigned __int8 **colorindex;
//   unsigned __int8 is_padded;
//   int Ncolors[4];
//   int row_index;
//   int (*odither[4])[16];
//   __int16 *fserrors[4];
//   unsigned __int8 on_odd_row;
// };

// /* 5671 */
// struct box
// {
//   int c0min;
//   int c0max;
//   int c1min;
//   int c1max;
//   int c2min;
//   int c2max;
//   int volume;
//   int colorcount;
// };

// /* 5672 */
// struct __cppobj std::basic_streambuf<unsigned short>
// {
//   std::basic_streambuf<unsigned short>_vtbl *__vftable /*VFT*/;
//   std::_Mutex _Mylock;
//   unsigned __int16 *_Gfirst;
//   unsigned __int16 *_Pfirst;
//   unsigned __int16 **_IGfirst;
//   unsigned __int16 **_IPfirst;
//   unsigned __int16 *_Gnext;
//   unsigned __int16 *_Pnext;
//   unsigned __int16 **_IGnext;
//   unsigned __int16 **_IPnext;
//   int _Gcount;
//   int _Pcount;
//   int *_IGcount;
//   int *_IPcount;
//   std::locale *_Plocale;
// };

// /* 5673 */
// struct /*VFT*/ std::basic_streambuf<unsigned short>_vtbl
// {
//   void (__thiscall *~basic_streambuf<unsigned short,std::char_traits<unsigned short> >)(std::basic_streambuf<unsigned short> *this);
//   unsigned __int16 (__thiscall *overflow)(std::basic_streambuf<unsigned short> *this, unsigned __int16);
//   unsigned __int16 (__thiscall *pbackfail)(std::basic_streambuf<unsigned short> *this, unsigned __int16);
//   int (__thiscall *showmanyc)(std::basic_streambuf<unsigned short> *this);
//   unsigned __int16 (__thiscall *underflow)(std::basic_streambuf<unsigned short> *this);
//   unsigned __int16 (__thiscall *uflow)(std::basic_streambuf<unsigned short> *this);
//   int (__thiscall *xsgetn)(std::basic_streambuf<unsigned short> *this, unsigned __int16 *, int);
//   int (__thiscall *_Xsgetn_s)(std::basic_streambuf<unsigned short> *this, unsigned __int16 *, unsigned int, int);
//   int (__thiscall *xsputn)(std::basic_streambuf<unsigned short> *this, const unsigned __int16 *, int);
//   std::fpos<int> *(__thiscall *seekoff)(std::basic_streambuf<unsigned short> *this, std::fpos<int> *result, int, int, int);
//   std::fpos<int> *(__thiscall *seekpos)(std::basic_streambuf<unsigned short> *this, std::fpos<int> *result, std::fpos<int>, int);
//   std::basic_streambuf<unsigned short> *(__thiscall *setbuf)(std::basic_streambuf<unsigned short> *this, unsigned __int16 *, int);
//   int (__thiscall *sync)(std::basic_streambuf<unsigned short> *this);
//   void (__thiscall *imbue)(std::basic_streambuf<unsigned short> *this, const std::locale *);
// };

// /* 5674 */
// struct __cppobj std::basic_ostream<unsigned short>
// {
//   _BYTE gap0[56];
// };

// /* 5675 */
// struct /*VFT*/ std::basic_ostream<unsigned short>_vtbl
// {
//   void *(__thiscall *__vecDelDtor)(std::basic_ostream<unsigned short> *this, unsigned int);
// };

// /* 5676 */
// struct __cppobj __declspec(align(4)) std::basic_ios<unsigned short> : std::ios_base
// {
//   std::basic_streambuf<unsigned short> *_Mystrbuf;
//   std::basic_ostream<unsigned short> *_Tiestr;
//   unsigned __int16 _Fillch;
// };

// /* 5677 */
// struct /*VFT*/ std::basic_ios<unsigned short>_vtbl
// {
//   void (__thiscall *~ios_base)(std::ios_base *this);
// };

// /* 5678 */
// struct __cppobj __declspec(align(4)) std::basic_istream<unsigned short>
// {
//   _BYTE gap0[4];
//   int _Chcount;
//   _BYTE gap8[52];
// };

// /* 5679 */
// struct /*VFT*/ std::basic_istream<unsigned short>_vtbl
// {
//   void *(__thiscall *__vecDelDtor)(std::basic_istream<unsigned short> *this, unsigned int);
// };

// /* 5680 */
// struct __cppobj std::basic_istream<unsigned short>::_Sentry_base
// {
//   std::basic_istream<unsigned short> *_Myistr;
// };

// /* 5681 */
// struct __cppobj __declspec(align(4)) std::basic_istream<unsigned short>::sentry : std::basic_istream<unsigned short>::_Sentry_base
// {
//   bool _Ok;
// };

// /* 5682 */
// struct __cppobj std::char_traits<unsigned short> : std::_Char_traits_base
// {
// };

// /* 5683 */
// struct __cppobj std::basic_ostream<unsigned short>::_Sentry_base
// {
//   std::basic_ostream<unsigned short> *_Myostr;
// };

// /* 5684 */
// struct __cppobj __declspec(align(4)) std::basic_ostream<unsigned short>::sentry : std::basic_ostream<unsigned short>::_Sentry_base
// {
//   bool _Ok;
// };

// /* 5685 */
// struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_46
// {
//   const void *pVFTable;
//   void *spare;
//   char name[46];
// };

// /* 5686 */
// struct _TEB_ACTIVE_FRAME_CONTEXT
// {
//   unsigned int Flags;
//   const char *FrameName;
// };

// /* 5687 */
// struct _PEB_FREE_BLOCK
// {
//   _PEB_FREE_BLOCK *Next;
//   unsigned int Size;
// };

// /* 5688 */
// struct __declspec(align(4)) _Wx86ThreadState
// {
//   unsigned int *CallBx86Eip;
//   void *DeallocationCpu;
//   unsigned __int8 UseKnownWx86Dll;
//   char OleStubInvoked;
// };

// /* 5689 */
// struct _EXCEPTION_REGISTRATION_RECORD
// {
//   _EXCEPTION_REGISTRATION_RECORD *Next;
//   _EXCEPTION_DISPOSITION (__cdecl *Handler)(_EXCEPTION_RECORD *, void *, _CONTEXT *, void *);
// };

// /* 5691 */
// union $7A727655067EA29DD1B3C3F7D79CBFD1
// {
//   void *FiberData;
//   unsigned int Version;
// };

// /* 5690 */
// struct _NT_TIB
// {
//   _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
//   void *StackBase;
//   void *StackLimit;
//   void *SubSystemTib;
//   $7A727655067EA29DD1B3C3F7D79CBFD1 ___u4;
//   void *ArbitraryUserPointer;
//   _NT_TIB *Self;
// };

// /* 5692 */
// struct _TEB_ACTIVE_FRAME
// {
//   unsigned int Flags;
//   _TEB_ACTIVE_FRAME *Previous;
//   const _TEB_ACTIVE_FRAME_CONTEXT *Context;
// };

// /* 5693 */
// struct _UNICODE_STRING
// {
//   unsigned __int16 Length;
//   unsigned __int16 MaximumLength;
//   unsigned __int16 *Buffer;
// };

// /* 5694 */
// union $230F007F57291FA6539DD91FCBF00ADE
// {
//   void (__cdecl *HandlerAddress)();
//   void (__fastcall *FinallyFunc)();
// };

// /* 5695 */
// struct _EH4_SCOPETABLE_RECORD
// {
//   int EnclosingLevel;
//   void *FilterFunc;
//   void *HandlerFunc;
// };

// /* 5696 */
// struct _ACTIVATION_CONTEXT_STACK
// {
//   unsigned int Flags;
//   unsigned int NextCookieSequenceNumber;
//   _RTL_ACTIVATION_CONTEXT_STACK_FRAME *ActiveFrame;
//   _LIST_ENTRY FrameListCache;
// };

// /* 5697 */
// struct LIST_ENTRY32
// {
//   unsigned int Flink;
//   unsigned int Blink;
// };

// /* 5698 */
// struct _PEB_LDR_DATA
// {
//   unsigned int Length;
//   unsigned __int8 Initialized;
//   void *SsHandle;
//   _LIST_ENTRY InLoadOrderModuleList;
//   _LIST_ENTRY InMemoryOrderModuleList;
//   _LIST_ENTRY InInitializationOrderModuleList;
//   void *EntryInProgress;
// };

// /* 5699 */
// struct _CLIENT_ID
// {
//   void *UniqueProcess;
//   void *UniqueThread;
// };

// /* 5700 */
// struct _EH4_EXCEPTION_REGISTRATION_RECORD
// {
//   void *SavedESP;
//   _EXCEPTION_POINTERS *ExceptionPointers;
//   _EXCEPTION_REGISTRATION_RECORD SubRecord;
//   unsigned int EncodedScopeTable;
//   unsigned int TryLevel;
// };

// /* 5701 */
// struct _KSYSTEM_TIME
// {
//   unsigned int LowPart;
//   int High1Time;
//   int High2Time;
// };

// /* 5702 */
// struct _GDI_TEB_BATCH
// {
//   unsigned int Offset;
//   unsigned int HDC;
//   unsigned int Buffer[310];
// };

// /* 5703 */
// union __unaligned __declspec(align(4)) $53FE4804D6980945A5D5B30663D51220
// {
//   volatile _KSYSTEM_TIME TickCount;
//   volatile unsigned __int64 TickCountQuad;
// };

// /* 5704 */
// struct __declspec(align(8)) _KUSER_SHARED_DATA
// {
//   unsigned int TickCountLowDeprecated;
//   unsigned int TickCountMultiplier;
//   volatile _KSYSTEM_TIME InterruptTime;
//   volatile _KSYSTEM_TIME SystemTime;
//   volatile _KSYSTEM_TIME TimeZoneBias;
//   unsigned __int16 ImageNumberLow;
//   unsigned __int16 ImageNumberHigh;
//   wchar_t NtSystemRoot[260];
//   unsigned int MaxStackTraceDepth;
//   unsigned int CryptoExponent;
//   unsigned int TimeZoneId;
//   unsigned int LargePageMinimum;
//   unsigned int Reserved2[7];
//   _NT_PRODUCT_TYPE NtProductType;
//   unsigned __int8 ProductTypeIsValid;
//   unsigned int NtMajorVersion;
//   unsigned int NtMinorVersion;
//   unsigned __int8 ProcessorFeatures[64];
//   unsigned int Reserved1;
//   unsigned int Reserved3;
//   volatile unsigned int TimeSlip;
//   _ALTERNATIVE_ARCHITECTURE_TYPE AlternativeArchitecture;
//   _LARGE_INTEGER SystemExpirationDate;
//   unsigned int SuiteMask;
//   unsigned __int8 KdDebuggerEnabled;
//   volatile unsigned int ActiveConsoleId;
//   volatile unsigned int DismountCount;
//   unsigned int ComPlusPackage;
//   unsigned int LastSystemRITEventTickCount;
//   unsigned int NumberOfPhysicalPages;
//   unsigned __int8 SafeBootMode;
//   unsigned int TraceLogging;
//   unsigned __int64 Fill0;
//   unsigned __int64 SystemCall[4];
//   $53FE4804D6980945A5D5B30663D51220 ___u34;
// };

// /* 6404 */
// typedef unsigned int DWORD;

// /* 5705 */
// struct _EH4_SCOPETABLE
// {
//   DWORD GSCookieOffset;
//   DWORD GSCookieXOROffset;
//   DWORD EHCookieOffset;
//   DWORD EHCookieXOROffset;
//   struct _EH4_SCOPETABLE_RECORD ScopeRecord[];
// };

// /* 5706 */
// struct _PEB
// {
//   unsigned __int8 InheritedAddressSpace;
//   unsigned __int8 ReadImageFileExecOptions;
//   unsigned __int8 BeingDebugged;
//   unsigned __int8 SpareBool;
//   void *Mutant;
//   void *ImageBaseAddress;
//   _PEB_LDR_DATA *Ldr;
//   _RTL_USER_PROCESS_PARAMETERS *ProcessParameters;
//   void *SubSystemData;
//   void *ProcessHeap;
//   _RTL_CRITICAL_SECTION *FastPebLock;
//   void *SparePtr1;
//   void *SparePtr2;
//   unsigned int EnvironmentUpdateCount;
//   void *KernelCallbackTable;
//   unsigned int SystemReserved[1];
//   unsigned __int32 ExecuteOptions : 2;
//   unsigned __int32 SpareBits : 30;
//   _PEB_FREE_BLOCK *FreeList;
//   unsigned int TlsExpansionCounter;
//   void *TlsBitmap;
//   unsigned int TlsBitmapBits[2];
//   void *ReadOnlySharedMemoryBase;
//   void *ReadOnlySharedMemoryHeap;
//   void **ReadOnlyStaticServerData;
//   void *AnsiCodePageData;
//   void *OemCodePageData;
//   void *UnicodeCaseTableData;
//   unsigned int NumberOfProcessors;
//   unsigned int NtGlobalFlag;
//   _LARGE_INTEGER CriticalSectionTimeout;
//   unsigned int HeapSegmentReserve;
//   unsigned int HeapSegmentCommit;
//   unsigned int HeapDeCommitTotalFreeThreshold;
//   unsigned int HeapDeCommitFreeBlockThreshold;
//   unsigned int NumberOfHeaps;
//   unsigned int MaximumNumberOfHeaps;
//   void **ProcessHeaps;
//   void *GdiSharedHandleTable;
//   void *ProcessStarterHelper;
//   unsigned int GdiDCAttributeList;
//   _RTL_CRITICAL_SECTION *LoaderLock;
//   unsigned int OSMajorVersion;
//   unsigned int OSMinorVersion;
//   unsigned __int16 OSBuildNumber;
//   unsigned __int16 OSCSDVersion;
//   unsigned int OSPlatformId;
//   unsigned int ImageSubsystem;
//   unsigned int ImageSubsystemMajorVersion;
//   unsigned int ImageSubsystemMinorVersion;
//   unsigned int ImageProcessAffinityMask;
//   unsigned int GdiHandleBuffer[34];
//   void (__cdecl *PostProcessInitRoutine)();
//   void *TlsExpansionBitmap;
//   unsigned int TlsExpansionBitmapBits[32];
//   unsigned int SessionId;
//   _ULARGE_INTEGER AppCompatFlags;
//   _ULARGE_INTEGER AppCompatFlagsUser;
//   void *pShimData;
//   void *AppCompatInfo;
//   _UNICODE_STRING CSDVersion;
//   const _ACTIVATION_CONTEXT_DATA *ActivationContextData;
//   _ASSEMBLY_STORAGE_MAP *ProcessAssemblyStorageMap;
//   const _ACTIVATION_CONTEXT_DATA *SystemDefaultActivationContextData;
//   _ASSEMBLY_STORAGE_MAP *SystemAssemblyStorageMap;
//   unsigned int MinimumStackCommit;
//   void **FlsCallback;
//   _LIST_ENTRY FlsListHead;
//   void *FlsBitmap;
//   unsigned int FlsBitmapBits[4];
//   unsigned int FlsHighIndex;
// };

// /* 5707 */
// struct LIST_ENTRY64
// {
//   unsigned __int64 Flink;
//   unsigned __int64 Blink;
// };

// /* 5708 */
// struct _TEB
// {
//   _NT_TIB NtTib;
//   void *EnvironmentPointer;
//   _CLIENT_ID ClientId;
//   void *ActiveRpcHandle;
//   void *ThreadLocalStoragePointer;
//   _PEB *ProcessEnvironmentBlock;
//   unsigned int LastErrorValue;
//   unsigned int CountOfOwnedCriticalSections;
//   void *CsrClientThread;
//   void *Win32ThreadInfo;
//   unsigned int User32Reserved[26];
//   unsigned int UserReserved[5];
//   void *WOW32Reserved;
//   unsigned int CurrentLocale;
//   unsigned int FpSoftwareStatusRegister;
//   void *SystemReserved1[54];
//   int ExceptionCode;
//   _ACTIVATION_CONTEXT_STACK ActivationContextStack;
//   unsigned __int8 SpareBytes1[24];
//   _GDI_TEB_BATCH GdiTebBatch;
//   _CLIENT_ID RealClientId;
//   void *GdiCachedProcessHandle;
//   unsigned int GdiClientPID;
//   unsigned int GdiClientTID;
//   void *GdiThreadLocalInfo;
//   unsigned int Win32ClientInfo[62];
//   void *glDispatchTable[233];
//   unsigned int glReserved1[29];
//   void *glReserved2;
//   void *glSectionInfo;
//   void *glSection;
//   void *glTable;
//   void *glCurrentRC;
//   void *glContext;
//   unsigned int LastStatusValue;
//   _UNICODE_STRING StaticUnicodeString;
//   wchar_t StaticUnicodeBuffer[261];
//   void *DeallocationStack;
//   void *TlsSlots[64];
//   _LIST_ENTRY TlsLinks;
//   void *Vdm;
//   void *ReservedForNtRpc;
//   void *DbgSsReserved[2];
//   unsigned int HardErrorMode;
//   void *Instrumentation[16];
//   void *WinSockData;
//   unsigned int GdiBatchCount;
//   unsigned __int8 InDbgPrint;
//   unsigned __int8 FreeStackOnTermination;
//   unsigned __int8 HasFiberData;
//   unsigned __int8 IdealProcessor;
//   unsigned int Spare3;
//   void *ReservedForPerf;
//   void *ReservedForOle;
//   unsigned int WaitingOnLoaderLock;
//   _Wx86ThreadState Wx86Thread;
//   void **TlsExpansionSlots;
//   unsigned int ImpersonationLocale;
//   unsigned int IsImpersonating;
//   void *NlsCache;
//   void *pShimData;
//   unsigned int HeapVirtualAffinity;
//   void *CurrentTransactionHandle;
//   _TEB_ACTIVE_FRAME *ActiveFrame;
//   void *FlsData;
// };

// /* 5709 */
// struct __declspec(align(32)) _JMP_BUF
// {
//   unsigned int saved_ebp;
//   unsigned int saved_ebx;
//   unsigned int saved_edi;
//   unsigned int saved_esi;
//   unsigned int saved_esp;
//   unsigned int saved_return;
//   unsigned int saved_xregistration;
//   unsigned int saved_trylevel;
//   unsigned int version_cookie;
//   unsigned int unwind_func;
//   unsigned int unwind_data;
// };

// /* 5710 */
// struct _NLG_INFO
// {
//   unsigned int dwSig;
//   unsigned int uoffDestination;
//   unsigned int dwCode;
//   unsigned int uoffFramePointer;
// };

// /* 5711 */
// struct __declspec(align(16)) _EXCEPTION_RECORD_CRT
// {
//   unsigned int exception_number;
//   unsigned int exception_flags;
//   unsigned int exception_record;
//   unsigned int exception_address;
//   unsigned int number_parameters;
//   unsigned int exception_information;
//   _BYTE gap18[56];
// };

// /* 5712 */
// struct _EXCEPTION_REGISTRATION_COMMON
// {
//   _BYTE gap0[8];
//   unsigned int scopetable;
//   unsigned int trylevel;
// };

// /* 5713 */
// struct _SCOPETABLE_ENTRY
// {
//   unsigned int enclosing_level;
//   unsigned int filter;
//   unsigned int specific_handler;
// };

// /* 5714 */
// struct _EXCEPTION_REGISTRATION
// {
//   unsigned int prev;
//   unsigned int handler;
// };

// /* 5715 */
// struct __declspec(align(16)) ExceptionRecordStruct
// {
//   unsigned int ExceptionCode;
//   unsigned int ExceptionFlags;
//   unsigned int ExceptionRecord_;
//   unsigned int ExceptionAddress;
//   unsigned int NumberParameters;
//   unsigned int ExceptionInfo;
//   _BYTE gap18[56];
// };

// /* 5716 */
// struct RegistrationNode
// {
//   unsigned int Next;
//   unsigned int Handler;
//   unsigned int EH4ScopeTable;
//   unsigned int TryLevel;
// };

// /* 5717 */
// union $0E3F8CB7D65B38BD22FD7A6AB8ED9E74
// {
//   unsigned int HandlerAddress;
//   unsigned int FinallyFunc;
// };

// /* 5718 */
// struct ScopeTableRecord
// {
//   unsigned int EnclosingLevel;
//   unsigned int FilterFunc;
//   $0E3F8CB7D65B38BD22FD7A6AB8ED9E74 ___u2;
// };

// /* 5719 */
// struct UnwindGuardNode
// {
//   unsigned int Next;
//   unsigned int Handler;
//   unsigned int SecurityCookie;
//   unsigned int OrigTargetLevel;
//   unsigned int OrigEstablisher;
//   unsigned int OrigCookiePointer;
//   unsigned int FramePointer;
// };

// /* 5720 */
// struct ScopeTable
// {
//   unsigned int GSCookieOffset;
//   unsigned int GSCookieXOROffset;
//   unsigned int EHCookieOffset;
//   unsigned int EHCookieXOROffset;
//   unsigned int ScopeRecord;
// };

// /* 5721 */
// struct $AC279CAA9C5581B899E4397C90E7ADDB
// {
//   unsigned __int32 LongFunction : 1;
//   unsigned __int32 Private : 31;
// };

// /* 5722 */
// union $EB65E91D1AB83EA26397999F1ADAAE95
// {
//   unsigned int Flags;
//   $AC279CAA9C5581B899E4397C90E7ADDB s;
// };

// /* 5723 */
// struct _strflt
// {
//   int sign;
//   int decpt;
//   int flag;
//   char *mantissa;
// };

// /* 5724 */
// struct _finddata32_t
// {
//   unsigned int attrib;
//   int time_create;
//   int time_access;
//   int time_write;
//   unsigned int size;
//   char name[260];
// };

// /* 5725 */
// struct errentry
// {
//   unsigned int oscode;
//   int errnocode;
// };

// /* 5726 */
// struct _is_ctype_compatible
// {
//   unsigned int id;
//   int is_clike;
// };

// /* 5727 */
// struct setloc_struct
// {
//   char *pchLanguage;
//   char *pchCountry;
//   int iLcidState;
//   int iPrimaryLen;
//   int bAbbrevLanguage;
//   int bAbbrevCountry;
//   unsigned int lcidLanguage;
//   unsigned int lcidCountry;
//   tagLC_ID _cacheid;
//   unsigned int _cachecp;
//   char _cachein[131];
//   char _cacheout[131];
//   _is_ctype_compatible _Lcid_c[5];
// };

// /* 5728 */
// struct _tiddata
// {
//   unsigned int _tid;
//   unsigned int _thandle;
//   int _terrno;
//   unsigned int _tdoserrno;
//   unsigned int _fpds;
//   unsigned int _holdrand;
//   char *_token;
//   wchar_t *_wtoken;
//   unsigned __int8 *_mtoken;
//   char *_errmsg;
//   wchar_t *_werrmsg;
//   char *_namebuf0;
//   wchar_t *_wnamebuf0;
//   char *_namebuf1;
//   wchar_t *_wnamebuf1;
//   char *_asctimebuf;
//   wchar_t *_wasctimebuf;
//   void *_gmtimebuf;
//   char *_cvtbuf;
//   unsigned __int8 _con_ch_buf[5];
//   unsigned __int16 _ch_buf_used;
//   void *_initaddr;
//   void *_initarg;
//   void *_pxcptacttab;
//   void *_tpxcptinfoptrs;
//   int _tfpecode;
//   threadmbcinfostruct *ptmbcinfo;
//   threadlocaleinfostruct *ptlocinfo;
//   int _ownlocale;
//   unsigned int _NLG_dwCode;
//   void *_terminate;
//   void *_unexpected;
//   void *_translator;
//   void *_purecall;
//   void *_curexception;
//   void *_curcontext;
//   int _ProcessingThrow;
//   void *_curexcspec;
//   void *_pFrameInfoChain;
//   setloc_struct _setloc_data;
//   void *_encode_ptr;
//   void *_decode_ptr;
//   void *_reserved1;
//   void *_reserved2;
//   void *_reserved3;
//   int _cxxReThrow;
//   unsigned int __initDomain;
// };

// /* 5729 */
// struct _stat32
// {
//   unsigned int st_dev;
//   unsigned __int16 st_ino;
//   unsigned __int16 st_mode;
//   __int16 st_nlink;
//   __int16 st_uid;
//   __int16 st_gid;
//   unsigned int st_rdev;
//   int st_size;
//   int st_atime;
//   int st_mtime;
//   int st_ctime;
// };

// /* 5730 */
// struct tagEntry
// {
//   int sizeFront;
//   tagEntry *pEntryNext;
//   tagEntry *pEntryPrev;
// };

// /* 5731 */
// struct tagListHead
// {
//   tagEntry *pEntryNext;
//   tagEntry *pEntryPrev;
// };

// /* 5732 */
// struct tagGroup
// {
//   int cntEntries;
//   tagListHead listHead[64];
// };

// /* 5733 */
// struct tagRegion
// {
//   int indGroupUse;
//   char cntRegionSize[64];
//   unsigned int bitvGroupHi[32];
//   unsigned int bitvGroupLo[32];
//   tagGroup grpHeadList[32];
// };

// /* 5734 */
// struct tagHeader
// {
//   unsigned int bitvEntryHi;
//   unsigned int bitvEntryLo;
//   unsigned int bitvCommit;
//   void *pHeapData;
//   tagRegion *pRegion;
// };

// /* 5735 */
// struct tagEntryEnd
// {
//   int sizeBack;
// };

// /* 5736 */
// struct __declspec(align(8)) ioinfo
// {
//   int osfhnd;
//   char osfile;
//   char pipech;
//   int lockinitflag;
//   _RTL_CRITICAL_SECTION lock;
//   __int8 textmode : 7;
//   __int8 unicode : 1;
//   char pipech2[2];
//   __int64 startpos;
//   int utf8translations;
//   char dbcsBuffer;
//   int dbcsBufferUsed;
// };

// /* 5737 */
// struct _BY_HANDLE_FILE_INFORMATION
// {
//   unsigned int dwFileAttributes;
//   _FILETIME ftCreationTime;
//   _FILETIME ftLastAccessTime;
//   _FILETIME ftLastWriteTime;
//   unsigned int dwVolumeSerialNumber;
//   unsigned int nFileSizeHigh;
//   unsigned int nFileSizeLow;
//   unsigned int nNumberOfLinks;
//   unsigned int nFileIndexHigh;
//   unsigned int nFileIndexLow;
// };

// /* 5738 */
// struct $9EDDA679613D7E4E5E37CB563F432A3F
// {
//   unsigned int lowerhalf;
//   int upperhalf;
// };

// /* 5739 */
// union doubleint
// {
//   __int64 bigint;
//   $9EDDA679613D7E4E5E37CB563F432A3F twoints;
// };

// /* 5740 */
// struct tagUSEROBJECTFLAGS
// {
//   int fInherit;
//   int fReserved;
//   unsigned int dwFlags;
// };

// /* 5741 */
// struct HWINSTA__
// {
//   int unused;
// };

// /* 5742 */
// struct tagLC_STRINGS
// {
//   char szLanguage[64];
//   char szCountry[64];
//   char szCodePage[16];
// };

// /* 5743 */
// struct tagLOCALETAB
// {
//   char *szName;
//   char chAbbrev[4];
// };

// /* 5744 */
// union FT
// {
//   unsigned __int64 ft_scalar;
//   _FILETIME ft_struct;
// };

// /* 5745 */
// struct __declspec(align(4)) _cpinfo
// {
//   unsigned int MaxCharSize;
//   unsigned __int8 DefaultChar[2];
//   unsigned __int8 LeadByte[12];
// };

// /* 5746 */
// struct _IMAGE_DOS_HEADER
// {
//   unsigned __int16 e_magic;
//   unsigned __int16 e_cblp;
//   unsigned __int16 e_cp;
//   unsigned __int16 e_crlc;
//   unsigned __int16 e_cparhdr;
//   unsigned __int16 e_minalloc;
//   unsigned __int16 e_maxalloc;
//   unsigned __int16 e_ss;
//   unsigned __int16 e_sp;
//   unsigned __int16 e_csum;
//   unsigned __int16 e_ip;
//   unsigned __int16 e_cs;
//   unsigned __int16 e_lfarlc;
//   unsigned __int16 e_ovno;
//   unsigned __int16 e_res[4];
//   unsigned __int16 e_oemid;
//   unsigned __int16 e_oeminfo;
//   unsigned __int16 e_res2[10];
//   int e_lfanew;
// };

// /* 5747 */
// struct _IMAGE_FILE_HEADER
// {
//   unsigned __int16 Machine;
//   unsigned __int16 NumberOfSections;
//   unsigned int TimeDateStamp;
//   unsigned int PointerToSymbolTable;
//   unsigned int NumberOfSymbols;
//   unsigned __int16 SizeOfOptionalHeader;
//   unsigned __int16 Characteristics;
// };

// /* 5748 */
// struct _IMAGE_DATA_DIRECTORY
// {
//   unsigned int VirtualAddress;
//   unsigned int Size;
// };

// /* 5749 */
// struct _IMAGE_OPTIONAL_HEADER
// {
//   unsigned __int16 Magic;
//   unsigned __int8 MajorLinkerVersion;
//   unsigned __int8 MinorLinkerVersion;
//   unsigned int SizeOfCode;
//   unsigned int SizeOfInitializedData;
//   unsigned int SizeOfUninitializedData;
//   unsigned int AddressOfEntryPoint;
//   unsigned int BaseOfCode;
//   unsigned int BaseOfData;
//   unsigned int ImageBase;
//   unsigned int SectionAlignment;
//   unsigned int FileAlignment;
//   unsigned __int16 MajorOperatingSystemVersion;
//   unsigned __int16 MinorOperatingSystemVersion;
//   unsigned __int16 MajorImageVersion;
//   unsigned __int16 MinorImageVersion;
//   unsigned __int16 MajorSubsystemVersion;
//   unsigned __int16 MinorSubsystemVersion;
//   unsigned int Win32VersionValue;
//   unsigned int SizeOfImage;
//   unsigned int SizeOfHeaders;
//   unsigned int CheckSum;
//   unsigned __int16 Subsystem;
//   unsigned __int16 DllCharacteristics;
//   unsigned int SizeOfStackReserve;
//   unsigned int SizeOfStackCommit;
//   unsigned int SizeOfHeapReserve;
//   unsigned int SizeOfHeapCommit;
//   unsigned int LoaderFlags;
//   unsigned int NumberOfRvaAndSizes;
//   _IMAGE_DATA_DIRECTORY DataDirectory[16];
// };

// /* 5750 */
// struct _IMAGE_NT_HEADERS
// {
//   unsigned int Signature;
//   _IMAGE_FILE_HEADER FileHeader;
//   _IMAGE_OPTIONAL_HEADER OptionalHeader;
// };

// /* 5751 */
// union $22971E98F1DCAE471B592EC18ECB1551
// {
//   unsigned int PhysicalAddress;
//   unsigned int VirtualSize;
// };

// /* 5752 */
// struct _IMAGE_SECTION_HEADER
// {
//   unsigned __int8 Name[8];
//   $22971E98F1DCAE471B592EC18ECB1551 Misc;
//   unsigned int VirtualAddress;
//   unsigned int SizeOfRawData;
//   unsigned int PointerToRawData;
//   unsigned int PointerToRelocations;
//   unsigned int PointerToLinenumbers;
//   unsigned __int16 NumberOfRelocations;
//   unsigned __int16 NumberOfLinenumbers;
//   unsigned int Characteristics;
// };

// /* 5753 */
// struct _XCPT_ACTION
// {
//   unsigned int XcptNum;
//   int SigNum;
//   void (__cdecl *XcptAction)(int);
// };

// /* 5754 */
// struct _FILEX
// {
//   _iobuf f;
//   _RTL_CRITICAL_SECTION lock;
// };

// /* 5755 */
// struct _TIME_ZONE_INFORMATION
// {
//   int Bias;
//   wchar_t StandardName[32];
//   _SYSTEMTIME StandardDate;
//   int StandardBias;
//   wchar_t DaylightName[32];
//   _SYSTEMTIME DaylightDate;
//   int DaylightBias;
// };

// /* 5756 */
// struct transitiondate
// {
//   int yr;
//   int yd;
//   int ms;
// };

// /* 5757 */
// struct __cppobj <CrtImplementationDetails>::NativeDll
// {
// };

// /* 5758 */
// struct __cppobj __declspec(align(4)) _LocaleUpdate
// {
//   localeinfo_struct localeinfo;
//   _tiddata *ptd;
//   bool updated;
// };

// /* 5759 */
// struct _CRT_FLOAT
// {
//   float f;
// };

// /* 5760 */
// struct _LDOUBLE
// {
//   unsigned __int8 ld[10];
// };

// /* 5761 */
// struct _CRT_DOUBLE
// {
//   long double x;
// };

// /* 5762 */
// struct _LDBL12
// {
//   unsigned __int8 ld12[12];
// };

// /* 5763 */
// struct _flt
// {
//   int flags;
//   int nbytes;
//   int lval;
//   long double dval;
// };

// /* 5764 */
// struct code_page_info
// {
//   int code_page;
//   unsigned __int16 mbulinfo[6];
//   unsigned __int8 rgrange[4][8];
// };

// /* 5765 */
// union _output_l::__l2::<unnamed_type_buffer>
// {
//   char sz[512];
// };

// /* 5766 */
// union _output_l::__l2::<unnamed_type_text>
// {
//   char *sz;
//   wchar_t *wz;
// };

// /* 5767 */
// struct _output_l::__l77::_count_string
// {
//   __int16 Length;
//   __int16 MaximumLength;
//   char *Buffer;
// };

// /* 5768 */
// struct positional_param
// {
//   ARG_TYPE arg_type;
//   char *arg_ptr;
//   char type;
//   int flags;
// };

// /* 5769 */
// union _output_s_l::__l2::<unnamed_type_buffer>
// {
//   char sz[512];
// };

// /* 5770 */
// union _output_s_l::__l2::<unnamed_type_text>
// {
//   char *sz;
//   wchar_t *wz;
// };

// /* 5771 */
// struct _output_s_l::__l83::_count_string
// {
//   __int16 Length;
//   __int16 MaximumLength;
//   char *Buffer;
// };

// /* 5772 */
// struct _IMAGE_TLS_DIRECTORY32
// {
//   unsigned int StartAddressOfRawData;
//   unsigned int EndAddressOfRawData;
//   unsigned int AddressOfIndex;
//   unsigned int AddressOfCallBacks;
//   unsigned int SizeOfZeroFill;
//   unsigned int Characteristics;
// };

// /* 5773 */
// struct $113098813FD5B272512B32BE70AEEAFA
// {
//   _RTL_CRITICAL_SECTION *lock;
//   $D283E5A92EBEB600100C8EBC9C67A011 kind;
// };

// /* 5774 */
// struct rterrmsgs
// {
//   int rterrno;
//   char *rterrtxt;
// };

// /* 5775 */
// struct _FloatOutStruct
// {
//   __int16 exp;
//   char sign;
//   char ManLen;
//   char man[22];
// };

// /* 5776 */
// struct FpFormatDescriptor
// {
//   int max_exp;
//   int min_exp;
//   int precision;
//   int exp_width;
//   int format_width;
//   int bias;
// };

// /* 5777 */
// struct $81FF3B5A01E2ACE59F672A6F9CB6F2F8
// {
//   unsigned __int64 mantissa : 52;
//   unsigned __int64 exponent : 11;
//   unsigned __int64 sign : 1;
// };

// /* 5778 */
// union _CRT_DOUBLE_COMPONENTS
// {
//   long double d;
//   $81FF3B5A01E2ACE59F672A6F9CB6F2F8 __s1;
// };

// /* 5779 */
// struct __unaligned __declspec(align(2)) DispLocals
// {
//   unsigned __int16 wUser1;
//   unsigned __int16 wUser2;
//   unsigned __int16 savCntrl;
//   unsigned __int16 setCntrl;
//   unsigned __int16 StatusWord;
//   _TBYTE Fac;
//   unsigned int Function;
//   unsigned __int8 ErrorType;
//   unsigned __int8 __cpower;
//   unsigned int typ;
//   unsigned int nam;
//   unsigned __int64 arg1;
//   unsigned __int64 arg2;
//   unsigned __int64 retval;
//   unsigned __int8 savebuf;
//   _BYTE gap3B[107];
// };

// /* 5780 */
// struct __declspec(align(2)) funtab
// {
//   unsigned __int8 fnamlen;
//   unsigned __int8 fnam;
//   _BYTE gap2[5];
//   unsigned __int8 fuseval;
//   _BYTE gap8[5];
//   unsigned __int8 fnumarg;
//   unsigned __int8 fnumber;
// };

// /* 5781 */
// struct _exception
// {
//   unsigned int typ;
//   unsigned int nam;
//   unsigned __int64 arg1;
//   unsigned __int64 arg2;
//   unsigned __int64 retval;
// };

// /* 5782 */
// struct FPU_STATE
// {
//   unsigned __int16 CONTROL_WORD;
//   unsigned __int16 reserved_1;
//   unsigned int STATUS_WORD;
//   unsigned __int16 TAG_WORD;
//   unsigned __int16 reserved_3;
//   unsigned int IP_OFFSET;
//   unsigned __int16 CS_SLCT;
//   unsigned __int16 OPCODE;
//   unsigned int DATA_OFFSET;
//   unsigned __int16 OPERAND_SLCT;
//   unsigned __int16 reserved_4;
// };

// /* 5783 */
// struct __unaligned __declspec(align(1)) MTStackFrame
// {
//   unsigned __int64 MTS_LocalFac;
//   unsigned __int8 MTS_cdispflags;
// };

// /* 5784 */
// struct _U32ARRAY
// {
//   unsigned int W[4];
// };

// /* 5785 */
// struct _U64
// {
//   unsigned int W[2];
// };

// /* 5786 */
// struct _FP128
// {
//   unsigned int W[4];
// };

// /* 5787 */
// struct _FPIEEE_EXCEPTION_FLAGS
// {
//   unsigned __int32 Inexact : 1;
//   unsigned __int32 Underflow : 1;
//   unsigned __int32 Overflow : 1;
//   unsigned __int32 ZeroDivide : 1;
//   unsigned __int32 InvalidOperation : 1;
// };

// /* 5788 */
// struct _FP80
// {
//   unsigned __int16 W[5];
// };

// /* 5789 */
// struct _I64
// {
//   unsigned int W[2];
// };

// /* 5790 */
// struct _BCD80
// {
//   unsigned __int16 W[5];
// };

// /* 5791 */
// struct _FPQ64
// {
//   __int64 W[2];
// };

// /* 5792 */
// union $86B16E72AB0B3F5441F07DA069252115
// {
//   float Fp32Value;
//   long double Fp64Value;
//   _FP80 Fp80Value;
//   _FP128 Fp128Value;
//   __int16 I16Value;
//   int I32Value;
//   _I64 I64Value;
//   unsigned __int16 U16Value;
//   unsigned int U32Value;
//   _U64 U64Value;
//   _BCD80 Bcd80Value;
//   char *StringValue;
//   int CompareValue;
//   _U32ARRAY U32ArrayValue;
//   __int64 Q64Value;
//   _FPQ64 Fpq64Value;
// };

// /* 5793 */
// struct __declspec(align(16)) _FPIEEE_VALUE
// {
//   $86B16E72AB0B3F5441F07DA069252115 Value;
//   unsigned __int32 OperandValid : 1;
//   unsigned __int32 Format : 4;
// };

// /* 5794 */
// struct _FPIEEE_RECORD
// {
//   unsigned __int32 RoundingMode : 2;
//   unsigned __int32 Precision : 3;
//   unsigned __int32 Operation : 12;
//   _FPIEEE_EXCEPTION_FLAGS Cause;
//   _FPIEEE_EXCEPTION_FLAGS Enable;
//   _FPIEEE_EXCEPTION_FLAGS Status;
//   _FPIEEE_VALUE Operand1;
//   _FPIEEE_VALUE Operand2;
//   _FPIEEE_VALUE Result;
// };

// /* 5795 */
// union _dbl
// {
//   int lng[2];
//   long double dbl;
// };

// /* 5796 */
// struct $992A88C5856F6BE6869BBDDAC7BE31AD
// {
//   int dw0;
//   int dw1;
//   int dw2;
// };

// /* 5797 */
// struct TypeDescriptor
// {
//   unsigned int hash;
//   void *spare;
//   char name[];
// };

// /* 5798 */
// struct PMD
// {
//   int mdisp;
//   int pdisp;
//   int vdisp;
// };

// /* 5799 */
// struct _s_CatchableType
// {
//   unsigned int properties;
//   TypeDescriptor *pType;
//   PMD thisDisplacement;
//   int sizeOrOffset;
//   void (__cdecl *copyFunction)();
// };

// /* 5800 */
// struct _s_CatchableTypeArray
// {
//   int nCatchableTypes;
//   const _s_CatchableType *arrayOfCatchableTypes[];
// };

// /* 5801 */
// struct _s_HandlerType
// {
//   unsigned int adjectives;
//   TypeDescriptor *pType;
//   int dispCatchObj;
//   void *addressOfHandler;
// };

// /* 5802 */
// struct _s_ESTypeList
// {
//   int nCount;
//   const _s_HandlerType *pTypeArray;
// };

// /* 5803 */
// struct _s_ThrowInfo
// {
//   unsigned int attributes;
//   void (__cdecl *pmfnUnwind)();
//   int (*pForwardCompat)(...);
//   const _s_CatchableTypeArray *pCatchableTypeArray;
// };

// /* 5804 */
// struct _s_UnwindMapEntry
// {
//   int toState;
//   void (__cdecl *action)();
// };

// /* 5805 */
// struct _s_TryBlockMapEntry
// {
//   int tryLow;
//   int tryHigh;
//   int catchHigh;
//   int nCatches;
//   const _s_HandlerType *pHandlerArray;
// };

// /* 5806 */
// struct _s_FuncInfo
// {
//   unsigned __int32 magicNumber : 29;
//   unsigned __int32 bbtFlags : 3;
//   int maxState;
//   const _s_UnwindMapEntry *pUnwindMap;
//   unsigned int nTryBlocks;
//   const _s_TryBlockMapEntry *pTryBlockMap;
//   unsigned int nIPMapEntries;
//   void *pIPtoStateMap;
//   const _s_ESTypeList *pESTypeList;
//   int EHFlags;
// };

// /* 5807 */
// struct EHExceptionRecord::EHParameters
// {
//   unsigned int magicNumber;
//   void *pExceptionObject;
//   const _s_ThrowInfo *pThrowInfo;
// };

// /* 5808 */
// struct EHExceptionRecord
// {
//   unsigned int ExceptionCode;
//   unsigned int ExceptionFlags;
//   _EXCEPTION_RECORD *ExceptionRecord;
//   void *ExceptionAddress;
//   unsigned int NumberParameters;
//   EHExceptionRecord::EHParameters params;
// };

// /* 5809 */
// struct EHRegistrationNode
// {
//   EHRegistrationNode *pNext;
//   void *frameHandler;
//   int state;
// };

// /* 5810 */
// struct CatchGuardRN
// {
//   EHRegistrationNode *pNext;
//   void *pFrameHandler;
//   unsigned int RandomCookie;
//   const _s_FuncInfo *pFuncInfo;
//   EHRegistrationNode *pRN;
//   int CatchDepth;
// };

// /* 5811 */
// struct TranslatorGuardRN
// {
//   EHRegistrationNode *pNext;
//   void *pFrameHandler;
//   unsigned int RandomCookie;
//   const _s_FuncInfo *pFuncInfo;
//   EHRegistrationNode *pRN;
//   int CatchDepth;
//   EHRegistrationNode *pMarkerRN;
//   void *ESP;
//   void *EBP;
//   int DidUnwind;
// };

// /* 5812 */
// struct FrameInfo
// {
//   void *pExceptionObject;
//   FrameInfo *pNext;
// };

// /* 5813 */
// struct __JUMP_BUFFER
// {
//   unsigned int Ebp;
//   unsigned int Ebx;
//   unsigned int Edi;
//   unsigned int Esi;
//   unsigned int Esp;
//   unsigned int Eip;
//   unsigned int Registration;
//   unsigned int TryLevel;
//   unsigned int Cookie;
//   unsigned int UnwindFunc;
//   unsigned int UnwindData[6];
// };

// /* 5814 */
// struct __cppobj HeapManager::Block
// {
//   HeapManager::Block *next;
//   char memBlock[4096];
// };

// /* 5815 */
// struct HeapManager
// {
//   void *(__cdecl *pOpNew)(unsigned int);
//   void (__cdecl *pOpDelete)(void *);
//   HeapManager::Block *head;
//   HeapManager::Block *tail;
//   unsigned int blockLeft;
// };

// /* 5816 */
// struct __cppobj DNameNode
// {
//   DNameNode_vtbl *__vftable /*VFT*/;
// };

// /* 5817 */
// struct /*VFT*/ DNameNode_vtbl
// {
//   int (__thiscall *length)(DNameNode *this);
//   char (__thiscall *getLastChar)(DNameNode *this);
//   char *(__thiscall *getString)(DNameNode *this, char *, char *);
// };

// /* 5818 */
// struct __cppobj DName
// {
//   DNameNode *node;
//   __int32 stat : 8;
//   unsigned __int32 isIndir : 1;
//   unsigned __int32 isAUDC : 1;
//   unsigned __int32 isAUDTThunk : 1;
//   unsigned __int32 isArrayType : 1;
//   unsigned __int32 NoTE : 1;
//   unsigned __int32 pinPtr : 1;
//   unsigned __int32 comArray : 1;
//   unsigned __int32 vcallThunk : 1;
// };

// /* 5819 */
// struct __cppobj Replicator
// {
//   int index;
//   DName *dNameBuffer[10];
// };

// /* 5820 */
// struct /*VFT*/ charNode_vtbl
// {
//   int (__thiscall *length)(DNameNode *this);
//   char (__thiscall *getLastChar)(DNameNode *this);
//   char *(__thiscall *getString)(DNameNode *this, char *, char *);
// };

// /* 5821 */
// struct __cppobj __declspec(align(4)) charNode : DNameNode
// {
//   char me;
// };

// /* 5822 */
// struct /*VFT*/ pcharNode_vtbl
// {
//   int (__thiscall *length)(DNameNode *this);
//   char (__thiscall *getLastChar)(DNameNode *this);
//   char *(__thiscall *getString)(DNameNode *this, char *, char *);
// };

// /* 5823 */
// struct __cppobj pcharNode : DNameNode
// {
//   char *me;
//   int myLen;
// };

// /* 5824 */
// struct __cppobj UnDecorator
// {
//   Replicator ArgList;
//   Replicator ZNameList;
// };

// /* 5825 */
// struct /*VFT*/ pDNameNode_vtbl
// {
//   int (__thiscall *length)(DNameNode *this);
//   char (__thiscall *getLastChar)(DNameNode *this);
//   char *(__thiscall *getString)(DNameNode *this, char *, char *);
// };

// /* 5826 */
// struct __cppobj pDNameNode : DNameNode
// {
//   DName *me;
// };

// /* 5827 */
// struct /*VFT*/ pairNode_vtbl
// {
//   int (__thiscall *length)(DNameNode *this);
//   char (__thiscall *getLastChar)(DNameNode *this);
//   char *(__thiscall *getString)(DNameNode *this, char *, char *);
// };

// /* 5828 */
// struct __cppobj pairNode : DNameNode
// {
//   DNameNode *left;
//   DNameNode *right;
//   int myLen;
// };

// /* 5829 */
// struct /*VFT*/ DNameStatusNode_vtbl
// {
//   int (__thiscall *length)(DNameNode *this);
//   char (__thiscall *getLastChar)(DNameNode *this);
//   char *(__thiscall *getString)(DNameNode *this, char *, char *);
// };

// /* 5830 */
// struct __cppobj DNameStatusNode : DNameNode
// {
//   DNameStatus me;
//   int myLen;
// };

// /* 5831 */
// struct __cppobj std::bad_typeid : std::exception
// {
// };

// /* 5832 */
// struct /*VFT*/ std::bad_typeid_vtbl
// {
//   void (__thiscall *~exception)(std::exception *this);
//   const char *(__thiscall *what)(std::exception *this);
// };

// /* 5833 */
// struct __cppobj std::__non_rtti_object : std::bad_typeid
// {
// };

// /* 5834 */
// struct /*VFT*/ std::__non_rtti_object_vtbl
// {
//   void (__thiscall *~exception)(std::exception *this);
//   const char *(__thiscall *what)(std::exception *this);
// };

// /* 5835 */
// struct OAPIPELINE::SMatrixMixParameters
// {
//   const void *pvSrc;
//   float *pfl32Dst;
//   const float *pfl32MatrixCoefficients;
//   const float *pfl32RampCoefficients;
//   OAPIPELINE::EAudioFormat nSrcFormatType;
//   unsigned int uSrcSampleCount;
//   unsigned int uSrcChannelCount;
//   unsigned int uDstChannelCount;
//   int fMixWithDestination;
//   int fScalarMatrix;
// };

// /* 5836 */
// struct XMASTREAMFORMAT
// {
//   unsigned int PsuedoBytesPerSec;
//   unsigned int SampleRate;
//   unsigned int LoopStart;
//   unsigned int LoopEnd;
//   unsigned __int8 SubframeData;
//   unsigned __int8 Channels;
//   unsigned __int16 ChannelMask;
// };

// /* 5837 */
// struct XMAWAVEFORMAT
// {
//   unsigned __int16 FormatTag;
//   unsigned __int16 BitsPerSample;
//   unsigned __int16 EncodeOptions;
//   unsigned __int16 LargestSkip;
//   unsigned __int16 NumStreams;
//   unsigned __int8 LoopCount;
//   unsigned __int8 Version;
//   XMASTREAMFORMAT XmaStreams[1];
// };

// /* 5838 */
// struct __declspec(align(8)) recentServer_t
// {
//   unsigned __int64 serverID;
//   int joinTime;
// };

// /* 5839 */
// struct XAssetPool<GfxImage,4224>
// {
//   XAssetPoolEntry<GfxImage> *freeHead;
//   XAssetPoolEntry<GfxImage> entries[4224];
// };
extern XAssetPool<GfxImage, 4224> g_GfxImagePool;

// /* 5840 */
// struct cityname_t
// {
//   char shortname[4];
//   char longname[64];
// };

// /* 5841 */
// struct __declspec(align(4)) StreamTempImage
// {
//   GfxImage *image;
//   bool alloced;
// };

// /* 5842 */
// struct goaldiff_t
// {
//   int diff;
//   int playlist;
// };

// /* 5843 */
// struct $B1DAFD9B74A03E3B6CE31F3FFC432B32
// {
//   bool init;
//   bool lost_device;
//   int width;
//   int height;
//   unsigned __int8 *outY;
//   unsigned __int8 *outU;
//   unsigned __int8 *outV;
//   IDirect3DTexture9 *renderTarget;
//   IDirect3DTexture9 *srcTexture;
//   IDirect3DTexture9 *dstTexture;
//   IDirect3DPixelShader9 *pixelShader;
//   IDirect3DVertexShader9 *vertexShader;
//   IDirect3DVertexBuffer9 *vertexBuffer;
//   IDirect3DVertexDeclaration9 *vertexDeclaration;
// };

// /* 5844 */
// struct _MEMORY_BASIC_INFORMATION
// {
//   void *BaseAddress;
//   void *AllocationBase;
//   unsigned int AllocationProtect;
//   unsigned int RegionSize;
//   unsigned int State;
//   unsigned int Protect;
//   unsigned int Type;
// };

// /* 5845 */
// struct fileShareSearchInfo_t
// {
//   bdTag *tags;
//   int numTags;
//   fileShareLocation location;
//   int startIndex;
//   int maxFileIDs;
//   bdFileID *outFileIDs;
//   int *outFileCount;
//   bdVoteRankStatsInfo *outRatings;
//   int *outRatingCount;
//   int *outTotalFileCount;
//   void (__cdecl *successCallback)();
//   void (__cdecl *failureCallback)();
// };

// /* 5846 */
// struct __cppobj fshSearchBookFiles_t
// {
//   int startIndex;
//   int numFiles;
//   bdFileID fileIDs[100];
//   bool needToReadRatings;
//   int numRatings;
//   bdVoteRankStatsInfo ratings[100];
// };

// /* 5847 */
// struct __cppobj fshSearchPage_t
// {
//   int startIndex;
//   int timestamp;
//   int numDescriptors;
//   bdFileMetaData descriptors[10];
// };

// /* 5848 */
// struct __cppobj __declspec(align(8)) fshSearchContext_t
// {
//   bdTag tags[40];
//   fileShareLocation location;
//   int numTags;
//   int timestamp;
//   int fileType;
//   bool sortHighestRated;
//   bool isValid;
//   int maxPastDays;
//   int totalOverride;
// };

// /* 5849 */
// struct __cppobj fshSearch_t
// {
//   int totalFiles;
//   fshSearchBookFiles_t bookFiles;
//   fshSearchPage_t pages[3];
//   fshSearchContext_t context;
// };

// /* 5850 */
// struct fileShareSearchBackoff_t
// {
//   bool isActive;
//   int level;
// };

// /* 5851 */
// struct $9B0FD635EC932744DEFCA28AAEF2899C
// {
//   bool init;
//   bool lost_device;
//   bool double_buffer;
//   int frame;
//   int width;
//   int height;
//   unsigned __int8 *outY;
//   unsigned __int8 *outU;
//   unsigned __int8 *outV;
//   IDirect3DTexture9 *renderTarget1;
//   IDirect3DTexture9 *renderTarget2;
//   IDirect3DTexture9 *srcTexture;
//   IDirect3DTexture9 *dstTexture;
//   IDirect3DPixelShader9 *pixelShader;
//   IDirect3DVertexShader9 *vertexShader;
//   IDirect3DVertexBuffer9 *vertexBuffer;
//   IDirect3DVertexDeclaration9 *vertexDeclaration;
// };

// /* 5852 */
// struct HHOOK__
// {
//   int unused;
// };

// /* 5853 */
// struct tagKBDLLHOOKSTRUCT
// {
//   unsigned int vkCode;
//   unsigned int scanCode;
//   unsigned int flags;
//   unsigned int time;
//   unsigned int dwExtraInfo;
// };

// /* 5854 */
// struct s_restricted_single
// {
//   char name[64];
//   bool valid;
// };

// /* 5855 */
// struct __cppobj MatchMaking_PC_GEO_Query : bdSessionParams
// {
//   unsigned int m_memberPARAM_NETCODE_VERSION;
//   unsigned int m_memberPARAM_GAMETYPE;
//   unsigned int m_memberPARAM_SERVERTYPE;
//   unsigned int m_memberPARAM_DDL_VERSION;
//   unsigned int m_memberPARAM_RANKED;
//   unsigned int m_memberPARAM_LICENSE;
//   unsigned int m_memberPARAM_GEO;
// };

// /* 5856 */
// struct /*VFT*/ MatchMaking_PC_GEO_Query_vtbl
// {
//   void (__thiscall *~bdSessionParams)(bdSessionParams *this);
//   void (__thiscall *serialize)(bdSessionParams *this, bdByteBuffer *);
//   unsigned int (__thiscall *sizeOf)(bdSessionParams *this);
// };

// /* 5857 */
// struct __declspec(align(4)) findsessionparams_t
// {
//   bool random;
//   int servertype;
//   bool geo;
// };

// /* 5858 */
// typedef HDC__ *HDC;

// /* 5859 */
// typedef char *(__cdecl *tdPbGameCommand)(char *, char *);

// /* 5860 */
// typedef unsigned __int8 visdata_t;

// /* 5862 */
// typedef unsigned __int8 *LPBYTE;

// /* 5863 */
// typedef IUnknown *LPUNKNOWN;

// /* 5864 */
// typedef char *pchar_t;

// /* 5865 */
// typedef void (__cdecl *CompositeResolveCallback)(GfxImage *);

// /* 5866 */
// typedef unsigned __int16 PROPVAR_PAD2;

// /* 5867 */
// typedef bool (__cdecl *FxElemFieldHandler)(const char **, FxEditorElemDef *);

// /* 5868 */
// typedef vehAnimClient_t SV_VehAnimClients[32];

// /* 5869 */
// typedef my_main_controller *my_main_ptr;

// /* 5870 */
// typedef void (__stdcall *PIMAGE_TLS_CALLBACK)(void *, unsigned int, void *);

// /* 5871 */
// typedef HWINSTA__ *HWINSTA;

// /* 5872 */
// typedef void __cdecl rpnFunction_t(const int, itemDef_s *, OperandStack *);

// /* 5873 */
// typedef tagMIXERLINEA *LPMIXERLINEA;

// /* 5874 */
// typedef int (__stdcall *FARPROC)();

// /* 5875 */
// typedef _PEB_LDR_DATA *PPEB_LDR_DATA;

// /* 5876 */
// typedef _SYSTEM_INFO *LPSYSTEM_INFO;

// /* 5877 */
// typedef unsigned __int8 raw_byte16;

// /* 5878 */
// typedef void *bdMutexHandle;

// /* 5879 */
// typedef unsigned __int8 *voidpf;

// /* 5880 */
// typedef my_destination_mgr *my_dest_ptr;

// /* 5881 */
// typedef const char *STRSAFE_PCNZCH;

// /* 5882 */
// typedef _STARTUPINFOA *LPSTARTUPINFOA;

// /* 5883 */
// typedef void (__stdcall *BINKMEMFREE)(void *);

// /* 5884 */
// typedef int (__cdecl *encoder_ctl_func)(void *, int, void *);

// /* 5885 */
// typedef unsigned __int8 GfxRenderTargetId;

// /* 5886 */
// typedef int (__cdecl *decode_func)(void *, SpeexBits *, void *);

// /* 5887 */
// typedef int AxialSurfaceFlags[3];

// /* 5888 */
// typedef GfxLightDef *GfxLightDefPtr;

// /* 5889 */
// typedef unsigned __int8 byte32;

// /* 5890 */
// typedef unsigned int HAuthTicket;

// /* 5891 */
// typedef int (__cdecl *pmove_getPlayerWeapon)(const playerState_s *, const int);

// /* 5892 */
// typedef void (__cdecl *fn_touch)(gentity_s *, gentity_s *, int);

// /* 5893 */
// typedef _DDCAPS_DX7 *LPDDCAPS;

// /* 5894 */
// typedef unsigned __int8 byte128;

// /* 5895 */
// typedef char *(__cdecl *tdPbSendToAddrPort)(char *, unsigned __int16, int, char *);

// /* 5896 */
// typedef unsigned __int16 DevMenuHandle;

// /* 5897 */
// typedef __int16 (**JBLOCKARRAY)[64];

// /* 5898 */
// typedef tagHeader *PHEADER;

// /* 5899 */
// typedef unsigned __int8 NvU8;

// /* 5900 */
// typedef HICON__ *HCURSOR;

// /* 5901 */
// typedef void (__cdecl *fn_die)(gentity_s *, gentity_s *, gentity_s *, int, int, const int, const float *, const hitLocation_t, int);

// /* 5902 */
// typedef unsigned int BoltHandle_t;

// /* 5903 */
// typedef float FLOAT;

// /* 5904 */
// typedef bool _Bool;

// /* 5905 */
// typedef unsigned __int16 XSurfaceFlags;

// /* 5906 */
// typedef tagVARIANT *LPVARIANT;

// /* 5907 */
// typedef unsigned __int8 UINT8;

// /* 5908 */
// typedef unsigned __int8 uint8;

// /* 5909 */
// typedef volatile int volatile_int32;

// /* 5910 */
// typedef unsigned int uint4[4];

// /* 5911 */
// typedef unsigned int UINT4;

// /* 5912 */
// typedef unsigned int uint;

// /* 5913 */
// typedef unsigned int UINT;

// /* 5914 */
// typedef unsigned int uInt;

// /* 5915 */
// typedef unsigned int *PULONG;

// /* 5916 */
// typedef unsigned __int16 lm_char;

// /* 5917 */
// typedef unsigned __int16 dynEnts_t[2][100];

// /* 5918 */
// typedef char secretsauce_t[9];

// /* 5919 */
// typedef tagLC_STRINGS *LPLC_STRINGS;

// /* 5920 */
// typedef textDefData_t *textDefData_ptr;

// /* 5921 */
// typedef char BD_PLATFORM_CHAR;

// /* 5922 */
// typedef hostent *LPHOSTENT;

// /* 5923 */
// typedef unsigned int EXECUTION_STATE;

// /* 5924 */
// typedef int (__cdecl *parseSpecialFieldType_t)(unsigned __int8 *, const char *, const int, const int);

// /* 5925 */
// typedef unsigned __int8 max_msg_buf[65536];

// /* 5926 */
// typedef int stream_id;

// /* 5927 */
// typedef HMONITOR__ *HMONITOR;

// /* 5928 */
// typedef HBRUSH__ *HBRUSH;

// /* 5929 */
// typedef _TEB_ACTIVE_FRAME *PTEB_ACTIVE_FRAME;

// /* 5930 */
// typedef int (__stdcall *HOOKPROC)(int, unsigned int, int);

// /* 5931 */
// typedef void (__cdecl *DevGraphEventCallback)(const DevGraph *, DevEventType, int);

// /* 5932 */
// typedef gz_header_s *gz_headerp;

// /* 5933 */
// typedef unsigned int _U32;

// /* 5934 */
// typedef unsigned __int64 bdUInt64;

// /* 5935 */
// typedef unsigned __int16 PROPVAR_PAD3;

// /* 5936 */
// typedef _RGNDATA *LPRGNDATA;

// /* 5937 */
// typedef backing_store_struct *backing_store_ptr;

// /* 5938 */
// typedef bool (__cdecl *phys_should_collide_callback_t)(const broad_phase_base *, const broad_phase_base *);

// /* 5939 */
// typedef unsigned int COLORREF;

// /* 5940 */
// typedef wchar_t *PWCHAR;

// /* 5941 */
// typedef clipMap_t *clipMap_ptr;

// /* 5942 */
// typedef unsigned int SNetSocket_t;

// /* 5943 */
// typedef IDirect3DDevice9 *LPDIRECT3DDEVICE9;

// /* 5944 */
// typedef unsigned __int16 bdPort;

// /* 5945 */
// typedef void (__cdecl *gam_destroy_callback_t)(void *);

// /* 5946 */
// typedef void (__cdecl *_invalid_parameter_handler)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, unsigned int);

// /* 5947 */
// typedef void __cdecl DB_Interrupt();

// /* 5948 */
// typedef int XPartBits[5];

// /* 5949 */
// typedef tagSAFEARRAY *LPSAFEARRAY;

// /* 5950 */
// typedef __int64 bdInt64;

// /* 5951 */
// typedef BINK *HBINK;

// /* 5952 */
// typedef unsigned __int64 BD_UINT_64;

// /* 5953 */
// typedef void __cdecl GfxDrawCallback(const void *, GfxCmdBufContext, GfxCmdBufContext);

// /* 5954 */
// typedef void (__cdecl *FX_DrawElemHandler)(FxDrawState *);

// /* 5955 */
// typedef int IFAST_MULT_TYPE;

// /* 5956 */
// typedef __int16 INT16;

// /* 5957 */
// typedef HMIXEROBJ__ *HMIXEROBJ;

// /* 5958 */
// typedef const char *XString;

// /* 5959 */
// typedef void (__cdecl *ScriptCallbackEnt)(gentity_s *, int);

// /* 5960 */
// typedef int _off_t;

// /* 5961 */
// typedef void *(__cdecl *Alloc_t)(int);

// /* 5962 */
// typedef unsigned int WICColor;

// /* 5963 */
// typedef void (__cdecl *_inconsistency_function)();

// /* 5964 */
// typedef _EXCEPTION_REGISTRATION_RECORD *PEXCEPTION_REGISTRATION_RECORD;

// /* 5965 */
// typedef unsigned __int16 raw_ushort;

// /* 5966 */
// typedef void (__cdecl *fn_use)(gentity_s *, gentity_s *, gentity_s *);

// /* 5967 */
// typedef int LRESULT;

// /* 5968 */
// typedef int (__cdecl *R_TimeoutFunction)();

// /* 5970 */
// typedef float shared_vec3_t[3];

// /* 5971 */
// typedef _DIOBJECTDATAFORMAT *LPDIOBJECTDATAFORMAT;

// /* 5972 */
// typedef const math::DiagMat44 *DiagMat44Arg;

// /* 5973 */
// typedef IDirect3DVertexBuffer9 *GfxVertexBufferHandle;

// /* 5974 */
// typedef unsigned int *PDWORD;

// /* 5975 */
// typedef LIST_ENTRY32 *PLIST_ENTRY32;

// /* 5976 */
// typedef unsigned int vpx_codec_frame_flags_t;

// /* 5977 */
// typedef unsigned int LCTYPE;

// /* 5978 */
// typedef int qhandle_t;

// /* 5979 */
// typedef IDirectDraw7 *LPDIRECTDRAW7;

// /* 5980 */
// typedef unsigned int uintptr_t;

// /* 5981 */
// typedef void (__stdcall *PTP_CLEANUP_GROUP_CANCEL_CALLBACK)(void *, void *);

// /* 5982 */
// typedef __int64 LONG64;

// /* 5983 */
// typedef const char *STRSAFE_LPCSTR;

// /* 5984 */
// typedef _tagADDRESS *LPADDRESS;

// /* 5985 */
// typedef IDirectDraw *LPDIRECTDRAW;

// /* 5986 */
// typedef _DDSCAPS2 *LPDDSCAPS2;

// /* 5987 */
// typedef int expressionEntryType;

// /* 5988 */
// typedef unsigned __int16 DynEntityId;

// /* 5989 */
// typedef IDirectDrawClipper *LPDIRECTDRAWCLIPPER;

// /* 5990 */
// typedef char *va_list;

// /* 5991 */
// typedef _EXCEPTION_POINTERS *LPEXCEPTION_POINTERS;

// /* 5992 */
// typedef void (__cdecl *PFV)();

// /* 5993 */
// typedef int lzo_bool;

// /* 5994 */
// typedef const WAVEFORMATEXTENSIBLE *LPCWAVEFORMATEXTENSIBLE;

// /* 5995 */
// typedef unsigned __int8 **JSAMPARRAY;

// /* 5996 */
// typedef void *bdThreadHandle;

// /* 5997 */
// typedef tagSIZE *LPSIZE;

// /* 5998 */
// typedef int (__stdcall *LPDIENUMDEVICEOBJECTSCALLBACKA)(const DIDEVICEOBJECTINSTANCEA *, void *);

// /* 5999 */
// typedef char _TCHAR;

// /* 6000 */
// typedef tagMIXERCONTROLA *LPMIXERCONTROL;

// /* 6001 */
// typedef unsigned __int8 (__cdecl *jpeg_marker_parser_method)(jpeg_decompress_struct *);

// /* 6002 */
// typedef scrVmDebugPub_t scrVmDebugPubArray_t[2];

// /* 6003 */
// typedef unsigned __int64 u64;

// /* 6004 */
// typedef unsigned __int16 FxEffectHandle;

// /* 6005 */
// typedef box *boxptr;

// /* 6006 */
// typedef ID3DXInclude *LPD3DXINCLUDE;

// /* 6007 */
// typedef const DIDEVICEINSTANCEA *LPCDIDEVICEINSTANCEA;

// /* 6008 */
// typedef __int64 i64;

// /* 6009 */
// typedef int (__stdcall *BINKIOBGCONTROL)(BINKIO *, unsigned int);

// /* 6010 */
// typedef void (__cdecl *pmove_trace)(trace_t *, const float *, const float *, const float *, const float *, int, int, col_context_t *);

// /* 6011 */
// typedef my_fdct_controller *my_fdct_ptr;

// /* 6012 */
// typedef float __stdcall CONVERT_FUNCTION(const unsigned __int8 *);

// /* 6013 */
// typedef const _GUID *LPCGUID;

// /* 6014 */
// typedef tagMIXERCONTROLA *LPMIXERCONTROLA;

// /* 6015 */
// typedef unsigned __int8 msg_buf_t[65536];

// /* 6016 */
// typedef bool __cdecl TriangleVisitorFunc(void *, const unsigned __int8 **, const unsigned __int8 **);

// /* 6017 */
// typedef unsigned __int8 byte4;

// /* 6018 */
// typedef small_pool_struct *small_pool_ptr;

// /* 6019 */
// typedef unsigned int (__stdcall *tlThreadFunction)(void *);

// /* 6020 */
// typedef RedBlackTreeNode *(__cdecl *RedBlackTreeAllocCallback)();

// /* 6021 */
// typedef void *DBFile;

// /* 6022 */
// typedef void DispatcherContext;

// /* 6023 */
// typedef unsigned __int8 byte;

// /* 6024 */
// typedef unsigned __int8 BYTE;

// /* 6025 */
// typedef unsigned __int8 Byte;

// /* 6026 */
// typedef char snd_align_char;

// /* 6027 */
// typedef void *(__stdcall *PFLS_GETVALUE_FUNCTION)(unsigned int);

// /* 6028 */
// typedef DestructiblePiece *DestructiblePiecePtr;

// /* 6029 */
// typedef void (__cdecl *encoder_destroy_func)(void *);

// /* 6030 */
// typedef _RTL_CRITICAL_SECTION *PRTL_CRITICAL_SECTION;

// /* 6031 */
// typedef editFieldDef_s *editFieldDef_ptr;

// /* 6032 */
// typedef void *SndLengthNotifyData;

// /* 6033 */
// typedef __int16 FSERROR;

// /* 6034 */
// typedef HMIXER__ **LPHMIXER;

// /* 6035 */
// typedef int (__cdecl *QsortCallBack)(const void *, const void *);

// /* 6036 */
// typedef XAnimParts *XAnimPartsPtr;

// /* 6037 */
// typedef void (__cdecl *ScriptCallbackHudElem)(game_hudelem_s *, int);

// /* 6038 */
// typedef void *PVOID;

// /* 6039 */
// typedef ownerDrawDef_s *ownerDrawDef_ptr;

// /* 6040 */
// typedef focusItemDef_s *focusItemDef_ptr;

// /* 6041 */
// typedef unsigned int Filter[8];

// /* 6042 */
// typedef unsigned int UINT32;

// /* 6043 */
// typedef unsigned int uint32;

// /* 6044 */
// typedef int (__cdecl *mode_query_func)(const void *, int, void *);

// /* 6045 */
// typedef unsigned __int8 Bytef;

// /* 6046 */
// typedef IDirect3DTexture9 *LPDIRECT3DTEXTURE9;

// /* 6047 */
// typedef unsigned int BITVEC;

// /* 6048 */
// typedef unsigned int GfxPackedColor;

// /* 6049 */
// typedef flameSmoke_t flameSmokeArray_t[250];

// /* 6050 */
// typedef actor_s actor_array_t[16];

// /* 6051 */
// typedef void (__cdecl *upsample1_ptr)(jpeg_decompress_struct *, jpeg_component_info *, unsigned __int8 **, unsigned __int8 ***);

// /* 6052 */
// typedef my_prep_controller *my_prep_ptr;

// /* 6053 */
// typedef SndPatch *SndPatchPtr;

// /* 6054 */
// typedef XAnimInfo XAnimInfoArray[4096];

// /* 6055 */
// typedef unsigned __int16 GfxModelLightingHandle;

// /* 6056 */
// typedef int (__cdecl *INPUTFN)(_iobuf *, const unsigned __int8 *, localeinfo_struct *, char *);

// /* 6057 */
// typedef unsigned __int8 JOCTET;

// /* 6058 */
// typedef unsigned __int16 PROPVAR_PAD1;

// /* 6059 */
// typedef int (__stdcall *BINKSNDPAUSE)(BINKSND *, int);

// /* 6060 */
// typedef tagEntryEnd *PENTRYEND;

// /* 6061 */
// typedef void (__cdecl *DevGraphTextCallback)(const DevGraph *, const float, const float, char *, const int);

// /* 6062 */
// typedef my_coef_controller *my_coef_ptr;

// /* 6063 */
// typedef int DISPID;

// /* 6064 */
// typedef IDirect3DVertexDeclaration9 *LPDIRECT3DVERTEXDECLARATION9;

// /* 6065 */
// typedef wchar_t *STRSAFE_LPWSTR;

// /* 6066 */
// typedef _SECURITY_ATTRIBUTES *LPSECURITY_ATTRIBUTES;

// /* 6067 */
// typedef unsigned __int64 DWORDLONG;

// /* 6068 */
// typedef int (__stdcall *BINKSNDOPEN)(BINKSND *, unsigned int, int, int, unsigned int, BINK *);

// /* 6069 */
// typedef int (__stdcall *LOCALE_ENUMPROCA)(char *);

// /* 6070 */
// typedef void (__cdecl *ScriptCallbackActor)(actor_s *, const actor_fields_s *);

// /* 6071 */
// typedef int __cdecl HTNetAfter(_HTRequest *, struct _HTResponse *, void *, int);

// /* 6072 */
// typedef HRESULT (__stdcall *LPDIRECTDRAWENUMERATEEX)(int (__stdcall *)(_GUID *, char *, char *, void *, HMONITOR__ *), void *, unsigned int);

// /* 6073 */
// typedef char pb_msg_to_screen_buf[65536];

// /* 6074 */
// typedef _IMAGE_DOS_HEADER *PIMAGE_DOS_HEADER;

// /* 6075 */
// typedef int LPARAM;

// /* 6076 */
// typedef itemDef_s *itemDef_ptr;

// /* 6077 */
// typedef unsigned __int8 FxElemType;

// /* 6078 */
// typedef char *(__cdecl *tdPbSendToClient)(int, char *, int);

// /* 6079 */
// typedef const void *LPCVOID;

// /* 6080 */
// typedef _SYSTEMTIME *LPSYSTEMTIME;

// /* 6081 */
// typedef _DDPIXELFORMAT *LPDDPIXELFORMAT;

// /* 6082 */
// typedef __int16 *JCOEFPTR;

// /* 6083 */
// typedef unsigned int WPARAM;

// /* 6084 */
// typedef __int64 _Q64;

// /* 6085 */
// typedef const wchar_t *STRSAFE_LPCWSTR;

// /* 6086 */
// typedef _OSVERSIONINFOA *LPOSVERSIONINFOA;

// /* 6087 */
// typedef void (__cdecl *CommandClearSlectionFunc)();

// /* 6088 */
// typedef int int32;

// /* 6089 */
// typedef int INT32;

// /* 6090 */
// typedef _KDHELP *PKDHELP;

// /* 6091 */
// typedef huff_entropy_encoder *huff_entropy_ptr;

// /* 6092 */
// typedef int Int3[3];

// /* 6093 */
// typedef void __cdecl XAssetEnum(XAssetHeader, void *);

// /* 6094 */
// typedef bool (__cdecl *StateTransitionFunc)(RagdollBody *, RagdollBodyState, RagdollBodyState);

// /* 6095 */
// typedef void (__cdecl *StateUpdateFunc)(RagdollBody *, int);

// /* 6096 */
// typedef GfxCmdBufContext *ContextStreamType;

// /* 6097 */
// typedef float ikVec3[3];

// /* 6098 */
// typedef tagMIXERLINECONTROLSA *LPMIXERLINECONTROLSA;

// /* 6099 */
// typedef const math::TranMat43 *TranMat43Arg;

// /* 6100 */
// typedef phuff_entropy_encoder *phuff_entropy_ptr;

// /* 6101 */
// typedef float FLOAT32;

// /* 6102 */
// typedef float float32;

// /* 6103 */
// typedef unsigned int MMVERSION;

// /* 6104 */
// typedef IDirect3DSurface9 *LPDIRECT3DSURFACE9;

// /* 6105 */
// typedef void (__cdecl *ExecHandlerCallback)(int, int, itemDef_s *, const char *);

// /* 6106 */
// typedef void (__cdecl *parseStrcpy_t)(unsigned __int8 *, const char *);

// /* 6107 */
// typedef unsigned __int16 bdUInt16;

// /* 6108 */
// typedef int NTSTATUS;

// /* 6109 */
// typedef void __stdcall OAPFUNCTION_MATRIXMIX(const OAPIPELINE::SMatrixMixParameters *);

// /* 6110 */
// typedef GfxBackEndData GfxBackEndDataArray[2];

// /* 6111 */
// typedef IDirect3DPixelShader9 *GfxPixelShader;

// /* 6112 */
// typedef int qboolean;

// /* 6113 */
// typedef int HSteamPipe;

// /* 6114 */
// typedef unsigned __int8 DevMenuChildType;

// /* 6115 */
// typedef void __cdecl PathNodeCallBack(scriptInstance_t, pathnode_t *);

// /* 6116 */
// typedef ID3DX10Sprite *LPD3DX10SPRITE;

// /* 6117 */
// typedef unsigned int phys_gjk_geom_id;

// /* 6118 */
// typedef float ikMat44[4][4];

// /* 6119 */
// typedef _DDSCAPS *LPDDSCAPS;

// /* 6120 */
// typedef int (__stdcall *PFNDACOMPARECONST)(const void *, const void *, int);

// /* 6121 */
// typedef unsigned __int16 histcell;

// /* 6122 */
// typedef int ClientNum_t;

// /* 6123 */
// typedef unsigned __int8 lgrid_game;

// /* 6124 */
// typedef __int64 LONGLONG;

// /* 6125 */
// typedef imageDef_s *imageDef_ptr;

// /* 6126 */
// typedef int yy_state_type;

// /* 6127 */
// typedef void *bdSemaphoreHandle;

// /* 6128 */
// typedef char bdByte8;

// /* 6129 */
// typedef sockaddr *LPSOCKADDR;

// /* 6130 */
// typedef unsigned __int8 showCollisionWindingPool_t[12292];

// /* 6131 */
// typedef int (__stdcall *WNDENUMPROC)(HWND__ *, int);

// /* 6132 */
// typedef int (__stdcall *PGENRANDOM)(void *, unsigned int);

// /* 6133 */
// typedef IDirectDrawSurface7 *LPDIRECTDRAWSURFACE7;

// /* 6134 */
// typedef unsigned int raw_uint;

// /* 6135 */
// typedef void *bdFileHandle;

// /* 6136 */
// typedef char char_align_2048;

// /* 6137 */
// typedef _PROCESS_MEMORY_COUNTERS *PPROCESS_MEMORY_COUNTERS;

// /* 6138 */
// typedef void (__stdcall *BINKCBSUSPEND)(BINKIO *);

// /* 6139 */
// typedef _WIN32_FIND_DATAA *LPWIN32_FIND_DATAA;

// /* 6140 */
// typedef void (__cdecl *jpeg_external_free_t)(void *);

// /* 6141 */
// typedef unsigned __int64 ULONGLONG;

// /* 6142 */
// typedef tWAVEFORMATEX *LPWAVEFORMATEX;

// /* 6143 */
// typedef void (__cdecl *_purecall_handler)();

// /* 6144 */
// typedef float raw_float;

// /* 6145 */
// typedef my_post_controller *my_post_ptr;

// /* 6146 */
// typedef int streamsize;

// /* 6147 */
// typedef scrVarDebugPub_t scrVarDebugPubArray_t[2];

// /* 6148 */
// typedef char *LPCH;

// /* 6149 */
// typedef int bdInt32;

// /* 6150 */
// typedef void (__cdecl *ScriptCallbackSentient)(sentient_s *, const sentient_fields_s *);

// /* 6151 */
// typedef _IMAGELIST *HIMAGELIST;

// /* 6152 */
// typedef int (__cdecl *_LIBM_HANDLE_MATHERR_D)(_exception *);

// /* 6153 */
// typedef void *HGLOBAL;

// /* 6154 */
// typedef void **LPHANDLE;

// /* 6155 */
// typedef unsigned __int8 byte16;

// /* 6156 */
// typedef NVDX_ObjectHandle__ *NVDX_ObjectHandle;

// /* 6157 */
// typedef bool (__cdecl *jqDoneAssistingWithBatchesFn)(void *);

// /* 6158 */
// typedef void *(__stdcall *BINKMEMALLOC)(unsigned int);

// /* 6159 */
// typedef unsigned __int16 wint_t;

// /* 6160 */
// typedef void (__stdcall *BINKSNDVOLUME)(BINKSND *, int);

// /* 6161 */
// typedef unsigned int HashIndex;

// /* 6162 */
// typedef void (__cdecl *fn_controller)(const gentity_s *, int *);

// /* 6163 */
// typedef int __cdecl HTTraceCallback(const char *, char *);

// /* 6164 */
// typedef LIST_ENTRY64 *PLIST_ENTRY64;

// /* 6165 */
// typedef unsigned __int64 D2D1_TAG;

// /* 6166 */
// typedef int bdDNSHandle;

// /* 6167 */
// typedef const FxEffectDef *FxEffectDefHandle;

// /* 6168 */
// typedef jpeg_decompress_struct *j_decompress_ptr;

// /* 6169 */
// typedef my_marker_writer *my_marker_ptr;

// /* 6170 */
// typedef unsigned __int64 uint64;

// /* 6171 */
// typedef unsigned __int64 UINT64;

// /* 6172 */
// typedef jvirt_barray_control *jvirt_barray_ptr;

// /* 6173 */
// typedef unsigned __int16 LeafBrush;

// /* 6174 */
// typedef unsigned __int16 ATOM;

// /* 6175 */
// typedef unsigned __int8 YY_CHAR;

// /* 6176 */
// typedef _DSBCAPS *LPDSBCAPS;

// /* 6177 */
// typedef _DSCCAPS *LPDSCCAPS;

// /* 6178 */
// typedef threadmbcinfostruct *pthreadmbcinfo;

// /* 6179 */
// typedef bool (__cdecl *gdt_remote_action_t)(const char *);

// /* 6180 */
// typedef void (__cdecl *ScriptCallbackNode)(pathnode_t *, int);

// /* 6181 */
// typedef z_stream_s *z_streamp;

// /* 6182 */
// typedef int PhysJointId;

// /* 6183 */
// typedef DIPROPHEADER *LPDIPROPHEADER;

// /* 6184 */
// typedef void (__cdecl *PCCopyImageGenMIPCallback)(void *);

// /* 6185 */
// typedef tagPALETTEENTRY *LPPALETTEENTRY;

// /* 6186 */
// typedef setloc_struct *_psetloc_struct;

// /* 6187 */
// typedef contact_manifold_mesh_point **poly_vert_id;

// /* 6188 */
// typedef ddlRoot_t *ddlRoot_ptr;

// /* 6189 */
// typedef __int16 *FSERRPTR;

// /* 6190 */
// typedef unsigned __int16 FxElemHandle;

// /* 6191 */
// typedef void *StereoHandle;

// /* 6192 */
// typedef loadAnim_t playerAnims_t[1024];

// /* 6193 */
// typedef unsigned __int16 u16;

// /* 6194 */
// typedef unsigned __int16 WORD;

// /* 6195 */
// typedef unsigned __int16 ushort;

// /* 6196 */
// typedef unsigned __int16 USHORT;

// /* 6197 */
// typedef int (*ODITHER_MATRIX_PTR)[16];

// /* 6198 */
// typedef __int16 i16;

// /* 6199 */
// typedef unsigned __int16 _U16;

// /* 6200 */
// typedef my_downsampler *my_downsample_ptr;

// /* 6201 */
// typedef const math::Dir3 *UnitDir3Arg;

// /* 6202 */
// typedef _RTL_CRITICAL_SECTION_DEBUG *PRTL_CRITICAL_SECTION_DEBUG;

// /* 6203 */
// typedef _TOKEN_PRIVILEGES *PTOKEN_PRIVILEGES;

// /* 6204 */
// typedef void *(__stdcall *PFNDPAMERGE)(unsigned int, void *, void *, int);

// /* 6205 */
// typedef void **PPVOID;

// /* 6206 */
// typedef unsigned __int8 TextureSemantic;

// /* 6207 */
// typedef tagEntry *PENTRY;

// /* 6208 */
// typedef int MEMBERID;

// /* 6209 */
// typedef GfxWorld *GfxWorldPtr;

// /* 6210 */
// typedef void *LPVOID;

// /* 6211 */
// typedef WSAData *LPWSADATA;

// /* 6212 */
// typedef _cpinfo *LPCPINFO;

// /* 6213 */
// typedef SndBank *SndBankPtr;

// /* 6214 */
// typedef unsigned __int16 *LPWORD;

// /* 6215 */
// typedef void (__stdcall *BINKCBIDLE)(BINKIO *);

// /* 6216 */
// typedef void *(__cdecl *DogAnimAlloc)(int);

// /* 6217 */
// typedef GameWorldMp *GameWorldMpPtr;

// /* 6218 */
// typedef unsigned int acc_uintptr_t;

// /* 6219 */
// typedef int HServerQuery;

// /* 6220 */
// typedef HFONT__ *HFONT;

// /* 6221 */
// typedef int (__stdcall *PFN_INIT_CRITSEC_AND_SPIN_COUNT)(_RTL_CRITICAL_SECTION *, unsigned int);

// /* 6222 */
// typedef int LONG;

// /* 6223 */
// typedef int *LPLONG;

// /* 6224 */
// typedef _EXCEPTION_RECORD *PEXCEPTION_RECORD;

// /* 6225 */
// typedef int (__cdecl *R_BoxSurfacesCallback)(int, void *);

// /* 6226 */
// typedef int (__cdecl *_PNH)(unsigned int);

// /* 6227 */
// typedef unsigned int (__stdcall *BINKIOGETBUFFERSIZE)(BINKIO *, unsigned int);

// /* 6228 */
// typedef int FxElemDefFlags;

// /* 6229 */
// typedef __int64 time_t;

// /* 6230 */
// typedef threadlocaleinfostruct *pthreadlocinfo;

// /* 6231 */
// typedef unsigned int THREAD_ID;

// /* 6232 */
// typedef _FILETIME *LPFILETIME;

// /* 6233 */
// typedef tagGroup *PGROUP;

// /* 6234 */
// typedef char CHAR;

// /* 6235 */
// typedef float vec_t;

// /* 6236 */
// typedef HRESULT (__stdcall *LPDDENUMSURFACESCALLBACK7)(IDirectDrawSurface7 *, _DDSURFACEDESC2 *, void *);

// /* 6237 */
// typedef int PhysObjId;

// /* 6238 */
// typedef _RTL_CRITICAL_SECTION *PCRITICAL_SECTION;

// /* 6239 */
// typedef HRESULT (__stdcall *LPDDENUMSURFACESCALLBACK)(IDirectDrawSurface *, _DDSURFACEDESC *, void *);

// /* 6240 */
// typedef unsigned int raw_uint128;

// /* 6241 */
// typedef void (__cdecl *_se_translator_function)(unsigned int, _EXCEPTION_POINTERS *);

// /* 6242 */
// typedef my_comp_master *my_master_ptr;

// /* 6243 */
// typedef void **PHANDLE;

// /* 6244 */
// typedef IDirectSoundCapture *LPDIRECTSOUNDCAPTURE;

// /* 6245 */
// typedef MapEnts *MapEntsPtr;

// /* 6246 */
// typedef char snd_stream_byte;

// /* 6247 */
// typedef char *(__cdecl *GetParameter_t)(int);

// /* 6248 */
// typedef DIDEVICEINSTANCEA *LPDIDEVICEINSTANCEA;

// /* 6249 */
// typedef void *(__cdecl *SND_FindRow)(unsigned int);

// /* 6250 */
// typedef const math::Dir3 *Dir3Arg;

// /* 6251 */
// typedef int FxTriGroupHandle;

// /* 6252 */
// typedef int (__cdecl *R_BoxStaticModelsCallback)(int);

// /* 6253 */
// typedef int (__stdcall *BINKSNDLOCK)(BINKSND *, unsigned __int8 **, unsigned int *);

// /* 6254 */
// typedef int (__stdcall *MINIDUMP_CALLBACK_ROUTINE)(void *, _MINIDUMP_CALLBACK_INPUT *const, _MINIDUMP_CALLBACK_OUTPUT *);

// /* 6255 */
// typedef ID3DXBuffer *LPD3DXBUFFER;

// /* 6256 */
// typedef char charf;

// /* 6257 */
// typedef __int16 bdInt16;

// /* 6258 */
// typedef int __cdecl HTPostCallback(_HTRequest *, struct _HTStream *);

// /* 6259 */
// typedef unsigned __int8 *voidp;

// /* 6260 */
// typedef tMIXERCONTROLDETAILS_BOOLEAN *LPMIXERCONTROLDETAILS_BOOLEAN;

// /* 6261 */
// typedef unsigned __int8 raw_byte;

// /* 6262 */
// typedef int (__stdcall *PFNDACOMPARE)(void *, void *, int);

// /* 6263 */
// typedef _MINIDUMP_CALLBACK_INFORMATION *PMINIDUMP_CALLBACK_INFORMATION;

// /* 6264 */
// typedef __int64 INT64;

// /* 6265 */
// typedef unsigned __int16 lgrid_tool;

// /* 6266 */
// typedef int intf;

// /* 6267 */
// typedef scrMemTreeDebugGlob_t scrMemTreeDebugGlobArray_t[2];

// /* 6268 */
// typedef int (__stdcall *LPTOP_LEVEL_EXCEPTION_FILTER)(_EXCEPTION_POINTERS *);

// /* 6269 */
// typedef int (__stdcall *PFLS_SETVALUE_FUNCTION)(unsigned int, void *);

// /* 6270 */
// typedef unsigned __int64 TaskCategory;

// /* 6271 */
// typedef my_color_converter *my_cconvert_ptr;

// /* 6272 */
// typedef char *(__cdecl *tdPbGameMsg)(char *, int);

// /* 6273 */
// typedef int FxPointGroupHandle;

// /* 6274 */
// typedef GfxHullPointsPool GfxHullPointsPoolArray[256];

/* 6275 */
typedef MaterialPixelShader* MaterialPixelShaderPtr;

// /* 6276 */
// typedef XModel *XModelPtr;

// /* 6277 */
// typedef const math::DiagMat33 *DiagMat33Arg;

// /* 6278 */
// typedef tagRegion *PREGION;

// /* 6279 */
// typedef unsigned __int16 UINT16;

// /* 6280 */
// typedef unsigned __int16 uint16;

// /* 6281 */
// typedef char *STRSAFE_LPSTR;

// /* 6282 */
// typedef void (__cdecl *fn_reached)(gentity_s *);

// /* 6283 */
// typedef unsigned int TP_VERSION;

// /* 6284 */
// typedef unsigned __int8 ***JSAMPIMAGE;

// /* 6285 */
// typedef unsigned int ChildVarIndex;

// /* 6286 */
// typedef unsigned __int16 FxTrailHandle;

// /* 6287 */
// typedef int ivec3_t[3];

// /* 6288 */
// typedef const _DSCBUFFERDESC *LPCDSCBUFFERDESC;

// /* 6289 */
// typedef sockaddr_in *LPSOCKADDR_IN;

// /* 6290 */
// typedef unsigned int objBufEntryArray[3072][31];

// /* 6291 */
// typedef WAVEFORMATEXTENSIBLE *LPWAVEFORMATEXTENSIBLE;

// /* 6292 */
// typedef long double DOUBLE;

// /* 6293 */
// typedef _HTAtom *HTFormat;

// /* 6294 */
// typedef unsigned __int16 XBlendInfo;

// /* 6295 */
// typedef jvirt_sarray_control *jvirt_sarray_ptr;

// /* 6296 */
// typedef _DDSURFACEDESC2 *LPDDSURFACEDESC2;

// /* 6297 */
// typedef unsigned __int8 tempCompressedFileBuffer_t[65536];

// /* 6298 */
// typedef void (__stdcall *BINKSNDPAN)(BINKSND *, int);

// /* 6299 */
// typedef unsigned int JDIMENSION;

// /* 6300 */
// typedef textExp_s *textExp_ptr;

// /* 6301 */
// typedef _MINIDUMP_EXCEPTION_INFORMATION *PMINIDUMP_EXCEPTION_INFORMATION;

// /* 6302 */
// typedef unsigned __int8 uch;

// /* 6303 */
// typedef unsigned __int16 ush;

// /* 6304 */
// typedef IDirectSound *LPDIRECTSOUND;

// /* 6305 */
// typedef unsigned int SIZE_T;

// /* 6306 */
// typedef unsigned int size_t;

// /* 6307 */
// typedef unsigned int clipHandle_t;

// /* 6308 */
// typedef DestructibleDef *DestructibleDefPtr;

// /* 6309 */
// typedef char *list_t[16384];

// /* 6310 */
// typedef int (__stdcall *BINKCBTRYSUSPEND)(BINKIO *);

// /* 6311 */
// typedef void (__cdecl *ScriptCallback)(centity_s *, const cent_field_s *);

// /* 6312 */
// typedef __int16 VARIANT_BOOL;

// /* 6313 */
// typedef void (__cdecl *unexpected_function)();

// /* 6314 */
// typedef char *(__cdecl *tdPbPassConnectString)(void *, char *, char *);

// /* 6315 */
// typedef unsigned int u32;

// /* 6316 */
typedef XModelPieces* XModelPiecesPtr;

// /* 6317 */
// typedef char *(__cdecl *tdPbProcessPbEvents)(void *, int);

// /* 6318 */
// typedef unsigned int checksum_t;

// /* 6319 */
// typedef void __cdecl MarkFragmentCallback(void *, int, FxMarkTri *, int, FxMarkPoint *, const float *, const float *, const float *, const bool);

// /* 6320 */
// typedef int i32;

// /* 6321 */
// typedef int (__cdecl *compare_t)(const void *, const void *);

// /* 6322 */
// typedef enumDvarDef_s *enumDvarDef_ptr;

// /* 6323 */
// typedef int _TINT;

// /* 6324 */
// typedef unsigned __int16 hist1d[32];

// /* 6325 */
// typedef unsigned __int16 Posf;

// /* 6326 */
// typedef unsigned __int16 (*hist2d)[32];

// /* 6327 */
// typedef unsigned __int16 (**hist3d)[32];

// /* 6328 */
// typedef unsigned int *PUINT_PTR;

// /* 6329 */
// typedef unsigned __int8 *WICInProcPointer;

// /* 6330 */
// typedef unsigned __int16 *histptr;

// /* 6331 */
// typedef int bdInt;

// /* 6332 */
// typedef PrimedSound *PrimedSoundPtr;

// /* 6333 */
// typedef unsigned int bdUInt32;

// /* 6334 */
// typedef unsigned __int16 DB_InuseCacheData[16384];

// /* 6335 */
// typedef DIDEVICEOBJECTINSTANCEA *LPDIDEVICEOBJECTINSTANCEA;

// /* 6336 */
// typedef unsigned __int8 ByteVec[3];

// /* 6337 */
// typedef tagLC_ID *LPLC_ID;

// /* 6338 */
// typedef const math::Mat43 *Mat43Arg;

// /* 6339 */
// typedef int (__stdcall *BINKSNDONOFF)(BINKSND *, int);

// /* 6340 */
// typedef const math::Mat44 *Mat44Arg;

// /* 6341 */
// typedef _DSCAPS *LPDSCAPS;

// /* 6342 */
// typedef void (__stdcall *BINKIOCLOSE)(BINKIO *);

// /* 6343 */
// typedef __int16 SHORT;

// /* 6344 */
// typedef unsigned int HUNKUSER_FLAGS;

// /* 6345 */
// typedef int vpx_enc_frame_flags_t;

// /* 6346 */
// typedef EmblemSet *EmblemSetPtr;

// /* 6347 */
// typedef void (__cdecl *GamePadCallback)(int);

// /* 6348 */
// typedef _DSCBCAPS *LPDSCBCAPS;

// /* 6349 */
// typedef unsigned __int8 byte4096;

// /* 6350 */
// typedef int (__stdcall *PHANDLER_ROUTINE)(unsigned int);

// /* 6351 */
// typedef int (__cdecl *tdPbTrapPreExecCmd)(void *, char *);

// /* 6352 */
// typedef int fileHandle_t;

// /* 6353 */
// typedef _tagADDRESS64 *LPADDRESS64;

// /* 6354 */
// typedef void (__cdecl *phys_debug_callback_t)(void *);

// /* 6355 */
// typedef my_input_controller *my_inputctl_ptr;

// /* 6356 */
// typedef void (__cdecl *SpawnFuncCallback)(gentity_s *, SpawnVar *);

// /* 6357 */
// typedef _BY_HANDLE_FILE_INFORMATION *LPBY_HANDLE_FILE_INFORMATION;

// /* 6358 */
// typedef PhysPreset *PhysPresetPtr;

// /* 6359 */
// typedef unsigned int FPMODE;

// /* 6360 */
// typedef large_pool_struct *large_pool_ptr;

// /* 6361 */
// typedef unsigned int bdUInt;

// /* 6362 */
// typedef unsigned __int64 tlThreadId;

// /* 6363 */
// typedef void *(__cdecl *decoder_init_func)(const SpeexMode *);

// /* 6364 */
// typedef _strflt *STRFLT;

// /* 6365 */
// typedef unsigned int AppId_t;

// /* 6366 */
// typedef _flt *FLT;

// /* 6367 */
// typedef unsigned int ulg;

// /* 6368 */
// typedef unsigned __int8 uchf;

// /* 6369 */
// typedef void (__cdecl *CS_Free_t)(void *, int, scriptInstance_t);

// /* 6370 */
// typedef unsigned __int16 ushf;

// /* 6371 */
// typedef unsigned int yy_size_t;

// /* 6372 */
// typedef int (__cdecl *pmove_isEntWalkable)(const int, const int);

// /* 6373 */
// typedef int ControllerIndex_t;

// /* 6374 */
// typedef unsigned __int8 MaterialStreamDest;

// /* 6375 */
// typedef _devicemodeA *LPDEVMODEA;

// /* 6376 */
// typedef int (__stdcall *MONITORENUMPROC)(HMONITOR__ *, HDC__ *, tagRECT *, int);

// /* 6377 */
// typedef const wchar_t *LPCOLESTR;

// /* 6378 */
// typedef _DDBLTFX *LPDDBLTFX;

// /* 6379 */
// typedef flameTable *flameTablePtr;

// /* 6380 */
// typedef _DDOVERLAYFX *LPDDOVERLAYFX;

// /* 6381 */
// typedef tagDDDEVICEIDENTIFIER2 *LPDDDEVICEIDENTIFIER2;

// /* 6382 */
// typedef __int64 bdChallengeResponse;

// /* 6383 */
// typedef unsigned int UINT_PTR;

// /* 6384 */
// typedef unsigned int *PDWORD_PTR;

// /* 6385 */
// typedef int (__stdcall *PFNDAENUMCALLBACK)(void *, void *);

// /* 6386 */
// typedef IDirectDrawPalette *LPDIRECTDRAWPALETTE;

// /* 6387 */
// typedef unsigned __int64 bdEntityID;

// /* 6388 */
// typedef unsigned __int16 UnsignedShort;

// /* 6389 */
// typedef void (__cdecl *terminate_function)();

// /* 6390 */
// typedef unsigned __int16 ModelLightingDest;

// /* 6391 */
// typedef char _TSCHAR;

// /* 6392 */
// typedef _DDBLTBATCH *LPDDBLTBATCH;

// /* 6393 */
// typedef _MINIDUMP_USER_STREAM_INFORMATION *PMINIDUMP_USER_STREAM_INFORMATION;

// /* 6394 */
// typedef void (__cdecl *_PVFI)(int);

// /* 6395 */
// typedef IDirect3DQuery9 *GfxOcclusionQuery;

// /* 6396 */
// typedef int (__cdecl *parseMergeSpecialCase_t)(const char *, char **, char *, int);

// /* 6397 */
// typedef void (__cdecl *fn_entinfo)(gentity_s *, float *);

// /* 6398 */
// typedef char INT8;

// /* 6399 */
// typedef FxImpactTable *FxImpactTablePtr;

// /* 6400 */
// typedef void (__cdecl *_PVFV)();

// /* 6401 */
// typedef unsigned int (__stdcall *BINKIOIDLE)(BINKIO *);

// /* 6402 */
// typedef unsigned __int64 SteamLeaderboardEntries_t;

// /* 6403 */
// typedef tagMONITORINFO *LPMONITORINFO;

// /* 6405 */
// typedef _IMAGE_NT_HEADERS *PIMAGE_NT_HEADERS;

// /* 6406 */
// typedef int (__stdcall *PFNDAENUMCALLBACKCONST)(const void *, void *);

// /* 6407 */
// typedef float FLOAT_MULT_TYPE;

// /* 6408 */
// typedef unsigned __int16 StaticModelIndex;

// /* 6409 */
// typedef unsigned int bdULong;

// /* 6410 */
// typedef unsigned __int8 _TUCHAR;

// /* 6411 */
// typedef const char *TempString;

// /* 6412 */
// typedef textDef_s *textDef_ptr;

// /* 6413 */
// typedef void (__stdcall *PFN_EXIT_PROCESS)(unsigned int);

// /* 6414 */
// typedef unsigned int pak_toc_index;

// /* 6415 */
// typedef unsigned int GfxRawStateBits[2];

// /* 6416 */
// typedef XAssetEntryPoolEntry XAssetEntryPool[32768];

// /* 6417 */
// typedef void (__cdecl *fn_pain)(gentity_s *, gentity_s *, int, const float *, const int, const float *, const hitLocation_t, const int);

// /* 6418 */
// typedef GfxImage *GfxImagePtr;

// /* 6419 */
// typedef HINSTANCE__ *HMODULE;

// /* 6420 */
// typedef localeinfo_struct *_locale_t;

// /* 6421 */
// typedef my_cquantizer *my_cquantize_ptr;

// /* 6422 */
// typedef char *(__cdecl *tdPbAddSvEvent)(void *, int, int, int, char *, int);

// /* 6423 */
// typedef unsigned int (__stdcall *LPTHREAD_START_ROUTINE)(void *);

// /* 6424 */
// typedef int jmp_buf[16];

// /* 6425 */
// typedef char *(__cdecl *tdPbAddClEvent)(void *, int, int, char *, int);

// /* 6426 */
// typedef int CompositeJobID;

// /* 6427 */
// typedef StringTable *StringTablePtr;

// /* 6428 */
// typedef void (__stdcall *BINKIOSETINFO)(BINKIO *, void *, unsigned int, unsigned int, unsigned int);

// /* 6429 */
// typedef char snapshot_key_t[8192];

// /* 6430 */
// typedef NvDisplayHandle__ *NvDisplayHandle;

// /* 6431 */
// typedef int (__cdecl *collide_entity_func_ptr)(int, col_context_t *);

// /* 6432 */
// typedef char *(__cdecl *tdPbGlQuery)(int);

// /* 6433 */
// typedef float vec4_t[4];

// /* 6434 */
// typedef unsigned int *PULONG_PTR;

// /* 6435 */
// typedef const char *PCSTR;

// /* 6436 */
// typedef unsigned __int8 *POINTER;

// /* 6437 */
// typedef unsigned int (__stdcall *BINKIOREADHEADER)(BINKIO *, int, void *, unsigned int);

// /* 6438 */
// typedef volatile int FxVolatileInt;

// /* 6439 */
// typedef unsigned __int8 u_char;

// /* 6440 */
// typedef IDirect3DVertexBuffer9 *GfxVertexBuffer;

// /* 6441 */
// typedef long double bdFloat64;

// /* 6442 */
// typedef DIDEVCAPS *LPDIDEVCAPS;

// /* 6443 */
// typedef void (__cdecl *free_func)(unsigned __int8 *, unsigned __int8 *);

// /* 6444 */
// typedef int (__cdecl *OUTPUTFN)(_iobuf *, const char *, localeinfo_struct *, char *);

// /* 6445 */
// typedef unsigned int SNetListenSocket_t;

// /* 6446 */
// typedef HRESULT (__stdcall *LPDIRECTDRAWENUMERATEEXA)(int (__stdcall *)(_GUID *, char *, char *, void *, HMONITOR__ *), void *, unsigned int);

// /* 6447 */
// typedef XExpr::MathTypes (__cdecl *TypeTest)(const ParseValue *, int, scriptInstance_t);

// /* 6448 */
// typedef unsigned __int8 zbyte;

// /* 6449 */
// typedef __int16 _I16;

// /* 6450 */
// typedef int gjk_contents_t;

// /* 6451 */
// typedef int IsDynamicModelFlagCache;

// /* 6452 */
// typedef unsigned __int8 *PBYTE;

// /* 6453 */
// typedef _GUID *LPCLSID;

// /* 6454 */
// typedef unsigned __int8 GfxSamplerState;

// /* 6455 */
// typedef unsigned __int16 uint16_t;

// /* 6456 */
// typedef void __cdecl mjpeg_callback(unsigned __int8 *, unsigned __int8 *, unsigned __int8 *);

// /* 6457 */
// typedef _EH4_EXCEPTION_REGISTRATION_RECORD *PEH4_EXCEPTION_REGISTRATION_RECORD;

// /* 6458 */
// typedef jpeg_compress_struct *j_compress_ptr;

// /* 6459 */
// typedef unsigned int *LPDWORD;

// /* 6460 */
// typedef int SndPlaybackId;

/* 6461 */
typedef int LocalClientNum_t;

// /* 6462 */
// typedef char bdNChar8;

// /* 6463 */
// typedef const DIPROPHEADER *LPCDIPROPHEADER;

// /* 6464 */
// typedef void (__cdecl *decoder_destroy_func)(void *);

// /* 6465 */
// typedef unsigned __int64 ulong64;

// /* 6466 */
// typedef unsigned __int64 ULONG64;

// /* 6467 */
// typedef unsigned int DWORD_PTR;

// /* 6468 */
// typedef unsigned int *intrnman;

// /* 6469 */
// typedef unsigned int uLongf;

// /* 6470 */
// typedef char NvAPI_ShortString[64];

// /* 6471 */
// typedef _EXCEPTION_POINTERS *PEXCEPTION_POINTERS;

// /* 6472 */
// typedef gentity_s g_entities_array_t[1024];

// /* 6473 */
// typedef void (__cdecl *PPS_POST_PROCESS_INIT_ROUTINE)();

// /* 6474 */
// typedef int ISLOW_MULT_TYPE;

// /* 6475 */
// typedef __int64 int64_t;

// /* 6476 */
// typedef int scr_func_t;

// /* 6477 */
// typedef gameMsgDef_s *gameMsgDef_ptr;

// /* 6478 */
// typedef int __time32_t;

// /* 6479 */
// typedef unsigned __int8 addressblob_t[6];

// /* 6480 */
// typedef flameRenderList_s FlameStreamRenderList[64];

// /* 6481 */
// typedef _IMAGE_SECTION_HEADER *PIMAGE_SECTION_HEADER;

// /* 6482 */
// typedef _MINIDUMP_CALLBACK_INPUT *PMINIDUMP_CALLBACK_INPUT;

// /* 6483 */
// typedef unsigned __int16 ScriptString;

// /* 6484 */
// typedef XGlobals *XGlobalsPtr;

// /* 6485 */
// typedef int INT;

// /* 6486 */
// typedef _MINIDUMP_CALLBACK_OUTPUT *PMINIDUMP_CALLBACK_OUTPUT;

// /* 6487 */
// typedef wchar_t **SNB;

// /* 6488 */
// typedef unsigned __int8 min_msg_buf[2048];

// /* 6489 */
// typedef void (__stdcall *BINKSNDCLOSE)(BINKSND *);

// /* 6490 */
// typedef _MINIDUMP_USER_STREAM *PMINIDUMP_USER_STREAM;

// /* 6491 */
// typedef unsigned int LCID;

// /* 6492 */
// typedef HICON__ *HICON;

// /* 6493 */
// typedef unsigned __int8 primaryLightTechType_t[256];

// /* 6494 */
// typedef vehAnimClient_t CL_VehAnimClients[1];

// /* 6495 */
// typedef char *LPSTR;

// /* 6496 */
// typedef unsigned __int64 tlThreadHandle;

// /* 6497 */
// typedef void (__cdecl *task_callback)(TaskRecord *);

// /* 6498 */
// typedef char *(__cdecl *tdPbGameQuery)(int, char *);

// /* 6499 */
// typedef unsigned __int64 SteamLeaderboard_t;

// /* 6500 */
// typedef void (__cdecl *pmove_entityLinkFromPMove)(int, int, const int);

// /* 6501 */
// typedef yy_buffer_state *YY_BUFFER_STATE;

// /* 6502 */
// typedef unsigned __int64 ClanID;

// /* 6503 */
// typedef _RTL_CRITICAL_SECTION *LPCRITICAL_SECTION;

// /* 6504 */
// typedef int LOCFSERROR;

// /* 6505 */
// typedef HMIXER__ *HMIXER;

// /* 6506 */
// typedef wchar_t *LPOLESTR;

// /* 6507 */
// typedef my_upsampler *my_upsample_ptr;

// /* 6508 */
// typedef int (__stdcall *LPDIENUMDEVICESCALLBACKA)(const DIDEVICEINSTANCEA *, void *);

// /* 6509 */
// typedef const char ConstChar;

// /* 6510 */
// typedef void (__cdecl *FxProfileDrawFunc)(const char *, float *);

// /* 6511 */
// typedef void (__cdecl *SteamAPIWarningMessageHook_t)(int, const char *);

// /* 6512 */
// typedef const char *pcchar_t;

// /* 6513 */
// typedef long double DATE;

// /* 6514 */
// typedef unsigned int (__stdcall *PTHREAD_START_ROUTINE)(void *);

// /* 6515 */
// typedef _IMAGE_OPTIONAL_HEADER *PIMAGE_OPTIONAL_HEADER;

// /* 6516 */
// typedef const math::Position3 *Position3Arg;

// /* 6517 */
// typedef unsigned __int16 UShortVec[3];

// /* 6518 */
// typedef void (__stdcall *PFLS_CALLBACK_FUNCTION)(void *);

// /* 6519 */
// typedef void (__cdecl *jqWorkerInitFnType)(int);

// /* 6520 */
// typedef int (__cdecl *PEXCEPTION_FILTER)();

// /* 6521 */
// typedef HHOOK__ *HHOOK;

// /* 6522 */
// typedef __int16 BGEmblemBackgroundID;

// /* 6523 */
// typedef void (__cdecl *float_DCT_method_ptr)(float *);

// /* 6524 */
// typedef int SCODE;

// /* 6525 */
// typedef wchar_t *PUWSTR;

// /* 6526 */
// typedef __int64 fpos_t;

// /* 6527 */
// typedef int (__stdcall *PTOP_LEVEL_EXCEPTION_FILTER)(_EXCEPTION_POINTERS *);

// /* 6528 */
// typedef _DSCEFFECTDESC *LPDSCEFFECTDESC;

// /* 6529 */
// typedef unsigned int DepotId_t;

// /* 6530 */
// typedef unsigned __int64 GID_t;

// /* 6531 */
// typedef __int16 spx_int16_t;

// /* 6532 */
// typedef int s_long;

// /* 6533 */
// typedef unsigned int u_long;

// /* 6534 */
// typedef _EH4_SCOPETABLE *PEH4_SCOPETABLE;

// /* 6535 */
// typedef _IMAGE_OPTIONAL_HEADER *PIMAGE_OPTIONAL_HEADER32;

// /* 6536 */
// typedef _MEMORY_BASIC_INFORMATION *PMEMORY_BASIC_INFORMATION;

// /* 6537 */
// typedef unsigned __int8 FxEffectDefFlags;

// /* 6538 */
// typedef unsigned int _dev_t;

// /* 6539 */
// typedef _CONTEXT *PCONTEXT;

// /* 6540 */
// typedef int (__stdcall *BINKSNDUNLOCK)(BINKSND *, unsigned int);

// /* 6541 */
// typedef bool bdBool;

// /* 6542 */
// typedef menuDef_t *menuDef_ptr;

// /* 6543 */
// typedef unsigned __int8 MapType;

// /* 6544 */
// typedef unsigned __int16 Pos;

// /* 6545 */
// typedef int (__cdecl *_onexit_t)();

// /* 6546 */
// typedef int __cdecl HTPrintCallback(const char *, char *);

// /* 6547 */
// typedef __int64 BD_INT_64;

// /* 6548 */
// typedef windowDef_t *windowDef_ptr;

// /* 6549 */
// typedef float _FP32;

// /* 6550 */
// typedef _DPA *HDPA;

// /* 6551 */
// typedef unsigned int rsize_t;

// /* 6552 */
// typedef void (__stdcall *BINKCBRESUME)(BINKIO *);

// /* 6553 */
// typedef unsigned int *PSIZE_T;

// /* 6554 */
// typedef LocalizeEntry *LocalizeEntryPtr;

// /* 6555 */
// typedef unsigned __int16 (__cdecl *pmove_getVehicleTypeString)(int, int);

// /* 6556 */
// typedef const wchar_t *STRSAFE_PCNZWCH;

// /* 6557 */
// typedef unsigned __int8 MsgCompressedBuf[65536];

// /* 6558 */
// typedef int __cdecl HTAlertCallback(_HTRequest *, _HTAlertOpcode, int, const char *, void *, _HTAlertPar *);

// /* 6559 */
// typedef void (__cdecl *downsample1_ptr)(jpeg_compress_struct *, jpeg_component_info *, unsigned __int8 **, unsigned __int8 **);

// /* 6560 */
// typedef void *EVENT_HANDLE;

// /* 6561 */
// typedef const char **XStringPtr;

// /* 6562 */
// typedef unsigned __int8 *unzFile;

// /* 6563 */
// typedef unsigned __int16 VARTYPE;

// /* 6564 */
// typedef jpeg_marker_struct *jpeg_saved_marker_ptr;

// /* 6565 */
// typedef bool (__cdecl *CommandCondition)(const SpawnVar *);

// /* 6566 */
// typedef void (__cdecl *xcommand_t)();

// /* 6567 */
// typedef int (__cdecl *_PIFV)();

// /* 6568 */
// typedef int AxialContentFlags[3];

// /* 6569 */
// typedef _EH4_SCOPETABLE_RECORD *PEH4_SCOPETABLE_RECORD;

// /* 6570 */
// typedef unsigned int D3DCOLOR;

// /* 6571 */
// typedef int vpx_codec_flags_t;

// /* 6572 */
// typedef ID3DXSprite *LPD3DXSPRITE;

// /* 6573 */
// typedef __int16 s_short;

// /* 6574 */
// typedef unsigned __int64 SteamAPICall_t;

// /* 6575 */
// typedef unsigned __int16 u_short;

// /* 6576 */
// typedef int (__cdecl *decoder_ctl_func)(void *, int, void *);

// /* 6577 */
// typedef unsigned __int64 uint64_t;

// /* 6578 */
// typedef _DSA *HDSA;

// /* 6579 */
// typedef scrStringDebugGlob_t scrStringDebugGlobArray_t[2];

// /* 6580 */
// typedef int (__cdecl *encode_func)(void *, void *, SpeexBits *);

// /* 6581 */
// typedef unsigned int snd_alias_id;

// /* 6582 */
// typedef unsigned int _fsize_t;

// /* 6583 */
// typedef tagMIXERCONTROLDETAILS_LISTTEXTA *LPMIXERCONTROLDETAILS_LISTTEXT;

// /* 6584 */
// typedef int mbstate_t;

// /* 6585 */
// typedef const math::Quaternion *QuaternionArg;

// /* 6586 */
// typedef IDirectDrawSurface *LPDIRECTDRAWSURFACE;

// /* 6587 */
// typedef tMIXERCONTROLDETAILS *LPMIXERCONTROLDETAILS;

// /* 6588 */
// typedef tagVersionedStream *LPVERSIONEDSTREAM;

// /* 6589 */
// typedef int INT_PTR;

// /* 6590 */
// typedef unsigned __int8 MaterialTechniqueType;

// /* 6591 */
// typedef unsigned int NvU32;

// /* 6592 */
// typedef _TP_CALLBACK_INSTANCE *PTP_CALLBACK_INSTANCE;

// /* 6593 */
// typedef __int16 JCOEF;

// /* 6594 */
// typedef animParamsDef_t *animParamsDef_ptr;

// /* 6595 */
// typedef GameWorldSp *GameWorldSpPtr;

// /* 6596 */
// typedef char BD_CHAR8;

// /* 6597 */
// typedef _DDCOLORKEY *LPDDCOLORKEY;

// /* 6598 */
// typedef unsigned int UNWORD;

// /* 6599 */
// typedef void (__cdecl *BuiltinMethod)(scr_entref_t);

// /* 6600 */
// typedef bool (__cdecl *fileShareFunctionPtr)(bdFileMetaData *, int, int, fileShareInfoLocation, const char **, float *);

// /* 6601 */
// typedef _IMAGE_NT_HEADERS *PIMAGE_NT_HEADERS32;

// /* 6602 */
// typedef __int16 JBLOCK[64];

// /* 6603 */
// typedef tagMIXERCONTROLDETAILS_LISTTEXTA *LPMIXERCONTROLDETAILS_LISTTEXTA;

// /* 6604 */
// typedef void (__cdecl *BG_RegisterWeapon)(unsigned int);

// /* 6605 */
// typedef void (__cdecl *fn_blocked)(gentity_s *, gentity_s *);

// /* 6606 */
// typedef int (__stdcall *BINKSNDREADY)(BINKSND *);

// /* 6607 */
// typedef void (__cdecl *ScriptCallbackClient)(gclient_s *, const client_fields_s *);

// /* 6608 */
// typedef _LUID *PLUID;

// /* 6609 */
// typedef void (__cdecl *threadFunction_t)(unsigned int);

// /* 6610 */
// typedef ID3DXConstantTable *LPD3DXCONSTANTTABLE;

// /* 6611 */
// typedef unsigned __int8 MaterialStreamSource;

// /* 6612 */
// typedef const math::Vector4 *Vector4Arg;

// /* 6613 */
// typedef void (__cdecl *tdPbTrapConsole)(void *, char *, int);

// /* 6614 */
// typedef unsigned int snd_command_id;

// /* 6615 */
// typedef char *(__cdecl *tdPbAuthClient)(void *, char *, int, char *);

// /* 6616 */
// typedef void (__cdecl *_PMFN)();

// /* 6617 */
// typedef unsigned __int8 bdUByte8;

// /* 6618 */
// typedef char *(__cdecl *tdPbSendToServer)(int, char *);

// /* 6619 */
// typedef void (__cdecl *turret_trace_func)(trace_t *, const float *, const float *, const float *, const float *, int, int, col_context_t *);

// /* 6620 */
// typedef block_state (__cdecl *compress_func)(internal_state *, int);

// /* 6621 */
// typedef char DefineStrings[10000];

// /* 6622 */
// typedef unsigned __int64 XUID;

/* 6623 */
typedef MaterialVertexShader* MaterialVertexShaderPtr;

// /* 6624 */
// typedef unsigned int lzo_uint;

// /* 6625 */
// typedef unsigned int SOCKET;

// /* 6626 */
// typedef int psize_int;

// /* 6627 */
// typedef float bdFloat32;

// /* 6628 */
// typedef unsigned int raw_DWORD;

// /* 6629 */
// typedef char i8;

// /* 6630 */
// typedef unsigned __int8 MaterialConstantSource;

// /* 6631 */
// typedef unsigned __int8 u8;

// /* 6632 */
// typedef int bit_buf_type;

// /* 6633 */
// typedef HINSTANCE__ *HINSTANCE;

// /* 6634 */
// typedef unsigned int (__stdcall *BINKIOREADFRAME)(BINKIO *, unsigned int, int, void *, unsigned int);

// /* 6635 */
// typedef const char *LPCTSTR;

// /* 6636 */
// typedef unsigned __int16 r_index16_t;

// /* 6637 */
// typedef void (__cdecl *RedBlackCacheFreeNodeCallback)(RedBlackCacheNode *);

// /* 6638 */
// typedef unsigned int u_int;

// /* 6639 */
// typedef const tWAVEFORMATEX *LPCWAVEFORMATEX;

// /* 6640 */
// typedef unsigned __int8 aligned_byte_pointer;

// /* 6641 */
// typedef void (__cdecl *CommandProcessorFunc)(const RadiantCommand *, SpawnVar *);

// /* 6642 */
// typedef MaterialTechnique *MaterialTechniquePtr;

// /* 6643 */
// typedef int sv_probdist_t[64];

// /* 6644 */
// typedef IDirect3DQuery9 *GfxFence;

// /* 6645 */
// typedef IDirect3DVertexShader9 *GfxVertexShader;

// /* 6646 */
// typedef int _Mbstatet;

// /* 6647 */
// typedef int __ehstate_t;

// /* 6648 */
// typedef __int64 vpx_codec_pts_t;

// /* 6649 */
// typedef void *THREAD_START_ROUTINE_PARAM;

// /* 6650 */
// typedef char *bdVaList;

// /* 6651 */
// typedef unsigned int ulong32;

// /* 6652 */
// typedef unsigned int ULONG32;

// /* 6653 */
// typedef void (__cdecl *pmove_PlayerEvent)(int, int);

// /* 6654 */
// typedef const _DIDATAFORMAT *LPCDIDATAFORMAT;

// /* 6655 */
// typedef int (__cdecl *jqModuleCallback)(jqBatch *);

// /* 6656 */
// typedef listBoxDef_s *listBoxDef_ptr;

// /* 6657 */
// typedef void (__stdcall *PTP_SIMPLE_CALLBACK)(_TP_CALLBACK_INSTANCE *, void *);

// /* 6658 */
// typedef char int8_t;

// /* 6659 */
// typedef unsigned __int8 BD_UCHAR8;

// /* 6660 */
// typedef unsigned int psize_uint;

// /* 6661 */
// typedef float ikAnimMat[4][4];

// /* 6662 */
// typedef _TP_CALLBACK_ENVIRON *PTP_CALLBACK_ENVIRON;

// /* 6663 */
// typedef int int32_t;

// /* 6664 */
// typedef void *vtbl_ptr;

// /* 6665 */
// typedef void (__cdecl *phys_collision_callback_t)();

// /* 6666 */
// typedef IDirectSoundBuffer *LPDIRECTSOUNDBUFFER;

// /* 6667 */
// typedef void *(__cdecl *encoder_init_func)(const SpeexMode *);

// /* 6668 */
// typedef __int16 XQuat2[2];

// /* 6669 */
// typedef void (__stdcall *LPOVERLAPPED_COMPLETION_ROUTINE)(unsigned int, unsigned int, _OVERLAPPED *);

// /* 6670 */
// typedef void (__fastcall *PTERMINATION_HANDLER)();

// /* 6671 */
// typedef flameStream_s FlameStreams[64];

// /* 6672 */
// typedef unsigned int snd_string_hash;

// /* 6673 */
// typedef int _I32;

// /* 6674 */
// typedef unsigned __int16 *PWSTR;

// /* 6675 */
// typedef const char *LPCSTR;

// /* 6676 */
// typedef _TIME_ZONE_INFORMATION *LPTIME_ZONE_INFORMATION;

// /* 6677 */
// typedef void (__cdecl *pmove_setVehDriverInput)(const int, const int, usercmd_s *);

// /* 6678 */
// typedef IDirect3DIndexBuffer9 *GfxIndexBuffer;

// /* 6679 */
// typedef int errno_t;

// /* 6680 */
// typedef unsigned __int64 bitfield_t;

// /* 6681 */
// typedef int LONG_PTR;

// /* 6682 */
// typedef const void *vpx_codec_iter_t;

// /* 6683 */
// typedef _DDSURFACEDESC *LPDDSURFACEDESC;

// /* 6684 */
// typedef WeaponVariantDef *WeaponVariantDefPtr;

// /* 6685 */
// typedef my_idct_controller *my_idct_ptr;

// /* 6686 */
// typedef unsigned __int16 r_index_t;

// /* 6687 */
// typedef PackIndex *PackIndexPtr;

// /* 6688 */
// typedef int intptr_t;

// /* 6689 */
// typedef const tagRECT *LPCRECT;

// /* 6690 */
// typedef const char *statusServerLine_t[8];

// /* 6691 */
// typedef unsigned int uint32_t;

// /* 6692 */
// typedef void *HANDLE;

// /* 6693 */
// typedef int (__stdcall *WNDPROC)(HWND__ *, unsigned int, unsigned int, int);

// /* 6694 */
// typedef int DCTELEM;

// /* 6695 */
// typedef unsigned __int16 GridSamplePoint[3];

// /* 6696 */
// typedef unsigned int GDI_HANDLE_BUFFER[34];

// /* 6697 */
// typedef tagPARAMDESCEX *LPPARAMDESCEX;

// /* 6698 */
// typedef unsigned __int16 *LPWCH;

// /* 6699 */
// typedef int (__stdcall *MINIDUMPWRITEDUMP)(void *, unsigned int, void *, _MINIDUMP_TYPE, _MINIDUMP_EXCEPTION_INFORMATION *const, _MINIDUMP_USER_STREAM_INFORMATION *const, _MINIDUMP_CALLBACK_INFORMATION *const);

// /* 6700 */
// typedef IDirectInputA *LPDIRECTINPUT;

// /* 6701 */
// typedef void *(__cdecl *MantleAnimAlloc)(int);

// /* 6702 */
// typedef float raw_vec4_t[4];

// /* 6703 */
// typedef int (__stdcall *PFLS_FREE_FUNCTION)(unsigned int);

// /* 6704 */
// typedef void (__cdecl *inverse_DCT_method_ptr)(jpeg_decompress_struct *, jpeg_component_info *, __int16 *, unsigned __int8 **, unsigned int);

// /* 6705 */
// typedef unsigned int GfxDecodedSamplerState;

// /* 6706 */
// typedef _OVERLAPPED *LPOVERLAPPED;

// /* 6707 */
// typedef HRESULT (__stdcall *LPDDENUMMODESCALLBACK)(_DDSURFACEDESC *, void *);

// /* 6708 */
// typedef int streamoff;

// /* 6709 */
// typedef unsigned __int16 scr_string_t;

// /* 6710 */
// typedef int ivec_t;

// /* 6711 */
// typedef int UIContextIndex_t;

// /* 6712 */
// typedef IDirect3DIndexBuffer9 *GfxIndexBufferHandle;

// /* 6713 */
// typedef IDirectInputDeviceA *LPDIRECTINPUTDEVICEA;

// /* 6714 */
// typedef unsigned int bdLeaderBoardID;

// /* 6715 */
// typedef _TP_CLEANUP_GROUP *PTP_CLEANUP_GROUP;

// /* 6716 */
// typedef jpeg_common_struct *j_common_ptr;

// /* 6717 */
// typedef const char *D3DXHANDLE;

// /* 6718 */
// typedef unsigned __int16 AbsDynEntityId;

// /* 6719 */
// typedef long double _FP64;

// /* 6720 */
// typedef Glasses *GlassesPtr;

// /* 6721 */
// typedef ComWorld *ComWorldPtr;

// /* 6722 */
// typedef Material *MaterialHandle;

// /* 6723 */
// typedef float vec3_t[3];

// /* 6724 */
// typedef unsigned int lzo_uint32;

// /* 6725 */
// typedef unsigned __int8 JSAMPLE;

// /* 6726 */
// typedef unsigned __int8 GfxImageCategory;

// /* 6727 */
// typedef void (__cdecl *CheckPointActionCallBackFn)();

// /* 6728 */
// typedef void (__cdecl *fn_think)(gentity_s *);

// /* 6729 */
// typedef char sv_skel_memory_array_t[262144];

// /* 6730 */
// typedef bool CGFakeEntitiesInuseArray[512];

// /* 6731 */
// typedef SndDriverGlobals *SndDriverGlobalsPtr;

// /* 6732 */
// typedef DIDEVICEOBJECTDATA *LPDIDEVICEOBJECTDATA;

// /* 6733 */
// typedef void (__stdcall *BINKSNDMIXBINS)(BINKSND *, unsigned int *, unsigned int);

// /* 6734 */
// typedef unsigned int bdTitleID;

// /* 6735 */
// typedef int HSteamUser;

// /* 6736 */
// typedef unsigned __int16 wctype_t;

// /* 6737 */
// typedef _ITEMIDLIST *LPITEMIDLIST;

// /* 6738 */
// typedef void *(__cdecl *jpeg_external_malloc_t)(unsigned int);

// /* 6739 */
// typedef void *THREAD_HANDLE;

// /* 6740 */
// typedef __int16 (*JBLOCKROW)[64];

// /* 6741 */
// typedef const DIDEVICEOBJECTINSTANCEA *LPCDIDEVICEOBJECTINSTANCEA;

// /* 6742 */
// typedef void *volatile volatile_ptr;

// /* 6743 */
// typedef const _DSBUFFERDESC *LPCDSBUFFERDESC;

// /* 6744 */
// typedef unsigned __int16 modelNameIndex_t;

// /* 6745 */
// typedef void (__cdecl *fn_react)(gentity_s *, gentity_s *, const float *);

// /* 6746 */
// typedef void (__stdcall *BINKSNDMIXBINVOLS)(BINKSND *, unsigned int *, int *, unsigned int);

// /* 6747 */
// typedef multiDef_s *multiDef_ptr;

// /* 6748 */
// typedef unsigned int HREFTYPE;

// /* 6749 */
// typedef const void *(__stdcall *PFNDPAMERGECONST)(unsigned int, const void *, const void *, int);

// /* 6750 */
// typedef const wchar_t *PCUWSTR;

// /* 6751 */
// typedef MenuList *MenuListPtr;

// /* 6752 */
// typedef _PEB *PPEB;

// /* 6753 */
// typedef _EXCEPTION_DISPOSITION (__cdecl *PEXCEPTION_ROUTINE)(_EXCEPTION_RECORD *, void *, _CONTEXT *, void *);

// /* 6754 */
// typedef unsigned __int64 DWORD64;

// /* 6755 */
// typedef unsigned int ULONG_PTR;

// /* 6756 */
// typedef char *(__cdecl *tdPbClientConnect)(void *, int, char *, int *);

// /* 6757 */
// typedef unsigned int MMRESULT;

// /* 6758 */
// typedef HWND__ *HWND;

// /* 6759 */
// typedef UiContext UiContextArray[1];

// /* 6760 */
// typedef bool (__cdecl *pmove_getEntityOriginAngles)(int, int, float *, float *);

// /* 6761 */
// typedef unsigned __int8 *JSAMPROW;

// /* 6762 */
// typedef unsigned __int16 EventParm;

// /* 6763 */
// typedef __int16 int16_t;

// /* 6764 */
// typedef int (__stdcall *(__stdcall *BINKSNDSYSOPEN)(unsigned int))(BINKSND *, unsigned int, int, int, unsigned int, BINK *);

// /* 6765 */
// typedef bool (__cdecl *FxEffectFieldHandler)(const char **, FxEditorEffectDef *);

// /* 6766 */
// typedef XMA2WAVEFORMATEX *PXMA2WAVEFORMATEX;

// /* 6767 */
// typedef unsigned int IPos;

// /* 6768 */
// typedef tagMSG *LPMSG;

// /* 6769 */
// typedef int BOOL;

// /* 6770 */
// typedef PhysConstraints *PhysConstraintsPtr;

// /* 6771 */
// typedef tagMODULEENTRY32 *LPMODULEENTRY32;

// /* 6772 */
// typedef char bool8;

// /* 6773 */
// typedef unsigned __int16 scr_thread_t;

// /* 6774 */
// typedef __int16 XQuat[4];

// /* 6775 */
// typedef pathnode_tree_t *pathnode_tree_ptr;

// /* 6776 */
// typedef int *LPBOOL;

// /* 6777 */
// typedef void (__cdecl *_PHNDLR)(int);

// /* 6778 */
// typedef tagPOINT *LPPOINT;

// /* 6779 */
// typedef unsigned __int8 *(__cdecl *alloc_func)(unsigned __int8 *, unsigned int, unsigned int);

// /* 6780 */
// typedef const _TEB_ACTIVE_FRAME_CONTEXT *PCTEB_ACTIVE_FRAME_CONTEXT;

// /* 6781 */
// typedef RawFile *RawFilePtr;

// /* 6782 */
// typedef tagRECT *LPRECT;

// /* 6783 */
// typedef IDirectSound8 *LPDIRECTSOUND8;

// /* 6784 */
// typedef char snapshot_value_t[8192];

// /* 6785 */
// typedef float vec2_t[2];

// /* 6786 */
// typedef unsigned __int16 FxMarkHandle;

// /* 6787 */
// typedef unsigned int BD_ULONG;

// /* 6788 */
// typedef my_source_mgr *my_src_ptr;

/* 6789 */
typedef MaterialTechniqueSet* MaterialTechniqueSetPtr;

// /* 6790 */
// typedef Font_s *FontHandle;

// /* 6791 */
// typedef char *PCHAR;

// /* 6792 */
// typedef __int64 __time64_t;

// /* 6793 */
// typedef char TCHAR;

// /* 6794 */
// typedef unsigned __int8 UCHAR;

// /* 6795 */
// typedef my_memory_mgr *my_mem_ptr;

// /* 6796 */
// typedef unsigned __int8 qosPayloadBuffer_t[8];

// /* 6797 */
// typedef const wchar_t *LPCWSTR;

// /* 6798 */
// typedef rectData_s *rectData_ptr;

// /* 6799 */
// typedef const DpvsPlane *DpvsPlanePtr;

// /* 6800 */
// typedef void (__cdecl *forward_DCT_method_ptr)(int *);

// /* 6801 */
// typedef unsigned int CellID_t;

// /* 6802 */
// typedef _iobuf *assertiveFile_t;

// /* 6803 */
// typedef _MEMORYSTATUSEX *LPMEMORYSTATUSEX;

// /* 6804 */
// typedef unsigned __int16 FxTrailElemHandle;

// /* 6805 */
// typedef unsigned __int16 LANGID;

// /* 6806 */
// typedef unsigned __int16 _ino_t;

// /* 6807 */
// typedef unsigned int (__stdcall *PFLS_ALLOC_FUNCTION)(void (__stdcall *)(void *));

// /* 6808 */
// typedef void (__cdecl *BuiltinFunction)();

// /* 6809 */
// typedef unsigned int FxUniqueHandle;

// /* 6810 */
// typedef _MEMORYSTATUS *LPMEMORYSTATUS;

// /* 6811 */
// typedef wchar_t *BSTR;

// /* 6812 */
// typedef int (__stdcall *LPDDENUMCALLBACKEX)(_GUID *, char *, char *, void *, HMONITOR__ *);

// /* 6813 */
// typedef _KDHELP64 *PKDHELP64;

// /* 6814 */
// typedef void *HServerListRequest;

// /* 6815 */
// typedef unsigned __int8 uint8_t;

// /* 6816 */
// typedef void (__cdecl *PEXCEPTION_HANDLER)();

// /* 6817 */
// typedef wchar_t *LPWSTR;

// /* 6818 */
// typedef __int16 BGEmblemIconID;

// /* 6819 */
// typedef _PEB_FREE_BLOCK *PPEB_FREE_BLOCK;

// /* 6820 */
// typedef unsigned int bdUWord;

// /* 6821 */
// typedef IDirectSoundCaptureBuffer *LPDIRECTSOUNDCAPTUREBUFFER;

// /* 6822 */
// typedef int *PLONG;

// /* 6823 */
// typedef unsigned int BD_UWORD;

// /* 6824 */
// typedef unsigned int ULONG;

// /* 6825 */
// typedef unsigned int uLong;

// /* 6826 */
// typedef int __cdecl HTRequestCallback(_HTRequest *, void *);

// /* 6827 */
// typedef unsigned __int64 bdTeamID;

// /* 6828 */
// typedef char *LPTSTR;

// /* 6829 */
// typedef HRESULT (__stdcall *LPDIRECTDRAWCREATEEX)(_GUID *, void **, const _GUID *, IUnknown *);

// /* 6830 */
// typedef unsigned int PackageId_t;

// /* 6831 */
// typedef char min_msg_buf_char[2048];

// /* 6832 */
// typedef void (__cdecl *PCacheComponentRelease)(PCacheComponent *);

// /* 6833 */
// typedef void (__cdecl *PMFN)();

// /* 6834 */
// typedef int ptrdiff_t;

// /* 6835 */
// typedef int (__stdcall *LPDDENUMCALLBACKEXA)(_GUID *, char *, char *, void *, HMONITOR__ *);

// /* 6836 */
// typedef unsigned __int64 bdOnlineUserID;

// /* 6837 */
// typedef HRESULT (__stdcall *LPDDENUMMODESCALLBACK2)(_DDSURFACEDESC2 *, void *);

// /* 6838 */
// typedef unsigned __int8 largeLocalBufArray[524288];

// /* 6839 */
// typedef unsigned __int8 boolean;

// /* 6840 */
// typedef unsigned __int8 BOOLEAN;

// /* 6841 */
// typedef _tiddata *_ptiddata;

// /* 6842 */
// typedef unsigned int objBufEntry[31];

// /* 6843 */
// typedef void (__cdecl *Free_t)(void *);

// /* 6844 */
// typedef HMENU__ *HMENU;

// /* 6845 */
// typedef _TP_POOL *PTP_POOL;

// /* 6846 */
// enum __TI_flags
// {
//   TI_IsConst = 0x1,
//   TI_IsVolatile = 0x2,
//   TI_IsUnaligned = 0x4,
//   TI_IsPure = 0x8,
//   TI_IsWinRT = 0x10,
// };

// /* 6847 */
// enum __CT_flags
// {
//   CT_IsSimpleType = 0x1,
//   CT_ByReferenceOnly = 0x2,
//   CT_HasVirtualBase = 0x4,
//   CT_IsWinRTHandle = 0x8,
//   CT_IsStdBadAlloc = 0x10,
// };

// /* 6848 */
// typedef _GUID GUID;

// /* 6849 */
// struct /*VFT*/ ID2D1BitmapRenderTarget_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetFactory)(ID2D1Resource *this, ID2D1Factory **);
//   HRESULT (__stdcall *CreateBitmap)(ID2D1RenderTarget *this, D2D_SIZE_U, const void *, unsigned int, const D2D1_BITMAP_PROPERTIES *, ID2D1Bitmap **);
//   HRESULT (__stdcall *CreateBitmapFromWicBitmap)(ID2D1RenderTarget *this, IWICBitmapSource *, const D2D1_BITMAP_PROPERTIES *, ID2D1Bitmap **);
//   HRESULT (__stdcall *CreateSharedBitmap)(ID2D1RenderTarget *this, const _GUID *, void *, const D2D1_BITMAP_PROPERTIES *, ID2D1Bitmap **);
//   HRESULT (__stdcall *CreateBitmapBrush)(ID2D1RenderTarget *this, ID2D1Bitmap *, const D2D1_BITMAP_BRUSH_PROPERTIES *, const D2D1_BRUSH_PROPERTIES *, ID2D1BitmapBrush **);
//   HRESULT (__stdcall *CreateSolidColorBrush)(ID2D1RenderTarget *this, const _D3DCOLORVALUE *, const D2D1_BRUSH_PROPERTIES *, ID2D1SolidColorBrush **);
//   HRESULT (__stdcall *CreateGradientStopCollection)(ID2D1RenderTarget *this, const D2D1_GRADIENT_STOP *, unsigned int, D2D1_GAMMA, D2D1_EXTEND_MODE, ID2D1GradientStopCollection **);
//   HRESULT (__stdcall *CreateLinearGradientBrush)(ID2D1RenderTarget *this, const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES *, const D2D1_BRUSH_PROPERTIES *, ID2D1GradientStopCollection *, ID2D1LinearGradientBrush **);
//   HRESULT (__stdcall *CreateRadialGradientBrush)(ID2D1RenderTarget *this, const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES *, const D2D1_BRUSH_PROPERTIES *, ID2D1GradientStopCollection *, ID2D1RadialGradientBrush **);
//   HRESULT (__stdcall *CreateCompatibleRenderTarget)(ID2D1RenderTarget *this, const D2D_SIZE_F *, const D2D_SIZE_U *, const D2D1_PIXEL_FORMAT *, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, ID2D1BitmapRenderTarget **);
//   HRESULT (__stdcall *CreateLayer)(ID2D1RenderTarget *this, const D2D_SIZE_F *, ID2D1Layer **);
//   HRESULT (__stdcall *CreateMesh)(ID2D1RenderTarget *this, ID2D1Mesh **);
//   void (__stdcall *DrawLine)(ID2D1RenderTarget *this, D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush *, float, ID2D1StrokeStyle *);
//   void (__stdcall *DrawRectangle)(ID2D1RenderTarget *this, const D2D_RECT_F *, ID2D1Brush *, float, ID2D1StrokeStyle *);
//   void (__stdcall *FillRectangle)(ID2D1RenderTarget *this, const D2D_RECT_F *, ID2D1Brush *);
//   void (__stdcall *DrawRoundedRectangle)(ID2D1RenderTarget *this, const D2D1_ROUNDED_RECT *, ID2D1Brush *, float, ID2D1StrokeStyle *);
//   void (__stdcall *FillRoundedRectangle)(ID2D1RenderTarget *this, const D2D1_ROUNDED_RECT *, ID2D1Brush *);
//   void (__stdcall *DrawEllipse)(ID2D1RenderTarget *this, const D2D1_ELLIPSE *, ID2D1Brush *, float, ID2D1StrokeStyle *);
//   void (__stdcall *FillEllipse)(ID2D1RenderTarget *this, const D2D1_ELLIPSE *, ID2D1Brush *);
//   void (__stdcall *DrawGeometry)(ID2D1RenderTarget *this, ID2D1Geometry *, ID2D1Brush *, float, ID2D1StrokeStyle *);
//   void (__stdcall *FillGeometry)(ID2D1RenderTarget *this, ID2D1Geometry *, ID2D1Brush *, ID2D1Brush *);
//   void (__stdcall *FillMesh)(ID2D1RenderTarget *this, ID2D1Mesh *, ID2D1Brush *);
//   void (__stdcall *FillOpacityMask)(ID2D1RenderTarget *this, ID2D1Bitmap *, ID2D1Brush *, D2D1_OPACITY_MASK_CONTENT, const D2D_RECT_F *, const D2D_RECT_F *);
//   void (__stdcall *DrawBitmap)(ID2D1RenderTarget *this, ID2D1Bitmap *, const D2D_RECT_F *, float, D2D1_BITMAP_INTERPOLATION_MODE, const D2D_RECT_F *);
//   void (__stdcall *DrawTextA)(ID2D1RenderTarget *this, const wchar_t *, unsigned int, IDWriteTextFormat *, const D2D_RECT_F *, ID2D1Brush *, D2D1_DRAW_TEXT_OPTIONS, DWRITE_MEASURING_MODE);
//   void (__stdcall *DrawTextLayout)(ID2D1RenderTarget *this, D2D_POINT_2F, IDWriteTextLayout *, ID2D1Brush *, D2D1_DRAW_TEXT_OPTIONS);
//   void (__stdcall *DrawGlyphRun)(ID2D1RenderTarget *this, D2D_POINT_2F, const DWRITE_GLYPH_RUN *, ID2D1Brush *, DWRITE_MEASURING_MODE);
//   void (__stdcall *SetTransform)(ID2D1RenderTarget *this, const D2D_MATRIX_3X2_F *);
//   void (__stdcall *GetTransform)(ID2D1RenderTarget *this, D2D_MATRIX_3X2_F *);
//   void (__stdcall *SetAntialiasMode)(ID2D1RenderTarget *this, D2D1_ANTIALIAS_MODE);
//   D2D1_ANTIALIAS_MODE (__stdcall *GetAntialiasMode)(ID2D1RenderTarget *this);
//   void (__stdcall *SetTextAntialiasMode)(ID2D1RenderTarget *this, D2D1_TEXT_ANTIALIAS_MODE);
//   D2D1_TEXT_ANTIALIAS_MODE (__stdcall *GetTextAntialiasMode)(ID2D1RenderTarget *this);
//   void (__stdcall *SetTextRenderingParams)(ID2D1RenderTarget *this, IDWriteRenderingParams *);
//   void (__stdcall *GetTextRenderingParams)(ID2D1RenderTarget *this, IDWriteRenderingParams **);
//   void (__stdcall *SetTags)(ID2D1RenderTarget *this, unsigned __int64, unsigned __int64);
//   void (__stdcall *GetTags)(ID2D1RenderTarget *this, unsigned __int64 *, unsigned __int64 *);
//   void (__stdcall *PushLayer)(ID2D1RenderTarget *this, const D2D1_LAYER_PARAMETERS *, ID2D1Layer *);
//   void (__stdcall *PopLayer)(ID2D1RenderTarget *this);
//   HRESULT (__stdcall *Flush)(ID2D1RenderTarget *this, unsigned __int64 *, unsigned __int64 *);
//   void (__stdcall *SaveDrawingState)(ID2D1RenderTarget *this, ID2D1DrawingStateBlock *);
//   void (__stdcall *RestoreDrawingState)(ID2D1RenderTarget *this, ID2D1DrawingStateBlock *);
//   void (__stdcall *PushAxisAlignedClip)(ID2D1RenderTarget *this, const D2D_RECT_F *, D2D1_ANTIALIAS_MODE);
//   void (__stdcall *PopAxisAlignedClip)(ID2D1RenderTarget *this);
//   void (__stdcall *Clear)(ID2D1RenderTarget *this, const _D3DCOLORVALUE *);
//   void (__stdcall *BeginDraw)(ID2D1RenderTarget *this);
//   HRESULT (__stdcall *EndDraw)(ID2D1RenderTarget *this, unsigned __int64 *, unsigned __int64 *);
//   D2D1_PIXEL_FORMAT (__stdcall *GetPixelFormat)(ID2D1RenderTarget *this);
//   void (__stdcall *SetDpi)(ID2D1RenderTarget *this, float, float);
//   void (__stdcall *GetDpi)(ID2D1RenderTarget *this, float *, float *);
//   D2D_SIZE_F (__stdcall *GetSize)(ID2D1RenderTarget *this);
//   D2D_SIZE_U (__stdcall *GetPixelSize)(ID2D1RenderTarget *this);
//   unsigned int (__stdcall *GetMaximumBitmapSize)(ID2D1RenderTarget *this);
//   int (__stdcall *IsSupported)(ID2D1RenderTarget *this, const D2D1_RENDER_TARGET_PROPERTIES *);
//   HRESULT (__stdcall *GetBitmap)(ID2D1BitmapRenderTarget *this, ID2D1Bitmap **);
// };

// /* 6850 */
// struct /*VFT*/ ID2D1DCRenderTarget_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetFactory)(ID2D1Resource *this, ID2D1Factory **);
//   HRESULT (__stdcall *CreateBitmap)(ID2D1RenderTarget *this, D2D_SIZE_U, const void *, unsigned int, const D2D1_BITMAP_PROPERTIES *, ID2D1Bitmap **);
//   HRESULT (__stdcall *CreateBitmapFromWicBitmap)(ID2D1RenderTarget *this, IWICBitmapSource *, const D2D1_BITMAP_PROPERTIES *, ID2D1Bitmap **);
//   HRESULT (__stdcall *CreateSharedBitmap)(ID2D1RenderTarget *this, const _GUID *, void *, const D2D1_BITMAP_PROPERTIES *, ID2D1Bitmap **);
//   HRESULT (__stdcall *CreateBitmapBrush)(ID2D1RenderTarget *this, ID2D1Bitmap *, const D2D1_BITMAP_BRUSH_PROPERTIES *, const D2D1_BRUSH_PROPERTIES *, ID2D1BitmapBrush **);
//   HRESULT (__stdcall *CreateSolidColorBrush)(ID2D1RenderTarget *this, const _D3DCOLORVALUE *, const D2D1_BRUSH_PROPERTIES *, ID2D1SolidColorBrush **);
//   HRESULT (__stdcall *CreateGradientStopCollection)(ID2D1RenderTarget *this, const D2D1_GRADIENT_STOP *, unsigned int, D2D1_GAMMA, D2D1_EXTEND_MODE, ID2D1GradientStopCollection **);
//   HRESULT (__stdcall *CreateLinearGradientBrush)(ID2D1RenderTarget *this, const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES *, const D2D1_BRUSH_PROPERTIES *, ID2D1GradientStopCollection *, ID2D1LinearGradientBrush **);
//   HRESULT (__stdcall *CreateRadialGradientBrush)(ID2D1RenderTarget *this, const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES *, const D2D1_BRUSH_PROPERTIES *, ID2D1GradientStopCollection *, ID2D1RadialGradientBrush **);
//   HRESULT (__stdcall *CreateCompatibleRenderTarget)(ID2D1RenderTarget *this, const D2D_SIZE_F *, const D2D_SIZE_U *, const D2D1_PIXEL_FORMAT *, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, ID2D1BitmapRenderTarget **);
//   HRESULT (__stdcall *CreateLayer)(ID2D1RenderTarget *this, const D2D_SIZE_F *, ID2D1Layer **);
//   HRESULT (__stdcall *CreateMesh)(ID2D1RenderTarget *this, ID2D1Mesh **);
//   void (__stdcall *DrawLine)(ID2D1RenderTarget *this, D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush *, float, ID2D1StrokeStyle *);
//   void (__stdcall *DrawRectangle)(ID2D1RenderTarget *this, const D2D_RECT_F *, ID2D1Brush *, float, ID2D1StrokeStyle *);
//   void (__stdcall *FillRectangle)(ID2D1RenderTarget *this, const D2D_RECT_F *, ID2D1Brush *);
//   void (__stdcall *DrawRoundedRectangle)(ID2D1RenderTarget *this, const D2D1_ROUNDED_RECT *, ID2D1Brush *, float, ID2D1StrokeStyle *);
//   void (__stdcall *FillRoundedRectangle)(ID2D1RenderTarget *this, const D2D1_ROUNDED_RECT *, ID2D1Brush *);
//   void (__stdcall *DrawEllipse)(ID2D1RenderTarget *this, const D2D1_ELLIPSE *, ID2D1Brush *, float, ID2D1StrokeStyle *);
//   void (__stdcall *FillEllipse)(ID2D1RenderTarget *this, const D2D1_ELLIPSE *, ID2D1Brush *);
//   void (__stdcall *DrawGeometry)(ID2D1RenderTarget *this, ID2D1Geometry *, ID2D1Brush *, float, ID2D1StrokeStyle *);
//   void (__stdcall *FillGeometry)(ID2D1RenderTarget *this, ID2D1Geometry *, ID2D1Brush *, ID2D1Brush *);
//   void (__stdcall *FillMesh)(ID2D1RenderTarget *this, ID2D1Mesh *, ID2D1Brush *);
//   void (__stdcall *FillOpacityMask)(ID2D1RenderTarget *this, ID2D1Bitmap *, ID2D1Brush *, D2D1_OPACITY_MASK_CONTENT, const D2D_RECT_F *, const D2D_RECT_F *);
//   void (__stdcall *DrawBitmap)(ID2D1RenderTarget *this, ID2D1Bitmap *, const D2D_RECT_F *, float, D2D1_BITMAP_INTERPOLATION_MODE, const D2D_RECT_F *);
//   void (__stdcall *DrawTextA)(ID2D1RenderTarget *this, const wchar_t *, unsigned int, IDWriteTextFormat *, const D2D_RECT_F *, ID2D1Brush *, D2D1_DRAW_TEXT_OPTIONS, DWRITE_MEASURING_MODE);
//   void (__stdcall *DrawTextLayout)(ID2D1RenderTarget *this, D2D_POINT_2F, IDWriteTextLayout *, ID2D1Brush *, D2D1_DRAW_TEXT_OPTIONS);
//   void (__stdcall *DrawGlyphRun)(ID2D1RenderTarget *this, D2D_POINT_2F, const DWRITE_GLYPH_RUN *, ID2D1Brush *, DWRITE_MEASURING_MODE);
//   void (__stdcall *SetTransform)(ID2D1RenderTarget *this, const D2D_MATRIX_3X2_F *);
//   void (__stdcall *GetTransform)(ID2D1RenderTarget *this, D2D_MATRIX_3X2_F *);
//   void (__stdcall *SetAntialiasMode)(ID2D1RenderTarget *this, D2D1_ANTIALIAS_MODE);
//   D2D1_ANTIALIAS_MODE (__stdcall *GetAntialiasMode)(ID2D1RenderTarget *this);
//   void (__stdcall *SetTextAntialiasMode)(ID2D1RenderTarget *this, D2D1_TEXT_ANTIALIAS_MODE);
//   D2D1_TEXT_ANTIALIAS_MODE (__stdcall *GetTextAntialiasMode)(ID2D1RenderTarget *this);
//   void (__stdcall *SetTextRenderingParams)(ID2D1RenderTarget *this, IDWriteRenderingParams *);
//   void (__stdcall *GetTextRenderingParams)(ID2D1RenderTarget *this, IDWriteRenderingParams **);
//   void (__stdcall *SetTags)(ID2D1RenderTarget *this, unsigned __int64, unsigned __int64);
//   void (__stdcall *GetTags)(ID2D1RenderTarget *this, unsigned __int64 *, unsigned __int64 *);
//   void (__stdcall *PushLayer)(ID2D1RenderTarget *this, const D2D1_LAYER_PARAMETERS *, ID2D1Layer *);
//   void (__stdcall *PopLayer)(ID2D1RenderTarget *this);
//   HRESULT (__stdcall *Flush)(ID2D1RenderTarget *this, unsigned __int64 *, unsigned __int64 *);
//   void (__stdcall *SaveDrawingState)(ID2D1RenderTarget *this, ID2D1DrawingStateBlock *);
//   void (__stdcall *RestoreDrawingState)(ID2D1RenderTarget *this, ID2D1DrawingStateBlock *);
//   void (__stdcall *PushAxisAlignedClip)(ID2D1RenderTarget *this, const D2D_RECT_F *, D2D1_ANTIALIAS_MODE);
//   void (__stdcall *PopAxisAlignedClip)(ID2D1RenderTarget *this);
//   void (__stdcall *Clear)(ID2D1RenderTarget *this, const _D3DCOLORVALUE *);
//   void (__stdcall *BeginDraw)(ID2D1RenderTarget *this);
//   HRESULT (__stdcall *EndDraw)(ID2D1RenderTarget *this, unsigned __int64 *, unsigned __int64 *);
//   D2D1_PIXEL_FORMAT (__stdcall *GetPixelFormat)(ID2D1RenderTarget *this);
//   void (__stdcall *SetDpi)(ID2D1RenderTarget *this, float, float);
//   void (__stdcall *GetDpi)(ID2D1RenderTarget *this, float *, float *);
//   D2D_SIZE_F (__stdcall *GetSize)(ID2D1RenderTarget *this);
//   D2D_SIZE_U (__stdcall *GetPixelSize)(ID2D1RenderTarget *this);
//   unsigned int (__stdcall *GetMaximumBitmapSize)(ID2D1RenderTarget *this);
//   int (__stdcall *IsSupported)(ID2D1RenderTarget *this, const D2D1_RENDER_TARGET_PROPERTIES *);
//   HRESULT (__stdcall *BindDC)(ID2D1DCRenderTarget *this, HDC__ *const, const tagRECT *);
// };

// /* 6851 */
// struct /*VFT*/ ID2D1DrawingStateBlock_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetFactory)(ID2D1Resource *this, ID2D1Factory **);
//   void (__stdcall *GetDescription)(ID2D1DrawingStateBlock *this, D2D1_DRAWING_STATE_DESCRIPTION *);
//   void (__stdcall *SetDescription)(ID2D1DrawingStateBlock *this, const D2D1_DRAWING_STATE_DESCRIPTION *);
//   void (__stdcall *SetTextRenderingParams)(ID2D1DrawingStateBlock *this, IDWriteRenderingParams *);
//   void (__stdcall *GetTextRenderingParams)(ID2D1DrawingStateBlock *this, IDWriteRenderingParams **);
// };

// /* 6852 */
// struct /*VFT*/ ID2D1Geometry_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetFactory)(ID2D1Resource *this, ID2D1Factory **);
//   HRESULT (__stdcall *GetBounds)(ID2D1Geometry *this, const D2D_MATRIX_3X2_F *, D2D_RECT_F *);
//   HRESULT (__stdcall *GetWidenedBounds)(ID2D1Geometry *this, float, ID2D1StrokeStyle *, const D2D_MATRIX_3X2_F *, float, D2D_RECT_F *);
//   HRESULT (__stdcall *StrokeContainsPoint)(ID2D1Geometry *this, D2D_POINT_2F, float, ID2D1StrokeStyle *, const D2D_MATRIX_3X2_F *, float, int *);
//   HRESULT (__stdcall *FillContainsPoint)(ID2D1Geometry *this, D2D_POINT_2F, const D2D_MATRIX_3X2_F *, float, int *);
//   HRESULT (__stdcall *CompareWithGeometry)(ID2D1Geometry *this, ID2D1Geometry *, const D2D_MATRIX_3X2_F *, float, D2D1_GEOMETRY_RELATION *);
//   HRESULT (__stdcall *Simplify)(ID2D1Geometry *this, D2D1_GEOMETRY_SIMPLIFICATION_OPTION, const D2D_MATRIX_3X2_F *, float, ID2D1SimplifiedGeometrySink *);
//   HRESULT (__stdcall *Tessellate)(ID2D1Geometry *this, const D2D_MATRIX_3X2_F *, float, ID2D1TessellationSink *);
//   HRESULT (__stdcall *CombineWithGeometry)(ID2D1Geometry *this, ID2D1Geometry *, D2D1_COMBINE_MODE, const D2D_MATRIX_3X2_F *, float, ID2D1SimplifiedGeometrySink *);
//   HRESULT (__stdcall *Outline)(ID2D1Geometry *this, const D2D_MATRIX_3X2_F *, float, ID2D1SimplifiedGeometrySink *);
//   HRESULT (__stdcall *ComputeArea)(ID2D1Geometry *this, const D2D_MATRIX_3X2_F *, float, float *);
//   HRESULT (__stdcall *ComputeLength)(ID2D1Geometry *this, const D2D_MATRIX_3X2_F *, float, float *);
//   HRESULT (__stdcall *ComputePointAtLength)(ID2D1Geometry *this, float, const D2D_MATRIX_3X2_F *, float, D2D_POINT_2F *, D2D_POINT_2F *);
//   HRESULT (__stdcall *Widen)(ID2D1Geometry *this, float, ID2D1StrokeStyle *, const D2D_MATRIX_3X2_F *, float, ID2D1SimplifiedGeometrySink *);
// };

// /* 6853 */
// struct /*VFT*/ ID2D1HwndRenderTarget_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetFactory)(ID2D1Resource *this, ID2D1Factory **);
//   HRESULT (__stdcall *CreateBitmap)(ID2D1RenderTarget *this, D2D_SIZE_U, const void *, unsigned int, const D2D1_BITMAP_PROPERTIES *, ID2D1Bitmap **);
//   HRESULT (__stdcall *CreateBitmapFromWicBitmap)(ID2D1RenderTarget *this, IWICBitmapSource *, const D2D1_BITMAP_PROPERTIES *, ID2D1Bitmap **);
//   HRESULT (__stdcall *CreateSharedBitmap)(ID2D1RenderTarget *this, const _GUID *, void *, const D2D1_BITMAP_PROPERTIES *, ID2D1Bitmap **);
//   HRESULT (__stdcall *CreateBitmapBrush)(ID2D1RenderTarget *this, ID2D1Bitmap *, const D2D1_BITMAP_BRUSH_PROPERTIES *, const D2D1_BRUSH_PROPERTIES *, ID2D1BitmapBrush **);
//   HRESULT (__stdcall *CreateSolidColorBrush)(ID2D1RenderTarget *this, const _D3DCOLORVALUE *, const D2D1_BRUSH_PROPERTIES *, ID2D1SolidColorBrush **);
//   HRESULT (__stdcall *CreateGradientStopCollection)(ID2D1RenderTarget *this, const D2D1_GRADIENT_STOP *, unsigned int, D2D1_GAMMA, D2D1_EXTEND_MODE, ID2D1GradientStopCollection **);
//   HRESULT (__stdcall *CreateLinearGradientBrush)(ID2D1RenderTarget *this, const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES *, const D2D1_BRUSH_PROPERTIES *, ID2D1GradientStopCollection *, ID2D1LinearGradientBrush **);
//   HRESULT (__stdcall *CreateRadialGradientBrush)(ID2D1RenderTarget *this, const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES *, const D2D1_BRUSH_PROPERTIES *, ID2D1GradientStopCollection *, ID2D1RadialGradientBrush **);
//   HRESULT (__stdcall *CreateCompatibleRenderTarget)(ID2D1RenderTarget *this, const D2D_SIZE_F *, const D2D_SIZE_U *, const D2D1_PIXEL_FORMAT *, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, ID2D1BitmapRenderTarget **);
//   HRESULT (__stdcall *CreateLayer)(ID2D1RenderTarget *this, const D2D_SIZE_F *, ID2D1Layer **);
//   HRESULT (__stdcall *CreateMesh)(ID2D1RenderTarget *this, ID2D1Mesh **);
//   void (__stdcall *DrawLine)(ID2D1RenderTarget *this, D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush *, float, ID2D1StrokeStyle *);
//   void (__stdcall *DrawRectangle)(ID2D1RenderTarget *this, const D2D_RECT_F *, ID2D1Brush *, float, ID2D1StrokeStyle *);
//   void (__stdcall *FillRectangle)(ID2D1RenderTarget *this, const D2D_RECT_F *, ID2D1Brush *);
//   void (__stdcall *DrawRoundedRectangle)(ID2D1RenderTarget *this, const D2D1_ROUNDED_RECT *, ID2D1Brush *, float, ID2D1StrokeStyle *);
//   void (__stdcall *FillRoundedRectangle)(ID2D1RenderTarget *this, const D2D1_ROUNDED_RECT *, ID2D1Brush *);
//   void (__stdcall *DrawEllipse)(ID2D1RenderTarget *this, const D2D1_ELLIPSE *, ID2D1Brush *, float, ID2D1StrokeStyle *);
//   void (__stdcall *FillEllipse)(ID2D1RenderTarget *this, const D2D1_ELLIPSE *, ID2D1Brush *);
//   void (__stdcall *DrawGeometry)(ID2D1RenderTarget *this, ID2D1Geometry *, ID2D1Brush *, float, ID2D1StrokeStyle *);
//   void (__stdcall *FillGeometry)(ID2D1RenderTarget *this, ID2D1Geometry *, ID2D1Brush *, ID2D1Brush *);
//   void (__stdcall *FillMesh)(ID2D1RenderTarget *this, ID2D1Mesh *, ID2D1Brush *);
//   void (__stdcall *FillOpacityMask)(ID2D1RenderTarget *this, ID2D1Bitmap *, ID2D1Brush *, D2D1_OPACITY_MASK_CONTENT, const D2D_RECT_F *, const D2D_RECT_F *);
//   void (__stdcall *DrawBitmap)(ID2D1RenderTarget *this, ID2D1Bitmap *, const D2D_RECT_F *, float, D2D1_BITMAP_INTERPOLATION_MODE, const D2D_RECT_F *);
//   void (__stdcall *DrawTextA)(ID2D1RenderTarget *this, const wchar_t *, unsigned int, IDWriteTextFormat *, const D2D_RECT_F *, ID2D1Brush *, D2D1_DRAW_TEXT_OPTIONS, DWRITE_MEASURING_MODE);
//   void (__stdcall *DrawTextLayout)(ID2D1RenderTarget *this, D2D_POINT_2F, IDWriteTextLayout *, ID2D1Brush *, D2D1_DRAW_TEXT_OPTIONS);
//   void (__stdcall *DrawGlyphRun)(ID2D1RenderTarget *this, D2D_POINT_2F, const DWRITE_GLYPH_RUN *, ID2D1Brush *, DWRITE_MEASURING_MODE);
//   void (__stdcall *SetTransform)(ID2D1RenderTarget *this, const D2D_MATRIX_3X2_F *);
//   void (__stdcall *GetTransform)(ID2D1RenderTarget *this, D2D_MATRIX_3X2_F *);
//   void (__stdcall *SetAntialiasMode)(ID2D1RenderTarget *this, D2D1_ANTIALIAS_MODE);
//   D2D1_ANTIALIAS_MODE (__stdcall *GetAntialiasMode)(ID2D1RenderTarget *this);
//   void (__stdcall *SetTextAntialiasMode)(ID2D1RenderTarget *this, D2D1_TEXT_ANTIALIAS_MODE);
//   D2D1_TEXT_ANTIALIAS_MODE (__stdcall *GetTextAntialiasMode)(ID2D1RenderTarget *this);
//   void (__stdcall *SetTextRenderingParams)(ID2D1RenderTarget *this, IDWriteRenderingParams *);
//   void (__stdcall *GetTextRenderingParams)(ID2D1RenderTarget *this, IDWriteRenderingParams **);
//   void (__stdcall *SetTags)(ID2D1RenderTarget *this, unsigned __int64, unsigned __int64);
//   void (__stdcall *GetTags)(ID2D1RenderTarget *this, unsigned __int64 *, unsigned __int64 *);
//   void (__stdcall *PushLayer)(ID2D1RenderTarget *this, const D2D1_LAYER_PARAMETERS *, ID2D1Layer *);
//   void (__stdcall *PopLayer)(ID2D1RenderTarget *this);
//   HRESULT (__stdcall *Flush)(ID2D1RenderTarget *this, unsigned __int64 *, unsigned __int64 *);
//   void (__stdcall *SaveDrawingState)(ID2D1RenderTarget *this, ID2D1DrawingStateBlock *);
//   void (__stdcall *RestoreDrawingState)(ID2D1RenderTarget *this, ID2D1DrawingStateBlock *);
//   void (__stdcall *PushAxisAlignedClip)(ID2D1RenderTarget *this, const D2D_RECT_F *, D2D1_ANTIALIAS_MODE);
//   void (__stdcall *PopAxisAlignedClip)(ID2D1RenderTarget *this);
//   void (__stdcall *Clear)(ID2D1RenderTarget *this, const _D3DCOLORVALUE *);
//   void (__stdcall *BeginDraw)(ID2D1RenderTarget *this);
//   HRESULT (__stdcall *EndDraw)(ID2D1RenderTarget *this, unsigned __int64 *, unsigned __int64 *);
//   D2D1_PIXEL_FORMAT (__stdcall *GetPixelFormat)(ID2D1RenderTarget *this);
//   void (__stdcall *SetDpi)(ID2D1RenderTarget *this, float, float);
//   void (__stdcall *GetDpi)(ID2D1RenderTarget *this, float *, float *);
//   D2D_SIZE_F (__stdcall *GetSize)(ID2D1RenderTarget *this);
//   D2D_SIZE_U (__stdcall *GetPixelSize)(ID2D1RenderTarget *this);
//   unsigned int (__stdcall *GetMaximumBitmapSize)(ID2D1RenderTarget *this);
//   int (__stdcall *IsSupported)(ID2D1RenderTarget *this, const D2D1_RENDER_TARGET_PROPERTIES *);
//   D2D1_WINDOW_STATE (__stdcall *CheckWindowState)(ID2D1HwndRenderTarget *this);
//   HRESULT (__stdcall *Resize)(ID2D1HwndRenderTarget *this, const D2D_SIZE_U *);
//   HWND__ *(__stdcall *GetHwnd)(ID2D1HwndRenderTarget *this);
// };

// /* 6854 */
// struct /*VFT*/ ID2D1PathGeometry_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetFactory)(ID2D1Resource *this, ID2D1Factory **);
//   HRESULT (__stdcall *GetBounds)(ID2D1Geometry *this, const D2D_MATRIX_3X2_F *, D2D_RECT_F *);
//   HRESULT (__stdcall *GetWidenedBounds)(ID2D1Geometry *this, float, ID2D1StrokeStyle *, const D2D_MATRIX_3X2_F *, float, D2D_RECT_F *);
//   HRESULT (__stdcall *StrokeContainsPoint)(ID2D1Geometry *this, D2D_POINT_2F, float, ID2D1StrokeStyle *, const D2D_MATRIX_3X2_F *, float, int *);
//   HRESULT (__stdcall *FillContainsPoint)(ID2D1Geometry *this, D2D_POINT_2F, const D2D_MATRIX_3X2_F *, float, int *);
//   HRESULT (__stdcall *CompareWithGeometry)(ID2D1Geometry *this, ID2D1Geometry *, const D2D_MATRIX_3X2_F *, float, D2D1_GEOMETRY_RELATION *);
//   HRESULT (__stdcall *Simplify)(ID2D1Geometry *this, D2D1_GEOMETRY_SIMPLIFICATION_OPTION, const D2D_MATRIX_3X2_F *, float, ID2D1SimplifiedGeometrySink *);
//   HRESULT (__stdcall *Tessellate)(ID2D1Geometry *this, const D2D_MATRIX_3X2_F *, float, ID2D1TessellationSink *);
//   HRESULT (__stdcall *CombineWithGeometry)(ID2D1Geometry *this, ID2D1Geometry *, D2D1_COMBINE_MODE, const D2D_MATRIX_3X2_F *, float, ID2D1SimplifiedGeometrySink *);
//   HRESULT (__stdcall *Outline)(ID2D1Geometry *this, const D2D_MATRIX_3X2_F *, float, ID2D1SimplifiedGeometrySink *);
//   HRESULT (__stdcall *ComputeArea)(ID2D1Geometry *this, const D2D_MATRIX_3X2_F *, float, float *);
//   HRESULT (__stdcall *ComputeLength)(ID2D1Geometry *this, const D2D_MATRIX_3X2_F *, float, float *);
//   HRESULT (__stdcall *ComputePointAtLength)(ID2D1Geometry *this, float, const D2D_MATRIX_3X2_F *, float, D2D_POINT_2F *, D2D_POINT_2F *);
//   HRESULT (__stdcall *Widen)(ID2D1Geometry *this, float, ID2D1StrokeStyle *, const D2D_MATRIX_3X2_F *, float, ID2D1SimplifiedGeometrySink *);
//   HRESULT (__stdcall *Open)(ID2D1PathGeometry *this, ID2D1GeometrySink **);
//   HRESULT (__stdcall *Stream)(ID2D1PathGeometry *this, ID2D1GeometrySink *);
//   HRESULT (__stdcall *GetSegmentCount)(ID2D1PathGeometry *this, unsigned int *);
//   HRESULT (__stdcall *GetFigureCount)(ID2D1PathGeometry *this, unsigned int *);
// };

// /* 6855 */
// struct /*VFT*/ ID2D1RectangleGeometry_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetFactory)(ID2D1Resource *this, ID2D1Factory **);
//   HRESULT (__stdcall *GetBounds)(ID2D1Geometry *this, const D2D_MATRIX_3X2_F *, D2D_RECT_F *);
//   HRESULT (__stdcall *GetWidenedBounds)(ID2D1Geometry *this, float, ID2D1StrokeStyle *, const D2D_MATRIX_3X2_F *, float, D2D_RECT_F *);
//   HRESULT (__stdcall *StrokeContainsPoint)(ID2D1Geometry *this, D2D_POINT_2F, float, ID2D1StrokeStyle *, const D2D_MATRIX_3X2_F *, float, int *);
//   HRESULT (__stdcall *FillContainsPoint)(ID2D1Geometry *this, D2D_POINT_2F, const D2D_MATRIX_3X2_F *, float, int *);
//   HRESULT (__stdcall *CompareWithGeometry)(ID2D1Geometry *this, ID2D1Geometry *, const D2D_MATRIX_3X2_F *, float, D2D1_GEOMETRY_RELATION *);
//   HRESULT (__stdcall *Simplify)(ID2D1Geometry *this, D2D1_GEOMETRY_SIMPLIFICATION_OPTION, const D2D_MATRIX_3X2_F *, float, ID2D1SimplifiedGeometrySink *);
//   HRESULT (__stdcall *Tessellate)(ID2D1Geometry *this, const D2D_MATRIX_3X2_F *, float, ID2D1TessellationSink *);
//   HRESULT (__stdcall *CombineWithGeometry)(ID2D1Geometry *this, ID2D1Geometry *, D2D1_COMBINE_MODE, const D2D_MATRIX_3X2_F *, float, ID2D1SimplifiedGeometrySink *);
//   HRESULT (__stdcall *Outline)(ID2D1Geometry *this, const D2D_MATRIX_3X2_F *, float, ID2D1SimplifiedGeometrySink *);
//   HRESULT (__stdcall *ComputeArea)(ID2D1Geometry *this, const D2D_MATRIX_3X2_F *, float, float *);
//   HRESULT (__stdcall *ComputeLength)(ID2D1Geometry *this, const D2D_MATRIX_3X2_F *, float, float *);
//   HRESULT (__stdcall *ComputePointAtLength)(ID2D1Geometry *this, float, const D2D_MATRIX_3X2_F *, float, D2D_POINT_2F *, D2D_POINT_2F *);
//   HRESULT (__stdcall *Widen)(ID2D1Geometry *this, float, ID2D1StrokeStyle *, const D2D_MATRIX_3X2_F *, float, ID2D1SimplifiedGeometrySink *);
//   void (__stdcall *GetRect)(ID2D1RectangleGeometry *this, D2D_RECT_F *);
// };

// /* 6856 */
// struct /*VFT*/ ID2D1RoundedRectangleGeometry_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetFactory)(ID2D1Resource *this, ID2D1Factory **);
//   HRESULT (__stdcall *GetBounds)(ID2D1Geometry *this, const D2D_MATRIX_3X2_F *, D2D_RECT_F *);
//   HRESULT (__stdcall *GetWidenedBounds)(ID2D1Geometry *this, float, ID2D1StrokeStyle *, const D2D_MATRIX_3X2_F *, float, D2D_RECT_F *);
//   HRESULT (__stdcall *StrokeContainsPoint)(ID2D1Geometry *this, D2D_POINT_2F, float, ID2D1StrokeStyle *, const D2D_MATRIX_3X2_F *, float, int *);
//   HRESULT (__stdcall *FillContainsPoint)(ID2D1Geometry *this, D2D_POINT_2F, const D2D_MATRIX_3X2_F *, float, int *);
//   HRESULT (__stdcall *CompareWithGeometry)(ID2D1Geometry *this, ID2D1Geometry *, const D2D_MATRIX_3X2_F *, float, D2D1_GEOMETRY_RELATION *);
//   HRESULT (__stdcall *Simplify)(ID2D1Geometry *this, D2D1_GEOMETRY_SIMPLIFICATION_OPTION, const D2D_MATRIX_3X2_F *, float, ID2D1SimplifiedGeometrySink *);
//   HRESULT (__stdcall *Tessellate)(ID2D1Geometry *this, const D2D_MATRIX_3X2_F *, float, ID2D1TessellationSink *);
//   HRESULT (__stdcall *CombineWithGeometry)(ID2D1Geometry *this, ID2D1Geometry *, D2D1_COMBINE_MODE, const D2D_MATRIX_3X2_F *, float, ID2D1SimplifiedGeometrySink *);
//   HRESULT (__stdcall *Outline)(ID2D1Geometry *this, const D2D_MATRIX_3X2_F *, float, ID2D1SimplifiedGeometrySink *);
//   HRESULT (__stdcall *ComputeArea)(ID2D1Geometry *this, const D2D_MATRIX_3X2_F *, float, float *);
//   HRESULT (__stdcall *ComputeLength)(ID2D1Geometry *this, const D2D_MATRIX_3X2_F *, float, float *);
//   HRESULT (__stdcall *ComputePointAtLength)(ID2D1Geometry *this, float, const D2D_MATRIX_3X2_F *, float, D2D_POINT_2F *, D2D_POINT_2F *);
//   HRESULT (__stdcall *Widen)(ID2D1Geometry *this, float, ID2D1StrokeStyle *, const D2D_MATRIX_3X2_F *, float, ID2D1SimplifiedGeometrySink *);
//   void (__stdcall *GetRoundedRect)(ID2D1RoundedRectangleGeometry *this, D2D1_ROUNDED_RECT *);
// };

// /* 6857 */
// struct /*VFT*/ ID2D1StrokeStyle_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetFactory)(ID2D1Resource *this, ID2D1Factory **);
//   D2D1_CAP_STYLE (__stdcall *GetStartCap)(ID2D1StrokeStyle *this);
//   D2D1_CAP_STYLE (__stdcall *GetEndCap)(ID2D1StrokeStyle *this);
//   D2D1_CAP_STYLE (__stdcall *GetDashCap)(ID2D1StrokeStyle *this);
//   float (__stdcall *GetMiterLimit)(ID2D1StrokeStyle *this);
//   D2D1_LINE_JOIN (__stdcall *GetLineJoin)(ID2D1StrokeStyle *this);
//   float (__stdcall *GetDashOffset)(ID2D1StrokeStyle *this);
//   D2D1_DASH_STYLE (__stdcall *GetDashStyle)(ID2D1StrokeStyle *this);
//   unsigned int (__stdcall *GetDashesCount)(ID2D1StrokeStyle *this);
//   void (__stdcall *GetDashes)(ID2D1StrokeStyle *this, float *, unsigned int);
// };

// /* 6858 */
// struct /*VFT*/ ID2D1TransformedGeometry_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetFactory)(ID2D1Resource *this, ID2D1Factory **);
//   HRESULT (__stdcall *GetBounds)(ID2D1Geometry *this, const D2D_MATRIX_3X2_F *, D2D_RECT_F *);
//   HRESULT (__stdcall *GetWidenedBounds)(ID2D1Geometry *this, float, ID2D1StrokeStyle *, const D2D_MATRIX_3X2_F *, float, D2D_RECT_F *);
//   HRESULT (__stdcall *StrokeContainsPoint)(ID2D1Geometry *this, D2D_POINT_2F, float, ID2D1StrokeStyle *, const D2D_MATRIX_3X2_F *, float, int *);
//   HRESULT (__stdcall *FillContainsPoint)(ID2D1Geometry *this, D2D_POINT_2F, const D2D_MATRIX_3X2_F *, float, int *);
//   HRESULT (__stdcall *CompareWithGeometry)(ID2D1Geometry *this, ID2D1Geometry *, const D2D_MATRIX_3X2_F *, float, D2D1_GEOMETRY_RELATION *);
//   HRESULT (__stdcall *Simplify)(ID2D1Geometry *this, D2D1_GEOMETRY_SIMPLIFICATION_OPTION, const D2D_MATRIX_3X2_F *, float, ID2D1SimplifiedGeometrySink *);
//   HRESULT (__stdcall *Tessellate)(ID2D1Geometry *this, const D2D_MATRIX_3X2_F *, float, ID2D1TessellationSink *);
//   HRESULT (__stdcall *CombineWithGeometry)(ID2D1Geometry *this, ID2D1Geometry *, D2D1_COMBINE_MODE, const D2D_MATRIX_3X2_F *, float, ID2D1SimplifiedGeometrySink *);
//   HRESULT (__stdcall *Outline)(ID2D1Geometry *this, const D2D_MATRIX_3X2_F *, float, ID2D1SimplifiedGeometrySink *);
//   HRESULT (__stdcall *ComputeArea)(ID2D1Geometry *this, const D2D_MATRIX_3X2_F *, float, float *);
//   HRESULT (__stdcall *ComputeLength)(ID2D1Geometry *this, const D2D_MATRIX_3X2_F *, float, float *);
//   HRESULT (__stdcall *ComputePointAtLength)(ID2D1Geometry *this, float, const D2D_MATRIX_3X2_F *, float, D2D_POINT_2F *, D2D_POINT_2F *);
//   HRESULT (__stdcall *Widen)(ID2D1Geometry *this, float, ID2D1StrokeStyle *, const D2D_MATRIX_3X2_F *, float, ID2D1SimplifiedGeometrySink *);
//   void (__stdcall *GetSourceGeometry)(ID2D1TransformedGeometry *this, ID2D1Geometry **);
//   void (__stdcall *GetTransform)(ID2D1TransformedGeometry *this, D2D_MATRIX_3X2_F *);
// };

// /* 6859 */
// struct /*VFT*/ ID3D10Asynchronous_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D10DeviceChild *this, ID3D10Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D10DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D10DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D10DeviceChild *this, const _GUID *, const IUnknown *);
//   void (__stdcall *Begin)(ID3D10Asynchronous *this);
//   void (__stdcall *End)(ID3D10Asynchronous *this);
//   HRESULT (__stdcall *GetData)(ID3D10Asynchronous *this, void *, unsigned int, unsigned int);
//   unsigned int (__stdcall *GetDataSize)(ID3D10Asynchronous *this);
// };

// /* 6860 */
// struct /*VFT*/ ID3D10BlendState_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D10DeviceChild *this, ID3D10Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D10DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D10DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D10DeviceChild *this, const _GUID *, const IUnknown *);
//   void (__stdcall *GetDesc)(ID3D10BlendState *this, D3D10_BLEND_DESC *);
// };

// /* 6861 */
// struct /*VFT*/ ID3D10Counter_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D10DeviceChild *this, ID3D10Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D10DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D10DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D10DeviceChild *this, const _GUID *, const IUnknown *);
//   void (__stdcall *Begin)(ID3D10Asynchronous *this);
//   void (__stdcall *End)(ID3D10Asynchronous *this);
//   HRESULT (__stdcall *GetData)(ID3D10Asynchronous *this, void *, unsigned int, unsigned int);
//   unsigned int (__stdcall *GetDataSize)(ID3D10Asynchronous *this);
//   void (__stdcall *GetDesc)(ID3D10Counter *this, D3D10_COUNTER_DESC *);
// };

// /* 6862 */
// struct /*VFT*/ ID3D10DepthStencilState_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D10DeviceChild *this, ID3D10Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D10DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D10DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D10DeviceChild *this, const _GUID *, const IUnknown *);
//   void (__stdcall *GetDesc)(ID3D10DepthStencilState *this, D3D10_DEPTH_STENCIL_DESC *);
// };

// /* 6863 */
// struct /*VFT*/ ID3D10Query_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D10DeviceChild *this, ID3D10Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D10DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D10DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D10DeviceChild *this, const _GUID *, const IUnknown *);
//   void (__stdcall *Begin)(ID3D10Asynchronous *this);
//   void (__stdcall *End)(ID3D10Asynchronous *this);
//   HRESULT (__stdcall *GetData)(ID3D10Asynchronous *this, void *, unsigned int, unsigned int);
//   unsigned int (__stdcall *GetDataSize)(ID3D10Asynchronous *this);
//   void (__stdcall *GetDesc)(ID3D10Query *this, D3D10_QUERY_DESC *);
// };

// /* 6864 */
// struct /*VFT*/ ID3D10RasterizerState_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D10DeviceChild *this, ID3D10Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D10DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D10DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D10DeviceChild *this, const _GUID *, const IUnknown *);
//   void (__stdcall *GetDesc)(ID3D10RasterizerState *this, D3D10_RASTERIZER_DESC *);
// };

// /* 6865 */
// struct /*VFT*/ ID3D10Resource_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D10DeviceChild *this, ID3D10Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D10DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D10DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D10DeviceChild *this, const _GUID *, const IUnknown *);
//   void (__stdcall *GetType)(ID3D10Resource *this, D3D10_RESOURCE_DIMENSION *);
//   void (__stdcall *SetEvictionPriority)(ID3D10Resource *this, unsigned int);
//   unsigned int (__stdcall *GetEvictionPriority)(ID3D10Resource *this);
// };

// /* 6866 */
// struct /*VFT*/ ID3D10SamplerState_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D10DeviceChild *this, ID3D10Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D10DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D10DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D10DeviceChild *this, const _GUID *, const IUnknown *);
//   void (__stdcall *GetDesc)(ID3D10SamplerState *this, D3D10_SAMPLER_DESC *);
// };

// /* 6867 */
// struct /*VFT*/ ID3D10Texture1D_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D10DeviceChild *this, ID3D10Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D10DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D10DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D10DeviceChild *this, const _GUID *, const IUnknown *);
//   void (__stdcall *GetType)(ID3D10Resource *this, D3D10_RESOURCE_DIMENSION *);
//   void (__stdcall *SetEvictionPriority)(ID3D10Resource *this, unsigned int);
//   unsigned int (__stdcall *GetEvictionPriority)(ID3D10Resource *this);
//   HRESULT (__stdcall *Map)(ID3D10Texture1D *this, unsigned int, D3D10_MAP, unsigned int, void **);
//   void (__stdcall *Unmap)(ID3D10Texture1D *this, unsigned int);
//   void (__stdcall *GetDesc)(ID3D10Texture1D *this, D3D10_TEXTURE1D_DESC *);
// };

// /* 6868 */
// struct /*VFT*/ ID3D10Texture2D_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D10DeviceChild *this, ID3D10Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D10DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D10DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D10DeviceChild *this, const _GUID *, const IUnknown *);
//   void (__stdcall *GetType)(ID3D10Resource *this, D3D10_RESOURCE_DIMENSION *);
//   void (__stdcall *SetEvictionPriority)(ID3D10Resource *this, unsigned int);
//   unsigned int (__stdcall *GetEvictionPriority)(ID3D10Resource *this);
//   HRESULT (__stdcall *Map)(ID3D10Texture2D *this, unsigned int, D3D10_MAP, unsigned int, D3D10_MAPPED_TEXTURE2D *);
//   void (__stdcall *Unmap)(ID3D10Texture2D *this, unsigned int);
//   void (__stdcall *GetDesc)(ID3D10Texture2D *this, D3D10_TEXTURE2D_DESC *);
// };

// /* 6869 */
// struct /*VFT*/ ID3D10Texture3D_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D10DeviceChild *this, ID3D10Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D10DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D10DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D10DeviceChild *this, const _GUID *, const IUnknown *);
//   void (__stdcall *GetType)(ID3D10Resource *this, D3D10_RESOURCE_DIMENSION *);
//   void (__stdcall *SetEvictionPriority)(ID3D10Resource *this, unsigned int);
//   unsigned int (__stdcall *GetEvictionPriority)(ID3D10Resource *this);
//   HRESULT (__stdcall *Map)(ID3D10Texture3D *this, unsigned int, D3D10_MAP, unsigned int, D3D10_MAPPED_TEXTURE3D *);
//   void (__stdcall *Unmap)(ID3D10Texture3D *this, unsigned int);
//   void (__stdcall *GetDesc)(ID3D10Texture3D *this, D3D10_TEXTURE3D_DESC *);
// };

// /* 6870 */
// struct /*VFT*/ ID3D10View_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D10DeviceChild *this, ID3D10Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D10DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D10DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D10DeviceChild *this, const _GUID *, const IUnknown *);
//   void (__stdcall *GetResource)(ID3D10View *this, ID3D10Resource **);
// };

// /* 6871 */
// struct /*VFT*/ ID3D11Asynchronous_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D11DeviceChild *this, ID3D11Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D11DeviceChild *this, const _GUID *, const IUnknown *);
//   unsigned int (__stdcall *GetDataSize)(ID3D11Asynchronous *this);
// };

// /* 6872 */
// struct /*VFT*/ ID3D11BlendState_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D11DeviceChild *this, ID3D11Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D11DeviceChild *this, const _GUID *, const IUnknown *);
//   void (__stdcall *GetDesc)(ID3D11BlendState *this, D3D11_BLEND_DESC *);
// };

// /* 6873 */
// struct /*VFT*/ ID3D11ClassInstance_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D11DeviceChild *this, ID3D11Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D11DeviceChild *this, const _GUID *, const IUnknown *);
//   void (__stdcall *GetClassLinkage)(ID3D11ClassInstance *this, ID3D11ClassLinkage **);
//   void (__stdcall *GetDesc)(ID3D11ClassInstance *this, D3D11_CLASS_INSTANCE_DESC *);
//   void (__stdcall *GetInstanceName)(ID3D11ClassInstance *this, char *, unsigned int *);
//   void (__stdcall *GetTypeName)(ID3D11ClassInstance *this, char *, unsigned int *);
// };

// /* 6874 */
// struct /*VFT*/ ID3D11ClassLinkage_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D11DeviceChild *this, ID3D11Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D11DeviceChild *this, const _GUID *, const IUnknown *);
//   HRESULT (__stdcall *GetClassInstance)(ID3D11ClassLinkage *this, const char *, unsigned int, ID3D11ClassInstance **);
//   HRESULT (__stdcall *CreateClassInstance)(ID3D11ClassLinkage *this, const char *, unsigned int, unsigned int, unsigned int, unsigned int, ID3D11ClassInstance **);
// };

// /* 6875 */
// struct /*VFT*/ ID3D11CommandList_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D11DeviceChild *this, ID3D11Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D11DeviceChild *this, const _GUID *, const IUnknown *);
//   unsigned int (__stdcall *GetContextFlags)(ID3D11CommandList *this);
// };

// /* 6876 */
// struct /*VFT*/ ID3D11Counter_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D11DeviceChild *this, ID3D11Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D11DeviceChild *this, const _GUID *, const IUnknown *);
//   unsigned int (__stdcall *GetDataSize)(ID3D11Asynchronous *this);
//   void (__stdcall *GetDesc)(ID3D11Counter *this, D3D11_COUNTER_DESC *);
// };

// /* 6877 */
// struct /*VFT*/ ID3D11DepthStencilState_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D11DeviceChild *this, ID3D11Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D11DeviceChild *this, const _GUID *, const IUnknown *);
//   void (__stdcall *GetDesc)(ID3D11DepthStencilState *this, D3D11_DEPTH_STENCIL_DESC *);
// };

// /* 6878 */
// struct /*VFT*/ ID3D11DeviceContext_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D11DeviceChild *this, ID3D11Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D11DeviceChild *this, const _GUID *, const IUnknown *);
//   void (__stdcall *VSSetConstantBuffers)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11Buffer *const *);
//   void (__stdcall *PSSetShaderResources)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11ShaderResourceView *const *);
//   void (__stdcall *PSSetShader)(ID3D11DeviceContext *this, ID3D11PixelShader *, ID3D11ClassInstance *const *, unsigned int);
//   void (__stdcall *PSSetSamplers)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11SamplerState *const *);
//   void (__stdcall *VSSetShader)(ID3D11DeviceContext *this, ID3D11VertexShader *, ID3D11ClassInstance *const *, unsigned int);
//   void (__stdcall *DrawIndexed)(ID3D11DeviceContext *this, unsigned int, unsigned int, int);
//   void (__stdcall *Draw)(ID3D11DeviceContext *this, unsigned int, unsigned int);
//   HRESULT (__stdcall *Map)(ID3D11DeviceContext *this, ID3D11Resource *, unsigned int, D3D11_MAP, unsigned int, D3D11_MAPPED_SUBRESOURCE *);
//   void (__stdcall *Unmap)(ID3D11DeviceContext *this, ID3D11Resource *, unsigned int);
//   void (__stdcall *PSSetConstantBuffers)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11Buffer *const *);
//   void (__stdcall *IASetInputLayout)(ID3D11DeviceContext *this, ID3D11InputLayout *);
//   void (__stdcall *IASetVertexBuffers)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11Buffer *const *, const unsigned int *, const unsigned int *);
//   void (__stdcall *IASetIndexBuffer)(ID3D11DeviceContext *this, ID3D11Buffer *, DXGI_FORMAT, unsigned int);
//   void (__stdcall *DrawIndexedInstanced)(ID3D11DeviceContext *this, unsigned int, unsigned int, unsigned int, int, unsigned int);
//   void (__stdcall *DrawInstanced)(ID3D11DeviceContext *this, unsigned int, unsigned int, unsigned int, unsigned int);
//   void (__stdcall *GSSetConstantBuffers)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11Buffer *const *);
//   void (__stdcall *GSSetShader)(ID3D11DeviceContext *this, ID3D11GeometryShader *, ID3D11ClassInstance *const *, unsigned int);
//   void (__stdcall *IASetPrimitiveTopology)(ID3D11DeviceContext *this, D3D_PRIMITIVE_TOPOLOGY);
//   void (__stdcall *VSSetShaderResources)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11ShaderResourceView *const *);
//   void (__stdcall *VSSetSamplers)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11SamplerState *const *);
//   void (__stdcall *Begin)(ID3D11DeviceContext *this, ID3D11Asynchronous *);
//   void (__stdcall *End)(ID3D11DeviceContext *this, ID3D11Asynchronous *);
//   HRESULT (__stdcall *GetData)(ID3D11DeviceContext *this, ID3D11Asynchronous *, void *, unsigned int, unsigned int);
//   void (__stdcall *SetPredication)(ID3D11DeviceContext *this, ID3D11Predicate *, int);
//   void (__stdcall *GSSetShaderResources)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11ShaderResourceView *const *);
//   void (__stdcall *GSSetSamplers)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11SamplerState *const *);
//   void (__stdcall *OMSetRenderTargets)(ID3D11DeviceContext *this, unsigned int, ID3D11RenderTargetView *const *, ID3D11DepthStencilView *);
//   void (__stdcall *OMSetRenderTargetsAndUnorderedAccessViews)(ID3D11DeviceContext *this, unsigned int, ID3D11RenderTargetView *const *, ID3D11DepthStencilView *, unsigned int, unsigned int, ID3D11UnorderedAccessView *const *, const unsigned int *);
//   void (__stdcall *OMSetBlendState)(ID3D11DeviceContext *this, ID3D11BlendState *, const float *, unsigned int);
//   void (__stdcall *OMSetDepthStencilState)(ID3D11DeviceContext *this, ID3D11DepthStencilState *, unsigned int);
//   void (__stdcall *SOSetTargets)(ID3D11DeviceContext *this, unsigned int, ID3D11Buffer *const *, const unsigned int *);
//   void (__stdcall *DrawAuto)(ID3D11DeviceContext *this);
//   void (__stdcall *DrawIndexedInstancedIndirect)(ID3D11DeviceContext *this, ID3D11Buffer *, unsigned int);
//   void (__stdcall *DrawInstancedIndirect)(ID3D11DeviceContext *this, ID3D11Buffer *, unsigned int);
//   void (__stdcall *Dispatch)(ID3D11DeviceContext *this, unsigned int, unsigned int, unsigned int);
//   void (__stdcall *DispatchIndirect)(ID3D11DeviceContext *this, ID3D11Buffer *, unsigned int);
//   void (__stdcall *RSSetState)(ID3D11DeviceContext *this, ID3D11RasterizerState *);
//   void (__stdcall *RSSetViewports)(ID3D11DeviceContext *this, unsigned int, const D3D11_VIEWPORT *);
//   void (__stdcall *RSSetScissorRects)(ID3D11DeviceContext *this, unsigned int, const tagRECT *);
//   void (__stdcall *CopySubresourceRegion)(ID3D11DeviceContext *this, ID3D11Resource *, unsigned int, unsigned int, unsigned int, unsigned int, ID3D11Resource *, unsigned int, const D3D11_BOX *);
//   void (__stdcall *CopyResource)(ID3D11DeviceContext *this, ID3D11Resource *, ID3D11Resource *);
//   void (__stdcall *UpdateSubresource)(ID3D11DeviceContext *this, ID3D11Resource *, unsigned int, const D3D11_BOX *, const void *, unsigned int, unsigned int);
//   void (__stdcall *CopyStructureCount)(ID3D11DeviceContext *this, ID3D11Buffer *, unsigned int, ID3D11UnorderedAccessView *);
//   void (__stdcall *ClearRenderTargetView)(ID3D11DeviceContext *this, ID3D11RenderTargetView *, const float *);
//   void (__stdcall *ClearUnorderedAccessViewUint)(ID3D11DeviceContext *this, ID3D11UnorderedAccessView *, const unsigned int *);
//   void (__stdcall *ClearUnorderedAccessViewFloat)(ID3D11DeviceContext *this, ID3D11UnorderedAccessView *, const float *);
//   void (__stdcall *ClearDepthStencilView)(ID3D11DeviceContext *this, ID3D11DepthStencilView *, unsigned int, float, unsigned __int8);
//   void (__stdcall *GenerateMips)(ID3D11DeviceContext *this, ID3D11ShaderResourceView *);
//   void (__stdcall *SetResourceMinLOD)(ID3D11DeviceContext *this, ID3D11Resource *, float);
//   float (__stdcall *GetResourceMinLOD)(ID3D11DeviceContext *this, ID3D11Resource *);
//   void (__stdcall *ResolveSubresource)(ID3D11DeviceContext *this, ID3D11Resource *, unsigned int, ID3D11Resource *, unsigned int, DXGI_FORMAT);
//   void (__stdcall *ExecuteCommandList)(ID3D11DeviceContext *this, ID3D11CommandList *, int);
//   void (__stdcall *HSSetShaderResources)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11ShaderResourceView *const *);
//   void (__stdcall *HSSetShader)(ID3D11DeviceContext *this, ID3D11HullShader *, ID3D11ClassInstance *const *, unsigned int);
//   void (__stdcall *HSSetSamplers)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11SamplerState *const *);
//   void (__stdcall *HSSetConstantBuffers)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11Buffer *const *);
//   void (__stdcall *DSSetShaderResources)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11ShaderResourceView *const *);
//   void (__stdcall *DSSetShader)(ID3D11DeviceContext *this, ID3D11DomainShader *, ID3D11ClassInstance *const *, unsigned int);
//   void (__stdcall *DSSetSamplers)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11SamplerState *const *);
//   void (__stdcall *DSSetConstantBuffers)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11Buffer *const *);
//   void (__stdcall *CSSetShaderResources)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11ShaderResourceView *const *);
//   void (__stdcall *CSSetUnorderedAccessViews)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11UnorderedAccessView *const *, const unsigned int *);
//   void (__stdcall *CSSetShader)(ID3D11DeviceContext *this, ID3D11ComputeShader *, ID3D11ClassInstance *const *, unsigned int);
//   void (__stdcall *CSSetSamplers)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11SamplerState *const *);
//   void (__stdcall *CSSetConstantBuffers)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11Buffer *const *);
//   void (__stdcall *VSGetConstantBuffers)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11Buffer **);
//   void (__stdcall *PSGetShaderResources)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11ShaderResourceView **);
//   void (__stdcall *PSGetShader)(ID3D11DeviceContext *this, ID3D11PixelShader **, ID3D11ClassInstance **, unsigned int *);
//   void (__stdcall *PSGetSamplers)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11SamplerState **);
//   void (__stdcall *VSGetShader)(ID3D11DeviceContext *this, ID3D11VertexShader **, ID3D11ClassInstance **, unsigned int *);
//   void (__stdcall *PSGetConstantBuffers)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11Buffer **);
//   void (__stdcall *IAGetInputLayout)(ID3D11DeviceContext *this, ID3D11InputLayout **);
//   void (__stdcall *IAGetVertexBuffers)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11Buffer **, unsigned int *, unsigned int *);
//   void (__stdcall *IAGetIndexBuffer)(ID3D11DeviceContext *this, ID3D11Buffer **, DXGI_FORMAT *, unsigned int *);
//   void (__stdcall *GSGetConstantBuffers)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11Buffer **);
//   void (__stdcall *GSGetShader)(ID3D11DeviceContext *this, ID3D11GeometryShader **, ID3D11ClassInstance **, unsigned int *);
//   void (__stdcall *IAGetPrimitiveTopology)(ID3D11DeviceContext *this, D3D_PRIMITIVE_TOPOLOGY *);
//   void (__stdcall *VSGetShaderResources)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11ShaderResourceView **);
//   void (__stdcall *VSGetSamplers)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11SamplerState **);
//   void (__stdcall *GetPredication)(ID3D11DeviceContext *this, ID3D11Predicate **, int *);
//   void (__stdcall *GSGetShaderResources)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11ShaderResourceView **);
//   void (__stdcall *GSGetSamplers)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11SamplerState **);
//   void (__stdcall *OMGetRenderTargets)(ID3D11DeviceContext *this, unsigned int, ID3D11RenderTargetView **, ID3D11DepthStencilView **);
//   void (__stdcall *OMGetRenderTargetsAndUnorderedAccessViews)(ID3D11DeviceContext *this, unsigned int, ID3D11RenderTargetView **, ID3D11DepthStencilView **, unsigned int, unsigned int, ID3D11UnorderedAccessView **);
//   void (__stdcall *OMGetBlendState)(ID3D11DeviceContext *this, ID3D11BlendState **, float *, unsigned int *);
//   void (__stdcall *OMGetDepthStencilState)(ID3D11DeviceContext *this, ID3D11DepthStencilState **, unsigned int *);
//   void (__stdcall *SOGetTargets)(ID3D11DeviceContext *this, unsigned int, ID3D11Buffer **);
//   void (__stdcall *RSGetState)(ID3D11DeviceContext *this, ID3D11RasterizerState **);
//   void (__stdcall *RSGetViewports)(ID3D11DeviceContext *this, unsigned int *, D3D11_VIEWPORT *);
//   void (__stdcall *RSGetScissorRects)(ID3D11DeviceContext *this, unsigned int *, tagRECT *);
//   void (__stdcall *HSGetShaderResources)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11ShaderResourceView **);
//   void (__stdcall *HSGetShader)(ID3D11DeviceContext *this, ID3D11HullShader **, ID3D11ClassInstance **, unsigned int *);
//   void (__stdcall *HSGetSamplers)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11SamplerState **);
//   void (__stdcall *HSGetConstantBuffers)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11Buffer **);
//   void (__stdcall *DSGetShaderResources)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11ShaderResourceView **);
//   void (__stdcall *DSGetShader)(ID3D11DeviceContext *this, ID3D11DomainShader **, ID3D11ClassInstance **, unsigned int *);
//   void (__stdcall *DSGetSamplers)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11SamplerState **);
//   void (__stdcall *DSGetConstantBuffers)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11Buffer **);
//   void (__stdcall *CSGetShaderResources)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11ShaderResourceView **);
//   void (__stdcall *CSGetUnorderedAccessViews)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11UnorderedAccessView **);
//   void (__stdcall *CSGetShader)(ID3D11DeviceContext *this, ID3D11ComputeShader **, ID3D11ClassInstance **, unsigned int *);
//   void (__stdcall *CSGetSamplers)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11SamplerState **);
//   void (__stdcall *CSGetConstantBuffers)(ID3D11DeviceContext *this, unsigned int, unsigned int, ID3D11Buffer **);
//   void (__stdcall *ClearState)(ID3D11DeviceContext *this);
//   void (__stdcall *Flush)(ID3D11DeviceContext *this);
//   D3D11_DEVICE_CONTEXT_TYPE (__stdcall *GetType)(ID3D11DeviceContext *this);
//   unsigned int (__stdcall *GetContextFlags)(ID3D11DeviceContext *this);
//   HRESULT (__stdcall *FinishCommandList)(ID3D11DeviceContext *this, int, ID3D11CommandList **);
// };

// /* 6879 */
// struct /*VFT*/ ID3D11Query_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D11DeviceChild *this, ID3D11Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D11DeviceChild *this, const _GUID *, const IUnknown *);
//   unsigned int (__stdcall *GetDataSize)(ID3D11Asynchronous *this);
//   void (__stdcall *GetDesc)(ID3D11Query *this, D3D11_QUERY_DESC *);
// };

// /* 6880 */
// struct /*VFT*/ ID3D11RasterizerState_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D11DeviceChild *this, ID3D11Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D11DeviceChild *this, const _GUID *, const IUnknown *);
//   void (__stdcall *GetDesc)(ID3D11RasterizerState *this, D3D11_RASTERIZER_DESC *);
// };

// /* 6881 */
// struct /*VFT*/ ID3D11Resource_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D11DeviceChild *this, ID3D11Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D11DeviceChild *this, const _GUID *, const IUnknown *);
//   void (__stdcall *GetType)(ID3D11Resource *this, D3D11_RESOURCE_DIMENSION *);
//   void (__stdcall *SetEvictionPriority)(ID3D11Resource *this, unsigned int);
//   unsigned int (__stdcall *GetEvictionPriority)(ID3D11Resource *this);
// };

// /* 6882 */
// struct /*VFT*/ ID3D11SamplerState_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D11DeviceChild *this, ID3D11Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D11DeviceChild *this, const _GUID *, const IUnknown *);
//   void (__stdcall *GetDesc)(ID3D11SamplerState *this, D3D11_SAMPLER_DESC *);
// };

// /* 6883 */
// struct /*VFT*/ ID3D11Texture1D_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D11DeviceChild *this, ID3D11Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D11DeviceChild *this, const _GUID *, const IUnknown *);
//   void (__stdcall *GetType)(ID3D11Resource *this, D3D11_RESOURCE_DIMENSION *);
//   void (__stdcall *SetEvictionPriority)(ID3D11Resource *this, unsigned int);
//   unsigned int (__stdcall *GetEvictionPriority)(ID3D11Resource *this);
//   void (__stdcall *GetDesc)(ID3D11Texture1D *this, D3D11_TEXTURE1D_DESC *);
// };

// /* 6884 */
// struct /*VFT*/ ID3D11Texture2D_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D11DeviceChild *this, ID3D11Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D11DeviceChild *this, const _GUID *, const IUnknown *);
//   void (__stdcall *GetType)(ID3D11Resource *this, D3D11_RESOURCE_DIMENSION *);
//   void (__stdcall *SetEvictionPriority)(ID3D11Resource *this, unsigned int);
//   unsigned int (__stdcall *GetEvictionPriority)(ID3D11Resource *this);
//   void (__stdcall *GetDesc)(ID3D11Texture2D *this, D3D11_TEXTURE2D_DESC *);
// };

// /* 6885 */
// struct /*VFT*/ ID3D11Texture3D_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D11DeviceChild *this, ID3D11Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D11DeviceChild *this, const _GUID *, const IUnknown *);
//   void (__stdcall *GetType)(ID3D11Resource *this, D3D11_RESOURCE_DIMENSION *);
//   void (__stdcall *SetEvictionPriority)(ID3D11Resource *this, unsigned int);
//   unsigned int (__stdcall *GetEvictionPriority)(ID3D11Resource *this);
//   void (__stdcall *GetDesc)(ID3D11Texture3D *this, D3D11_TEXTURE3D_DESC *);
// };

// /* 6886 */
// struct /*VFT*/ ID3D11View_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D11DeviceChild *this, ID3D11Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D11DeviceChild *this, const _GUID *, const IUnknown *);
//   void (__stdcall *GetResource)(ID3D11View *this, ID3D11Resource **);
// };

// /* 6887 */
// struct /*VFT*/ IDWriteFontFamily_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetFontCollection)(IDWriteFontList *this, IDWriteFontCollection **);
//   unsigned int (__stdcall *GetFontCount)(IDWriteFontList *this);
//   HRESULT (__stdcall *GetFont)(IDWriteFontList *this, unsigned int, IDWriteFont **);
//   HRESULT (__stdcall *GetFamilyNames)(IDWriteFontFamily *this, IDWriteLocalizedStrings **);
//   HRESULT (__stdcall *GetFirstMatchingFont)(IDWriteFontFamily *this, DWRITE_FONT_WEIGHT, DWRITE_FONT_STRETCH, DWRITE_FONT_STYLE, IDWriteFont **);
//   HRESULT (__stdcall *GetMatchingFonts)(IDWriteFontFamily *this, DWRITE_FONT_WEIGHT, DWRITE_FONT_STRETCH, DWRITE_FONT_STYLE, IDWriteFontList **);
// };

// /* 6888 */
// struct /*VFT*/ IDirect3DBaseTexture9_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetDevice)(IDirect3DResource9 *this, IDirect3DDevice9 **);
//   HRESULT (__stdcall *SetPrivateData)(IDirect3DResource9 *this, const _GUID *, const void *, unsigned int, unsigned int);
//   HRESULT (__stdcall *GetPrivateData)(IDirect3DResource9 *this, const _GUID *, void *, unsigned int *);
//   HRESULT (__stdcall *FreePrivateData)(IDirect3DResource9 *this, const _GUID *);
//   unsigned int (__stdcall *SetPriority)(IDirect3DResource9 *this, unsigned int);
//   unsigned int (__stdcall *GetPriority)(IDirect3DResource9 *this);
//   void (__stdcall *PreLoad)(IDirect3DResource9 *this);
//   _D3DRESOURCETYPE (__stdcall *GetType)(IDirect3DResource9 *this);
//   unsigned int (__stdcall *SetLOD)(IDirect3DBaseTexture9 *this, unsigned int);
//   unsigned int (__stdcall *GetLOD)(IDirect3DBaseTexture9 *this);
//   unsigned int (__stdcall *GetLevelCount)(IDirect3DBaseTexture9 *this);
//   HRESULT (__stdcall *SetAutoGenFilterType)(IDirect3DBaseTexture9 *this, _D3DTEXTUREFILTERTYPE);
//   _D3DTEXTUREFILTERTYPE (__stdcall *GetAutoGenFilterType)(IDirect3DBaseTexture9 *this);
//   void (__stdcall *GenerateMipSubLevels)(IDirect3DBaseTexture9 *this);
// };

// /* 6889 */
// struct /*VFT*/ IDirect3DCubeTexture9_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetDevice)(IDirect3DResource9 *this, IDirect3DDevice9 **);
//   HRESULT (__stdcall *SetPrivateData)(IDirect3DResource9 *this, const _GUID *, const void *, unsigned int, unsigned int);
//   HRESULT (__stdcall *GetPrivateData)(IDirect3DResource9 *this, const _GUID *, void *, unsigned int *);
//   HRESULT (__stdcall *FreePrivateData)(IDirect3DResource9 *this, const _GUID *);
//   unsigned int (__stdcall *SetPriority)(IDirect3DResource9 *this, unsigned int);
//   unsigned int (__stdcall *GetPriority)(IDirect3DResource9 *this);
//   void (__stdcall *PreLoad)(IDirect3DResource9 *this);
//   _D3DRESOURCETYPE (__stdcall *GetType)(IDirect3DResource9 *this);
//   unsigned int (__stdcall *SetLOD)(IDirect3DBaseTexture9 *this, unsigned int);
//   unsigned int (__stdcall *GetLOD)(IDirect3DBaseTexture9 *this);
//   unsigned int (__stdcall *GetLevelCount)(IDirect3DBaseTexture9 *this);
//   HRESULT (__stdcall *SetAutoGenFilterType)(IDirect3DBaseTexture9 *this, _D3DTEXTUREFILTERTYPE);
//   _D3DTEXTUREFILTERTYPE (__stdcall *GetAutoGenFilterType)(IDirect3DBaseTexture9 *this);
//   void (__stdcall *GenerateMipSubLevels)(IDirect3DBaseTexture9 *this);
//   HRESULT (__stdcall *GetLevelDesc)(IDirect3DCubeTexture9 *this, unsigned int, _D3DSURFACE_DESC *);
//   HRESULT (__stdcall *GetCubeMapSurface)(IDirect3DCubeTexture9 *this, _D3DCUBEMAP_FACES, unsigned int, IDirect3DSurface9 **);
//   HRESULT (__stdcall *LockRect)(IDirect3DCubeTexture9 *this, _D3DCUBEMAP_FACES, unsigned int, _D3DLOCKED_RECT *, const tagRECT *, unsigned int);
//   HRESULT (__stdcall *UnlockRect)(IDirect3DCubeTexture9 *this, _D3DCUBEMAP_FACES, unsigned int);
//   HRESULT (__stdcall *AddDirtyRect)(IDirect3DCubeTexture9 *this, _D3DCUBEMAP_FACES, const tagRECT *);
// };

// /* 6890 */
// struct /*VFT*/ IDirect3DIndexBuffer9_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetDevice)(IDirect3DResource9 *this, IDirect3DDevice9 **);
//   HRESULT (__stdcall *SetPrivateData)(IDirect3DResource9 *this, const _GUID *, const void *, unsigned int, unsigned int);
//   HRESULT (__stdcall *GetPrivateData)(IDirect3DResource9 *this, const _GUID *, void *, unsigned int *);
//   HRESULT (__stdcall *FreePrivateData)(IDirect3DResource9 *this, const _GUID *);
//   unsigned int (__stdcall *SetPriority)(IDirect3DResource9 *this, unsigned int);
//   unsigned int (__stdcall *GetPriority)(IDirect3DResource9 *this);
//   void (__stdcall *PreLoad)(IDirect3DResource9 *this);
//   _D3DRESOURCETYPE (__stdcall *GetType)(IDirect3DResource9 *this);
//   HRESULT (__stdcall *Lock)(IDirect3DIndexBuffer9 *this, unsigned int, unsigned int, void **, unsigned int);
//   HRESULT (__stdcall *Unlock)(IDirect3DIndexBuffer9 *this);
//   HRESULT (__stdcall *GetDesc)(IDirect3DIndexBuffer9 *this, _D3DINDEXBUFFER_DESC *);
// };

// /* 6891 */
// struct /*VFT*/ IDirect3DSurface9_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetDevice)(IDirect3DResource9 *this, IDirect3DDevice9 **);
//   HRESULT (__stdcall *SetPrivateData)(IDirect3DResource9 *this, const _GUID *, const void *, unsigned int, unsigned int);
//   HRESULT (__stdcall *GetPrivateData)(IDirect3DResource9 *this, const _GUID *, void *, unsigned int *);
//   HRESULT (__stdcall *FreePrivateData)(IDirect3DResource9 *this, const _GUID *);
//   unsigned int (__stdcall *SetPriority)(IDirect3DResource9 *this, unsigned int);
//   unsigned int (__stdcall *GetPriority)(IDirect3DResource9 *this);
//   void (__stdcall *PreLoad)(IDirect3DResource9 *this);
//   _D3DRESOURCETYPE (__stdcall *GetType)(IDirect3DResource9 *this);
//   HRESULT (__stdcall *GetContainer)(IDirect3DSurface9 *this, const _GUID *, void **);
//   HRESULT (__stdcall *GetDesc)(IDirect3DSurface9 *this, _D3DSURFACE_DESC *);
//   HRESULT (__stdcall *LockRect)(IDirect3DSurface9 *this, _D3DLOCKED_RECT *, const tagRECT *, unsigned int);
//   HRESULT (__stdcall *UnlockRect)(IDirect3DSurface9 *this);
//   HRESULT (__stdcall *GetDC)(IDirect3DSurface9 *this, HDC__ **);
//   HRESULT (__stdcall *ReleaseDC)(IDirect3DSurface9 *this, HDC__ *);
// };

// /* 6892 */
// struct /*VFT*/ IDirect3DTexture9_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetDevice)(IDirect3DResource9 *this, IDirect3DDevice9 **);
//   HRESULT (__stdcall *SetPrivateData)(IDirect3DResource9 *this, const _GUID *, const void *, unsigned int, unsigned int);
//   HRESULT (__stdcall *GetPrivateData)(IDirect3DResource9 *this, const _GUID *, void *, unsigned int *);
//   HRESULT (__stdcall *FreePrivateData)(IDirect3DResource9 *this, const _GUID *);
//   unsigned int (__stdcall *SetPriority)(IDirect3DResource9 *this, unsigned int);
//   unsigned int (__stdcall *GetPriority)(IDirect3DResource9 *this);
//   void (__stdcall *PreLoad)(IDirect3DResource9 *this);
//   _D3DRESOURCETYPE (__stdcall *GetType)(IDirect3DResource9 *this);
//   unsigned int (__stdcall *SetLOD)(IDirect3DBaseTexture9 *this, unsigned int);
//   unsigned int (__stdcall *GetLOD)(IDirect3DBaseTexture9 *this);
//   unsigned int (__stdcall *GetLevelCount)(IDirect3DBaseTexture9 *this);
//   HRESULT (__stdcall *SetAutoGenFilterType)(IDirect3DBaseTexture9 *this, _D3DTEXTUREFILTERTYPE);
//   _D3DTEXTUREFILTERTYPE (__stdcall *GetAutoGenFilterType)(IDirect3DBaseTexture9 *this);
//   void (__stdcall *GenerateMipSubLevels)(IDirect3DBaseTexture9 *this);
//   HRESULT (__stdcall *GetLevelDesc)(IDirect3DTexture9 *this, unsigned int, _D3DSURFACE_DESC *);
//   HRESULT (__stdcall *GetSurfaceLevel)(IDirect3DTexture9 *this, unsigned int, IDirect3DSurface9 **);
//   HRESULT (__stdcall *LockRect)(IDirect3DTexture9 *this, unsigned int, _D3DLOCKED_RECT *, const tagRECT *, unsigned int);
//   HRESULT (__stdcall *UnlockRect)(IDirect3DTexture9 *this, unsigned int);
//   HRESULT (__stdcall *AddDirtyRect)(IDirect3DTexture9 *this, const tagRECT *);
// };

// /* 6893 */
// struct /*VFT*/ IDirect3DVolumeTexture9_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   HRESULT (__stdcall *GetDevice)(IDirect3DResource9 *this, IDirect3DDevice9 **);
//   HRESULT (__stdcall *SetPrivateData)(IDirect3DResource9 *this, const _GUID *, const void *, unsigned int, unsigned int);
//   HRESULT (__stdcall *GetPrivateData)(IDirect3DResource9 *this, const _GUID *, void *, unsigned int *);
//   HRESULT (__stdcall *FreePrivateData)(IDirect3DResource9 *this, const _GUID *);
//   unsigned int (__stdcall *SetPriority)(IDirect3DResource9 *this, unsigned int);
//   unsigned int (__stdcall *GetPriority)(IDirect3DResource9 *this);
//   void (__stdcall *PreLoad)(IDirect3DResource9 *this);
//   _D3DRESOURCETYPE (__stdcall *GetType)(IDirect3DResource9 *this);
//   unsigned int (__stdcall *SetLOD)(IDirect3DBaseTexture9 *this, unsigned int);
//   unsigned int (__stdcall *GetLOD)(IDirect3DBaseTexture9 *this);
//   unsigned int (__stdcall *GetLevelCount)(IDirect3DBaseTexture9 *this);
//   HRESULT (__stdcall *SetAutoGenFilterType)(IDirect3DBaseTexture9 *this, _D3DTEXTUREFILTERTYPE);
//   _D3DTEXTUREFILTERTYPE (__stdcall *GetAutoGenFilterType)(IDirect3DBaseTexture9 *this);
//   void (__stdcall *GenerateMipSubLevels)(IDirect3DBaseTexture9 *this);
//   HRESULT (__stdcall *GetLevelDesc)(IDirect3DVolumeTexture9 *this, unsigned int, _D3DVOLUME_DESC *);
//   HRESULT (__stdcall *GetVolumeLevel)(IDirect3DVolumeTexture9 *this, unsigned int, IDirect3DVolume9 **);
//   HRESULT (__stdcall *LockBox)(IDirect3DVolumeTexture9 *this, unsigned int, _D3DLOCKED_BOX *, const _D3DBOX *, unsigned int);
//   HRESULT (__stdcall *UnlockBox)(IDirect3DVolumeTexture9 *this, unsigned int);
//   HRESULT (__stdcall *AddDirtyBox)(IDirect3DVolumeTexture9 *this, const _D3DBOX *);
// };

// /* 6894 */
// struct /*VFT*/ ID2D1EllipseGeometry_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetFactory)(ID2D1Resource *this, ID2D1Factory **);
//   HRESULT (__stdcall *GetBounds)(ID2D1Geometry *this, const D2D_MATRIX_3X2_F *, D2D_RECT_F *);
//   HRESULT (__stdcall *GetWidenedBounds)(ID2D1Geometry *this, float, ID2D1StrokeStyle *, const D2D_MATRIX_3X2_F *, float, D2D_RECT_F *);
//   HRESULT (__stdcall *StrokeContainsPoint)(ID2D1Geometry *this, D2D_POINT_2F, float, ID2D1StrokeStyle *, const D2D_MATRIX_3X2_F *, float, int *);
//   HRESULT (__stdcall *FillContainsPoint)(ID2D1Geometry *this, D2D_POINT_2F, const D2D_MATRIX_3X2_F *, float, int *);
//   HRESULT (__stdcall *CompareWithGeometry)(ID2D1Geometry *this, ID2D1Geometry *, const D2D_MATRIX_3X2_F *, float, D2D1_GEOMETRY_RELATION *);
//   HRESULT (__stdcall *Simplify)(ID2D1Geometry *this, D2D1_GEOMETRY_SIMPLIFICATION_OPTION, const D2D_MATRIX_3X2_F *, float, ID2D1SimplifiedGeometrySink *);
//   HRESULT (__stdcall *Tessellate)(ID2D1Geometry *this, const D2D_MATRIX_3X2_F *, float, ID2D1TessellationSink *);
//   HRESULT (__stdcall *CombineWithGeometry)(ID2D1Geometry *this, ID2D1Geometry *, D2D1_COMBINE_MODE, const D2D_MATRIX_3X2_F *, float, ID2D1SimplifiedGeometrySink *);
//   HRESULT (__stdcall *Outline)(ID2D1Geometry *this, const D2D_MATRIX_3X2_F *, float, ID2D1SimplifiedGeometrySink *);
//   HRESULT (__stdcall *ComputeArea)(ID2D1Geometry *this, const D2D_MATRIX_3X2_F *, float, float *);
//   HRESULT (__stdcall *ComputeLength)(ID2D1Geometry *this, const D2D_MATRIX_3X2_F *, float, float *);
//   HRESULT (__stdcall *ComputePointAtLength)(ID2D1Geometry *this, float, const D2D_MATRIX_3X2_F *, float, D2D_POINT_2F *, D2D_POINT_2F *);
//   HRESULT (__stdcall *Widen)(ID2D1Geometry *this, float, ID2D1StrokeStyle *, const D2D_MATRIX_3X2_F *, float, ID2D1SimplifiedGeometrySink *);
//   void (__stdcall *GetEllipse)(ID2D1EllipseGeometry *this, D2D1_ELLIPSE *);
// };

// /* 6895 */
// struct /*VFT*/ ID2D1GeometryGroup_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetFactory)(ID2D1Resource *this, ID2D1Factory **);
//   HRESULT (__stdcall *GetBounds)(ID2D1Geometry *this, const D2D_MATRIX_3X2_F *, D2D_RECT_F *);
//   HRESULT (__stdcall *GetWidenedBounds)(ID2D1Geometry *this, float, ID2D1StrokeStyle *, const D2D_MATRIX_3X2_F *, float, D2D_RECT_F *);
//   HRESULT (__stdcall *StrokeContainsPoint)(ID2D1Geometry *this, D2D_POINT_2F, float, ID2D1StrokeStyle *, const D2D_MATRIX_3X2_F *, float, int *);
//   HRESULT (__stdcall *FillContainsPoint)(ID2D1Geometry *this, D2D_POINT_2F, const D2D_MATRIX_3X2_F *, float, int *);
//   HRESULT (__stdcall *CompareWithGeometry)(ID2D1Geometry *this, ID2D1Geometry *, const D2D_MATRIX_3X2_F *, float, D2D1_GEOMETRY_RELATION *);
//   HRESULT (__stdcall *Simplify)(ID2D1Geometry *this, D2D1_GEOMETRY_SIMPLIFICATION_OPTION, const D2D_MATRIX_3X2_F *, float, ID2D1SimplifiedGeometrySink *);
//   HRESULT (__stdcall *Tessellate)(ID2D1Geometry *this, const D2D_MATRIX_3X2_F *, float, ID2D1TessellationSink *);
//   HRESULT (__stdcall *CombineWithGeometry)(ID2D1Geometry *this, ID2D1Geometry *, D2D1_COMBINE_MODE, const D2D_MATRIX_3X2_F *, float, ID2D1SimplifiedGeometrySink *);
//   HRESULT (__stdcall *Outline)(ID2D1Geometry *this, const D2D_MATRIX_3X2_F *, float, ID2D1SimplifiedGeometrySink *);
//   HRESULT (__stdcall *ComputeArea)(ID2D1Geometry *this, const D2D_MATRIX_3X2_F *, float, float *);
//   HRESULT (__stdcall *ComputeLength)(ID2D1Geometry *this, const D2D_MATRIX_3X2_F *, float, float *);
//   HRESULT (__stdcall *ComputePointAtLength)(ID2D1Geometry *this, float, const D2D_MATRIX_3X2_F *, float, D2D_POINT_2F *, D2D_POINT_2F *);
//   HRESULT (__stdcall *Widen)(ID2D1Geometry *this, float, ID2D1StrokeStyle *, const D2D_MATRIX_3X2_F *, float, ID2D1SimplifiedGeometrySink *);
//   D2D1_FILL_MODE (__stdcall *GetFillMode)(ID2D1GeometryGroup *this);
//   unsigned int (__stdcall *GetSourceGeometryCount)(ID2D1GeometryGroup *this);
//   void (__stdcall *GetSourceGeometries)(ID2D1GeometryGroup *this, ID2D1Geometry **, unsigned int);
// };

// /* 6896 */
// struct /*VFT*/ ID3D10Buffer_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D10DeviceChild *this, ID3D10Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D10DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D10DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D10DeviceChild *this, const _GUID *, const IUnknown *);
//   void (__stdcall *GetType)(ID3D10Resource *this, D3D10_RESOURCE_DIMENSION *);
//   void (__stdcall *SetEvictionPriority)(ID3D10Resource *this, unsigned int);
//   unsigned int (__stdcall *GetEvictionPriority)(ID3D10Resource *this);
//   HRESULT (__stdcall *Map)(ID3D10Buffer *this, D3D10_MAP, unsigned int, void **);
//   void (__stdcall *Unmap)(ID3D10Buffer *this);
//   void (__stdcall *GetDesc)(ID3D10Buffer *this, D3D10_BUFFER_DESC *);
// };

// /* 6897 */
// struct /*VFT*/ ID3D10DepthStencilView_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D10DeviceChild *this, ID3D10Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D10DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D10DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D10DeviceChild *this, const _GUID *, const IUnknown *);
//   void (__stdcall *GetResource)(ID3D10View *this, ID3D10Resource **);
//   void (__stdcall *GetDesc)(ID3D10DepthStencilView *this, D3D10_DEPTH_STENCIL_VIEW_DESC *);
// };

// /* 6898 */
// struct /*VFT*/ ID3D10RenderTargetView_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D10DeviceChild *this, ID3D10Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D10DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D10DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D10DeviceChild *this, const _GUID *, const IUnknown *);
//   void (__stdcall *GetResource)(ID3D10View *this, ID3D10Resource **);
//   void (__stdcall *GetDesc)(ID3D10RenderTargetView *this, D3D10_RENDER_TARGET_VIEW_DESC *);
// };

// /* 6899 */
// struct /*VFT*/ ID3D10ShaderResourceView_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D10DeviceChild *this, ID3D10Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D10DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D10DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D10DeviceChild *this, const _GUID *, const IUnknown *);
//   void (__stdcall *GetResource)(ID3D10View *this, ID3D10Resource **);
//   void (__stdcall *GetDesc)(ID3D10ShaderResourceView *this, D3D10_SHADER_RESOURCE_VIEW_DESC *);
// };

// /* 6900 */
// struct /*VFT*/ ID3D11Buffer_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D11DeviceChild *this, ID3D11Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D11DeviceChild *this, const _GUID *, const IUnknown *);
//   void (__stdcall *GetType)(ID3D11Resource *this, D3D11_RESOURCE_DIMENSION *);
//   void (__stdcall *SetEvictionPriority)(ID3D11Resource *this, unsigned int);
//   unsigned int (__stdcall *GetEvictionPriority)(ID3D11Resource *this);
//   void (__stdcall *GetDesc)(ID3D11Buffer *this, D3D11_BUFFER_DESC *);
// };

// /* 6901 */
// struct /*VFT*/ ID3D11DepthStencilView_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D11DeviceChild *this, ID3D11Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D11DeviceChild *this, const _GUID *, const IUnknown *);
//   void (__stdcall *GetResource)(ID3D11View *this, ID3D11Resource **);
//   void (__stdcall *GetDesc)(ID3D11DepthStencilView *this, D3D11_DEPTH_STENCIL_VIEW_DESC *);
// };

// /* 6902 */
// struct /*VFT*/ ID3D11RenderTargetView_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D11DeviceChild *this, ID3D11Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D11DeviceChild *this, const _GUID *, const IUnknown *);
//   void (__stdcall *GetResource)(ID3D11View *this, ID3D11Resource **);
//   void (__stdcall *GetDesc)(ID3D11RenderTargetView *this, D3D11_RENDER_TARGET_VIEW_DESC *);
// };

// /* 6903 */
// struct /*VFT*/ ID3D11ShaderResourceView_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D11DeviceChild *this, ID3D11Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D11DeviceChild *this, const _GUID *, const IUnknown *);
//   void (__stdcall *GetResource)(ID3D11View *this, ID3D11Resource **);
//   void (__stdcall *GetDesc)(ID3D11ShaderResourceView *this, D3D11_SHADER_RESOURCE_VIEW_DESC *);
// };

// /* 6904 */
// struct /*VFT*/ ID3D11UnorderedAccessView_vtbl
// {
//   HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
//   unsigned int (__stdcall *AddRef)(IUnknown *this);
//   unsigned int (__stdcall *Release)(IUnknown *this);
//   void (__stdcall *GetDevice)(ID3D11DeviceChild *this, ID3D11Device **);
//   HRESULT (__stdcall *GetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int *, void *);
//   HRESULT (__stdcall *SetPrivateData)(ID3D11DeviceChild *this, const _GUID *, unsigned int, const void *);
//   HRESULT (__stdcall *SetPrivateDataInterface)(ID3D11DeviceChild *this, const _GUID *, const IUnknown *);
//   void (__stdcall *GetResource)(ID3D11View *this, ID3D11Resource **);
//   void (__stdcall *GetDesc)(ID3D11UnorderedAccessView *this, D3D11_UNORDERED_ACCESS_VIEW_DESC *);
// };

// /* 6905 */
// typedef struct _SCOPETABLE_ENTRY *PSCOPETABLE_ENTRY;

// /* 6906 */
// struct _EH3_EXCEPTION_REGISTRATION
// {
//   struct _EH3_EXCEPTION_REGISTRATION *Next;
//   PVOID ExceptionHandler;
//   PSCOPETABLE_ENTRY ScopeTable;
//   DWORD TryLevel;
// };

// /* 6907 */
// typedef struct _EH3_EXCEPTION_REGISTRATION EH3_EXCEPTION_REGISTRATION;

// /* 6908 */
// typedef struct _EH3_EXCEPTION_REGISTRATION *PEH3_EXCEPTION_REGISTRATION;

// /* 6909 */
// struct CPPEH_RECORD
// {
//   DWORD old_esp;
//   EXCEPTION_POINTERS *exc_ptr;
//   struct _EH3_EXCEPTION_REGISTRATION registration;
// };

// /* 6910 */
// struct FuncInfo
// {
//   int magicNumber;
//   int maxState;
//   void *pUnwindMap;
//   int nTryBlocks;
//   void *pTryBlockMap;
//   int nIPMapEntries;
//   void *pIPtoStateMap;
//   void *pESTypeList;
//   int EHFlags;
// };

// /* 6911 */
// struct UnwindMapEntry
// {
//   int toState;
//   void *action;
// };

// /* 6912 */
// struct TryBlockMapEntry
// {
//   int tryLow;
//   int tryHigh;
//   int catchHigh;
//   int nCatches;
//   void *pHandlerArray;
// };

// /* 6913 */
// struct HandlerType
// {
//   int adjectives;
//   void *pType;
//   int dispCatchObj;
//   void *addressOfHandler;
// };

// /* 6914 */
// typedef _LARGE_INTEGER LARGE_INTEGER;

// /* 6915 */
// typedef tagWNDCLASSA WNDCLASSA;

// /* 6916 */
// struct bdCookie;

// /* 6918 */
// struct bdDTLSCookieAck;

// /* 6919 */
// struct bdDTLSCookieEcho;

// /* 6920 */
// struct bdDTLSInit;

// /* 6921 */
// struct bdQoSRequestPacket;

// /* 6922 */
// struct bdIPDiscoveryPacket;

// /* 6923 */
// struct bdNATTypeDiscoveryPacketReply;

// /* 6924 */
// struct bdNATTraversalPacket;

// /* 6925 */
// struct bdDTLSData;

// /* 6926 */
// struct bdHMac;

// /* 6928 */
// struct bdLoopbackConnection;

// /* 6929 */
// struct bdUnicastConnection;

// /* 6930 */
// struct bdReceivedMessage;

// /* 6931 */
// struct bdMessage;

// /* 6932 */
// struct bdUnreliableSendWindow;

// /* 6933 */
// struct bdReliableSendWindow;

// /* 6934 */
// struct bdDataChunk;

// /* 6935 */
// struct bdUnreliableReceiveWindow;

// /* 6936 */
// struct bdConnectionStatistics;

// /* 6937 */
// struct bdReliableReceiveWindow;

// /* 6938 */
// struct bdPacket;

// /* 6939 */
// struct bdChunk;

// /* 6940 */
// struct bdHeartbeatChunk;

// /* 6941 */
// struct bdInitAckChunk;

// /* 6942 */
// struct bdInitChunk;

// /* 6943 */
// struct bdCookieEchoChunk;

// /* 6944 */
// struct bdCookieAckChunk;

// /* 6945 */
// struct bdHeartbeatAckChunk;

// /* 6946 */
// struct bdShutdownChunk;

// /* 6947 */
// struct bdShutdownAckChunk;

// /* 6948 */
// struct bdShutdownCompleteChunk;

// /* 6949 */
// struct bdSAckChunk;

// /* 6950 */
// struct CBBoxInt32;

// /* 6951 */
// struct CBlockCompressor;

// /* 6952 */
// struct bdIPDiscoveryPacketReply;

// /* 6953 */
// struct bdHMacSHA1;

// /* 6954 */
// struct bdHashTiger192;

// /* 6955 */
// struct bdAuthCreateAccountCypherText;

// /* 6956 */
// struct bdAuthCreateAccountPlainText;

// /* 6957 */
// struct bdAuthGetUsernamesForLicensePlainText;

extern __declspec(thread) char thread_local_storage[0x10000];
